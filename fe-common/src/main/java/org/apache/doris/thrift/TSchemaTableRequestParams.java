/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.doris.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2024-05-20")
public class TSchemaTableRequestParams implements org.apache.thrift.TBase<TSchemaTableRequestParams, TSchemaTableRequestParams._Fields>, java.io.Serializable, Cloneable, Comparable<TSchemaTableRequestParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TSchemaTableRequestParams");

  private static final org.apache.thrift.protocol.TField COLUMNS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("columns_name", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField CURRENT_USER_IDENT_FIELD_DESC = new org.apache.thrift.protocol.TField("current_user_ident", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField REPLAY_TO_OTHER_FE_FIELD_DESC = new org.apache.thrift.protocol.TField("replay_to_other_fe", org.apache.thrift.protocol.TType.BOOL, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TSchemaTableRequestParamsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TSchemaTableRequestParamsTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> columns_name; // optional
  public @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TUserIdentity current_user_ident; // optional
  public boolean replay_to_other_fe; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COLUMNS_NAME((short)1, "columns_name"),
    CURRENT_USER_IDENT((short)2, "current_user_ident"),
    REPLAY_TO_OTHER_FE((short)3, "replay_to_other_fe");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COLUMNS_NAME
          return COLUMNS_NAME;
        case 2: // CURRENT_USER_IDENT
          return CURRENT_USER_IDENT;
        case 3: // REPLAY_TO_OTHER_FE
          return REPLAY_TO_OTHER_FE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REPLAY_TO_OTHER_FE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.COLUMNS_NAME,_Fields.CURRENT_USER_IDENT,_Fields.REPLAY_TO_OTHER_FE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COLUMNS_NAME, new org.apache.thrift.meta_data.FieldMetaData("columns_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.CURRENT_USER_IDENT, new org.apache.thrift.meta_data.FieldMetaData("current_user_ident", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TUserIdentity.class)));
    tmpMap.put(_Fields.REPLAY_TO_OTHER_FE, new org.apache.thrift.meta_data.FieldMetaData("replay_to_other_fe", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TSchemaTableRequestParams.class, metaDataMap);
  }

  public TSchemaTableRequestParams() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TSchemaTableRequestParams(TSchemaTableRequestParams other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetColumnsName()) {
      java.util.List<java.lang.String> __this__columns_name = new java.util.ArrayList<java.lang.String>(other.columns_name);
      this.columns_name = __this__columns_name;
    }
    if (other.isSetCurrentUserIdent()) {
      this.current_user_ident = new org.apache.doris.thrift.TUserIdentity(other.current_user_ident);
    }
    this.replay_to_other_fe = other.replay_to_other_fe;
  }

  public TSchemaTableRequestParams deepCopy() {
    return new TSchemaTableRequestParams(this);
  }

  @Override
  public void clear() {
    this.columns_name = null;
    this.current_user_ident = null;
    setReplayToOtherFeIsSet(false);
    this.replay_to_other_fe = false;
  }

  public int getColumnsNameSize() {
    return (this.columns_name == null) ? 0 : this.columns_name.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getColumnsNameIterator() {
    return (this.columns_name == null) ? null : this.columns_name.iterator();
  }

  public void addToColumnsName(java.lang.String elem) {
    if (this.columns_name == null) {
      this.columns_name = new java.util.ArrayList<java.lang.String>();
    }
    this.columns_name.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getColumnsName() {
    return this.columns_name;
  }

  public TSchemaTableRequestParams setColumnsName(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> columns_name) {
    this.columns_name = columns_name;
    return this;
  }

  public void unsetColumnsName() {
    this.columns_name = null;
  }

  /** Returns true if field columns_name is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnsName() {
    return this.columns_name != null;
  }

  public void setColumnsNameIsSet(boolean value) {
    if (!value) {
      this.columns_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public org.apache.doris.thrift.TUserIdentity getCurrentUserIdent() {
    return this.current_user_ident;
  }

  public TSchemaTableRequestParams setCurrentUserIdent(@org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TUserIdentity current_user_ident) {
    this.current_user_ident = current_user_ident;
    return this;
  }

  public void unsetCurrentUserIdent() {
    this.current_user_ident = null;
  }

  /** Returns true if field current_user_ident is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentUserIdent() {
    return this.current_user_ident != null;
  }

  public void setCurrentUserIdentIsSet(boolean value) {
    if (!value) {
      this.current_user_ident = null;
    }
  }

  public boolean isReplayToOtherFe() {
    return this.replay_to_other_fe;
  }

  public TSchemaTableRequestParams setReplayToOtherFe(boolean replay_to_other_fe) {
    this.replay_to_other_fe = replay_to_other_fe;
    setReplayToOtherFeIsSet(true);
    return this;
  }

  public void unsetReplayToOtherFe() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REPLAY_TO_OTHER_FE_ISSET_ID);
  }

  /** Returns true if field replay_to_other_fe is set (has been assigned a value) and false otherwise */
  public boolean isSetReplayToOtherFe() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REPLAY_TO_OTHER_FE_ISSET_ID);
  }

  public void setReplayToOtherFeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REPLAY_TO_OTHER_FE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case COLUMNS_NAME:
      if (value == null) {
        unsetColumnsName();
      } else {
        setColumnsName((java.util.List<java.lang.String>)value);
      }
      break;

    case CURRENT_USER_IDENT:
      if (value == null) {
        unsetCurrentUserIdent();
      } else {
        setCurrentUserIdent((org.apache.doris.thrift.TUserIdentity)value);
      }
      break;

    case REPLAY_TO_OTHER_FE:
      if (value == null) {
        unsetReplayToOtherFe();
      } else {
        setReplayToOtherFe((java.lang.Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case COLUMNS_NAME:
      return getColumnsName();

    case CURRENT_USER_IDENT:
      return getCurrentUserIdent();

    case REPLAY_TO_OTHER_FE:
      return isReplayToOtherFe();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case COLUMNS_NAME:
      return isSetColumnsName();
    case CURRENT_USER_IDENT:
      return isSetCurrentUserIdent();
    case REPLAY_TO_OTHER_FE:
      return isSetReplayToOtherFe();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TSchemaTableRequestParams)
      return this.equals((TSchemaTableRequestParams)that);
    return false;
  }

  public boolean equals(TSchemaTableRequestParams that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_columns_name = true && this.isSetColumnsName();
    boolean that_present_columns_name = true && that.isSetColumnsName();
    if (this_present_columns_name || that_present_columns_name) {
      if (!(this_present_columns_name && that_present_columns_name))
        return false;
      if (!this.columns_name.equals(that.columns_name))
        return false;
    }

    boolean this_present_current_user_ident = true && this.isSetCurrentUserIdent();
    boolean that_present_current_user_ident = true && that.isSetCurrentUserIdent();
    if (this_present_current_user_ident || that_present_current_user_ident) {
      if (!(this_present_current_user_ident && that_present_current_user_ident))
        return false;
      if (!this.current_user_ident.equals(that.current_user_ident))
        return false;
    }

    boolean this_present_replay_to_other_fe = true && this.isSetReplayToOtherFe();
    boolean that_present_replay_to_other_fe = true && that.isSetReplayToOtherFe();
    if (this_present_replay_to_other_fe || that_present_replay_to_other_fe) {
      if (!(this_present_replay_to_other_fe && that_present_replay_to_other_fe))
        return false;
      if (this.replay_to_other_fe != that.replay_to_other_fe)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetColumnsName()) ? 131071 : 524287);
    if (isSetColumnsName())
      hashCode = hashCode * 8191 + columns_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetCurrentUserIdent()) ? 131071 : 524287);
    if (isSetCurrentUserIdent())
      hashCode = hashCode * 8191 + current_user_ident.hashCode();

    hashCode = hashCode * 8191 + ((isSetReplayToOtherFe()) ? 131071 : 524287);
    if (isSetReplayToOtherFe())
      hashCode = hashCode * 8191 + ((replay_to_other_fe) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(TSchemaTableRequestParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetColumnsName(), other.isSetColumnsName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnsName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns_name, other.columns_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCurrentUserIdent(), other.isSetCurrentUserIdent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentUserIdent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.current_user_ident, other.current_user_ident);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetReplayToOtherFe(), other.isSetReplayToOtherFe());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplayToOtherFe()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replay_to_other_fe, other.replay_to_other_fe);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TSchemaTableRequestParams(");
    boolean first = true;

    if (isSetColumnsName()) {
      sb.append("columns_name:");
      if (this.columns_name == null) {
        sb.append("null");
      } else {
        sb.append(this.columns_name);
      }
      first = false;
    }
    if (isSetCurrentUserIdent()) {
      if (!first) sb.append(", ");
      sb.append("current_user_ident:");
      if (this.current_user_ident == null) {
        sb.append("null");
      } else {
        sb.append(this.current_user_ident);
      }
      first = false;
    }
    if (isSetReplayToOtherFe()) {
      if (!first) sb.append(", ");
      sb.append("replay_to_other_fe:");
      sb.append(this.replay_to_other_fe);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (current_user_ident != null) {
      current_user_ident.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TSchemaTableRequestParamsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TSchemaTableRequestParamsStandardScheme getScheme() {
      return new TSchemaTableRequestParamsStandardScheme();
    }
  }

  private static class TSchemaTableRequestParamsStandardScheme extends org.apache.thrift.scheme.StandardScheme<TSchemaTableRequestParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TSchemaTableRequestParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COLUMNS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list400 = iprot.readListBegin();
                struct.columns_name = new java.util.ArrayList<java.lang.String>(_list400.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem401;
                for (int _i402 = 0; _i402 < _list400.size; ++_i402)
                {
                  _elem401 = iprot.readString();
                  struct.columns_name.add(_elem401);
                }
                iprot.readListEnd();
              }
              struct.setColumnsNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CURRENT_USER_IDENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.current_user_ident = new org.apache.doris.thrift.TUserIdentity();
              struct.current_user_ident.read(iprot);
              struct.setCurrentUserIdentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REPLAY_TO_OTHER_FE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.replay_to_other_fe = iprot.readBool();
              struct.setReplayToOtherFeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TSchemaTableRequestParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.columns_name != null) {
        if (struct.isSetColumnsName()) {
          oprot.writeFieldBegin(COLUMNS_NAME_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.columns_name.size()));
            for (java.lang.String _iter403 : struct.columns_name)
            {
              oprot.writeString(_iter403);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.current_user_ident != null) {
        if (struct.isSetCurrentUserIdent()) {
          oprot.writeFieldBegin(CURRENT_USER_IDENT_FIELD_DESC);
          struct.current_user_ident.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetReplayToOtherFe()) {
        oprot.writeFieldBegin(REPLAY_TO_OTHER_FE_FIELD_DESC);
        oprot.writeBool(struct.replay_to_other_fe);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TSchemaTableRequestParamsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TSchemaTableRequestParamsTupleScheme getScheme() {
      return new TSchemaTableRequestParamsTupleScheme();
    }
  }

  private static class TSchemaTableRequestParamsTupleScheme extends org.apache.thrift.scheme.TupleScheme<TSchemaTableRequestParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TSchemaTableRequestParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetColumnsName()) {
        optionals.set(0);
      }
      if (struct.isSetCurrentUserIdent()) {
        optionals.set(1);
      }
      if (struct.isSetReplayToOtherFe()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetColumnsName()) {
        {
          oprot.writeI32(struct.columns_name.size());
          for (java.lang.String _iter404 : struct.columns_name)
          {
            oprot.writeString(_iter404);
          }
        }
      }
      if (struct.isSetCurrentUserIdent()) {
        struct.current_user_ident.write(oprot);
      }
      if (struct.isSetReplayToOtherFe()) {
        oprot.writeBool(struct.replay_to_other_fe);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TSchemaTableRequestParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list405 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.columns_name = new java.util.ArrayList<java.lang.String>(_list405.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem406;
          for (int _i407 = 0; _i407 < _list405.size; ++_i407)
          {
            _elem406 = iprot.readString();
            struct.columns_name.add(_elem406);
          }
        }
        struct.setColumnsNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.current_user_ident = new org.apache.doris.thrift.TUserIdentity();
        struct.current_user_ident.read(iprot);
        struct.setCurrentUserIdentIsSet(true);
      }
      if (incoming.get(2)) {
        struct.replay_to_other_fe = iprot.readBool();
        struct.setReplayToOtherFeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

