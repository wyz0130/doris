/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.doris.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2024-05-20")
public class TGetMetaTabletMeta implements org.apache.thrift.TBase<TGetMetaTabletMeta, TGetMetaTabletMeta._Fields>, java.io.Serializable, Cloneable, Comparable<TGetMetaTabletMeta> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TGetMetaTabletMeta");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField REPLICAS_FIELD_DESC = new org.apache.thrift.protocol.TField("replicas", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TGetMetaTabletMetaStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TGetMetaTabletMetaTupleSchemeFactory();

  public long id; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<TGetMetaReplicaMeta> replicas; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    REPLICAS((short)2, "replicas");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // REPLICAS
          return REPLICAS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.REPLICAS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REPLICAS, new org.apache.thrift.meta_data.FieldMetaData("replicas", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TGetMetaReplicaMeta.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TGetMetaTabletMeta.class, metaDataMap);
  }

  public TGetMetaTabletMeta() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TGetMetaTabletMeta(TGetMetaTabletMeta other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetReplicas()) {
      java.util.List<TGetMetaReplicaMeta> __this__replicas = new java.util.ArrayList<TGetMetaReplicaMeta>(other.replicas.size());
      for (TGetMetaReplicaMeta other_element : other.replicas) {
        __this__replicas.add(new TGetMetaReplicaMeta(other_element));
      }
      this.replicas = __this__replicas;
    }
  }

  public TGetMetaTabletMeta deepCopy() {
    return new TGetMetaTabletMeta(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.replicas = null;
  }

  public long getId() {
    return this.id;
  }

  public TGetMetaTabletMeta setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getReplicasSize() {
    return (this.replicas == null) ? 0 : this.replicas.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TGetMetaReplicaMeta> getReplicasIterator() {
    return (this.replicas == null) ? null : this.replicas.iterator();
  }

  public void addToReplicas(TGetMetaReplicaMeta elem) {
    if (this.replicas == null) {
      this.replicas = new java.util.ArrayList<TGetMetaReplicaMeta>();
    }
    this.replicas.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TGetMetaReplicaMeta> getReplicas() {
    return this.replicas;
  }

  public TGetMetaTabletMeta setReplicas(@org.apache.thrift.annotation.Nullable java.util.List<TGetMetaReplicaMeta> replicas) {
    this.replicas = replicas;
    return this;
  }

  public void unsetReplicas() {
    this.replicas = null;
  }

  /** Returns true if field replicas is set (has been assigned a value) and false otherwise */
  public boolean isSetReplicas() {
    return this.replicas != null;
  }

  public void setReplicasIsSet(boolean value) {
    if (!value) {
      this.replicas = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Long)value);
      }
      break;

    case REPLICAS:
      if (value == null) {
        unsetReplicas();
      } else {
        setReplicas((java.util.List<TGetMetaReplicaMeta>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case REPLICAS:
      return getReplicas();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case REPLICAS:
      return isSetReplicas();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TGetMetaTabletMeta)
      return this.equals((TGetMetaTabletMeta)that);
    return false;
  }

  public boolean equals(TGetMetaTabletMeta that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_replicas = true && this.isSetReplicas();
    boolean that_present_replicas = true && that.isSetReplicas();
    if (this_present_replicas || that_present_replicas) {
      if (!(this_present_replicas && that_present_replicas))
        return false;
      if (!this.replicas.equals(that.replicas))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

    hashCode = hashCode * 8191 + ((isSetReplicas()) ? 131071 : 524287);
    if (isSetReplicas())
      hashCode = hashCode * 8191 + replicas.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TGetMetaTabletMeta other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetReplicas(), other.isSetReplicas());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplicas()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replicas, other.replicas);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TGetMetaTabletMeta(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetReplicas()) {
      if (!first) sb.append(", ");
      sb.append("replicas:");
      if (this.replicas == null) {
        sb.append("null");
      } else {
        sb.append(this.replicas);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TGetMetaTabletMetaStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TGetMetaTabletMetaStandardScheme getScheme() {
      return new TGetMetaTabletMetaStandardScheme();
    }
  }

  private static class TGetMetaTabletMetaStandardScheme extends org.apache.thrift.scheme.StandardScheme<TGetMetaTabletMeta> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TGetMetaTabletMeta struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REPLICAS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list672 = iprot.readListBegin();
                struct.replicas = new java.util.ArrayList<TGetMetaReplicaMeta>(_list672.size);
                @org.apache.thrift.annotation.Nullable TGetMetaReplicaMeta _elem673;
                for (int _i674 = 0; _i674 < _list672.size; ++_i674)
                {
                  _elem673 = new TGetMetaReplicaMeta();
                  _elem673.read(iprot);
                  struct.replicas.add(_elem673);
                }
                iprot.readListEnd();
              }
              struct.setReplicasIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TGetMetaTabletMeta struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.replicas != null) {
        if (struct.isSetReplicas()) {
          oprot.writeFieldBegin(REPLICAS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.replicas.size()));
            for (TGetMetaReplicaMeta _iter675 : struct.replicas)
            {
              _iter675.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TGetMetaTabletMetaTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TGetMetaTabletMetaTupleScheme getScheme() {
      return new TGetMetaTabletMetaTupleScheme();
    }
  }

  private static class TGetMetaTabletMetaTupleScheme extends org.apache.thrift.scheme.TupleScheme<TGetMetaTabletMeta> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TGetMetaTabletMeta struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetReplicas()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetReplicas()) {
        {
          oprot.writeI32(struct.replicas.size());
          for (TGetMetaReplicaMeta _iter676 : struct.replicas)
          {
            _iter676.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TGetMetaTabletMeta struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list677 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.replicas = new java.util.ArrayList<TGetMetaReplicaMeta>(_list677.size);
          @org.apache.thrift.annotation.Nullable TGetMetaReplicaMeta _elem678;
          for (int _i679 = 0; _i679 < _list677.size; ++_i679)
          {
            _elem678 = new TGetMetaReplicaMeta();
            _elem678.read(iprot);
            struct.replicas.add(_elem678);
          }
        }
        struct.setReplicasIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

