/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.doris.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2024-05-20")
public class TQueryStatistics implements org.apache.thrift.TBase<TQueryStatistics, TQueryStatistics._Fields>, java.io.Serializable, Cloneable, Comparable<TQueryStatistics> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TQueryStatistics");

  private static final org.apache.thrift.protocol.TField SCAN_ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("scan_rows", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField SCAN_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("scan_bytes", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField RETURNED_ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("returned_rows", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField CPU_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("cpu_ms", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField MAX_PEAK_MEMORY_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("max_peak_memory_bytes", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField CURRENT_USED_MEMORY_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("current_used_memory_bytes", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField WORKLOAD_GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("workload_group_id", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField SHUFFLE_SEND_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("shuffle_send_bytes", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField SHUFFLE_SEND_ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("shuffle_send_rows", org.apache.thrift.protocol.TType.I64, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TQueryStatisticsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TQueryStatisticsTupleSchemeFactory();

  public long scan_rows; // optional
  public long scan_bytes; // optional
  public long returned_rows; // optional
  public long cpu_ms; // optional
  public long max_peak_memory_bytes; // optional
  public long current_used_memory_bytes; // optional
  public long workload_group_id; // optional
  public long shuffle_send_bytes; // optional
  public long shuffle_send_rows; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SCAN_ROWS((short)1, "scan_rows"),
    SCAN_BYTES((short)2, "scan_bytes"),
    RETURNED_ROWS((short)3, "returned_rows"),
    CPU_MS((short)4, "cpu_ms"),
    MAX_PEAK_MEMORY_BYTES((short)5, "max_peak_memory_bytes"),
    CURRENT_USED_MEMORY_BYTES((short)6, "current_used_memory_bytes"),
    WORKLOAD_GROUP_ID((short)7, "workload_group_id"),
    SHUFFLE_SEND_BYTES((short)8, "shuffle_send_bytes"),
    SHUFFLE_SEND_ROWS((short)9, "shuffle_send_rows");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SCAN_ROWS
          return SCAN_ROWS;
        case 2: // SCAN_BYTES
          return SCAN_BYTES;
        case 3: // RETURNED_ROWS
          return RETURNED_ROWS;
        case 4: // CPU_MS
          return CPU_MS;
        case 5: // MAX_PEAK_MEMORY_BYTES
          return MAX_PEAK_MEMORY_BYTES;
        case 6: // CURRENT_USED_MEMORY_BYTES
          return CURRENT_USED_MEMORY_BYTES;
        case 7: // WORKLOAD_GROUP_ID
          return WORKLOAD_GROUP_ID;
        case 8: // SHUFFLE_SEND_BYTES
          return SHUFFLE_SEND_BYTES;
        case 9: // SHUFFLE_SEND_ROWS
          return SHUFFLE_SEND_ROWS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SCAN_ROWS_ISSET_ID = 0;
  private static final int __SCAN_BYTES_ISSET_ID = 1;
  private static final int __RETURNED_ROWS_ISSET_ID = 2;
  private static final int __CPU_MS_ISSET_ID = 3;
  private static final int __MAX_PEAK_MEMORY_BYTES_ISSET_ID = 4;
  private static final int __CURRENT_USED_MEMORY_BYTES_ISSET_ID = 5;
  private static final int __WORKLOAD_GROUP_ID_ISSET_ID = 6;
  private static final int __SHUFFLE_SEND_BYTES_ISSET_ID = 7;
  private static final int __SHUFFLE_SEND_ROWS_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.SCAN_ROWS,_Fields.SCAN_BYTES,_Fields.RETURNED_ROWS,_Fields.CPU_MS,_Fields.MAX_PEAK_MEMORY_BYTES,_Fields.CURRENT_USED_MEMORY_BYTES,_Fields.WORKLOAD_GROUP_ID,_Fields.SHUFFLE_SEND_BYTES,_Fields.SHUFFLE_SEND_ROWS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SCAN_ROWS, new org.apache.thrift.meta_data.FieldMetaData("scan_rows", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SCAN_BYTES, new org.apache.thrift.meta_data.FieldMetaData("scan_bytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RETURNED_ROWS, new org.apache.thrift.meta_data.FieldMetaData("returned_rows", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CPU_MS, new org.apache.thrift.meta_data.FieldMetaData("cpu_ms", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX_PEAK_MEMORY_BYTES, new org.apache.thrift.meta_data.FieldMetaData("max_peak_memory_bytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CURRENT_USED_MEMORY_BYTES, new org.apache.thrift.meta_data.FieldMetaData("current_used_memory_bytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.WORKLOAD_GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("workload_group_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SHUFFLE_SEND_BYTES, new org.apache.thrift.meta_data.FieldMetaData("shuffle_send_bytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SHUFFLE_SEND_ROWS, new org.apache.thrift.meta_data.FieldMetaData("shuffle_send_rows", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TQueryStatistics.class, metaDataMap);
  }

  public TQueryStatistics() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TQueryStatistics(TQueryStatistics other) {
    __isset_bitfield = other.__isset_bitfield;
    this.scan_rows = other.scan_rows;
    this.scan_bytes = other.scan_bytes;
    this.returned_rows = other.returned_rows;
    this.cpu_ms = other.cpu_ms;
    this.max_peak_memory_bytes = other.max_peak_memory_bytes;
    this.current_used_memory_bytes = other.current_used_memory_bytes;
    this.workload_group_id = other.workload_group_id;
    this.shuffle_send_bytes = other.shuffle_send_bytes;
    this.shuffle_send_rows = other.shuffle_send_rows;
  }

  public TQueryStatistics deepCopy() {
    return new TQueryStatistics(this);
  }

  @Override
  public void clear() {
    setScanRowsIsSet(false);
    this.scan_rows = 0;
    setScanBytesIsSet(false);
    this.scan_bytes = 0;
    setReturnedRowsIsSet(false);
    this.returned_rows = 0;
    setCpuMsIsSet(false);
    this.cpu_ms = 0;
    setMaxPeakMemoryBytesIsSet(false);
    this.max_peak_memory_bytes = 0;
    setCurrentUsedMemoryBytesIsSet(false);
    this.current_used_memory_bytes = 0;
    setWorkloadGroupIdIsSet(false);
    this.workload_group_id = 0;
    setShuffleSendBytesIsSet(false);
    this.shuffle_send_bytes = 0;
    setShuffleSendRowsIsSet(false);
    this.shuffle_send_rows = 0;
  }

  public long getScanRows() {
    return this.scan_rows;
  }

  public TQueryStatistics setScanRows(long scan_rows) {
    this.scan_rows = scan_rows;
    setScanRowsIsSet(true);
    return this;
  }

  public void unsetScanRows() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SCAN_ROWS_ISSET_ID);
  }

  /** Returns true if field scan_rows is set (has been assigned a value) and false otherwise */
  public boolean isSetScanRows() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SCAN_ROWS_ISSET_ID);
  }

  public void setScanRowsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SCAN_ROWS_ISSET_ID, value);
  }

  public long getScanBytes() {
    return this.scan_bytes;
  }

  public TQueryStatistics setScanBytes(long scan_bytes) {
    this.scan_bytes = scan_bytes;
    setScanBytesIsSet(true);
    return this;
  }

  public void unsetScanBytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SCAN_BYTES_ISSET_ID);
  }

  /** Returns true if field scan_bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetScanBytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SCAN_BYTES_ISSET_ID);
  }

  public void setScanBytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SCAN_BYTES_ISSET_ID, value);
  }

  public long getReturnedRows() {
    return this.returned_rows;
  }

  public TQueryStatistics setReturnedRows(long returned_rows) {
    this.returned_rows = returned_rows;
    setReturnedRowsIsSet(true);
    return this;
  }

  public void unsetReturnedRows() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RETURNED_ROWS_ISSET_ID);
  }

  /** Returns true if field returned_rows is set (has been assigned a value) and false otherwise */
  public boolean isSetReturnedRows() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RETURNED_ROWS_ISSET_ID);
  }

  public void setReturnedRowsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RETURNED_ROWS_ISSET_ID, value);
  }

  public long getCpuMs() {
    return this.cpu_ms;
  }

  public TQueryStatistics setCpuMs(long cpu_ms) {
    this.cpu_ms = cpu_ms;
    setCpuMsIsSet(true);
    return this;
  }

  public void unsetCpuMs() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CPU_MS_ISSET_ID);
  }

  /** Returns true if field cpu_ms is set (has been assigned a value) and false otherwise */
  public boolean isSetCpuMs() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CPU_MS_ISSET_ID);
  }

  public void setCpuMsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CPU_MS_ISSET_ID, value);
  }

  public long getMaxPeakMemoryBytes() {
    return this.max_peak_memory_bytes;
  }

  public TQueryStatistics setMaxPeakMemoryBytes(long max_peak_memory_bytes) {
    this.max_peak_memory_bytes = max_peak_memory_bytes;
    setMaxPeakMemoryBytesIsSet(true);
    return this;
  }

  public void unsetMaxPeakMemoryBytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAX_PEAK_MEMORY_BYTES_ISSET_ID);
  }

  /** Returns true if field max_peak_memory_bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxPeakMemoryBytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAX_PEAK_MEMORY_BYTES_ISSET_ID);
  }

  public void setMaxPeakMemoryBytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAX_PEAK_MEMORY_BYTES_ISSET_ID, value);
  }

  public long getCurrentUsedMemoryBytes() {
    return this.current_used_memory_bytes;
  }

  public TQueryStatistics setCurrentUsedMemoryBytes(long current_used_memory_bytes) {
    this.current_used_memory_bytes = current_used_memory_bytes;
    setCurrentUsedMemoryBytesIsSet(true);
    return this;
  }

  public void unsetCurrentUsedMemoryBytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CURRENT_USED_MEMORY_BYTES_ISSET_ID);
  }

  /** Returns true if field current_used_memory_bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentUsedMemoryBytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CURRENT_USED_MEMORY_BYTES_ISSET_ID);
  }

  public void setCurrentUsedMemoryBytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CURRENT_USED_MEMORY_BYTES_ISSET_ID, value);
  }

  public long getWorkloadGroupId() {
    return this.workload_group_id;
  }

  public TQueryStatistics setWorkloadGroupId(long workload_group_id) {
    this.workload_group_id = workload_group_id;
    setWorkloadGroupIdIsSet(true);
    return this;
  }

  public void unsetWorkloadGroupId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WORKLOAD_GROUP_ID_ISSET_ID);
  }

  /** Returns true if field workload_group_id is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkloadGroupId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WORKLOAD_GROUP_ID_ISSET_ID);
  }

  public void setWorkloadGroupIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WORKLOAD_GROUP_ID_ISSET_ID, value);
  }

  public long getShuffleSendBytes() {
    return this.shuffle_send_bytes;
  }

  public TQueryStatistics setShuffleSendBytes(long shuffle_send_bytes) {
    this.shuffle_send_bytes = shuffle_send_bytes;
    setShuffleSendBytesIsSet(true);
    return this;
  }

  public void unsetShuffleSendBytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SHUFFLE_SEND_BYTES_ISSET_ID);
  }

  /** Returns true if field shuffle_send_bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetShuffleSendBytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SHUFFLE_SEND_BYTES_ISSET_ID);
  }

  public void setShuffleSendBytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SHUFFLE_SEND_BYTES_ISSET_ID, value);
  }

  public long getShuffleSendRows() {
    return this.shuffle_send_rows;
  }

  public TQueryStatistics setShuffleSendRows(long shuffle_send_rows) {
    this.shuffle_send_rows = shuffle_send_rows;
    setShuffleSendRowsIsSet(true);
    return this;
  }

  public void unsetShuffleSendRows() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SHUFFLE_SEND_ROWS_ISSET_ID);
  }

  /** Returns true if field shuffle_send_rows is set (has been assigned a value) and false otherwise */
  public boolean isSetShuffleSendRows() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SHUFFLE_SEND_ROWS_ISSET_ID);
  }

  public void setShuffleSendRowsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SHUFFLE_SEND_ROWS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case SCAN_ROWS:
      if (value == null) {
        unsetScanRows();
      } else {
        setScanRows((java.lang.Long)value);
      }
      break;

    case SCAN_BYTES:
      if (value == null) {
        unsetScanBytes();
      } else {
        setScanBytes((java.lang.Long)value);
      }
      break;

    case RETURNED_ROWS:
      if (value == null) {
        unsetReturnedRows();
      } else {
        setReturnedRows((java.lang.Long)value);
      }
      break;

    case CPU_MS:
      if (value == null) {
        unsetCpuMs();
      } else {
        setCpuMs((java.lang.Long)value);
      }
      break;

    case MAX_PEAK_MEMORY_BYTES:
      if (value == null) {
        unsetMaxPeakMemoryBytes();
      } else {
        setMaxPeakMemoryBytes((java.lang.Long)value);
      }
      break;

    case CURRENT_USED_MEMORY_BYTES:
      if (value == null) {
        unsetCurrentUsedMemoryBytes();
      } else {
        setCurrentUsedMemoryBytes((java.lang.Long)value);
      }
      break;

    case WORKLOAD_GROUP_ID:
      if (value == null) {
        unsetWorkloadGroupId();
      } else {
        setWorkloadGroupId((java.lang.Long)value);
      }
      break;

    case SHUFFLE_SEND_BYTES:
      if (value == null) {
        unsetShuffleSendBytes();
      } else {
        setShuffleSendBytes((java.lang.Long)value);
      }
      break;

    case SHUFFLE_SEND_ROWS:
      if (value == null) {
        unsetShuffleSendRows();
      } else {
        setShuffleSendRows((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SCAN_ROWS:
      return getScanRows();

    case SCAN_BYTES:
      return getScanBytes();

    case RETURNED_ROWS:
      return getReturnedRows();

    case CPU_MS:
      return getCpuMs();

    case MAX_PEAK_MEMORY_BYTES:
      return getMaxPeakMemoryBytes();

    case CURRENT_USED_MEMORY_BYTES:
      return getCurrentUsedMemoryBytes();

    case WORKLOAD_GROUP_ID:
      return getWorkloadGroupId();

    case SHUFFLE_SEND_BYTES:
      return getShuffleSendBytes();

    case SHUFFLE_SEND_ROWS:
      return getShuffleSendRows();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SCAN_ROWS:
      return isSetScanRows();
    case SCAN_BYTES:
      return isSetScanBytes();
    case RETURNED_ROWS:
      return isSetReturnedRows();
    case CPU_MS:
      return isSetCpuMs();
    case MAX_PEAK_MEMORY_BYTES:
      return isSetMaxPeakMemoryBytes();
    case CURRENT_USED_MEMORY_BYTES:
      return isSetCurrentUsedMemoryBytes();
    case WORKLOAD_GROUP_ID:
      return isSetWorkloadGroupId();
    case SHUFFLE_SEND_BYTES:
      return isSetShuffleSendBytes();
    case SHUFFLE_SEND_ROWS:
      return isSetShuffleSendRows();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TQueryStatistics)
      return this.equals((TQueryStatistics)that);
    return false;
  }

  public boolean equals(TQueryStatistics that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_scan_rows = true && this.isSetScanRows();
    boolean that_present_scan_rows = true && that.isSetScanRows();
    if (this_present_scan_rows || that_present_scan_rows) {
      if (!(this_present_scan_rows && that_present_scan_rows))
        return false;
      if (this.scan_rows != that.scan_rows)
        return false;
    }

    boolean this_present_scan_bytes = true && this.isSetScanBytes();
    boolean that_present_scan_bytes = true && that.isSetScanBytes();
    if (this_present_scan_bytes || that_present_scan_bytes) {
      if (!(this_present_scan_bytes && that_present_scan_bytes))
        return false;
      if (this.scan_bytes != that.scan_bytes)
        return false;
    }

    boolean this_present_returned_rows = true && this.isSetReturnedRows();
    boolean that_present_returned_rows = true && that.isSetReturnedRows();
    if (this_present_returned_rows || that_present_returned_rows) {
      if (!(this_present_returned_rows && that_present_returned_rows))
        return false;
      if (this.returned_rows != that.returned_rows)
        return false;
    }

    boolean this_present_cpu_ms = true && this.isSetCpuMs();
    boolean that_present_cpu_ms = true && that.isSetCpuMs();
    if (this_present_cpu_ms || that_present_cpu_ms) {
      if (!(this_present_cpu_ms && that_present_cpu_ms))
        return false;
      if (this.cpu_ms != that.cpu_ms)
        return false;
    }

    boolean this_present_max_peak_memory_bytes = true && this.isSetMaxPeakMemoryBytes();
    boolean that_present_max_peak_memory_bytes = true && that.isSetMaxPeakMemoryBytes();
    if (this_present_max_peak_memory_bytes || that_present_max_peak_memory_bytes) {
      if (!(this_present_max_peak_memory_bytes && that_present_max_peak_memory_bytes))
        return false;
      if (this.max_peak_memory_bytes != that.max_peak_memory_bytes)
        return false;
    }

    boolean this_present_current_used_memory_bytes = true && this.isSetCurrentUsedMemoryBytes();
    boolean that_present_current_used_memory_bytes = true && that.isSetCurrentUsedMemoryBytes();
    if (this_present_current_used_memory_bytes || that_present_current_used_memory_bytes) {
      if (!(this_present_current_used_memory_bytes && that_present_current_used_memory_bytes))
        return false;
      if (this.current_used_memory_bytes != that.current_used_memory_bytes)
        return false;
    }

    boolean this_present_workload_group_id = true && this.isSetWorkloadGroupId();
    boolean that_present_workload_group_id = true && that.isSetWorkloadGroupId();
    if (this_present_workload_group_id || that_present_workload_group_id) {
      if (!(this_present_workload_group_id && that_present_workload_group_id))
        return false;
      if (this.workload_group_id != that.workload_group_id)
        return false;
    }

    boolean this_present_shuffle_send_bytes = true && this.isSetShuffleSendBytes();
    boolean that_present_shuffle_send_bytes = true && that.isSetShuffleSendBytes();
    if (this_present_shuffle_send_bytes || that_present_shuffle_send_bytes) {
      if (!(this_present_shuffle_send_bytes && that_present_shuffle_send_bytes))
        return false;
      if (this.shuffle_send_bytes != that.shuffle_send_bytes)
        return false;
    }

    boolean this_present_shuffle_send_rows = true && this.isSetShuffleSendRows();
    boolean that_present_shuffle_send_rows = true && that.isSetShuffleSendRows();
    if (this_present_shuffle_send_rows || that_present_shuffle_send_rows) {
      if (!(this_present_shuffle_send_rows && that_present_shuffle_send_rows))
        return false;
      if (this.shuffle_send_rows != that.shuffle_send_rows)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetScanRows()) ? 131071 : 524287);
    if (isSetScanRows())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(scan_rows);

    hashCode = hashCode * 8191 + ((isSetScanBytes()) ? 131071 : 524287);
    if (isSetScanBytes())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(scan_bytes);

    hashCode = hashCode * 8191 + ((isSetReturnedRows()) ? 131071 : 524287);
    if (isSetReturnedRows())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(returned_rows);

    hashCode = hashCode * 8191 + ((isSetCpuMs()) ? 131071 : 524287);
    if (isSetCpuMs())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(cpu_ms);

    hashCode = hashCode * 8191 + ((isSetMaxPeakMemoryBytes()) ? 131071 : 524287);
    if (isSetMaxPeakMemoryBytes())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(max_peak_memory_bytes);

    hashCode = hashCode * 8191 + ((isSetCurrentUsedMemoryBytes()) ? 131071 : 524287);
    if (isSetCurrentUsedMemoryBytes())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(current_used_memory_bytes);

    hashCode = hashCode * 8191 + ((isSetWorkloadGroupId()) ? 131071 : 524287);
    if (isSetWorkloadGroupId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(workload_group_id);

    hashCode = hashCode * 8191 + ((isSetShuffleSendBytes()) ? 131071 : 524287);
    if (isSetShuffleSendBytes())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(shuffle_send_bytes);

    hashCode = hashCode * 8191 + ((isSetShuffleSendRows()) ? 131071 : 524287);
    if (isSetShuffleSendRows())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(shuffle_send_rows);

    return hashCode;
  }

  @Override
  public int compareTo(TQueryStatistics other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetScanRows(), other.isSetScanRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScanRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scan_rows, other.scan_rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetScanBytes(), other.isSetScanBytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScanBytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scan_bytes, other.scan_bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetReturnedRows(), other.isSetReturnedRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReturnedRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.returned_rows, other.returned_rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCpuMs(), other.isSetCpuMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpuMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpu_ms, other.cpu_ms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMaxPeakMemoryBytes(), other.isSetMaxPeakMemoryBytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxPeakMemoryBytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_peak_memory_bytes, other.max_peak_memory_bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCurrentUsedMemoryBytes(), other.isSetCurrentUsedMemoryBytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentUsedMemoryBytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.current_used_memory_bytes, other.current_used_memory_bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetWorkloadGroupId(), other.isSetWorkloadGroupId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkloadGroupId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workload_group_id, other.workload_group_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetShuffleSendBytes(), other.isSetShuffleSendBytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShuffleSendBytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shuffle_send_bytes, other.shuffle_send_bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetShuffleSendRows(), other.isSetShuffleSendRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShuffleSendRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shuffle_send_rows, other.shuffle_send_rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TQueryStatistics(");
    boolean first = true;

    if (isSetScanRows()) {
      sb.append("scan_rows:");
      sb.append(this.scan_rows);
      first = false;
    }
    if (isSetScanBytes()) {
      if (!first) sb.append(", ");
      sb.append("scan_bytes:");
      sb.append(this.scan_bytes);
      first = false;
    }
    if (isSetReturnedRows()) {
      if (!first) sb.append(", ");
      sb.append("returned_rows:");
      sb.append(this.returned_rows);
      first = false;
    }
    if (isSetCpuMs()) {
      if (!first) sb.append(", ");
      sb.append("cpu_ms:");
      sb.append(this.cpu_ms);
      first = false;
    }
    if (isSetMaxPeakMemoryBytes()) {
      if (!first) sb.append(", ");
      sb.append("max_peak_memory_bytes:");
      sb.append(this.max_peak_memory_bytes);
      first = false;
    }
    if (isSetCurrentUsedMemoryBytes()) {
      if (!first) sb.append(", ");
      sb.append("current_used_memory_bytes:");
      sb.append(this.current_used_memory_bytes);
      first = false;
    }
    if (isSetWorkloadGroupId()) {
      if (!first) sb.append(", ");
      sb.append("workload_group_id:");
      sb.append(this.workload_group_id);
      first = false;
    }
    if (isSetShuffleSendBytes()) {
      if (!first) sb.append(", ");
      sb.append("shuffle_send_bytes:");
      sb.append(this.shuffle_send_bytes);
      first = false;
    }
    if (isSetShuffleSendRows()) {
      if (!first) sb.append(", ");
      sb.append("shuffle_send_rows:");
      sb.append(this.shuffle_send_rows);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TQueryStatisticsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TQueryStatisticsStandardScheme getScheme() {
      return new TQueryStatisticsStandardScheme();
    }
  }

  private static class TQueryStatisticsStandardScheme extends org.apache.thrift.scheme.StandardScheme<TQueryStatistics> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TQueryStatistics struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SCAN_ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.scan_rows = iprot.readI64();
              struct.setScanRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SCAN_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.scan_bytes = iprot.readI64();
              struct.setScanBytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RETURNED_ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.returned_rows = iprot.readI64();
              struct.setReturnedRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CPU_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cpu_ms = iprot.readI64();
              struct.setCpuMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MAX_PEAK_MEMORY_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.max_peak_memory_bytes = iprot.readI64();
              struct.setMaxPeakMemoryBytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CURRENT_USED_MEMORY_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.current_used_memory_bytes = iprot.readI64();
              struct.setCurrentUsedMemoryBytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // WORKLOAD_GROUP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.workload_group_id = iprot.readI64();
              struct.setWorkloadGroupIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SHUFFLE_SEND_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.shuffle_send_bytes = iprot.readI64();
              struct.setShuffleSendBytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SHUFFLE_SEND_ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.shuffle_send_rows = iprot.readI64();
              struct.setShuffleSendRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TQueryStatistics struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetScanRows()) {
        oprot.writeFieldBegin(SCAN_ROWS_FIELD_DESC);
        oprot.writeI64(struct.scan_rows);
        oprot.writeFieldEnd();
      }
      if (struct.isSetScanBytes()) {
        oprot.writeFieldBegin(SCAN_BYTES_FIELD_DESC);
        oprot.writeI64(struct.scan_bytes);
        oprot.writeFieldEnd();
      }
      if (struct.isSetReturnedRows()) {
        oprot.writeFieldBegin(RETURNED_ROWS_FIELD_DESC);
        oprot.writeI64(struct.returned_rows);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCpuMs()) {
        oprot.writeFieldBegin(CPU_MS_FIELD_DESC);
        oprot.writeI64(struct.cpu_ms);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMaxPeakMemoryBytes()) {
        oprot.writeFieldBegin(MAX_PEAK_MEMORY_BYTES_FIELD_DESC);
        oprot.writeI64(struct.max_peak_memory_bytes);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCurrentUsedMemoryBytes()) {
        oprot.writeFieldBegin(CURRENT_USED_MEMORY_BYTES_FIELD_DESC);
        oprot.writeI64(struct.current_used_memory_bytes);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWorkloadGroupId()) {
        oprot.writeFieldBegin(WORKLOAD_GROUP_ID_FIELD_DESC);
        oprot.writeI64(struct.workload_group_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetShuffleSendBytes()) {
        oprot.writeFieldBegin(SHUFFLE_SEND_BYTES_FIELD_DESC);
        oprot.writeI64(struct.shuffle_send_bytes);
        oprot.writeFieldEnd();
      }
      if (struct.isSetShuffleSendRows()) {
        oprot.writeFieldBegin(SHUFFLE_SEND_ROWS_FIELD_DESC);
        oprot.writeI64(struct.shuffle_send_rows);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TQueryStatisticsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TQueryStatisticsTupleScheme getScheme() {
      return new TQueryStatisticsTupleScheme();
    }
  }

  private static class TQueryStatisticsTupleScheme extends org.apache.thrift.scheme.TupleScheme<TQueryStatistics> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TQueryStatistics struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetScanRows()) {
        optionals.set(0);
      }
      if (struct.isSetScanBytes()) {
        optionals.set(1);
      }
      if (struct.isSetReturnedRows()) {
        optionals.set(2);
      }
      if (struct.isSetCpuMs()) {
        optionals.set(3);
      }
      if (struct.isSetMaxPeakMemoryBytes()) {
        optionals.set(4);
      }
      if (struct.isSetCurrentUsedMemoryBytes()) {
        optionals.set(5);
      }
      if (struct.isSetWorkloadGroupId()) {
        optionals.set(6);
      }
      if (struct.isSetShuffleSendBytes()) {
        optionals.set(7);
      }
      if (struct.isSetShuffleSendRows()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetScanRows()) {
        oprot.writeI64(struct.scan_rows);
      }
      if (struct.isSetScanBytes()) {
        oprot.writeI64(struct.scan_bytes);
      }
      if (struct.isSetReturnedRows()) {
        oprot.writeI64(struct.returned_rows);
      }
      if (struct.isSetCpuMs()) {
        oprot.writeI64(struct.cpu_ms);
      }
      if (struct.isSetMaxPeakMemoryBytes()) {
        oprot.writeI64(struct.max_peak_memory_bytes);
      }
      if (struct.isSetCurrentUsedMemoryBytes()) {
        oprot.writeI64(struct.current_used_memory_bytes);
      }
      if (struct.isSetWorkloadGroupId()) {
        oprot.writeI64(struct.workload_group_id);
      }
      if (struct.isSetShuffleSendBytes()) {
        oprot.writeI64(struct.shuffle_send_bytes);
      }
      if (struct.isSetShuffleSendRows()) {
        oprot.writeI64(struct.shuffle_send_rows);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TQueryStatistics struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.scan_rows = iprot.readI64();
        struct.setScanRowsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.scan_bytes = iprot.readI64();
        struct.setScanBytesIsSet(true);
      }
      if (incoming.get(2)) {
        struct.returned_rows = iprot.readI64();
        struct.setReturnedRowsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.cpu_ms = iprot.readI64();
        struct.setCpuMsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.max_peak_memory_bytes = iprot.readI64();
        struct.setMaxPeakMemoryBytesIsSet(true);
      }
      if (incoming.get(5)) {
        struct.current_used_memory_bytes = iprot.readI64();
        struct.setCurrentUsedMemoryBytesIsSet(true);
      }
      if (incoming.get(6)) {
        struct.workload_group_id = iprot.readI64();
        struct.setWorkloadGroupIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.shuffle_send_bytes = iprot.readI64();
        struct.setShuffleSendBytesIsSet(true);
      }
      if (incoming.get(8)) {
        struct.shuffle_send_rows = iprot.readI64();
        struct.setShuffleSendRowsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

