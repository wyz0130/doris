/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.doris.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2024-05-20")
public class TopicInfo implements org.apache.thrift.TBase<TopicInfo, TopicInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TopicInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TopicInfo");

  private static final org.apache.thrift.protocol.TField WORKLOAD_GROUP_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("workload_group_info", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField WORKLOAD_SCHED_POLICY_FIELD_DESC = new org.apache.thrift.protocol.TField("workload_sched_policy", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TopicInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TopicInfoTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable TWorkloadGroupInfo workload_group_info; // optional
  public @org.apache.thrift.annotation.Nullable TWorkloadSchedPolicy workload_sched_policy; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    WORKLOAD_GROUP_INFO((short)1, "workload_group_info"),
    WORKLOAD_SCHED_POLICY((short)2, "workload_sched_policy");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // WORKLOAD_GROUP_INFO
          return WORKLOAD_GROUP_INFO;
        case 2: // WORKLOAD_SCHED_POLICY
          return WORKLOAD_SCHED_POLICY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.WORKLOAD_GROUP_INFO,_Fields.WORKLOAD_SCHED_POLICY};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.WORKLOAD_GROUP_INFO, new org.apache.thrift.meta_data.FieldMetaData("workload_group_info", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TWorkloadGroupInfo.class)));
    tmpMap.put(_Fields.WORKLOAD_SCHED_POLICY, new org.apache.thrift.meta_data.FieldMetaData("workload_sched_policy", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TWorkloadSchedPolicy.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TopicInfo.class, metaDataMap);
  }

  public TopicInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TopicInfo(TopicInfo other) {
    if (other.isSetWorkloadGroupInfo()) {
      this.workload_group_info = new TWorkloadGroupInfo(other.workload_group_info);
    }
    if (other.isSetWorkloadSchedPolicy()) {
      this.workload_sched_policy = new TWorkloadSchedPolicy(other.workload_sched_policy);
    }
  }

  public TopicInfo deepCopy() {
    return new TopicInfo(this);
  }

  @Override
  public void clear() {
    this.workload_group_info = null;
    this.workload_sched_policy = null;
  }

  @org.apache.thrift.annotation.Nullable
  public TWorkloadGroupInfo getWorkloadGroupInfo() {
    return this.workload_group_info;
  }

  public TopicInfo setWorkloadGroupInfo(@org.apache.thrift.annotation.Nullable TWorkloadGroupInfo workload_group_info) {
    this.workload_group_info = workload_group_info;
    return this;
  }

  public void unsetWorkloadGroupInfo() {
    this.workload_group_info = null;
  }

  /** Returns true if field workload_group_info is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkloadGroupInfo() {
    return this.workload_group_info != null;
  }

  public void setWorkloadGroupInfoIsSet(boolean value) {
    if (!value) {
      this.workload_group_info = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TWorkloadSchedPolicy getWorkloadSchedPolicy() {
    return this.workload_sched_policy;
  }

  public TopicInfo setWorkloadSchedPolicy(@org.apache.thrift.annotation.Nullable TWorkloadSchedPolicy workload_sched_policy) {
    this.workload_sched_policy = workload_sched_policy;
    return this;
  }

  public void unsetWorkloadSchedPolicy() {
    this.workload_sched_policy = null;
  }

  /** Returns true if field workload_sched_policy is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkloadSchedPolicy() {
    return this.workload_sched_policy != null;
  }

  public void setWorkloadSchedPolicyIsSet(boolean value) {
    if (!value) {
      this.workload_sched_policy = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case WORKLOAD_GROUP_INFO:
      if (value == null) {
        unsetWorkloadGroupInfo();
      } else {
        setWorkloadGroupInfo((TWorkloadGroupInfo)value);
      }
      break;

    case WORKLOAD_SCHED_POLICY:
      if (value == null) {
        unsetWorkloadSchedPolicy();
      } else {
        setWorkloadSchedPolicy((TWorkloadSchedPolicy)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case WORKLOAD_GROUP_INFO:
      return getWorkloadGroupInfo();

    case WORKLOAD_SCHED_POLICY:
      return getWorkloadSchedPolicy();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case WORKLOAD_GROUP_INFO:
      return isSetWorkloadGroupInfo();
    case WORKLOAD_SCHED_POLICY:
      return isSetWorkloadSchedPolicy();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TopicInfo)
      return this.equals((TopicInfo)that);
    return false;
  }

  public boolean equals(TopicInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_workload_group_info = true && this.isSetWorkloadGroupInfo();
    boolean that_present_workload_group_info = true && that.isSetWorkloadGroupInfo();
    if (this_present_workload_group_info || that_present_workload_group_info) {
      if (!(this_present_workload_group_info && that_present_workload_group_info))
        return false;
      if (!this.workload_group_info.equals(that.workload_group_info))
        return false;
    }

    boolean this_present_workload_sched_policy = true && this.isSetWorkloadSchedPolicy();
    boolean that_present_workload_sched_policy = true && that.isSetWorkloadSchedPolicy();
    if (this_present_workload_sched_policy || that_present_workload_sched_policy) {
      if (!(this_present_workload_sched_policy && that_present_workload_sched_policy))
        return false;
      if (!this.workload_sched_policy.equals(that.workload_sched_policy))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetWorkloadGroupInfo()) ? 131071 : 524287);
    if (isSetWorkloadGroupInfo())
      hashCode = hashCode * 8191 + workload_group_info.hashCode();

    hashCode = hashCode * 8191 + ((isSetWorkloadSchedPolicy()) ? 131071 : 524287);
    if (isSetWorkloadSchedPolicy())
      hashCode = hashCode * 8191 + workload_sched_policy.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TopicInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetWorkloadGroupInfo(), other.isSetWorkloadGroupInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkloadGroupInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workload_group_info, other.workload_group_info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetWorkloadSchedPolicy(), other.isSetWorkloadSchedPolicy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkloadSchedPolicy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workload_sched_policy, other.workload_sched_policy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TopicInfo(");
    boolean first = true;

    if (isSetWorkloadGroupInfo()) {
      sb.append("workload_group_info:");
      if (this.workload_group_info == null) {
        sb.append("null");
      } else {
        sb.append(this.workload_group_info);
      }
      first = false;
    }
    if (isSetWorkloadSchedPolicy()) {
      if (!first) sb.append(", ");
      sb.append("workload_sched_policy:");
      if (this.workload_sched_policy == null) {
        sb.append("null");
      } else {
        sb.append(this.workload_sched_policy);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (workload_group_info != null) {
      workload_group_info.validate();
    }
    if (workload_sched_policy != null) {
      workload_sched_policy.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TopicInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TopicInfoStandardScheme getScheme() {
      return new TopicInfoStandardScheme();
    }
  }

  private static class TopicInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<TopicInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TopicInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // WORKLOAD_GROUP_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.workload_group_info = new TWorkloadGroupInfo();
              struct.workload_group_info.read(iprot);
              struct.setWorkloadGroupInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // WORKLOAD_SCHED_POLICY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.workload_sched_policy = new TWorkloadSchedPolicy();
              struct.workload_sched_policy.read(iprot);
              struct.setWorkloadSchedPolicyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TopicInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.workload_group_info != null) {
        if (struct.isSetWorkloadGroupInfo()) {
          oprot.writeFieldBegin(WORKLOAD_GROUP_INFO_FIELD_DESC);
          struct.workload_group_info.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.workload_sched_policy != null) {
        if (struct.isSetWorkloadSchedPolicy()) {
          oprot.writeFieldBegin(WORKLOAD_SCHED_POLICY_FIELD_DESC);
          struct.workload_sched_policy.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TopicInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TopicInfoTupleScheme getScheme() {
      return new TopicInfoTupleScheme();
    }
  }

  private static class TopicInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<TopicInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TopicInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetWorkloadGroupInfo()) {
        optionals.set(0);
      }
      if (struct.isSetWorkloadSchedPolicy()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetWorkloadGroupInfo()) {
        struct.workload_group_info.write(oprot);
      }
      if (struct.isSetWorkloadSchedPolicy()) {
        struct.workload_sched_policy.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TopicInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.workload_group_info = new TWorkloadGroupInfo();
        struct.workload_group_info.read(iprot);
        struct.setWorkloadGroupInfoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.workload_sched_policy = new TWorkloadSchedPolicy();
        struct.workload_sched_policy.read(iprot);
        struct.setWorkloadSchedPolicyIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

