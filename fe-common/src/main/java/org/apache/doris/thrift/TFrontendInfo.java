/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.doris.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2024-05-20")
public class TFrontendInfo implements org.apache.thrift.TBase<TFrontendInfo, TFrontendInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TFrontendInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TFrontendInfo");

  private static final org.apache.thrift.protocol.TField COORDINATOR_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("coordinator_address", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField PROCESS_UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("process_uuid", org.apache.thrift.protocol.TType.I64, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TFrontendInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TFrontendInfoTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TNetworkAddress coordinator_address; // optional
  public long process_uuid; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COORDINATOR_ADDRESS((short)1, "coordinator_address"),
    PROCESS_UUID((short)2, "process_uuid");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COORDINATOR_ADDRESS
          return COORDINATOR_ADDRESS;
        case 2: // PROCESS_UUID
          return PROCESS_UUID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PROCESS_UUID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.COORDINATOR_ADDRESS,_Fields.PROCESS_UUID};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COORDINATOR_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("coordinator_address", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TNetworkAddress.class)));
    tmpMap.put(_Fields.PROCESS_UUID, new org.apache.thrift.meta_data.FieldMetaData("process_uuid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TFrontendInfo.class, metaDataMap);
  }

  public TFrontendInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TFrontendInfo(TFrontendInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCoordinatorAddress()) {
      this.coordinator_address = new org.apache.doris.thrift.TNetworkAddress(other.coordinator_address);
    }
    this.process_uuid = other.process_uuid;
  }

  public TFrontendInfo deepCopy() {
    return new TFrontendInfo(this);
  }

  @Override
  public void clear() {
    this.coordinator_address = null;
    setProcessUuidIsSet(false);
    this.process_uuid = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public org.apache.doris.thrift.TNetworkAddress getCoordinatorAddress() {
    return this.coordinator_address;
  }

  public TFrontendInfo setCoordinatorAddress(@org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TNetworkAddress coordinator_address) {
    this.coordinator_address = coordinator_address;
    return this;
  }

  public void unsetCoordinatorAddress() {
    this.coordinator_address = null;
  }

  /** Returns true if field coordinator_address is set (has been assigned a value) and false otherwise */
  public boolean isSetCoordinatorAddress() {
    return this.coordinator_address != null;
  }

  public void setCoordinatorAddressIsSet(boolean value) {
    if (!value) {
      this.coordinator_address = null;
    }
  }

  public long getProcessUuid() {
    return this.process_uuid;
  }

  public TFrontendInfo setProcessUuid(long process_uuid) {
    this.process_uuid = process_uuid;
    setProcessUuidIsSet(true);
    return this;
  }

  public void unsetProcessUuid() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PROCESS_UUID_ISSET_ID);
  }

  /** Returns true if field process_uuid is set (has been assigned a value) and false otherwise */
  public boolean isSetProcessUuid() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PROCESS_UUID_ISSET_ID);
  }

  public void setProcessUuidIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PROCESS_UUID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case COORDINATOR_ADDRESS:
      if (value == null) {
        unsetCoordinatorAddress();
      } else {
        setCoordinatorAddress((org.apache.doris.thrift.TNetworkAddress)value);
      }
      break;

    case PROCESS_UUID:
      if (value == null) {
        unsetProcessUuid();
      } else {
        setProcessUuid((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case COORDINATOR_ADDRESS:
      return getCoordinatorAddress();

    case PROCESS_UUID:
      return getProcessUuid();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case COORDINATOR_ADDRESS:
      return isSetCoordinatorAddress();
    case PROCESS_UUID:
      return isSetProcessUuid();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TFrontendInfo)
      return this.equals((TFrontendInfo)that);
    return false;
  }

  public boolean equals(TFrontendInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_coordinator_address = true && this.isSetCoordinatorAddress();
    boolean that_present_coordinator_address = true && that.isSetCoordinatorAddress();
    if (this_present_coordinator_address || that_present_coordinator_address) {
      if (!(this_present_coordinator_address && that_present_coordinator_address))
        return false;
      if (!this.coordinator_address.equals(that.coordinator_address))
        return false;
    }

    boolean this_present_process_uuid = true && this.isSetProcessUuid();
    boolean that_present_process_uuid = true && that.isSetProcessUuid();
    if (this_present_process_uuid || that_present_process_uuid) {
      if (!(this_present_process_uuid && that_present_process_uuid))
        return false;
      if (this.process_uuid != that.process_uuid)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCoordinatorAddress()) ? 131071 : 524287);
    if (isSetCoordinatorAddress())
      hashCode = hashCode * 8191 + coordinator_address.hashCode();

    hashCode = hashCode * 8191 + ((isSetProcessUuid()) ? 131071 : 524287);
    if (isSetProcessUuid())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(process_uuid);

    return hashCode;
  }

  @Override
  public int compareTo(TFrontendInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetCoordinatorAddress(), other.isSetCoordinatorAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoordinatorAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coordinator_address, other.coordinator_address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetProcessUuid(), other.isSetProcessUuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProcessUuid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.process_uuid, other.process_uuid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TFrontendInfo(");
    boolean first = true;

    if (isSetCoordinatorAddress()) {
      sb.append("coordinator_address:");
      if (this.coordinator_address == null) {
        sb.append("null");
      } else {
        sb.append(this.coordinator_address);
      }
      first = false;
    }
    if (isSetProcessUuid()) {
      if (!first) sb.append(", ");
      sb.append("process_uuid:");
      sb.append(this.process_uuid);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (coordinator_address != null) {
      coordinator_address.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TFrontendInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TFrontendInfoStandardScheme getScheme() {
      return new TFrontendInfoStandardScheme();
    }
  }

  private static class TFrontendInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<TFrontendInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TFrontendInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COORDINATOR_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.coordinator_address = new org.apache.doris.thrift.TNetworkAddress();
              struct.coordinator_address.read(iprot);
              struct.setCoordinatorAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROCESS_UUID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.process_uuid = iprot.readI64();
              struct.setProcessUuidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TFrontendInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.coordinator_address != null) {
        if (struct.isSetCoordinatorAddress()) {
          oprot.writeFieldBegin(COORDINATOR_ADDRESS_FIELD_DESC);
          struct.coordinator_address.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetProcessUuid()) {
        oprot.writeFieldBegin(PROCESS_UUID_FIELD_DESC);
        oprot.writeI64(struct.process_uuid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TFrontendInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TFrontendInfoTupleScheme getScheme() {
      return new TFrontendInfoTupleScheme();
    }
  }

  private static class TFrontendInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<TFrontendInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TFrontendInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCoordinatorAddress()) {
        optionals.set(0);
      }
      if (struct.isSetProcessUuid()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetCoordinatorAddress()) {
        struct.coordinator_address.write(oprot);
      }
      if (struct.isSetProcessUuid()) {
        oprot.writeI64(struct.process_uuid);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TFrontendInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.coordinator_address = new org.apache.doris.thrift.TNetworkAddress();
        struct.coordinator_address.read(iprot);
        struct.setCoordinatorAddressIsSet(true);
      }
      if (incoming.get(1)) {
        struct.process_uuid = iprot.readI64();
        struct.setProcessUuidIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

