/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.doris.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2024-05-20")
public class TWorkloadGroupInfo implements org.apache.thrift.TBase<TWorkloadGroupInfo, TWorkloadGroupInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TWorkloadGroupInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TWorkloadGroupInfo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField CPU_SHARE_FIELD_DESC = new org.apache.thrift.protocol.TField("cpu_share", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField CPU_HARD_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("cpu_hard_limit", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField MEM_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("mem_limit", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ENABLE_MEMORY_OVERCOMMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_memory_overcommit", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField ENABLE_CPU_HARD_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_cpu_hard_limit", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField SCAN_THREAD_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("scan_thread_num", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField MAX_REMOTE_SCAN_THREAD_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("max_remote_scan_thread_num", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField MIN_REMOTE_SCAN_THREAD_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("min_remote_scan_thread_num", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField SPILL_THRESHOLD_LOW_WATERMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("spill_threshold_low_watermark", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField SPILL_THRESHOLD_HIGH_WATERMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("spill_threshold_high_watermark", org.apache.thrift.protocol.TType.I32, (short)13);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TWorkloadGroupInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TWorkloadGroupInfoTupleSchemeFactory();

  public long id; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String name; // optional
  public long version; // optional
  public long cpu_share; // optional
  public int cpu_hard_limit; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String mem_limit; // optional
  public boolean enable_memory_overcommit; // optional
  public boolean enable_cpu_hard_limit; // optional
  public int scan_thread_num; // optional
  public int max_remote_scan_thread_num; // optional
  public int min_remote_scan_thread_num; // optional
  public int spill_threshold_low_watermark; // optional
  public int spill_threshold_high_watermark; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    VERSION((short)3, "version"),
    CPU_SHARE((short)4, "cpu_share"),
    CPU_HARD_LIMIT((short)5, "cpu_hard_limit"),
    MEM_LIMIT((short)6, "mem_limit"),
    ENABLE_MEMORY_OVERCOMMIT((short)7, "enable_memory_overcommit"),
    ENABLE_CPU_HARD_LIMIT((short)8, "enable_cpu_hard_limit"),
    SCAN_THREAD_NUM((short)9, "scan_thread_num"),
    MAX_REMOTE_SCAN_THREAD_NUM((short)10, "max_remote_scan_thread_num"),
    MIN_REMOTE_SCAN_THREAD_NUM((short)11, "min_remote_scan_thread_num"),
    SPILL_THRESHOLD_LOW_WATERMARK((short)12, "spill_threshold_low_watermark"),
    SPILL_THRESHOLD_HIGH_WATERMARK((short)13, "spill_threshold_high_watermark");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // VERSION
          return VERSION;
        case 4: // CPU_SHARE
          return CPU_SHARE;
        case 5: // CPU_HARD_LIMIT
          return CPU_HARD_LIMIT;
        case 6: // MEM_LIMIT
          return MEM_LIMIT;
        case 7: // ENABLE_MEMORY_OVERCOMMIT
          return ENABLE_MEMORY_OVERCOMMIT;
        case 8: // ENABLE_CPU_HARD_LIMIT
          return ENABLE_CPU_HARD_LIMIT;
        case 9: // SCAN_THREAD_NUM
          return SCAN_THREAD_NUM;
        case 10: // MAX_REMOTE_SCAN_THREAD_NUM
          return MAX_REMOTE_SCAN_THREAD_NUM;
        case 11: // MIN_REMOTE_SCAN_THREAD_NUM
          return MIN_REMOTE_SCAN_THREAD_NUM;
        case 12: // SPILL_THRESHOLD_LOW_WATERMARK
          return SPILL_THRESHOLD_LOW_WATERMARK;
        case 13: // SPILL_THRESHOLD_HIGH_WATERMARK
          return SPILL_THRESHOLD_HIGH_WATERMARK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __VERSION_ISSET_ID = 1;
  private static final int __CPU_SHARE_ISSET_ID = 2;
  private static final int __CPU_HARD_LIMIT_ISSET_ID = 3;
  private static final int __ENABLE_MEMORY_OVERCOMMIT_ISSET_ID = 4;
  private static final int __ENABLE_CPU_HARD_LIMIT_ISSET_ID = 5;
  private static final int __SCAN_THREAD_NUM_ISSET_ID = 6;
  private static final int __MAX_REMOTE_SCAN_THREAD_NUM_ISSET_ID = 7;
  private static final int __MIN_REMOTE_SCAN_THREAD_NUM_ISSET_ID = 8;
  private static final int __SPILL_THRESHOLD_LOW_WATERMARK_ISSET_ID = 9;
  private static final int __SPILL_THRESHOLD_HIGH_WATERMARK_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.NAME,_Fields.VERSION,_Fields.CPU_SHARE,_Fields.CPU_HARD_LIMIT,_Fields.MEM_LIMIT,_Fields.ENABLE_MEMORY_OVERCOMMIT,_Fields.ENABLE_CPU_HARD_LIMIT,_Fields.SCAN_THREAD_NUM,_Fields.MAX_REMOTE_SCAN_THREAD_NUM,_Fields.MIN_REMOTE_SCAN_THREAD_NUM,_Fields.SPILL_THRESHOLD_LOW_WATERMARK,_Fields.SPILL_THRESHOLD_HIGH_WATERMARK};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CPU_SHARE, new org.apache.thrift.meta_data.FieldMetaData("cpu_share", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CPU_HARD_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("cpu_hard_limit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MEM_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("mem_limit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENABLE_MEMORY_OVERCOMMIT, new org.apache.thrift.meta_data.FieldMetaData("enable_memory_overcommit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ENABLE_CPU_HARD_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("enable_cpu_hard_limit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SCAN_THREAD_NUM, new org.apache.thrift.meta_data.FieldMetaData("scan_thread_num", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_REMOTE_SCAN_THREAD_NUM, new org.apache.thrift.meta_data.FieldMetaData("max_remote_scan_thread_num", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MIN_REMOTE_SCAN_THREAD_NUM, new org.apache.thrift.meta_data.FieldMetaData("min_remote_scan_thread_num", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SPILL_THRESHOLD_LOW_WATERMARK, new org.apache.thrift.meta_data.FieldMetaData("spill_threshold_low_watermark", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SPILL_THRESHOLD_HIGH_WATERMARK, new org.apache.thrift.meta_data.FieldMetaData("spill_threshold_high_watermark", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TWorkloadGroupInfo.class, metaDataMap);
  }

  public TWorkloadGroupInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TWorkloadGroupInfo(TWorkloadGroupInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.version = other.version;
    this.cpu_share = other.cpu_share;
    this.cpu_hard_limit = other.cpu_hard_limit;
    if (other.isSetMemLimit()) {
      this.mem_limit = other.mem_limit;
    }
    this.enable_memory_overcommit = other.enable_memory_overcommit;
    this.enable_cpu_hard_limit = other.enable_cpu_hard_limit;
    this.scan_thread_num = other.scan_thread_num;
    this.max_remote_scan_thread_num = other.max_remote_scan_thread_num;
    this.min_remote_scan_thread_num = other.min_remote_scan_thread_num;
    this.spill_threshold_low_watermark = other.spill_threshold_low_watermark;
    this.spill_threshold_high_watermark = other.spill_threshold_high_watermark;
  }

  public TWorkloadGroupInfo deepCopy() {
    return new TWorkloadGroupInfo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    setVersionIsSet(false);
    this.version = 0;
    setCpuShareIsSet(false);
    this.cpu_share = 0;
    setCpuHardLimitIsSet(false);
    this.cpu_hard_limit = 0;
    this.mem_limit = null;
    setEnableMemoryOvercommitIsSet(false);
    this.enable_memory_overcommit = false;
    setEnableCpuHardLimitIsSet(false);
    this.enable_cpu_hard_limit = false;
    setScanThreadNumIsSet(false);
    this.scan_thread_num = 0;
    setMaxRemoteScanThreadNumIsSet(false);
    this.max_remote_scan_thread_num = 0;
    setMinRemoteScanThreadNumIsSet(false);
    this.min_remote_scan_thread_num = 0;
    setSpillThresholdLowWatermarkIsSet(false);
    this.spill_threshold_low_watermark = 0;
    setSpillThresholdHighWatermarkIsSet(false);
    this.spill_threshold_high_watermark = 0;
  }

  public long getId() {
    return this.id;
  }

  public TWorkloadGroupInfo setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getName() {
    return this.name;
  }

  public TWorkloadGroupInfo setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public long getVersion() {
    return this.version;
  }

  public TWorkloadGroupInfo setVersion(long version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  public long getCpuShare() {
    return this.cpu_share;
  }

  public TWorkloadGroupInfo setCpuShare(long cpu_share) {
    this.cpu_share = cpu_share;
    setCpuShareIsSet(true);
    return this;
  }

  public void unsetCpuShare() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CPU_SHARE_ISSET_ID);
  }

  /** Returns true if field cpu_share is set (has been assigned a value) and false otherwise */
  public boolean isSetCpuShare() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CPU_SHARE_ISSET_ID);
  }

  public void setCpuShareIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CPU_SHARE_ISSET_ID, value);
  }

  public int getCpuHardLimit() {
    return this.cpu_hard_limit;
  }

  public TWorkloadGroupInfo setCpuHardLimit(int cpu_hard_limit) {
    this.cpu_hard_limit = cpu_hard_limit;
    setCpuHardLimitIsSet(true);
    return this;
  }

  public void unsetCpuHardLimit() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CPU_HARD_LIMIT_ISSET_ID);
  }

  /** Returns true if field cpu_hard_limit is set (has been assigned a value) and false otherwise */
  public boolean isSetCpuHardLimit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CPU_HARD_LIMIT_ISSET_ID);
  }

  public void setCpuHardLimitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CPU_HARD_LIMIT_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getMemLimit() {
    return this.mem_limit;
  }

  public TWorkloadGroupInfo setMemLimit(@org.apache.thrift.annotation.Nullable java.lang.String mem_limit) {
    this.mem_limit = mem_limit;
    return this;
  }

  public void unsetMemLimit() {
    this.mem_limit = null;
  }

  /** Returns true if field mem_limit is set (has been assigned a value) and false otherwise */
  public boolean isSetMemLimit() {
    return this.mem_limit != null;
  }

  public void setMemLimitIsSet(boolean value) {
    if (!value) {
      this.mem_limit = null;
    }
  }

  public boolean isEnableMemoryOvercommit() {
    return this.enable_memory_overcommit;
  }

  public TWorkloadGroupInfo setEnableMemoryOvercommit(boolean enable_memory_overcommit) {
    this.enable_memory_overcommit = enable_memory_overcommit;
    setEnableMemoryOvercommitIsSet(true);
    return this;
  }

  public void unsetEnableMemoryOvercommit() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLE_MEMORY_OVERCOMMIT_ISSET_ID);
  }

  /** Returns true if field enable_memory_overcommit is set (has been assigned a value) and false otherwise */
  public boolean isSetEnableMemoryOvercommit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLE_MEMORY_OVERCOMMIT_ISSET_ID);
  }

  public void setEnableMemoryOvercommitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLE_MEMORY_OVERCOMMIT_ISSET_ID, value);
  }

  public boolean isEnableCpuHardLimit() {
    return this.enable_cpu_hard_limit;
  }

  public TWorkloadGroupInfo setEnableCpuHardLimit(boolean enable_cpu_hard_limit) {
    this.enable_cpu_hard_limit = enable_cpu_hard_limit;
    setEnableCpuHardLimitIsSet(true);
    return this;
  }

  public void unsetEnableCpuHardLimit() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLE_CPU_HARD_LIMIT_ISSET_ID);
  }

  /** Returns true if field enable_cpu_hard_limit is set (has been assigned a value) and false otherwise */
  public boolean isSetEnableCpuHardLimit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLE_CPU_HARD_LIMIT_ISSET_ID);
  }

  public void setEnableCpuHardLimitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLE_CPU_HARD_LIMIT_ISSET_ID, value);
  }

  public int getScanThreadNum() {
    return this.scan_thread_num;
  }

  public TWorkloadGroupInfo setScanThreadNum(int scan_thread_num) {
    this.scan_thread_num = scan_thread_num;
    setScanThreadNumIsSet(true);
    return this;
  }

  public void unsetScanThreadNum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SCAN_THREAD_NUM_ISSET_ID);
  }

  /** Returns true if field scan_thread_num is set (has been assigned a value) and false otherwise */
  public boolean isSetScanThreadNum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SCAN_THREAD_NUM_ISSET_ID);
  }

  public void setScanThreadNumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SCAN_THREAD_NUM_ISSET_ID, value);
  }

  public int getMaxRemoteScanThreadNum() {
    return this.max_remote_scan_thread_num;
  }

  public TWorkloadGroupInfo setMaxRemoteScanThreadNum(int max_remote_scan_thread_num) {
    this.max_remote_scan_thread_num = max_remote_scan_thread_num;
    setMaxRemoteScanThreadNumIsSet(true);
    return this;
  }

  public void unsetMaxRemoteScanThreadNum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAX_REMOTE_SCAN_THREAD_NUM_ISSET_ID);
  }

  /** Returns true if field max_remote_scan_thread_num is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxRemoteScanThreadNum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAX_REMOTE_SCAN_THREAD_NUM_ISSET_ID);
  }

  public void setMaxRemoteScanThreadNumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAX_REMOTE_SCAN_THREAD_NUM_ISSET_ID, value);
  }

  public int getMinRemoteScanThreadNum() {
    return this.min_remote_scan_thread_num;
  }

  public TWorkloadGroupInfo setMinRemoteScanThreadNum(int min_remote_scan_thread_num) {
    this.min_remote_scan_thread_num = min_remote_scan_thread_num;
    setMinRemoteScanThreadNumIsSet(true);
    return this;
  }

  public void unsetMinRemoteScanThreadNum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MIN_REMOTE_SCAN_THREAD_NUM_ISSET_ID);
  }

  /** Returns true if field min_remote_scan_thread_num is set (has been assigned a value) and false otherwise */
  public boolean isSetMinRemoteScanThreadNum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MIN_REMOTE_SCAN_THREAD_NUM_ISSET_ID);
  }

  public void setMinRemoteScanThreadNumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MIN_REMOTE_SCAN_THREAD_NUM_ISSET_ID, value);
  }

  public int getSpillThresholdLowWatermark() {
    return this.spill_threshold_low_watermark;
  }

  public TWorkloadGroupInfo setSpillThresholdLowWatermark(int spill_threshold_low_watermark) {
    this.spill_threshold_low_watermark = spill_threshold_low_watermark;
    setSpillThresholdLowWatermarkIsSet(true);
    return this;
  }

  public void unsetSpillThresholdLowWatermark() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SPILL_THRESHOLD_LOW_WATERMARK_ISSET_ID);
  }

  /** Returns true if field spill_threshold_low_watermark is set (has been assigned a value) and false otherwise */
  public boolean isSetSpillThresholdLowWatermark() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SPILL_THRESHOLD_LOW_WATERMARK_ISSET_ID);
  }

  public void setSpillThresholdLowWatermarkIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SPILL_THRESHOLD_LOW_WATERMARK_ISSET_ID, value);
  }

  public int getSpillThresholdHighWatermark() {
    return this.spill_threshold_high_watermark;
  }

  public TWorkloadGroupInfo setSpillThresholdHighWatermark(int spill_threshold_high_watermark) {
    this.spill_threshold_high_watermark = spill_threshold_high_watermark;
    setSpillThresholdHighWatermarkIsSet(true);
    return this;
  }

  public void unsetSpillThresholdHighWatermark() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SPILL_THRESHOLD_HIGH_WATERMARK_ISSET_ID);
  }

  /** Returns true if field spill_threshold_high_watermark is set (has been assigned a value) and false otherwise */
  public boolean isSetSpillThresholdHighWatermark() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SPILL_THRESHOLD_HIGH_WATERMARK_ISSET_ID);
  }

  public void setSpillThresholdHighWatermarkIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SPILL_THRESHOLD_HIGH_WATERMARK_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((java.lang.Long)value);
      }
      break;

    case CPU_SHARE:
      if (value == null) {
        unsetCpuShare();
      } else {
        setCpuShare((java.lang.Long)value);
      }
      break;

    case CPU_HARD_LIMIT:
      if (value == null) {
        unsetCpuHardLimit();
      } else {
        setCpuHardLimit((java.lang.Integer)value);
      }
      break;

    case MEM_LIMIT:
      if (value == null) {
        unsetMemLimit();
      } else {
        setMemLimit((java.lang.String)value);
      }
      break;

    case ENABLE_MEMORY_OVERCOMMIT:
      if (value == null) {
        unsetEnableMemoryOvercommit();
      } else {
        setEnableMemoryOvercommit((java.lang.Boolean)value);
      }
      break;

    case ENABLE_CPU_HARD_LIMIT:
      if (value == null) {
        unsetEnableCpuHardLimit();
      } else {
        setEnableCpuHardLimit((java.lang.Boolean)value);
      }
      break;

    case SCAN_THREAD_NUM:
      if (value == null) {
        unsetScanThreadNum();
      } else {
        setScanThreadNum((java.lang.Integer)value);
      }
      break;

    case MAX_REMOTE_SCAN_THREAD_NUM:
      if (value == null) {
        unsetMaxRemoteScanThreadNum();
      } else {
        setMaxRemoteScanThreadNum((java.lang.Integer)value);
      }
      break;

    case MIN_REMOTE_SCAN_THREAD_NUM:
      if (value == null) {
        unsetMinRemoteScanThreadNum();
      } else {
        setMinRemoteScanThreadNum((java.lang.Integer)value);
      }
      break;

    case SPILL_THRESHOLD_LOW_WATERMARK:
      if (value == null) {
        unsetSpillThresholdLowWatermark();
      } else {
        setSpillThresholdLowWatermark((java.lang.Integer)value);
      }
      break;

    case SPILL_THRESHOLD_HIGH_WATERMARK:
      if (value == null) {
        unsetSpillThresholdHighWatermark();
      } else {
        setSpillThresholdHighWatermark((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case VERSION:
      return getVersion();

    case CPU_SHARE:
      return getCpuShare();

    case CPU_HARD_LIMIT:
      return getCpuHardLimit();

    case MEM_LIMIT:
      return getMemLimit();

    case ENABLE_MEMORY_OVERCOMMIT:
      return isEnableMemoryOvercommit();

    case ENABLE_CPU_HARD_LIMIT:
      return isEnableCpuHardLimit();

    case SCAN_THREAD_NUM:
      return getScanThreadNum();

    case MAX_REMOTE_SCAN_THREAD_NUM:
      return getMaxRemoteScanThreadNum();

    case MIN_REMOTE_SCAN_THREAD_NUM:
      return getMinRemoteScanThreadNum();

    case SPILL_THRESHOLD_LOW_WATERMARK:
      return getSpillThresholdLowWatermark();

    case SPILL_THRESHOLD_HIGH_WATERMARK:
      return getSpillThresholdHighWatermark();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case VERSION:
      return isSetVersion();
    case CPU_SHARE:
      return isSetCpuShare();
    case CPU_HARD_LIMIT:
      return isSetCpuHardLimit();
    case MEM_LIMIT:
      return isSetMemLimit();
    case ENABLE_MEMORY_OVERCOMMIT:
      return isSetEnableMemoryOvercommit();
    case ENABLE_CPU_HARD_LIMIT:
      return isSetEnableCpuHardLimit();
    case SCAN_THREAD_NUM:
      return isSetScanThreadNum();
    case MAX_REMOTE_SCAN_THREAD_NUM:
      return isSetMaxRemoteScanThreadNum();
    case MIN_REMOTE_SCAN_THREAD_NUM:
      return isSetMinRemoteScanThreadNum();
    case SPILL_THRESHOLD_LOW_WATERMARK:
      return isSetSpillThresholdLowWatermark();
    case SPILL_THRESHOLD_HIGH_WATERMARK:
      return isSetSpillThresholdHighWatermark();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TWorkloadGroupInfo)
      return this.equals((TWorkloadGroupInfo)that);
    return false;
  }

  public boolean equals(TWorkloadGroupInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_cpu_share = true && this.isSetCpuShare();
    boolean that_present_cpu_share = true && that.isSetCpuShare();
    if (this_present_cpu_share || that_present_cpu_share) {
      if (!(this_present_cpu_share && that_present_cpu_share))
        return false;
      if (this.cpu_share != that.cpu_share)
        return false;
    }

    boolean this_present_cpu_hard_limit = true && this.isSetCpuHardLimit();
    boolean that_present_cpu_hard_limit = true && that.isSetCpuHardLimit();
    if (this_present_cpu_hard_limit || that_present_cpu_hard_limit) {
      if (!(this_present_cpu_hard_limit && that_present_cpu_hard_limit))
        return false;
      if (this.cpu_hard_limit != that.cpu_hard_limit)
        return false;
    }

    boolean this_present_mem_limit = true && this.isSetMemLimit();
    boolean that_present_mem_limit = true && that.isSetMemLimit();
    if (this_present_mem_limit || that_present_mem_limit) {
      if (!(this_present_mem_limit && that_present_mem_limit))
        return false;
      if (!this.mem_limit.equals(that.mem_limit))
        return false;
    }

    boolean this_present_enable_memory_overcommit = true && this.isSetEnableMemoryOvercommit();
    boolean that_present_enable_memory_overcommit = true && that.isSetEnableMemoryOvercommit();
    if (this_present_enable_memory_overcommit || that_present_enable_memory_overcommit) {
      if (!(this_present_enable_memory_overcommit && that_present_enable_memory_overcommit))
        return false;
      if (this.enable_memory_overcommit != that.enable_memory_overcommit)
        return false;
    }

    boolean this_present_enable_cpu_hard_limit = true && this.isSetEnableCpuHardLimit();
    boolean that_present_enable_cpu_hard_limit = true && that.isSetEnableCpuHardLimit();
    if (this_present_enable_cpu_hard_limit || that_present_enable_cpu_hard_limit) {
      if (!(this_present_enable_cpu_hard_limit && that_present_enable_cpu_hard_limit))
        return false;
      if (this.enable_cpu_hard_limit != that.enable_cpu_hard_limit)
        return false;
    }

    boolean this_present_scan_thread_num = true && this.isSetScanThreadNum();
    boolean that_present_scan_thread_num = true && that.isSetScanThreadNum();
    if (this_present_scan_thread_num || that_present_scan_thread_num) {
      if (!(this_present_scan_thread_num && that_present_scan_thread_num))
        return false;
      if (this.scan_thread_num != that.scan_thread_num)
        return false;
    }

    boolean this_present_max_remote_scan_thread_num = true && this.isSetMaxRemoteScanThreadNum();
    boolean that_present_max_remote_scan_thread_num = true && that.isSetMaxRemoteScanThreadNum();
    if (this_present_max_remote_scan_thread_num || that_present_max_remote_scan_thread_num) {
      if (!(this_present_max_remote_scan_thread_num && that_present_max_remote_scan_thread_num))
        return false;
      if (this.max_remote_scan_thread_num != that.max_remote_scan_thread_num)
        return false;
    }

    boolean this_present_min_remote_scan_thread_num = true && this.isSetMinRemoteScanThreadNum();
    boolean that_present_min_remote_scan_thread_num = true && that.isSetMinRemoteScanThreadNum();
    if (this_present_min_remote_scan_thread_num || that_present_min_remote_scan_thread_num) {
      if (!(this_present_min_remote_scan_thread_num && that_present_min_remote_scan_thread_num))
        return false;
      if (this.min_remote_scan_thread_num != that.min_remote_scan_thread_num)
        return false;
    }

    boolean this_present_spill_threshold_low_watermark = true && this.isSetSpillThresholdLowWatermark();
    boolean that_present_spill_threshold_low_watermark = true && that.isSetSpillThresholdLowWatermark();
    if (this_present_spill_threshold_low_watermark || that_present_spill_threshold_low_watermark) {
      if (!(this_present_spill_threshold_low_watermark && that_present_spill_threshold_low_watermark))
        return false;
      if (this.spill_threshold_low_watermark != that.spill_threshold_low_watermark)
        return false;
    }

    boolean this_present_spill_threshold_high_watermark = true && this.isSetSpillThresholdHighWatermark();
    boolean that_present_spill_threshold_high_watermark = true && that.isSetSpillThresholdHighWatermark();
    if (this_present_spill_threshold_high_watermark || that_present_spill_threshold_high_watermark) {
      if (!(this_present_spill_threshold_high_watermark && that_present_spill_threshold_high_watermark))
        return false;
      if (this.spill_threshold_high_watermark != that.spill_threshold_high_watermark)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetVersion()) ? 131071 : 524287);
    if (isSetVersion())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(version);

    hashCode = hashCode * 8191 + ((isSetCpuShare()) ? 131071 : 524287);
    if (isSetCpuShare())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(cpu_share);

    hashCode = hashCode * 8191 + ((isSetCpuHardLimit()) ? 131071 : 524287);
    if (isSetCpuHardLimit())
      hashCode = hashCode * 8191 + cpu_hard_limit;

    hashCode = hashCode * 8191 + ((isSetMemLimit()) ? 131071 : 524287);
    if (isSetMemLimit())
      hashCode = hashCode * 8191 + mem_limit.hashCode();

    hashCode = hashCode * 8191 + ((isSetEnableMemoryOvercommit()) ? 131071 : 524287);
    if (isSetEnableMemoryOvercommit())
      hashCode = hashCode * 8191 + ((enable_memory_overcommit) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetEnableCpuHardLimit()) ? 131071 : 524287);
    if (isSetEnableCpuHardLimit())
      hashCode = hashCode * 8191 + ((enable_cpu_hard_limit) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetScanThreadNum()) ? 131071 : 524287);
    if (isSetScanThreadNum())
      hashCode = hashCode * 8191 + scan_thread_num;

    hashCode = hashCode * 8191 + ((isSetMaxRemoteScanThreadNum()) ? 131071 : 524287);
    if (isSetMaxRemoteScanThreadNum())
      hashCode = hashCode * 8191 + max_remote_scan_thread_num;

    hashCode = hashCode * 8191 + ((isSetMinRemoteScanThreadNum()) ? 131071 : 524287);
    if (isSetMinRemoteScanThreadNum())
      hashCode = hashCode * 8191 + min_remote_scan_thread_num;

    hashCode = hashCode * 8191 + ((isSetSpillThresholdLowWatermark()) ? 131071 : 524287);
    if (isSetSpillThresholdLowWatermark())
      hashCode = hashCode * 8191 + spill_threshold_low_watermark;

    hashCode = hashCode * 8191 + ((isSetSpillThresholdHighWatermark()) ? 131071 : 524287);
    if (isSetSpillThresholdHighWatermark())
      hashCode = hashCode * 8191 + spill_threshold_high_watermark;

    return hashCode;
  }

  @Override
  public int compareTo(TWorkloadGroupInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetName(), other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVersion(), other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCpuShare(), other.isSetCpuShare());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpuShare()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpu_share, other.cpu_share);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCpuHardLimit(), other.isSetCpuHardLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpuHardLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpu_hard_limit, other.cpu_hard_limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMemLimit(), other.isSetMemLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mem_limit, other.mem_limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnableMemoryOvercommit(), other.isSetEnableMemoryOvercommit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnableMemoryOvercommit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_memory_overcommit, other.enable_memory_overcommit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnableCpuHardLimit(), other.isSetEnableCpuHardLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnableCpuHardLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_cpu_hard_limit, other.enable_cpu_hard_limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetScanThreadNum(), other.isSetScanThreadNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScanThreadNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scan_thread_num, other.scan_thread_num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMaxRemoteScanThreadNum(), other.isSetMaxRemoteScanThreadNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxRemoteScanThreadNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_remote_scan_thread_num, other.max_remote_scan_thread_num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMinRemoteScanThreadNum(), other.isSetMinRemoteScanThreadNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinRemoteScanThreadNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.min_remote_scan_thread_num, other.min_remote_scan_thread_num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSpillThresholdLowWatermark(), other.isSetSpillThresholdLowWatermark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpillThresholdLowWatermark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spill_threshold_low_watermark, other.spill_threshold_low_watermark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSpillThresholdHighWatermark(), other.isSetSpillThresholdHighWatermark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpillThresholdHighWatermark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spill_threshold_high_watermark, other.spill_threshold_high_watermark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TWorkloadGroupInfo(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetVersion()) {
      if (!first) sb.append(", ");
      sb.append("version:");
      sb.append(this.version);
      first = false;
    }
    if (isSetCpuShare()) {
      if (!first) sb.append(", ");
      sb.append("cpu_share:");
      sb.append(this.cpu_share);
      first = false;
    }
    if (isSetCpuHardLimit()) {
      if (!first) sb.append(", ");
      sb.append("cpu_hard_limit:");
      sb.append(this.cpu_hard_limit);
      first = false;
    }
    if (isSetMemLimit()) {
      if (!first) sb.append(", ");
      sb.append("mem_limit:");
      if (this.mem_limit == null) {
        sb.append("null");
      } else {
        sb.append(this.mem_limit);
      }
      first = false;
    }
    if (isSetEnableMemoryOvercommit()) {
      if (!first) sb.append(", ");
      sb.append("enable_memory_overcommit:");
      sb.append(this.enable_memory_overcommit);
      first = false;
    }
    if (isSetEnableCpuHardLimit()) {
      if (!first) sb.append(", ");
      sb.append("enable_cpu_hard_limit:");
      sb.append(this.enable_cpu_hard_limit);
      first = false;
    }
    if (isSetScanThreadNum()) {
      if (!first) sb.append(", ");
      sb.append("scan_thread_num:");
      sb.append(this.scan_thread_num);
      first = false;
    }
    if (isSetMaxRemoteScanThreadNum()) {
      if (!first) sb.append(", ");
      sb.append("max_remote_scan_thread_num:");
      sb.append(this.max_remote_scan_thread_num);
      first = false;
    }
    if (isSetMinRemoteScanThreadNum()) {
      if (!first) sb.append(", ");
      sb.append("min_remote_scan_thread_num:");
      sb.append(this.min_remote_scan_thread_num);
      first = false;
    }
    if (isSetSpillThresholdLowWatermark()) {
      if (!first) sb.append(", ");
      sb.append("spill_threshold_low_watermark:");
      sb.append(this.spill_threshold_low_watermark);
      first = false;
    }
    if (isSetSpillThresholdHighWatermark()) {
      if (!first) sb.append(", ");
      sb.append("spill_threshold_high_watermark:");
      sb.append(this.spill_threshold_high_watermark);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TWorkloadGroupInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TWorkloadGroupInfoStandardScheme getScheme() {
      return new TWorkloadGroupInfoStandardScheme();
    }
  }

  private static class TWorkloadGroupInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<TWorkloadGroupInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TWorkloadGroupInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.version = iprot.readI64();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CPU_SHARE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cpu_share = iprot.readI64();
              struct.setCpuShareIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CPU_HARD_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cpu_hard_limit = iprot.readI32();
              struct.setCpuHardLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MEM_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mem_limit = iprot.readString();
              struct.setMemLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ENABLE_MEMORY_OVERCOMMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_memory_overcommit = iprot.readBool();
              struct.setEnableMemoryOvercommitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ENABLE_CPU_HARD_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_cpu_hard_limit = iprot.readBool();
              struct.setEnableCpuHardLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SCAN_THREAD_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.scan_thread_num = iprot.readI32();
              struct.setScanThreadNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MAX_REMOTE_SCAN_THREAD_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.max_remote_scan_thread_num = iprot.readI32();
              struct.setMaxRemoteScanThreadNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MIN_REMOTE_SCAN_THREAD_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.min_remote_scan_thread_num = iprot.readI32();
              struct.setMinRemoteScanThreadNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SPILL_THRESHOLD_LOW_WATERMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.spill_threshold_low_watermark = iprot.readI32();
              struct.setSpillThresholdLowWatermarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SPILL_THRESHOLD_HIGH_WATERMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.spill_threshold_high_watermark = iprot.readI32();
              struct.setSpillThresholdHighWatermarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TWorkloadGroupInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetVersion()) {
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeI64(struct.version);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCpuShare()) {
        oprot.writeFieldBegin(CPU_SHARE_FIELD_DESC);
        oprot.writeI64(struct.cpu_share);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCpuHardLimit()) {
        oprot.writeFieldBegin(CPU_HARD_LIMIT_FIELD_DESC);
        oprot.writeI32(struct.cpu_hard_limit);
        oprot.writeFieldEnd();
      }
      if (struct.mem_limit != null) {
        if (struct.isSetMemLimit()) {
          oprot.writeFieldBegin(MEM_LIMIT_FIELD_DESC);
          oprot.writeString(struct.mem_limit);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetEnableMemoryOvercommit()) {
        oprot.writeFieldBegin(ENABLE_MEMORY_OVERCOMMIT_FIELD_DESC);
        oprot.writeBool(struct.enable_memory_overcommit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEnableCpuHardLimit()) {
        oprot.writeFieldBegin(ENABLE_CPU_HARD_LIMIT_FIELD_DESC);
        oprot.writeBool(struct.enable_cpu_hard_limit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetScanThreadNum()) {
        oprot.writeFieldBegin(SCAN_THREAD_NUM_FIELD_DESC);
        oprot.writeI32(struct.scan_thread_num);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMaxRemoteScanThreadNum()) {
        oprot.writeFieldBegin(MAX_REMOTE_SCAN_THREAD_NUM_FIELD_DESC);
        oprot.writeI32(struct.max_remote_scan_thread_num);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMinRemoteScanThreadNum()) {
        oprot.writeFieldBegin(MIN_REMOTE_SCAN_THREAD_NUM_FIELD_DESC);
        oprot.writeI32(struct.min_remote_scan_thread_num);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSpillThresholdLowWatermark()) {
        oprot.writeFieldBegin(SPILL_THRESHOLD_LOW_WATERMARK_FIELD_DESC);
        oprot.writeI32(struct.spill_threshold_low_watermark);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSpillThresholdHighWatermark()) {
        oprot.writeFieldBegin(SPILL_THRESHOLD_HIGH_WATERMARK_FIELD_DESC);
        oprot.writeI32(struct.spill_threshold_high_watermark);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TWorkloadGroupInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TWorkloadGroupInfoTupleScheme getScheme() {
      return new TWorkloadGroupInfoTupleScheme();
    }
  }

  private static class TWorkloadGroupInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<TWorkloadGroupInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TWorkloadGroupInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetVersion()) {
        optionals.set(2);
      }
      if (struct.isSetCpuShare()) {
        optionals.set(3);
      }
      if (struct.isSetCpuHardLimit()) {
        optionals.set(4);
      }
      if (struct.isSetMemLimit()) {
        optionals.set(5);
      }
      if (struct.isSetEnableMemoryOvercommit()) {
        optionals.set(6);
      }
      if (struct.isSetEnableCpuHardLimit()) {
        optionals.set(7);
      }
      if (struct.isSetScanThreadNum()) {
        optionals.set(8);
      }
      if (struct.isSetMaxRemoteScanThreadNum()) {
        optionals.set(9);
      }
      if (struct.isSetMinRemoteScanThreadNum()) {
        optionals.set(10);
      }
      if (struct.isSetSpillThresholdLowWatermark()) {
        optionals.set(11);
      }
      if (struct.isSetSpillThresholdHighWatermark()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetVersion()) {
        oprot.writeI64(struct.version);
      }
      if (struct.isSetCpuShare()) {
        oprot.writeI64(struct.cpu_share);
      }
      if (struct.isSetCpuHardLimit()) {
        oprot.writeI32(struct.cpu_hard_limit);
      }
      if (struct.isSetMemLimit()) {
        oprot.writeString(struct.mem_limit);
      }
      if (struct.isSetEnableMemoryOvercommit()) {
        oprot.writeBool(struct.enable_memory_overcommit);
      }
      if (struct.isSetEnableCpuHardLimit()) {
        oprot.writeBool(struct.enable_cpu_hard_limit);
      }
      if (struct.isSetScanThreadNum()) {
        oprot.writeI32(struct.scan_thread_num);
      }
      if (struct.isSetMaxRemoteScanThreadNum()) {
        oprot.writeI32(struct.max_remote_scan_thread_num);
      }
      if (struct.isSetMinRemoteScanThreadNum()) {
        oprot.writeI32(struct.min_remote_scan_thread_num);
      }
      if (struct.isSetSpillThresholdLowWatermark()) {
        oprot.writeI32(struct.spill_threshold_low_watermark);
      }
      if (struct.isSetSpillThresholdHighWatermark()) {
        oprot.writeI32(struct.spill_threshold_high_watermark);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TWorkloadGroupInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.version = iprot.readI64();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.cpu_share = iprot.readI64();
        struct.setCpuShareIsSet(true);
      }
      if (incoming.get(4)) {
        struct.cpu_hard_limit = iprot.readI32();
        struct.setCpuHardLimitIsSet(true);
      }
      if (incoming.get(5)) {
        struct.mem_limit = iprot.readString();
        struct.setMemLimitIsSet(true);
      }
      if (incoming.get(6)) {
        struct.enable_memory_overcommit = iprot.readBool();
        struct.setEnableMemoryOvercommitIsSet(true);
      }
      if (incoming.get(7)) {
        struct.enable_cpu_hard_limit = iprot.readBool();
        struct.setEnableCpuHardLimitIsSet(true);
      }
      if (incoming.get(8)) {
        struct.scan_thread_num = iprot.readI32();
        struct.setScanThreadNumIsSet(true);
      }
      if (incoming.get(9)) {
        struct.max_remote_scan_thread_num = iprot.readI32();
        struct.setMaxRemoteScanThreadNumIsSet(true);
      }
      if (incoming.get(10)) {
        struct.min_remote_scan_thread_num = iprot.readI32();
        struct.setMinRemoteScanThreadNumIsSet(true);
      }
      if (incoming.get(11)) {
        struct.spill_threshold_low_watermark = iprot.readI32();
        struct.setSpillThresholdLowWatermarkIsSet(true);
      }
      if (incoming.get(12)) {
        struct.spill_threshold_high_watermark = iprot.readI32();
        struct.setSpillThresholdHighWatermarkIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

