/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.doris.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2024-05-20")
public class TShowUserResult implements org.apache.thrift.TBase<TShowUserResult, TShowUserResult._Fields>, java.io.Serializable, Cloneable, Comparable<TShowUserResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TShowUserResult");

  private static final org.apache.thrift.protocol.TField USERINFO_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("userinfo_list", org.apache.thrift.protocol.TType.LIST, (short)1);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TShowUserResultStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TShowUserResultTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.String>> userinfo_list; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USERINFO_LIST((short)1, "userinfo_list");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USERINFO_LIST
          return USERINFO_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.USERINFO_LIST};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USERINFO_LIST, new org.apache.thrift.meta_data.FieldMetaData("userinfo_list", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TShowUserResult.class, metaDataMap);
  }

  public TShowUserResult() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TShowUserResult(TShowUserResult other) {
    if (other.isSetUserinfoList()) {
      java.util.List<java.util.List<java.lang.String>> __this__userinfo_list = new java.util.ArrayList<java.util.List<java.lang.String>>(other.userinfo_list.size());
      for (java.util.List<java.lang.String> other_element : other.userinfo_list) {
        java.util.List<java.lang.String> __this__userinfo_list_copy = new java.util.ArrayList<java.lang.String>(other_element);
        __this__userinfo_list.add(__this__userinfo_list_copy);
      }
      this.userinfo_list = __this__userinfo_list;
    }
  }

  public TShowUserResult deepCopy() {
    return new TShowUserResult(this);
  }

  @Override
  public void clear() {
    this.userinfo_list = null;
  }

  public int getUserinfoListSize() {
    return (this.userinfo_list == null) ? 0 : this.userinfo_list.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.util.List<java.lang.String>> getUserinfoListIterator() {
    return (this.userinfo_list == null) ? null : this.userinfo_list.iterator();
  }

  public void addToUserinfoList(java.util.List<java.lang.String> elem) {
    if (this.userinfo_list == null) {
      this.userinfo_list = new java.util.ArrayList<java.util.List<java.lang.String>>();
    }
    this.userinfo_list.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.util.List<java.lang.String>> getUserinfoList() {
    return this.userinfo_list;
  }

  public TShowUserResult setUserinfoList(@org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.String>> userinfo_list) {
    this.userinfo_list = userinfo_list;
    return this;
  }

  public void unsetUserinfoList() {
    this.userinfo_list = null;
  }

  /** Returns true if field userinfo_list is set (has been assigned a value) and false otherwise */
  public boolean isSetUserinfoList() {
    return this.userinfo_list != null;
  }

  public void setUserinfoListIsSet(boolean value) {
    if (!value) {
      this.userinfo_list = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case USERINFO_LIST:
      if (value == null) {
        unsetUserinfoList();
      } else {
        setUserinfoList((java.util.List<java.util.List<java.lang.String>>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case USERINFO_LIST:
      return getUserinfoList();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case USERINFO_LIST:
      return isSetUserinfoList();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TShowUserResult)
      return this.equals((TShowUserResult)that);
    return false;
  }

  public boolean equals(TShowUserResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_userinfo_list = true && this.isSetUserinfoList();
    boolean that_present_userinfo_list = true && that.isSetUserinfoList();
    if (this_present_userinfo_list || that_present_userinfo_list) {
      if (!(this_present_userinfo_list && that_present_userinfo_list))
        return false;
      if (!this.userinfo_list.equals(that.userinfo_list))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetUserinfoList()) ? 131071 : 524287);
    if (isSetUserinfoList())
      hashCode = hashCode * 8191 + userinfo_list.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TShowUserResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetUserinfoList(), other.isSetUserinfoList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserinfoList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userinfo_list, other.userinfo_list);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TShowUserResult(");
    boolean first = true;

    if (isSetUserinfoList()) {
      sb.append("userinfo_list:");
      if (this.userinfo_list == null) {
        sb.append("null");
      } else {
        sb.append(this.userinfo_list);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TShowUserResultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TShowUserResultStandardScheme getScheme() {
      return new TShowUserResultStandardScheme();
    }
  }

  private static class TShowUserResultStandardScheme extends org.apache.thrift.scheme.StandardScheme<TShowUserResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TShowUserResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USERINFO_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list744 = iprot.readListBegin();
                struct.userinfo_list = new java.util.ArrayList<java.util.List<java.lang.String>>(_list744.size);
                @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> _elem745;
                for (int _i746 = 0; _i746 < _list744.size; ++_i746)
                {
                  {
                    org.apache.thrift.protocol.TList _list747 = iprot.readListBegin();
                    _elem745 = new java.util.ArrayList<java.lang.String>(_list747.size);
                    @org.apache.thrift.annotation.Nullable java.lang.String _elem748;
                    for (int _i749 = 0; _i749 < _list747.size; ++_i749)
                    {
                      _elem748 = iprot.readString();
                      _elem745.add(_elem748);
                    }
                    iprot.readListEnd();
                  }
                  struct.userinfo_list.add(_elem745);
                }
                iprot.readListEnd();
              }
              struct.setUserinfoListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TShowUserResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.userinfo_list != null) {
        if (struct.isSetUserinfoList()) {
          oprot.writeFieldBegin(USERINFO_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.userinfo_list.size()));
            for (java.util.List<java.lang.String> _iter750 : struct.userinfo_list)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter750.size()));
                for (java.lang.String _iter751 : _iter750)
                {
                  oprot.writeString(_iter751);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TShowUserResultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TShowUserResultTupleScheme getScheme() {
      return new TShowUserResultTupleScheme();
    }
  }

  private static class TShowUserResultTupleScheme extends org.apache.thrift.scheme.TupleScheme<TShowUserResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TShowUserResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetUserinfoList()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetUserinfoList()) {
        {
          oprot.writeI32(struct.userinfo_list.size());
          for (java.util.List<java.lang.String> _iter752 : struct.userinfo_list)
          {
            {
              oprot.writeI32(_iter752.size());
              for (java.lang.String _iter753 : _iter752)
              {
                oprot.writeString(_iter753);
              }
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TShowUserResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list754 = iprot.readListBegin(org.apache.thrift.protocol.TType.LIST);
          struct.userinfo_list = new java.util.ArrayList<java.util.List<java.lang.String>>(_list754.size);
          @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> _elem755;
          for (int _i756 = 0; _i756 < _list754.size; ++_i756)
          {
            {
              org.apache.thrift.protocol.TList _list757 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
              _elem755 = new java.util.ArrayList<java.lang.String>(_list757.size);
              @org.apache.thrift.annotation.Nullable java.lang.String _elem758;
              for (int _i759 = 0; _i759 < _list757.size; ++_i759)
              {
                _elem758 = iprot.readString();
                _elem755.add(_elem758);
              }
            }
            struct.userinfo_list.add(_elem755);
          }
        }
        struct.setUserinfoListIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

