// Generated from org/apache/doris/nereids/PLParser.g4 by ANTLR 4.9.3
package org.apache.doris.nereids;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class PLParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.9.3", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		ACTION=1, ALLOCATE=2, ANSI_NULLS=3, ANSI_PADDING=4, ASSOCIATE=5, AVG=6, 
		BATCHSIZE=7, BINARY_DOUBLE=8, BINARY_FLOAT=9, BINARY_INTEGER=10, BIT=11, 
		BODY=12, BREAK=13, BYTE=14, CALLER=15, CASCADE=16, CASESPECIFIC=17, CLIENT=18, 
		CLOSE=19, CLUSTERED=20, CMP=21, COLLECTION=22, COMPRESS=23, CONCAT=24, 
		CONDITION=25, CONSTANT=26, CONTINUE=27, COUNT_BIG=28, CREATOR=29, CS=30, 
		CURRENT_SCHEMA=31, CURSOR=32, DAYS=33, DEC=34, DECLARE=35, DEFINED=36, 
		DEFINER=37, DEFINITION=38, DELIMITED=39, DELIMITER=40, DIAGNOSTICS=41, 
		DIR=42, DIRECTORY=43, DISTRIBUTE=44, ELSEIF=45, ELSIF=46, ESCAPED=47, 
		EXEC=48, EXCEPTION=49, EXCLUSIVE=50, EXIT=51, FALLBACK=52, FETCH=53, FILES=54, 
		FOUND=55, GET=56, GO=57, HANDLER=58, HOST=59, IDENTITY=60, INCLUDE=61, 
		INITRANS=62, INOUT=63, INT2=64, INT4=65, INT8=66, INVOKER=67, ISOPEN=68, 
		ITEMS=69, KEEP=70, LANGUAGE=71, LEAVE=72, LOCATOR=73, LOCATORS=74, LOCKS=75, 
		LOG=76, LOGGED=77, LOGGING=78, LOOP=79, MATCHED=80, MAXTRANS=81, MESSAGE_TEXT=82, 
		MICROSECOND=83, MICROSECONDS=84, MULTISET=85, NCHAR=86, NEW=87, NVARCHAR=88, 
		NOCOUNT=89, NOCOMPRESS=90, NOLOGGING=91, NONE=92, NOTFOUND=93, NUMERIC=94, 
		NUMBER=95, OBJECT=96, OFF=97, OUT=98, OWNER=99, PACKAGE=100, PCTFREE=101, 
		PCTUSED=102, PLS_INTEGER=103, PRECISION=104, PRESERVE=105, PRINT=106, 
		QUALIFY=107, QUERY_BAND=108, QUIT=109, QUOTED_IDENTIFIER=110, RAISE=111, 
		RESIGNAL=112, RESTRICT=113, RESULT=114, RESULT_SET_LOCATOR=115, RETURN=116, 
		REVERSE=117, ROWTYPE=118, ROW_COUNT=119, RR=120, RS=121, PWD=122, SECONDS=123, 
		SECURITY=124, SEGMENT=125, SEL=126, SESSIONS=127, SHARE=128, SIGNAL=129, 
		SIMPLE_DOUBLE=130, SIMPLE_FLOAT=131, SIMPLE_INTEGER=132, SMALLDATETIME=133, 
		SQL=134, SQLEXCEPTION=135, SQLINSERT=136, SQLSTATE=137, SQLWARNING=138, 
		STATISTICS=139, STEP=140, STORED=141, SUBDIR=142, SUBSTRING=143, SUMMARY=144, 
		SYS_REFCURSOR=145, TABLESPACE=146, TEXTIMAGE_ON=147, TITLE=148, TOP=149, 
		UR=150, VAR=151, VARCHAR2=152, VARYING=153, VOLATILE=154, WHILE=155, WITHOUT=156, 
		XACT_ABORT=157, XML=158, YES=159, ACTIVITY_COUNT=160, CUME_DIST=161, DENSE_RANK=162, 
		FIRST_VALUE=163, LAG=164, LAST_VALUE=165, LEAD=166, MAX_PART_STRING=167, 
		MIN_PART_STRING=168, MAX_PART_INT=169, MIN_PART_INT=170, MAX_PART_DATE=171, 
		MIN_PART_DATE=172, PART_COUNT=173, PART_LOC=174, RANK=175, ROW_NUMBER=176, 
		STDEV=177, SYSDATE=178, VARIANCE=179, DOT2=180, SEMICOLON=181, LEFT_PAREN=182, 
		RIGHT_PAREN=183, COMMA=184, DOT=185, LEFT_BRACKET=186, RIGHT_BRACKET=187, 
		LEFT_BRACE=188, RIGHT_BRACE=189, ACCOUNT_LOCK=190, ACCOUNT_UNLOCK=191, 
		ADD=192, ADDDATE=193, ADMIN=194, AFTER=195, AGG_STATE=196, AGGREGATE=197, 
		ALIAS=198, ALL=199, ALTER=200, ANALYZE=201, ANALYZED=202, AND=203, ANTI=204, 
		APPEND=205, ARRAY=206, ARRAY_RANGE=207, AS=208, ASC=209, AT=210, AUTHORS=211, 
		AUTO=212, AUTO_INCREMENT=213, BACKEND=214, BACKENDS=215, BACKUP=216, BEGIN=217, 
		BELONG=218, BETWEEN=219, BIGINT=220, BIN=221, BINARY=222, BINLOG=223, 
		BITAND=224, BITMAP=225, BITMAP_UNION=226, BITOR=227, BITXOR=228, BLOB=229, 
		BOOLEAN=230, BRIEF=231, BROKER=232, BUCKETS=233, BUILD=234, BUILTIN=235, 
		BULK=236, BY=237, CACHED=238, CALL=239, CANCEL=240, CASE=241, CAST=242, 
		CATALOG=243, CATALOGS=244, CHAIN=245, CHAR=246, CHARSET=247, CHECK=248, 
		CLEAN=249, CLUSTER=250, CLUSTERS=251, COLLATE=252, COLLATION=253, COLLECT=254, 
		COLUMN=255, COLUMNS=256, COMMENT=257, COMMIT=258, COMMITTED=259, COMPACT=260, 
		COMPLETE=261, CONFIG=262, CONNECTION=263, CONNECTION_ID=264, CONSISTENT=265, 
		CONSTRAINT=266, CONSTRAINTS=267, CONVERT=268, COPY=269, COUNT=270, CREATE=271, 
		CREATION=272, CRON=273, CROSS=274, CUBE=275, CURRENT=276, CURRENT_CATALOG=277, 
		CURRENT_DATE=278, CURRENT_TIME=279, CURRENT_TIMESTAMP=280, CURRENT_USER=281, 
		DATA=282, DATABASE=283, DATABASES=284, DATE=285, DATE_ADD=286, DATE_CEIL=287, 
		DATE_DIFF=288, DATE_FLOOR=289, DATE_SUB=290, DATEADD=291, DATEDIFF=292, 
		DATETIME=293, DATETIMEV2=294, DATEV2=295, DATETIMEV1=296, DATEV1=297, 
		DAY=298, DAYS_ADD=299, DAYS_SUB=300, DECIMAL=301, DECIMALV2=302, DECIMALV3=303, 
		DECOMMISSION=304, DEFAULT=305, DEFERRED=306, DELETE=307, DEMAND=308, DESC=309, 
		DESCRIBE=310, DIAGNOSE=311, DISK=312, DISTINCT=313, DISTINCTPC=314, DISTINCTPCSA=315, 
		DISTRIBUTED=316, DISTRIBUTION=317, DIV=318, DO=319, DORIS_INTERNAL_TABLE_ID=320, 
		DOUBLE=321, DROP=322, DROPP=323, DUAL=324, DUPLICATE=325, DYNAMIC=326, 
		ELSE=327, ENABLE=328, ENCRYPTKEY=329, ENCRYPTKEYS=330, END=331, ENDS=332, 
		ENGINE=333, ENGINES=334, ENTER=335, ERRORS=336, EVENTS=337, EVERY=338, 
		EXCEPT=339, EXCLUDE=340, EXECUTE=341, EXISTS=342, EXPIRED=343, EXPLAIN=344, 
		EXPORT=345, EXTENDED=346, EXTERNAL=347, EXTRACT=348, FAILED_LOGIN_ATTEMPTS=349, 
		FALSE=350, FAST=351, FEATURE=352, FIELDS=353, FILE=354, FILTER=355, FIRST=356, 
		FLOAT=357, FOLLOWER=358, FOLLOWING=359, FOR=360, FOREIGN=361, FORCE=362, 
		FORMAT=363, FREE=364, FROM=365, FRONTEND=366, FRONTENDS=367, FULL=368, 
		FUNCTION=369, FUNCTIONS=370, GENERIC=371, GLOBAL=372, GRANT=373, GRANTS=374, 
		GRAPH=375, GROUP=376, GROUPING=377, GROUPS=378, HASH=379, HAVING=380, 
		HDFS=381, HELP=382, HISTOGRAM=383, HLL=384, HLL_UNION=385, HOSTNAME=386, 
		HOUR=387, HUB=388, IDENTIFIED=389, IF=390, IGNORE=391, IMMEDIATE=392, 
		IN=393, INCREMENTAL=394, INDEX=395, INDEXES=396, INFILE=397, INNER=398, 
		INSERT=399, INSTALL=400, INT=401, INTEGER=402, INTERMEDIATE=403, INTERSECT=404, 
		INTERVAL=405, INTO=406, INVERTED=407, IPV4=408, IPV6=409, IS=410, IS_NOT_NULL_PRED=411, 
		IS_NULL_PRED=412, ISNULL=413, ISOLATION=414, JOB=415, JOBS=416, JOIN=417, 
		JSON=418, JSONB=419, KEY=420, KEYS=421, KILL=422, LABEL=423, LARGEINT=424, 
		LAST=425, LATERAL=426, LDAP=427, LDAP_ADMIN_PASSWORD=428, LEFT=429, LESS=430, 
		LEVEL=431, LIKE=432, LIMIT=433, LINES=434, LINK=435, LIST=436, LOAD=437, 
		LOCAL=438, LOCALTIME=439, LOCALTIMESTAMP=440, LOCATION=441, LOCK=442, 
		LOGICAL=443, LOW_PRIORITY=444, MANUAL=445, MAP=446, MATCH=447, MATCH_ALL=448, 
		MATCH_ANY=449, MATCH_ELEMENT_EQ=450, MATCH_ELEMENT_GE=451, MATCH_ELEMENT_GT=452, 
		MATCH_ELEMENT_LE=453, MATCH_ELEMENT_LT=454, MATCH_PHRASE=455, MATCH_PHRASE_EDGE=456, 
		MATCH_PHRASE_PREFIX=457, MATCH_REGEXP=458, MATERIALIZED=459, MAX=460, 
		MAXVALUE=461, MEMO=462, MERGE=463, MIGRATE=464, MIGRATIONS=465, MIN=466, 
		MINUS=467, MINUTE=468, MODIFY=469, MONTH=470, MTMV=471, NAME=472, NAMES=473, 
		NATURAL=474, NEGATIVE=475, NEVER=476, NEXT=477, NGRAM_BF=478, NO=479, 
		NON_NULLABLE=480, NOT=481, NULL=482, NULLS=483, OBSERVER=484, OF=485, 
		OFFSET=486, ON=487, ONLY=488, OPEN=489, OPTIMIZED=490, OR=491, ORDER=492, 
		OUTER=493, OUTFILE=494, OVER=495, OVERWRITE=496, PARAMETER=497, PARSED=498, 
		PARTITION=499, PARTITIONS=500, PASSWORD=501, PASSWORD_EXPIRE=502, PASSWORD_HISTORY=503, 
		PASSWORD_LOCK_TIME=504, PASSWORD_REUSE=505, PATH=506, PAUSE=507, PERCENT=508, 
		PERIOD=509, PERMISSIVE=510, PHYSICAL=511, PLAN=512, PROCESS=513, PLUGIN=514, 
		PLUGINS=515, POLICY=516, PRECEDING=517, PREPARE=518, PRIMARY=519, PROC=520, 
		PROCEDURE=521, PROCESSLIST=522, PROFILE=523, PROPERTIES=524, PROPERTY=525, 
		QUANTILE_STATE=526, QUANTILE_UNION=527, QUERY=528, QUOTA=529, RANDOM=530, 
		RANGE=531, READ=532, REAL=533, REBALANCE=534, RECOVER=535, RECYCLE=536, 
		REFRESH=537, REFERENCES=538, REGEXP=539, RELEASE=540, RENAME=541, REPAIR=542, 
		REPEATABLE=543, REPLACE=544, REPLACE_IF_NOT_NULL=545, REPLICA=546, REPOSITORIES=547, 
		REPOSITORY=548, RESOURCE=549, RESOURCES=550, RESTORE=551, RESTRICTIVE=552, 
		RESUME=553, RETURNS=554, REVOKE=555, REWRITTEN=556, RIGHT=557, RLIKE=558, 
		ROLE=559, ROLES=560, ROLLBACK=561, ROLLUP=562, ROUTINE=563, ROW=564, ROWS=565, 
		S3=566, SAMPLE=567, SCHEDULE=568, SCHEDULER=569, SCHEMA=570, SCHEMAS=571, 
		SECOND=572, SELECT=573, SEMI=574, SEQUENCE=575, SERIALIZABLE=576, SESSION=577, 
		SET=578, SETS=579, SHAPE=580, SHOW=581, SIGNED=582, SKEW=583, SMALLINT=584, 
		SNAPSHOT=585, SONAME=586, SPLIT=587, SQL_BLOCK_RULE=588, START=589, STARTS=590, 
		STATS=591, STATUS=592, STOP=593, STORAGE=594, STREAM=595, STREAMING=596, 
		STRING=597, STRUCT=598, SUBDATE=599, SUM=600, SUPERUSER=601, SWITCH=602, 
		SYNC=603, SYSTEM=604, TABLE=605, TABLES=606, TABLESAMPLE=607, TABLET=608, 
		TABLETS=609, TASK=610, TASKS=611, TEMPORARY=612, TERMINATED=613, TEXT=614, 
		THAN=615, THEN=616, TIME=617, TIMESTAMP=618, TIMESTAMPADD=619, TIMESTAMPDIFF=620, 
		TINYINT=621, TO=622, TRANSACTION=623, TRASH=624, TREE=625, TRIGGERS=626, 
		TRIM=627, TRUE=628, TRUNCATE=629, TYPE=630, TYPECAST=631, TYPES=632, UNBOUNDED=633, 
		UNCOMMITTED=634, UNINSTALL=635, UNION=636, UNIQUE=637, UNLOCK=638, UNSIGNED=639, 
		UPDATE=640, USE=641, USER=642, USING=643, VALUE=644, VALUES=645, VARCHAR=646, 
		VARIABLES=647, VARIANT=648, VERBOSE=649, VERSION=650, VIEW=651, WARNINGS=652, 
		WEEK=653, WHEN=654, WHERE=655, WHITELIST=656, WITH=657, WORK=658, WORKLOAD=659, 
		WRITE=660, YEAR=661, EQ=662, NSEQ=663, NEQ=664, LT=665, LTE=666, GT=667, 
		GTE=668, PLUS=669, SUBTRACT=670, ASTERISK=671, SLASH=672, MOD=673, TILDE=674, 
		AMPERSAND=675, LOGICALAND=676, LOGICALNOT=677, PIPE=678, DOUBLEPIPES=679, 
		HAT=680, COLON=681, ARROW=682, HINT_START=683, HINT_END=684, ATSIGN=685, 
		DOUBLEATSIGN=686, STRING_LITERAL=687, LEADING_STRING=688, BIGINT_LITERAL=689, 
		SMALLINT_LITERAL=690, TINYINT_LITERAL=691, INTEGER_VALUE=692, EXPONENT_VALUE=693, 
		DECIMAL_VALUE=694, BIGDECIMAL_LITERAL=695, IDENTIFIER=696, BACKQUOTED_IDENTIFIER=697, 
		SIMPLE_COMMENT=698, BRACKETED_COMMENT=699, FROM_DUAL=700, WS=701, UNRECOGNIZED=702, 
		VAULT=703;
	public static final int
		RULE_program = 0, RULE_block = 1, RULE_begin_end_block = 2, RULE_single_block_stmt = 3, 
		RULE_block_end = 4, RULE_procedure_block = 5, RULE_doris_statement = 6, 
		RULE_stmt = 7, RULE_semicolon_stmt = 8, RULE_exception_block = 9, RULE_exception_block_item = 10, 
		RULE_null_stmt = 11, RULE_expr_stmt = 12, RULE_assignment_stmt = 13, RULE_assignment_stmt_item = 14, 
		RULE_assignment_stmt_single_item = 15, RULE_assignment_stmt_collection_item = 16, 
		RULE_assignment_stmt_multiple_item = 17, RULE_assignment_stmt_select_item = 18, 
		RULE_allocate_cursor_stmt = 19, RULE_associate_locator_stmt = 20, RULE_break_stmt = 21, 
		RULE_call_stmt = 22, RULE_declare_stmt = 23, RULE_declare_block = 24, 
		RULE_declare_block_inplace = 25, RULE_declare_stmt_item = 26, RULE_declare_var_item = 27, 
		RULE_declare_condition_item = 28, RULE_declare_cursor_item = 29, RULE_cursor_with_return = 30, 
		RULE_cursor_without_return = 31, RULE_declare_handler_item = 32, RULE_dtype = 33, 
		RULE_dtype_len = 34, RULE_dtype_attr = 35, RULE_dtype_default = 36, RULE_create_function_stmt = 37, 
		RULE_create_function_return = 38, RULE_create_package_stmt = 39, RULE_package_spec = 40, 
		RULE_package_spec_item = 41, RULE_create_package_body_stmt = 42, RULE_package_body = 43, 
		RULE_package_body_item = 44, RULE_create_procedure_stmt = 45, RULE_drop_procedure_stmt = 46, 
		RULE_show_procedure_stmt = 47, RULE_show_create_procedure_stmt = 48, RULE_create_routine_params = 49, 
		RULE_create_routine_param_item = 50, RULE_create_routine_options = 51, 
		RULE_create_routine_option = 52, RULE_exec_stmt = 53, RULE_if_stmt = 54, 
		RULE_if_plsql_stmt = 55, RULE_if_tsql_stmt = 56, RULE_if_bteq_stmt = 57, 
		RULE_elseif_block = 58, RULE_else_block = 59, RULE_include_stmt = 60, 
		RULE_exit_stmt = 61, RULE_get_diag_stmt = 62, RULE_get_diag_stmt_item = 63, 
		RULE_get_diag_stmt_exception_item = 64, RULE_get_diag_stmt_rowcount_item = 65, 
		RULE_leave_stmt = 66, RULE_map_object_stmt = 67, RULE_open_stmt = 68, 
		RULE_fetch_stmt = 69, RULE_fetch_limit = 70, RULE_close_stmt = 71, RULE_print_stmt = 72, 
		RULE_quit_stmt = 73, RULE_raise_stmt = 74, RULE_resignal_stmt = 75, RULE_return_stmt = 76, 
		RULE_set_session_option = 77, RULE_set_doris_session_option = 78, RULE_set_current_schema_option = 79, 
		RULE_set_mssql_session_option = 80, RULE_set_teradata_session_option = 81, 
		RULE_signal_stmt = 82, RULE_values_into_stmt = 83, RULE_while_stmt = 84, 
		RULE_unconditional_loop_stmt = 85, RULE_for_cursor_stmt = 86, RULE_for_range_stmt = 87, 
		RULE_label_stmt = 88, RULE_using_clause = 89, RULE_bool_expr = 90, RULE_bool_expr_atom = 91, 
		RULE_bool_expr_unary = 92, RULE_bool_expr_binary = 93, RULE_bool_expr_logical_operator = 94, 
		RULE_bool_expr_binary_operator = 95, RULE_expr = 96, RULE_expr_atom = 97, 
		RULE_expr_interval = 98, RULE_interval_item = 99, RULE_expr_concat = 100, 
		RULE_expr_concat_item = 101, RULE_expr_case = 102, RULE_expr_case_simple = 103, 
		RULE_expr_case_searched = 104, RULE_expr_cursor_attribute = 105, RULE_expr_agg_window_func = 106, 
		RULE_expr_func_all_distinct = 107, RULE_order_by_clause = 108, RULE_expr_func_over_clause = 109, 
		RULE_expr_func_partition_by_clause = 110, RULE_expr_spec_func = 111, RULE_expr_func = 112, 
		RULE_expr_dot = 113, RULE_expr_dot_method_call = 114, RULE_expr_dot_property_access = 115, 
		RULE_expr_func_params = 116, RULE_func_param = 117, RULE_host_pl = 118, 
		RULE_host_cmd = 119, RULE_host_stmt = 120, RULE_file_name = 121, RULE_date_literal = 122, 
		RULE_timestamp_literal = 123, RULE_ident_pl = 124, RULE_qident = 125, 
		RULE_string = 126, RULE_int_number = 127, RULE_dec_number = 128, RULE_bool_literal = 129, 
		RULE_null_const = 130, RULE_non_reserved_words = 131, RULE_multiStatements = 132, 
		RULE_singleStatement = 133, RULE_statement = 134, RULE_statementBase = 135, 
		RULE_unsupportedStatement = 136, RULE_variable = 137, RULE_transactionAccessMode = 138, 
		RULE_isolationLevel = 139, RULE_constraint = 140, RULE_partitionSpec = 141, 
		RULE_partitionTable = 142, RULE_identityOrFunctionList = 143, RULE_identityOrFunction = 144, 
		RULE_dataDesc = 145, RULE_buildMode = 146, RULE_refreshTrigger = 147, 
		RULE_refreshSchedule = 148, RULE_refreshMethod = 149, RULE_identifierOrStringLiteral = 150, 
		RULE_identifierOrText = 151, RULE_userIdentify = 152, RULE_explain = 153, 
		RULE_planType = 154, RULE_mergeType = 155, RULE_preFilterClause = 156, 
		RULE_deleteOnClause = 157, RULE_sequenceColClause = 158, RULE_colFromPath = 159, 
		RULE_colMappingList = 160, RULE_mappingExpr = 161, RULE_withRemoteStorageSystem = 162, 
		RULE_resourceDesc = 163, RULE_mysqlDataDesc = 164, RULE_skipLines = 165, 
		RULE_outFileClause = 166, RULE_query = 167, RULE_queryTerm = 168, RULE_setQuantifier = 169, 
		RULE_queryPrimary = 170, RULE_querySpecification = 171, RULE_cte = 172, 
		RULE_aliasQuery = 173, RULE_columnAliases = 174, RULE_selectClause = 175, 
		RULE_selectColumnClause = 176, RULE_whereClause = 177, RULE_fromClause = 178, 
		RULE_intoClause = 179, RULE_bulkCollectClause = 180, RULE_tableRow = 181, 
		RULE_relations = 182, RULE_relation = 183, RULE_joinRelation = 184, RULE_distributeType = 185, 
		RULE_relationHint = 186, RULE_aggClause = 187, RULE_groupingElement = 188, 
		RULE_groupingSet = 189, RULE_havingClause = 190, RULE_selectHint = 191, 
		RULE_hintStatement = 192, RULE_hintAssignment = 193, RULE_updateAssignment = 194, 
		RULE_updateAssignmentSeq = 195, RULE_lateralView = 196, RULE_queryOrganization = 197, 
		RULE_sortClause = 198, RULE_sortItem = 199, RULE_limitClause = 200, RULE_partitionClause = 201, 
		RULE_joinType = 202, RULE_joinCriteria = 203, RULE_identifierList = 204, 
		RULE_identifierSeq = 205, RULE_optScanParams = 206, RULE_relationPrimary = 207, 
		RULE_materializedViewName = 208, RULE_propertyClause = 209, RULE_propertyItemList = 210, 
		RULE_propertyItem = 211, RULE_propertyKey = 212, RULE_propertyValue = 213, 
		RULE_tableAlias = 214, RULE_multipartIdentifier = 215, RULE_simpleColumnDefs = 216, 
		RULE_simpleColumnDef = 217, RULE_columnDefs = 218, RULE_columnDef = 219, 
		RULE_indexDefs = 220, RULE_indexDef = 221, RULE_partitionsDef = 222, RULE_partitionDef = 223, 
		RULE_lessThanPartitionDef = 224, RULE_fixedPartitionDef = 225, RULE_stepPartitionDef = 226, 
		RULE_inPartitionDef = 227, RULE_constantSeq = 228, RULE_partitionValueDef = 229, 
		RULE_rollupDefs = 230, RULE_rollupDef = 231, RULE_aggTypeDef = 232, RULE_tabletList = 233, 
		RULE_inlineTable = 234, RULE_namedExpression = 235, RULE_namedExpressionSeq = 236, 
		RULE_expression = 237, RULE_lambdaExpression = 238, RULE_booleanExpression = 239, 
		RULE_rowConstructor = 240, RULE_rowConstructorItem = 241, RULE_predicate = 242, 
		RULE_valueExpression = 243, RULE_datetimeUnit = 244, RULE_primaryExpression = 245, 
		RULE_functionCallExpression = 246, RULE_functionIdentifier = 247, RULE_functionNameIdentifier = 248, 
		RULE_windowSpec = 249, RULE_windowFrame = 250, RULE_frameUnits = 251, 
		RULE_frameBoundary = 252, RULE_qualifiedName = 253, RULE_specifiedPartition = 254, 
		RULE_constant = 255, RULE_comparisonOperator = 256, RULE_booleanValue = 257, 
		RULE_whenClause = 258, RULE_interval = 259, RULE_unitIdentifier = 260, 
		RULE_dataTypeWithNullable = 261, RULE_dataType = 262, RULE_primitiveColType = 263, 
		RULE_complexColTypeList = 264, RULE_complexColType = 265, RULE_commentSpec = 266, 
		RULE_sample = 267, RULE_sampleMethod = 268, RULE_errorCapturingIdentifier = 269, 
		RULE_errorCapturingIdentifierExtra = 270, RULE_identifier = 271, RULE_strictIdentifier = 272, 
		RULE_quotedIdentifier = 273, RULE_number = 274, RULE_nonReserved = 275;
	private static String[] makeRuleNames() {
		return new String[] {
			"program", "block", "begin_end_block", "single_block_stmt", "block_end", 
			"procedure_block", "doris_statement", "stmt", "semicolon_stmt", "exception_block", 
			"exception_block_item", "null_stmt", "expr_stmt", "assignment_stmt", 
			"assignment_stmt_item", "assignment_stmt_single_item", "assignment_stmt_collection_item", 
			"assignment_stmt_multiple_item", "assignment_stmt_select_item", "allocate_cursor_stmt", 
			"associate_locator_stmt", "break_stmt", "call_stmt", "declare_stmt", 
			"declare_block", "declare_block_inplace", "declare_stmt_item", "declare_var_item", 
			"declare_condition_item", "declare_cursor_item", "cursor_with_return", 
			"cursor_without_return", "declare_handler_item", "dtype", "dtype_len", 
			"dtype_attr", "dtype_default", "create_function_stmt", "create_function_return", 
			"create_package_stmt", "package_spec", "package_spec_item", "create_package_body_stmt", 
			"package_body", "package_body_item", "create_procedure_stmt", "drop_procedure_stmt", 
			"show_procedure_stmt", "show_create_procedure_stmt", "create_routine_params", 
			"create_routine_param_item", "create_routine_options", "create_routine_option", 
			"exec_stmt", "if_stmt", "if_plsql_stmt", "if_tsql_stmt", "if_bteq_stmt", 
			"elseif_block", "else_block", "include_stmt", "exit_stmt", "get_diag_stmt", 
			"get_diag_stmt_item", "get_diag_stmt_exception_item", "get_diag_stmt_rowcount_item", 
			"leave_stmt", "map_object_stmt", "open_stmt", "fetch_stmt", "fetch_limit", 
			"close_stmt", "print_stmt", "quit_stmt", "raise_stmt", "resignal_stmt", 
			"return_stmt", "set_session_option", "set_doris_session_option", "set_current_schema_option", 
			"set_mssql_session_option", "set_teradata_session_option", "signal_stmt", 
			"values_into_stmt", "while_stmt", "unconditional_loop_stmt", "for_cursor_stmt", 
			"for_range_stmt", "label_stmt", "using_clause", "bool_expr", "bool_expr_atom", 
			"bool_expr_unary", "bool_expr_binary", "bool_expr_logical_operator", 
			"bool_expr_binary_operator", "expr", "expr_atom", "expr_interval", "interval_item", 
			"expr_concat", "expr_concat_item", "expr_case", "expr_case_simple", "expr_case_searched", 
			"expr_cursor_attribute", "expr_agg_window_func", "expr_func_all_distinct", 
			"order_by_clause", "expr_func_over_clause", "expr_func_partition_by_clause", 
			"expr_spec_func", "expr_func", "expr_dot", "expr_dot_method_call", "expr_dot_property_access", 
			"expr_func_params", "func_param", "host_pl", "host_cmd", "host_stmt", 
			"file_name", "date_literal", "timestamp_literal", "ident_pl", "qident", 
			"string", "int_number", "dec_number", "bool_literal", "null_const", "non_reserved_words", 
			"multiStatements", "singleStatement", "statement", "statementBase", "unsupportedStatement", 
			"variable", "transactionAccessMode", "isolationLevel", "constraint", 
			"partitionSpec", "partitionTable", "identityOrFunctionList", "identityOrFunction", 
			"dataDesc", "buildMode", "refreshTrigger", "refreshSchedule", "refreshMethod", 
			"identifierOrStringLiteral", "identifierOrText", "userIdentify", "explain", 
			"planType", "mergeType", "preFilterClause", "deleteOnClause", "sequenceColClause", 
			"colFromPath", "colMappingList", "mappingExpr", "withRemoteStorageSystem", 
			"resourceDesc", "mysqlDataDesc", "skipLines", "outFileClause", "query", 
			"queryTerm", "setQuantifier", "queryPrimary", "querySpecification", "cte", 
			"aliasQuery", "columnAliases", "selectClause", "selectColumnClause", 
			"whereClause", "fromClause", "intoClause", "bulkCollectClause", "tableRow", 
			"relations", "relation", "joinRelation", "distributeType", "relationHint", 
			"aggClause", "groupingElement", "groupingSet", "havingClause", "selectHint", 
			"hintStatement", "hintAssignment", "updateAssignment", "updateAssignmentSeq", 
			"lateralView", "queryOrganization", "sortClause", "sortItem", "limitClause", 
			"partitionClause", "joinType", "joinCriteria", "identifierList", "identifierSeq", 
			"optScanParams", "relationPrimary", "materializedViewName", "propertyClause", 
			"propertyItemList", "propertyItem", "propertyKey", "propertyValue", "tableAlias", 
			"multipartIdentifier", "simpleColumnDefs", "simpleColumnDef", "columnDefs", 
			"columnDef", "indexDefs", "indexDef", "partitionsDef", "partitionDef", 
			"lessThanPartitionDef", "fixedPartitionDef", "stepPartitionDef", "inPartitionDef", 
			"constantSeq", "partitionValueDef", "rollupDefs", "rollupDef", "aggTypeDef", 
			"tabletList", "inlineTable", "namedExpression", "namedExpressionSeq", 
			"expression", "lambdaExpression", "booleanExpression", "rowConstructor", 
			"rowConstructorItem", "predicate", "valueExpression", "datetimeUnit", 
			"primaryExpression", "functionCallExpression", "functionIdentifier", 
			"functionNameIdentifier", "windowSpec", "windowFrame", "frameUnits", 
			"frameBoundary", "qualifiedName", "specifiedPartition", "constant", "comparisonOperator", 
			"booleanValue", "whenClause", "interval", "unitIdentifier", "dataTypeWithNullable", 
			"dataType", "primitiveColType", "complexColTypeList", "complexColType", 
			"commentSpec", "sample", "sampleMethod", "errorCapturingIdentifier", 
			"errorCapturingIdentifierExtra", "identifier", "strictIdentifier", "quotedIdentifier", 
			"number", "nonReserved"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'ACTION'", "'ALLOCATE'", "'ANSI_NULLS'", "'ANSI_PADDING'", "'ASSOCIATE'", 
			"'AVG'", "'BATCHSIZE'", "'BINARY_DOUBLE'", "'BINARY_FLOAT'", "'BINARY_INTEGER'", 
			"'BIT'", "'BODY'", "'BREAK'", "'BYTE'", "'CALLER'", "'CASCADE'", "'CASESPECIFIC'", 
			"'CLIENT'", "'CLOSE'", "'CLUSTERED'", "'CMP'", "'COLLECTION'", "'COMPRESS'", 
			"'CONCAT'", "'CONDITION'", "'CONSTANT'", "'CONTINUE'", "'COUNT_BIG'", 
			"'CREATOR'", "'CS'", "'CURRENT_SCHEMA'", "'CURSOR'", "'DAYS'", "'DEC'", 
			"'DECLARE'", "'DEFINED'", "'DEFINER'", "'DEFINITION'", "'DELIMITED'", 
			"'DELIMITER'", "'DIAGNOSTICS'", "'DIR'", "'DIRECTORY'", "'DISTRIBUTE'", 
			"'ELSEIF'", "'ELSIF'", "'ESCAPED'", "'EXEC'", "'EXCEPTION'", "'EXCLUSIVE'", 
			"'EXIT'", "'FALLBACK'", "'FETCH'", "'FILES'", "'FOUND'", "'GET'", "'GO'", 
			"'HANDLER'", "'HOST'", "'IDENTITY'", "'INCLUDE'", "'INITRANS'", "'INOUT'", 
			"'INT2'", "'INT4'", "'INT8'", "'INVOKER'", "'ISOPEN'", "'ITEMS'", "'KEEP'", 
			"'LANGUAGE'", "'LEAVE'", "'LOCATOR'", "'LOCATORS'", "'LOCKS'", "'LOG'", 
			"'LOGGED'", "'LOGGING'", "'LOOP'", "'MATCHED'", "'MAXTRANS'", "'MESSAGE_TEXT'", 
			"'MICROSECOND'", "'MICROSECONDS'", "'MULTISET'", "'NCHAR'", "'NEW'", 
			"'NVARCHAR'", "'NOCOUNT'", "'NOCOMPRESS'", "'NOLOGGING'", "'NONE'", "'NOTFOUND'", 
			"'NUMERIC'", "'NUMBER'", "'OBJECT'", "'OFF'", "'OUT'", "'OWNER'", "'PACKAGE'", 
			"'PCTFREE'", "'PCTUSED'", "'PLS_INTEGER'", "'PRECISION'", "'PRESERVE'", 
			"'PRINT'", "'QUALIFY'", "'QUERY_BAND'", "'QUIT'", "'QUOTED_IDENTIFIER'", 
			"'RAISE'", "'RESIGNAL'", "'RESTRICT'", "'RESULT'", "'RESULT_SET_LOCATOR'", 
			"'RETURN'", "'REVERSE'", "'ROWTYPE'", "'ROW_COUNT'", "'RR'", "'RS'", 
			"'PWD'", "'SECONDS'", "'SECURITY'", "'SEGMENT'", "'SEL'", "'SESSIONS'", 
			"'SHARE'", "'SIGNAL'", "'SIMPLE_DOUBLE'", "'SIMPLE_FLOAT'", "'SIMPLE_INTEGER'", 
			"'SMALLDATETIME'", "'SQL'", "'SQLEXCEPTION'", "'SQLINSERT'", "'SQLSTATE'", 
			"'SQLWARNING'", "'STATISTICS'", "'STEP'", "'STORED'", "'SUBDIR'", "'SUBSTRING'", 
			"'SUMMARY'", "'SYS_REFCURSOR'", "'TABLESPACE'", "'TEXTIMAGE_ON'", "'TITLE'", 
			"'TOP'", "'UR'", "'VAR'", "'VARCHAR2'", "'VARYING'", "'VOLATILE'", "'WHILE'", 
			"'WITHOUT'", "'XACT_ABORT'", "'XML'", "'YES'", "'ACTIVITY_COUNT'", "'CUME_DIST'", 
			"'DENSE_RANK'", "'FIRST_VALUE'", "'LAG'", "'LAST_VALUE'", "'LEAD'", "'MAX_PART_STRING'", 
			"'MIN_PART_STRING'", "'MAX_PART_INT'", "'MIN_PART_INT'", "'MAX_PART_DATE'", 
			"'MIN_PART_DATE'", "'PART_COUNT'", "'PART_LOC'", "'RANK'", "'ROW_NUMBER'", 
			"'STDEV'", "'SYSDATE'", "'VARIANCE'", "'..'", "';'", "'('", "')'", "','", 
			"'.'", "'['", "']'", "'{'", "'}'", "'ACCOUNT_LOCK'", "'ACCOUNT_UNLOCK'", 
			"'ADD'", "'ADDDATE'", "'ADMIN'", "'AFTER'", "'AGG_STATE'", "'AGGREGATE'", 
			"'ALIAS'", "'ALL'", "'ALTER'", "'ANALYZE'", "'ANALYZED'", "'AND'", "'ANTI'", 
			"'APPEND'", "'ARRAY'", "'ARRAY_RANGE'", "'AS'", "'ASC'", "'AT'", "'AUTHORS'", 
			"'AUTO'", "'AUTO_INCREMENT'", "'BACKEND'", "'BACKENDS'", "'BACKUP'", 
			"'BEGIN'", "'BELONG'", "'BETWEEN'", "'BIGINT'", "'BIN'", "'BINARY'", 
			"'BINLOG'", "'BITAND'", "'BITMAP'", "'BITMAP_UNION'", "'BITOR'", "'BITXOR'", 
			"'BLOB'", "'BOOLEAN'", "'BRIEF'", "'BROKER'", "'BUCKETS'", "'BUILD'", 
			"'BUILTIN'", "'BULK'", "'BY'", "'CACHED'", "'CALL'", "'CANCEL'", "'CASE'", 
			"'CAST'", "'CATALOG'", "'CATALOGS'", "'CHAIN'", null, "'CHARSET'", "'CHECK'", 
			"'CLEAN'", "'CLUSTER'", "'CLUSTERS'", "'COLLATE'", "'COLLATION'", "'COLLECT'", 
			"'COLUMN'", "'COLUMNS'", "'COMMENT'", "'COMMIT'", "'COMMITTED'", "'COMPACT'", 
			"'COMPLETE'", "'CONFIG'", "'CONNECTION'", "'CONNECTION_ID'", "'CONSISTENT'", 
			"'CONSTRAINT'", "'CONSTRAINTS'", "'CONVERT'", "'COPY'", "'COUNT'", "'CREATE'", 
			"'CREATION'", "'CRON'", "'CROSS'", "'CUBE'", "'CURRENT'", "'CURRENT_CATALOG'", 
			"'CURRENT_DATE'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'CURRENT_USER'", 
			"'DATA'", "'DATABASE'", "'DATABASES'", "'DATE'", "'DATE_ADD'", "'DATE_CEIL'", 
			"'DATE_DIFF'", "'DATE_FLOOR'", "'DATE_SUB'", "'DATEADD'", "'DATEDIFF'", 
			"'DATETIME'", "'DATETIMEV2'", "'DATEV2'", "'DATETIMEV1'", "'DATEV1'", 
			"'DAY'", "'DAYS_ADD'", "'DAYS_SUB'", "'DECIMAL'", "'DECIMALV2'", "'DECIMALV3'", 
			"'DECOMMISSION'", "'DEFAULT'", "'DEFERRED'", "'DELETE'", "'DEMAND'", 
			"'DESC'", "'DESCRIBE'", "'DIAGNOSE'", "'DISK'", "'DISTINCT'", "'DISTINCTPC'", 
			"'DISTINCTPCSA'", "'DISTRIBUTED'", "'DISTRIBUTION'", "'DIV'", "'DO'", 
			"'DORIS_INTERNAL_TABLE_ID'", "'DOUBLE'", "'DROP'", "'DROPP'", "'DUAL'", 
			"'DUPLICATE'", "'DYNAMIC'", "'ELSE'", "'ENABLE'", "'ENCRYPTKEY'", "'ENCRYPTKEYS'", 
			"'END'", "'ENDS'", "'ENGINE'", "'ENGINES'", "'ENTER'", "'ERRORS'", "'EVENTS'", 
			"'EVERY'", "'EXCEPT'", "'EXCLUDE'", "'EXECUTE'", "'EXISTS'", "'EXPIRED'", 
			"'EXPLAIN'", "'EXPORT'", "'EXTENDED'", "'EXTERNAL'", "'EXTRACT'", "'FAILED_LOGIN_ATTEMPTS'", 
			"'FALSE'", "'FAST'", "'FEATURE'", "'FIELDS'", "'FILE'", "'FILTER'", "'FIRST'", 
			"'FLOAT'", "'FOLLOWER'", "'FOLLOWING'", "'FOR'", "'FOREIGN'", "'FORCE'", 
			"'FORMAT'", "'FREE'", "'FROM'", "'FRONTEND'", "'FRONTENDS'", "'FULL'", 
			"'FUNCTION'", "'FUNCTIONS'", "'GENERIC'", "'GLOBAL'", "'GRANT'", "'GRANTS'", 
			"'GRAPH'", "'GROUP'", "'GROUPING'", "'GROUPS'", "'HASH'", "'HAVING'", 
			"'HDFS'", "'HELP'", "'HISTOGRAM'", "'HLL'", "'HLL_UNION'", "'HOSTNAME'", 
			"'HOUR'", "'HUB'", "'IDENTIFIED'", "'IF'", "'IGNORE'", "'IMMEDIATE'", 
			"'IN'", "'INCREMENTAL'", "'INDEX'", "'INDEXES'", "'INFILE'", "'INNER'", 
			"'INSERT'", "'INSTALL'", "'INT'", "'INTEGER'", "'INTERMEDIATE'", "'INTERSECT'", 
			"'INTERVAL'", "'INTO'", "'INVERTED'", "'IPV4'", "'IPV6'", "'IS'", "'IS_NOT_NULL_PRED'", 
			"'IS_NULL_PRED'", "'ISNULL'", "'ISOLATION'", "'JOB'", "'JOBS'", "'JOIN'", 
			"'JSON'", "'JSONB'", "'KEY'", "'KEYS'", "'KILL'", "'LABEL'", "'LARGEINT'", 
			"'LAST'", "'LATERAL'", "'LDAP'", "'LDAP_ADMIN_PASSWORD'", "'LEFT'", "'LESS'", 
			"'LEVEL'", "'LIKE'", "'LIMIT'", "'LINES'", "'LINK'", "'LIST'", "'LOAD'", 
			"'LOCAL'", "'LOCALTIME'", "'LOCALTIMESTAMP'", "'LOCATION'", "'LOCK'", 
			"'LOGICAL'", "'LOW_PRIORITY'", "'MANUAL'", "'MAP'", "'MATCH'", "'MATCH_ALL'", 
			"'MATCH_ANY'", "'ELEMENT_EQ'", "'ELEMENT_GE'", "'ELEMENT_GT'", "'ELEMENT_LE'", 
			"'ELEMENT_LT'", "'MATCH_PHRASE'", "'MATCH_PHRASE_EDGE'", "'MATCH_PHRASE_PREFIX'", 
			"'MATCH_REGEXP'", "'MATERIALIZED'", "'MAX'", "'MAXVALUE'", "'MEMO'", 
			"'MERGE'", "'MIGRATE'", "'MIGRATIONS'", "'MIN'", "'MINUS'", "'MINUTE'", 
			"'MODIFY'", "'MONTH'", "'MTMV'", "'NAME'", "'NAMES'", "'NATURAL'", "'NEGATIVE'", 
			"'NEVER'", "'NEXT'", "'NGRAM_BF'", "'NO'", "'NON_NULLABLE'", "'NOT'", 
			"'NULL'", "'NULLS'", "'OBSERVER'", "'OF'", "'OFFSET'", "'ON'", "'ONLY'", 
			"'OPEN'", "'OPTIMIZED'", "'OR'", "'ORDER'", "'OUTER'", "'OUTFILE'", "'OVER'", 
			"'OVERWRITE'", "'PARAMETER'", "'PARSED'", "'PARTITION'", "'PARTITIONS'", 
			"'PASSWORD'", "'PASSWORD_EXPIRE'", "'PASSWORD_HISTORY'", "'PASSWORD_LOCK_TIME'", 
			"'PASSWORD_REUSE'", "'PATH'", "'PAUSE'", "'PERCENT'", "'PERIOD'", "'PERMISSIVE'", 
			"'PHYSICAL'", "'PLAN'", "'PROCESS'", "'PLUGIN'", "'PLUGINS'", "'POLICY'", 
			"'PRECEDING'", "'PREPARE'", "'PRIMARY'", "'PROC'", "'PROCEDURE'", "'PROCESSLIST'", 
			"'PROFILE'", "'PROPERTIES'", "'PROPERTY'", "'QUANTILE_STATE'", "'QUANTILE_UNION'", 
			"'QUERY'", "'QUOTA'", "'RANDOM'", "'RANGE'", "'READ'", "'REAL'", "'REBALANCE'", 
			"'RECOVER'", "'RECYCLE'", "'REFRESH'", "'REFERENCES'", "'REGEXP'", "'RELEASE'", 
			"'RENAME'", "'REPAIR'", "'REPEATABLE'", "'REPLACE'", "'REPLACE_IF_NOT_NULL'", 
			"'REPLICA'", "'REPOSITORIES'", "'REPOSITORY'", "'RESOURCE'", "'RESOURCES'", 
			"'RESTORE'", "'RESTRICTIVE'", "'RESUME'", "'RETURNS'", "'REVOKE'", "'REWRITTEN'", 
			"'RIGHT'", "'RLIKE'", "'ROLE'", "'ROLES'", "'ROLLBACK'", "'ROLLUP'", 
			"'ROUTINE'", "'ROW'", "'ROWS'", "'S3'", "'SAMPLE'", "'SCHEDULE'", "'SCHEDULER'", 
			"'SCHEMA'", "'SCHEMAS'", "'SECOND'", "'SELECT'", "'SEMI'", "'SEQUENCE'", 
			"'SERIALIZABLE'", "'SESSION'", "'SET'", "'SETS'", "'SHAPE'", "'SHOW'", 
			"'SIGNED'", "'SKEW'", "'SMALLINT'", "'SNAPSHOT'", "'SONAME'", "'SPLIT'", 
			"'SQL_BLOCK_RULE'", "'START'", "'STARTS'", "'STATS'", "'STATUS'", "'STOP'", 
			"'STORAGE'", "'STREAM'", "'STREAMING'", "'STRING'", "'STRUCT'", "'SUBDATE'", 
			"'SUM'", "'SUPERUSER'", "'SWITCH'", "'SYNC'", "'SYSTEM'", "'TABLE'", 
			"'TABLES'", "'TABLESAMPLE'", "'TABLET'", "'TABLETS'", "'TASK'", "'TASKS'", 
			"'TEMPORARY'", "'TERMINATED'", "'TEXT'", "'THAN'", "'THEN'", "'TIME'", 
			"'TIMESTAMP'", "'TIMESTAMPADD'", "'TIMESTAMPDIFF'", "'TINYINT'", "'TO'", 
			"'TRANSACTION'", "'TRASH'", "'TREE'", "'TRIGGERS'", "'TRIM'", "'TRUE'", 
			"'TRUNCATE'", "'TYPE'", "'TYPE_CAST'", "'TYPES'", "'UNBOUNDED'", "'UNCOMMITTED'", 
			"'UNINSTALL'", "'UNION'", "'UNIQUE'", "'UNLOCK'", "'UNSIGNED'", "'UPDATE'", 
			"'USE'", "'USER'", "'USING'", "'VALUE'", "'VALUES'", "'VARCHAR'", "'VARIABLES'", 
			"'VARIANT'", "'VERBOSE'", "'VERSION'", "'VIEW'", "'WARNINGS'", "'WEEK'", 
			"'WHEN'", "'WHERE'", "'WHITELIST'", "'WITH'", "'WORK'", "'WORKLOAD'", 
			"'WRITE'", "'YEAR'", null, "'<=>'", null, "'<'", null, "'>'", null, "'+'", 
			"'-'", "'*'", "'/'", "'%'", "'~'", "'&'", "'&&'", "'!'", "'|'", "'||'", 
			"'^'", "':'", "'->'", "'/*+'", "'*/'", "'@'", "'@@'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "ACTION", "ALLOCATE", "ANSI_NULLS", "ANSI_PADDING", "ASSOCIATE", 
			"AVG", "BATCHSIZE", "BINARY_DOUBLE", "BINARY_FLOAT", "BINARY_INTEGER", 
			"BIT", "BODY", "BREAK", "BYTE", "CALLER", "CASCADE", "CASESPECIFIC", 
			"CLIENT", "CLOSE", "CLUSTERED", "CMP", "COLLECTION", "COMPRESS", "CONCAT", 
			"CONDITION", "CONSTANT", "CONTINUE", "COUNT_BIG", "CREATOR", "CS", "CURRENT_SCHEMA", 
			"CURSOR", "DAYS", "DEC", "DECLARE", "DEFINED", "DEFINER", "DEFINITION", 
			"DELIMITED", "DELIMITER", "DIAGNOSTICS", "DIR", "DIRECTORY", "DISTRIBUTE", 
			"ELSEIF", "ELSIF", "ESCAPED", "EXEC", "EXCEPTION", "EXCLUSIVE", "EXIT", 
			"FALLBACK", "FETCH", "FILES", "FOUND", "GET", "GO", "HANDLER", "HOST", 
			"IDENTITY", "INCLUDE", "INITRANS", "INOUT", "INT2", "INT4", "INT8", "INVOKER", 
			"ISOPEN", "ITEMS", "KEEP", "LANGUAGE", "LEAVE", "LOCATOR", "LOCATORS", 
			"LOCKS", "LOG", "LOGGED", "LOGGING", "LOOP", "MATCHED", "MAXTRANS", "MESSAGE_TEXT", 
			"MICROSECOND", "MICROSECONDS", "MULTISET", "NCHAR", "NEW", "NVARCHAR", 
			"NOCOUNT", "NOCOMPRESS", "NOLOGGING", "NONE", "NOTFOUND", "NUMERIC", 
			"NUMBER", "OBJECT", "OFF", "OUT", "OWNER", "PACKAGE", "PCTFREE", "PCTUSED", 
			"PLS_INTEGER", "PRECISION", "PRESERVE", "PRINT", "QUALIFY", "QUERY_BAND", 
			"QUIT", "QUOTED_IDENTIFIER", "RAISE", "RESIGNAL", "RESTRICT", "RESULT", 
			"RESULT_SET_LOCATOR", "RETURN", "REVERSE", "ROWTYPE", "ROW_COUNT", "RR", 
			"RS", "PWD", "SECONDS", "SECURITY", "SEGMENT", "SEL", "SESSIONS", "SHARE", 
			"SIGNAL", "SIMPLE_DOUBLE", "SIMPLE_FLOAT", "SIMPLE_INTEGER", "SMALLDATETIME", 
			"SQL", "SQLEXCEPTION", "SQLINSERT", "SQLSTATE", "SQLWARNING", "STATISTICS", 
			"STEP", "STORED", "SUBDIR", "SUBSTRING", "SUMMARY", "SYS_REFCURSOR", 
			"TABLESPACE", "TEXTIMAGE_ON", "TITLE", "TOP", "UR", "VAR", "VARCHAR2", 
			"VARYING", "VOLATILE", "WHILE", "WITHOUT", "XACT_ABORT", "XML", "YES", 
			"ACTIVITY_COUNT", "CUME_DIST", "DENSE_RANK", "FIRST_VALUE", "LAG", "LAST_VALUE", 
			"LEAD", "MAX_PART_STRING", "MIN_PART_STRING", "MAX_PART_INT", "MIN_PART_INT", 
			"MAX_PART_DATE", "MIN_PART_DATE", "PART_COUNT", "PART_LOC", "RANK", "ROW_NUMBER", 
			"STDEV", "SYSDATE", "VARIANCE", "DOT2", "SEMICOLON", "LEFT_PAREN", "RIGHT_PAREN", 
			"COMMA", "DOT", "LEFT_BRACKET", "RIGHT_BRACKET", "LEFT_BRACE", "RIGHT_BRACE", 
			"ACCOUNT_LOCK", "ACCOUNT_UNLOCK", "ADD", "ADDDATE", "ADMIN", "AFTER", 
			"AGG_STATE", "AGGREGATE", "ALIAS", "ALL", "ALTER", "ANALYZE", "ANALYZED", 
			"AND", "ANTI", "APPEND", "ARRAY", "ARRAY_RANGE", "AS", "ASC", "AT", "AUTHORS", 
			"AUTO", "AUTO_INCREMENT", "BACKEND", "BACKENDS", "BACKUP", "BEGIN", "BELONG", 
			"BETWEEN", "BIGINT", "BIN", "BINARY", "BINLOG", "BITAND", "BITMAP", "BITMAP_UNION", 
			"BITOR", "BITXOR", "BLOB", "BOOLEAN", "BRIEF", "BROKER", "BUCKETS", "BUILD", 
			"BUILTIN", "BULK", "BY", "CACHED", "CALL", "CANCEL", "CASE", "CAST", 
			"CATALOG", "CATALOGS", "CHAIN", "CHAR", "CHARSET", "CHECK", "CLEAN", 
			"CLUSTER", "CLUSTERS", "COLLATE", "COLLATION", "COLLECT", "COLUMN", "COLUMNS", 
			"COMMENT", "COMMIT", "COMMITTED", "COMPACT", "COMPLETE", "CONFIG", "CONNECTION", 
			"CONNECTION_ID", "CONSISTENT", "CONSTRAINT", "CONSTRAINTS", "CONVERT", 
			"COPY", "COUNT", "CREATE", "CREATION", "CRON", "CROSS", "CUBE", "CURRENT", 
			"CURRENT_CATALOG", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
			"CURRENT_USER", "DATA", "DATABASE", "DATABASES", "DATE", "DATE_ADD", 
			"DATE_CEIL", "DATE_DIFF", "DATE_FLOOR", "DATE_SUB", "DATEADD", "DATEDIFF", 
			"DATETIME", "DATETIMEV2", "DATEV2", "DATETIMEV1", "DATEV1", "DAY", "DAYS_ADD", 
			"DAYS_SUB", "DECIMAL", "DECIMALV2", "DECIMALV3", "DECOMMISSION", "DEFAULT", 
			"DEFERRED", "DELETE", "DEMAND", "DESC", "DESCRIBE", "DIAGNOSE", "DISK", 
			"DISTINCT", "DISTINCTPC", "DISTINCTPCSA", "DISTRIBUTED", "DISTRIBUTION", 
			"DIV", "DO", "DORIS_INTERNAL_TABLE_ID", "DOUBLE", "DROP", "DROPP", "DUAL", 
			"DUPLICATE", "DYNAMIC", "ELSE", "ENABLE", "ENCRYPTKEY", "ENCRYPTKEYS", 
			"END", "ENDS", "ENGINE", "ENGINES", "ENTER", "ERRORS", "EVENTS", "EVERY", 
			"EXCEPT", "EXCLUDE", "EXECUTE", "EXISTS", "EXPIRED", "EXPLAIN", "EXPORT", 
			"EXTENDED", "EXTERNAL", "EXTRACT", "FAILED_LOGIN_ATTEMPTS", "FALSE", 
			"FAST", "FEATURE", "FIELDS", "FILE", "FILTER", "FIRST", "FLOAT", "FOLLOWER", 
			"FOLLOWING", "FOR", "FOREIGN", "FORCE", "FORMAT", "FREE", "FROM", "FRONTEND", 
			"FRONTENDS", "FULL", "FUNCTION", "FUNCTIONS", "GENERIC", "GLOBAL", "GRANT", 
			"GRANTS", "GRAPH", "GROUP", "GROUPING", "GROUPS", "HASH", "HAVING", "HDFS", 
			"HELP", "HISTOGRAM", "HLL", "HLL_UNION", "HOSTNAME", "HOUR", "HUB", "IDENTIFIED", 
			"IF", "IGNORE", "IMMEDIATE", "IN", "INCREMENTAL", "INDEX", "INDEXES", 
			"INFILE", "INNER", "INSERT", "INSTALL", "INT", "INTEGER", "INTERMEDIATE", 
			"INTERSECT", "INTERVAL", "INTO", "INVERTED", "IPV4", "IPV6", "IS", "IS_NOT_NULL_PRED", 
			"IS_NULL_PRED", "ISNULL", "ISOLATION", "JOB", "JOBS", "JOIN", "JSON", 
			"JSONB", "KEY", "KEYS", "KILL", "LABEL", "LARGEINT", "LAST", "LATERAL", 
			"LDAP", "LDAP_ADMIN_PASSWORD", "LEFT", "LESS", "LEVEL", "LIKE", "LIMIT", 
			"LINES", "LINK", "LIST", "LOAD", "LOCAL", "LOCALTIME", "LOCALTIMESTAMP", 
			"LOCATION", "LOCK", "LOGICAL", "LOW_PRIORITY", "MANUAL", "MAP", "MATCH", 
			"MATCH_ALL", "MATCH_ANY", "MATCH_ELEMENT_EQ", "MATCH_ELEMENT_GE", "MATCH_ELEMENT_GT", 
			"MATCH_ELEMENT_LE", "MATCH_ELEMENT_LT", "MATCH_PHRASE", "MATCH_PHRASE_EDGE", 
			"MATCH_PHRASE_PREFIX", "MATCH_REGEXP", "MATERIALIZED", "MAX", "MAXVALUE", 
			"MEMO", "MERGE", "MIGRATE", "MIGRATIONS", "MIN", "MINUS", "MINUTE", "MODIFY", 
			"MONTH", "MTMV", "NAME", "NAMES", "NATURAL", "NEGATIVE", "NEVER", "NEXT", 
			"NGRAM_BF", "NO", "NON_NULLABLE", "NOT", "NULL", "NULLS", "OBSERVER", 
			"OF", "OFFSET", "ON", "ONLY", "OPEN", "OPTIMIZED", "OR", "ORDER", "OUTER", 
			"OUTFILE", "OVER", "OVERWRITE", "PARAMETER", "PARSED", "PARTITION", "PARTITIONS", 
			"PASSWORD", "PASSWORD_EXPIRE", "PASSWORD_HISTORY", "PASSWORD_LOCK_TIME", 
			"PASSWORD_REUSE", "PATH", "PAUSE", "PERCENT", "PERIOD", "PERMISSIVE", 
			"PHYSICAL", "PLAN", "PROCESS", "PLUGIN", "PLUGINS", "POLICY", "PRECEDING", 
			"PREPARE", "PRIMARY", "PROC", "PROCEDURE", "PROCESSLIST", "PROFILE", 
			"PROPERTIES", "PROPERTY", "QUANTILE_STATE", "QUANTILE_UNION", "QUERY", 
			"QUOTA", "RANDOM", "RANGE", "READ", "REAL", "REBALANCE", "RECOVER", "RECYCLE", 
			"REFRESH", "REFERENCES", "REGEXP", "RELEASE", "RENAME", "REPAIR", "REPEATABLE", 
			"REPLACE", "REPLACE_IF_NOT_NULL", "REPLICA", "REPOSITORIES", "REPOSITORY", 
			"RESOURCE", "RESOURCES", "RESTORE", "RESTRICTIVE", "RESUME", "RETURNS", 
			"REVOKE", "REWRITTEN", "RIGHT", "RLIKE", "ROLE", "ROLES", "ROLLBACK", 
			"ROLLUP", "ROUTINE", "ROW", "ROWS", "S3", "SAMPLE", "SCHEDULE", "SCHEDULER", 
			"SCHEMA", "SCHEMAS", "SECOND", "SELECT", "SEMI", "SEQUENCE", "SERIALIZABLE", 
			"SESSION", "SET", "SETS", "SHAPE", "SHOW", "SIGNED", "SKEW", "SMALLINT", 
			"SNAPSHOT", "SONAME", "SPLIT", "SQL_BLOCK_RULE", "START", "STARTS", "STATS", 
			"STATUS", "STOP", "STORAGE", "STREAM", "STREAMING", "STRING", "STRUCT", 
			"SUBDATE", "SUM", "SUPERUSER", "SWITCH", "SYNC", "SYSTEM", "TABLE", "TABLES", 
			"TABLESAMPLE", "TABLET", "TABLETS", "TASK", "TASKS", "TEMPORARY", "TERMINATED", 
			"TEXT", "THAN", "THEN", "TIME", "TIMESTAMP", "TIMESTAMPADD", "TIMESTAMPDIFF", 
			"TINYINT", "TO", "TRANSACTION", "TRASH", "TREE", "TRIGGERS", "TRIM", 
			"TRUE", "TRUNCATE", "TYPE", "TYPECAST", "TYPES", "UNBOUNDED", "UNCOMMITTED", 
			"UNINSTALL", "UNION", "UNIQUE", "UNLOCK", "UNSIGNED", "UPDATE", "USE", 
			"USER", "USING", "VALUE", "VALUES", "VARCHAR", "VARIABLES", "VARIANT", 
			"VERBOSE", "VERSION", "VIEW", "WARNINGS", "WEEK", "WHEN", "WHERE", "WHITELIST", 
			"WITH", "WORK", "WORKLOAD", "WRITE", "YEAR", "EQ", "NSEQ", "NEQ", "LT", 
			"LTE", "GT", "GTE", "PLUS", "SUBTRACT", "ASTERISK", "SLASH", "MOD", "TILDE", 
			"AMPERSAND", "LOGICALAND", "LOGICALNOT", "PIPE", "DOUBLEPIPES", "HAT", 
			"COLON", "ARROW", "HINT_START", "HINT_END", "ATSIGN", "DOUBLEATSIGN", 
			"STRING_LITERAL", "LEADING_STRING", "BIGINT_LITERAL", "SMALLINT_LITERAL", 
			"TINYINT_LITERAL", "INTEGER_VALUE", "EXPONENT_VALUE", "DECIMAL_VALUE", 
			"BIGDECIMAL_LITERAL", "IDENTIFIER", "BACKQUOTED_IDENTIFIER", "SIMPLE_COMMENT", 
			"BRACKETED_COMMENT", "FROM_DUAL", "WS", "UNRECOGNIZED", "VAULT"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "PLParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }


	    public boolean doris_legacy_SQL_syntax = true;

	public PLParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	public static class ProgramContext extends ParserRuleContext {
		public BlockContext block() {
			return getRuleContext(BlockContext.class,0);
		}
		public TerminalNode EOF() { return getToken(PLParser.EOF, 0); }
		public ProgramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_program; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterProgram(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitProgram(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitProgram(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProgramContext program() throws RecognitionException {
		ProgramContext _localctx = new ProgramContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_program);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(552);
			block();
			setState(553);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BlockContext extends ParserRuleContext {
		public List<Begin_end_blockContext> begin_end_block() {
			return getRuleContexts(Begin_end_blockContext.class);
		}
		public Begin_end_blockContext begin_end_block(int i) {
			return getRuleContext(Begin_end_blockContext.class,i);
		}
		public List<StmtContext> stmt() {
			return getRuleContexts(StmtContext.class);
		}
		public StmtContext stmt(int i) {
			return getRuleContext(StmtContext.class,i);
		}
		public List<TerminalNode> GO() { return getTokens(PLParser.GO); }
		public TerminalNode GO(int i) {
			return getToken(PLParser.GO, i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterBlock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitBlock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitBlock(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BlockContext block() throws RecognitionException {
		BlockContext _localctx = new BlockContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_block);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(562); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(557);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,0,_ctx) ) {
					case 1:
						{
						setState(555);
						begin_end_block();
						}
						break;
					case 2:
						{
						setState(556);
						stmt();
						}
						break;
					}
					setState(560);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1,_ctx) ) {
					case 1:
						{
						setState(559);
						match(GO);
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(564); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,2,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Begin_end_blockContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(PLParser.BEGIN, 0); }
		public BlockContext block() {
			return getRuleContext(BlockContext.class,0);
		}
		public Block_endContext block_end() {
			return getRuleContext(Block_endContext.class,0);
		}
		public Declare_blockContext declare_block() {
			return getRuleContext(Declare_blockContext.class,0);
		}
		public Exception_blockContext exception_block() {
			return getRuleContext(Exception_blockContext.class,0);
		}
		public Begin_end_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_begin_end_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterBegin_end_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitBegin_end_block(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitBegin_end_block(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Begin_end_blockContext begin_end_block() throws RecognitionException {
		Begin_end_blockContext _localctx = new Begin_end_blockContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_begin_end_block);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(567);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DECLARE) {
				{
				setState(566);
				declare_block();
				}
			}

			setState(569);
			match(BEGIN);
			setState(570);
			block();
			setState(572);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				setState(571);
				exception_block();
				}
				break;
			}
			setState(574);
			block_end();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Single_block_stmtContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(PLParser.BEGIN, 0); }
		public BlockContext block() {
			return getRuleContext(BlockContext.class,0);
		}
		public Block_endContext block_end() {
			return getRuleContext(Block_endContext.class,0);
		}
		public Exception_blockContext exception_block() {
			return getRuleContext(Exception_blockContext.class,0);
		}
		public StmtContext stmt() {
			return getRuleContext(StmtContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(PLParser.SEMICOLON, 0); }
		public Single_block_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_single_block_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterSingle_block_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitSingle_block_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitSingle_block_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Single_block_stmtContext single_block_stmt() throws RecognitionException {
		Single_block_stmtContext _localctx = new Single_block_stmtContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_single_block_stmt);
		try {
			setState(587);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,7,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(576);
				match(BEGIN);
				setState(577);
				block();
				setState(579);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,5,_ctx) ) {
				case 1:
					{
					setState(578);
					exception_block();
					}
					break;
				}
				setState(581);
				block_end();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(583);
				stmt();
				setState(585);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,6,_ctx) ) {
				case 1:
					{
					setState(584);
					match(SEMICOLON);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Block_endContext extends ParserRuleContext {
		public TerminalNode END() { return getToken(PLParser.END, 0); }
		public Block_endContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_block_end; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterBlock_end(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitBlock_end(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitBlock_end(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Block_endContext block_end() throws RecognitionException {
		Block_endContext _localctx = new Block_endContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_block_end);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(589);
			if (!(!_input.LT(2).getText().equalsIgnoreCase("TRANSACTION"))) throw new FailedPredicateException(this, "!_input.LT(2).getText().equalsIgnoreCase(\"TRANSACTION\")");
			setState(590);
			match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_blockContext extends ParserRuleContext {
		public Begin_end_blockContext begin_end_block() {
			return getRuleContext(Begin_end_blockContext.class,0);
		}
		public List<StmtContext> stmt() {
			return getRuleContexts(StmtContext.class);
		}
		public StmtContext stmt(int i) {
			return getRuleContext(StmtContext.class,i);
		}
		public TerminalNode GO() { return getToken(PLParser.GO, 0); }
		public Procedure_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterProcedure_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitProcedure_block(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitProcedure_block(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Procedure_blockContext procedure_block() throws RecognitionException {
		Procedure_blockContext _localctx = new Procedure_blockContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_procedure_block);
		try {
			int _alt;
			setState(601);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,10,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(592);
				begin_end_block();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(594); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(593);
						stmt();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(596); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,8,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(599);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,9,_ctx) ) {
				case 1:
					{
					setState(598);
					match(GO);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Doris_statementContext extends ParserRuleContext {
		public StatementBaseContext statementBase() {
			return getRuleContext(StatementBaseContext.class,0);
		}
		public Doris_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_doris_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterDoris_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitDoris_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitDoris_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Doris_statementContext doris_statement() throws RecognitionException {
		Doris_statementContext _localctx = new Doris_statementContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_doris_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(603);
			statementBase();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StmtContext extends ParserRuleContext {
		public Doris_statementContext doris_statement() {
			return getRuleContext(Doris_statementContext.class,0);
		}
		public Assignment_stmtContext assignment_stmt() {
			return getRuleContext(Assignment_stmtContext.class,0);
		}
		public Allocate_cursor_stmtContext allocate_cursor_stmt() {
			return getRuleContext(Allocate_cursor_stmtContext.class,0);
		}
		public Associate_locator_stmtContext associate_locator_stmt() {
			return getRuleContext(Associate_locator_stmtContext.class,0);
		}
		public Break_stmtContext break_stmt() {
			return getRuleContext(Break_stmtContext.class,0);
		}
		public Call_stmtContext call_stmt() {
			return getRuleContext(Call_stmtContext.class,0);
		}
		public Close_stmtContext close_stmt() {
			return getRuleContext(Close_stmtContext.class,0);
		}
		public Create_function_stmtContext create_function_stmt() {
			return getRuleContext(Create_function_stmtContext.class,0);
		}
		public Create_package_stmtContext create_package_stmt() {
			return getRuleContext(Create_package_stmtContext.class,0);
		}
		public Create_package_body_stmtContext create_package_body_stmt() {
			return getRuleContext(Create_package_body_stmtContext.class,0);
		}
		public Create_procedure_stmtContext create_procedure_stmt() {
			return getRuleContext(Create_procedure_stmtContext.class,0);
		}
		public Declare_stmtContext declare_stmt() {
			return getRuleContext(Declare_stmtContext.class,0);
		}
		public Drop_procedure_stmtContext drop_procedure_stmt() {
			return getRuleContext(Drop_procedure_stmtContext.class,0);
		}
		public Show_procedure_stmtContext show_procedure_stmt() {
			return getRuleContext(Show_procedure_stmtContext.class,0);
		}
		public Show_create_procedure_stmtContext show_create_procedure_stmt() {
			return getRuleContext(Show_create_procedure_stmtContext.class,0);
		}
		public Exec_stmtContext exec_stmt() {
			return getRuleContext(Exec_stmtContext.class,0);
		}
		public Exit_stmtContext exit_stmt() {
			return getRuleContext(Exit_stmtContext.class,0);
		}
		public Fetch_stmtContext fetch_stmt() {
			return getRuleContext(Fetch_stmtContext.class,0);
		}
		public For_cursor_stmtContext for_cursor_stmt() {
			return getRuleContext(For_cursor_stmtContext.class,0);
		}
		public For_range_stmtContext for_range_stmt() {
			return getRuleContext(For_range_stmtContext.class,0);
		}
		public If_stmtContext if_stmt() {
			return getRuleContext(If_stmtContext.class,0);
		}
		public Include_stmtContext include_stmt() {
			return getRuleContext(Include_stmtContext.class,0);
		}
		public Get_diag_stmtContext get_diag_stmt() {
			return getRuleContext(Get_diag_stmtContext.class,0);
		}
		public Leave_stmtContext leave_stmt() {
			return getRuleContext(Leave_stmtContext.class,0);
		}
		public Map_object_stmtContext map_object_stmt() {
			return getRuleContext(Map_object_stmtContext.class,0);
		}
		public Open_stmtContext open_stmt() {
			return getRuleContext(Open_stmtContext.class,0);
		}
		public Print_stmtContext print_stmt() {
			return getRuleContext(Print_stmtContext.class,0);
		}
		public Quit_stmtContext quit_stmt() {
			return getRuleContext(Quit_stmtContext.class,0);
		}
		public Raise_stmtContext raise_stmt() {
			return getRuleContext(Raise_stmtContext.class,0);
		}
		public Resignal_stmtContext resignal_stmt() {
			return getRuleContext(Resignal_stmtContext.class,0);
		}
		public Return_stmtContext return_stmt() {
			return getRuleContext(Return_stmtContext.class,0);
		}
		public Signal_stmtContext signal_stmt() {
			return getRuleContext(Signal_stmtContext.class,0);
		}
		public Values_into_stmtContext values_into_stmt() {
			return getRuleContext(Values_into_stmtContext.class,0);
		}
		public While_stmtContext while_stmt() {
			return getRuleContext(While_stmtContext.class,0);
		}
		public Unconditional_loop_stmtContext unconditional_loop_stmt() {
			return getRuleContext(Unconditional_loop_stmtContext.class,0);
		}
		public Label_stmtContext label_stmt() {
			return getRuleContext(Label_stmtContext.class,0);
		}
		public Host_plContext host_pl() {
			return getRuleContext(Host_plContext.class,0);
		}
		public Null_stmtContext null_stmt() {
			return getRuleContext(Null_stmtContext.class,0);
		}
		public Expr_stmtContext expr_stmt() {
			return getRuleContext(Expr_stmtContext.class,0);
		}
		public Semicolon_stmtContext semicolon_stmt() {
			return getRuleContext(Semicolon_stmtContext.class,0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StmtContext stmt() throws RecognitionException {
		StmtContext _localctx = new StmtContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_stmt);
		try {
			setState(645);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,11,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(605);
				doris_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(606);
				assignment_stmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(607);
				allocate_cursor_stmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(608);
				associate_locator_stmt();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(609);
				break_stmt();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(610);
				call_stmt();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(611);
				close_stmt();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(612);
				create_function_stmt();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(613);
				create_package_stmt();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(614);
				create_package_body_stmt();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(615);
				create_procedure_stmt();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(616);
				declare_stmt();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(617);
				drop_procedure_stmt();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(618);
				show_procedure_stmt();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(619);
				show_create_procedure_stmt();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(620);
				exec_stmt();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(621);
				exit_stmt();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(622);
				fetch_stmt();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(623);
				for_cursor_stmt();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(624);
				for_range_stmt();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(625);
				if_stmt();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(626);
				include_stmt();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(627);
				get_diag_stmt();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(628);
				leave_stmt();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(629);
				map_object_stmt();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(630);
				open_stmt();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(631);
				print_stmt();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(632);
				quit_stmt();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(633);
				raise_stmt();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(634);
				resignal_stmt();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(635);
				return_stmt();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(636);
				signal_stmt();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(637);
				values_into_stmt();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(638);
				while_stmt();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(639);
				unconditional_loop_stmt();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(640);
				label_stmt();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(641);
				host_pl();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(642);
				null_stmt();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(643);
				expr_stmt();
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(644);
				semicolon_stmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Semicolon_stmtContext extends ParserRuleContext {
		public TerminalNode SEMICOLON() { return getToken(PLParser.SEMICOLON, 0); }
		public TerminalNode ATSIGN() { return getToken(PLParser.ATSIGN, 0); }
		public TerminalNode SLASH() { return getToken(PLParser.SLASH, 0); }
		public Semicolon_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_semicolon_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterSemicolon_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitSemicolon_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitSemicolon_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Semicolon_stmtContext semicolon_stmt() throws RecognitionException {
		Semicolon_stmtContext _localctx = new Semicolon_stmtContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_semicolon_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(647);
			_la = _input.LA(1);
			if ( !(_la==SEMICOLON || _la==SLASH || _la==ATSIGN) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exception_blockContext extends ParserRuleContext {
		public TerminalNode EXCEPTION() { return getToken(PLParser.EXCEPTION, 0); }
		public List<Exception_block_itemContext> exception_block_item() {
			return getRuleContexts(Exception_block_itemContext.class);
		}
		public Exception_block_itemContext exception_block_item(int i) {
			return getRuleContext(Exception_block_itemContext.class,i);
		}
		public Exception_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterException_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitException_block(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitException_block(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exception_blockContext exception_block() throws RecognitionException {
		Exception_blockContext _localctx = new Exception_blockContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_exception_block);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(649);
			match(EXCEPTION);
			setState(651); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(650);
					exception_block_item();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(653); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,12,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exception_block_itemContext extends ParserRuleContext {
		public List<TerminalNode> WHEN() { return getTokens(PLParser.WHEN); }
		public TerminalNode WHEN(int i) {
			return getToken(PLParser.WHEN, i);
		}
		public TerminalNode IDENTIFIER() { return getToken(PLParser.IDENTIFIER, 0); }
		public TerminalNode THEN() { return getToken(PLParser.THEN, 0); }
		public BlockContext block() {
			return getRuleContext(BlockContext.class,0);
		}
		public TerminalNode END() { return getToken(PLParser.END, 0); }
		public Exception_block_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_block_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterException_block_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitException_block_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitException_block_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exception_block_itemContext exception_block_item() throws RecognitionException {
		Exception_block_itemContext _localctx = new Exception_block_itemContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_exception_block_item);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(655);
			match(WHEN);
			setState(656);
			match(IDENTIFIER);
			setState(657);
			match(THEN);
			setState(658);
			block();
			setState(659);
			_la = _input.LA(1);
			if ( _la <= 0 || (_la==END || _la==WHEN) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_stmtContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(PLParser.NULL, 0); }
		public Null_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterNull_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitNull_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitNull_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Null_stmtContext null_stmt() throws RecognitionException {
		Null_stmtContext _localctx = new Null_stmtContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_null_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(661);
			match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expr_stmtContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public Expr_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterExpr_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitExpr_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitExpr_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_stmtContext expr_stmt() throws RecognitionException {
		Expr_stmtContext _localctx = new Expr_stmtContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_expr_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(663);
			if (!(!_input.LT(1).getText().equalsIgnoreCase("GO"))) throw new FailedPredicateException(this, "!_input.LT(1).getText().equalsIgnoreCase(\"GO\")");
			setState(664);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assignment_stmtContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PLParser.SET, 0); }
		public Set_session_optionContext set_session_option() {
			return getRuleContext(Set_session_optionContext.class,0);
		}
		public List<Assignment_stmt_itemContext> assignment_stmt_item() {
			return getRuleContexts(Assignment_stmt_itemContext.class);
		}
		public Assignment_stmt_itemContext assignment_stmt_item(int i) {
			return getRuleContext(Assignment_stmt_itemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public Assignment_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignment_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterAssignment_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitAssignment_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitAssignment_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Assignment_stmtContext assignment_stmt() throws RecognitionException {
		Assignment_stmtContext _localctx = new Assignment_stmtContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_assignment_stmt);
		int _la;
		try {
			int _alt;
			setState(679);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,15,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(666);
				match(SET);
				setState(667);
				set_session_option();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(669);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SET) {
					{
					setState(668);
					match(SET);
					}
				}

				setState(671);
				assignment_stmt_item();
				setState(676);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,14,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(672);
						match(COMMA);
						setState(673);
						assignment_stmt_item();
						}
						} 
					}
					setState(678);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,14,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assignment_stmt_itemContext extends ParserRuleContext {
		public Assignment_stmt_single_itemContext assignment_stmt_single_item() {
			return getRuleContext(Assignment_stmt_single_itemContext.class,0);
		}
		public Assignment_stmt_multiple_itemContext assignment_stmt_multiple_item() {
			return getRuleContext(Assignment_stmt_multiple_itemContext.class,0);
		}
		public Assignment_stmt_select_itemContext assignment_stmt_select_item() {
			return getRuleContext(Assignment_stmt_select_itemContext.class,0);
		}
		public Assignment_stmt_collection_itemContext assignment_stmt_collection_item() {
			return getRuleContext(Assignment_stmt_collection_itemContext.class,0);
		}
		public Assignment_stmt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignment_stmt_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterAssignment_stmt_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitAssignment_stmt_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitAssignment_stmt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Assignment_stmt_itemContext assignment_stmt_item() throws RecognitionException {
		Assignment_stmt_itemContext _localctx = new Assignment_stmt_itemContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_assignment_stmt_item);
		try {
			setState(685);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,16,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(681);
				assignment_stmt_single_item();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(682);
				assignment_stmt_multiple_item();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(683);
				assignment_stmt_select_item();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(684);
				assignment_stmt_collection_item();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assignment_stmt_single_itemContext extends ParserRuleContext {
		public Ident_plContext ident_pl() {
			return getRuleContext(Ident_plContext.class,0);
		}
		public TerminalNode EQ() { return getToken(PLParser.EQ, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode COLON() { return getToken(PLParser.COLON, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public Assignment_stmt_single_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignment_stmt_single_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterAssignment_stmt_single_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitAssignment_stmt_single_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitAssignment_stmt_single_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Assignment_stmt_single_itemContext assignment_stmt_single_item() throws RecognitionException {
		Assignment_stmt_single_itemContext _localctx = new Assignment_stmt_single_itemContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_assignment_stmt_single_item);
		int _la;
		try {
			setState(703);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ACTION:
			case ALLOCATE:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ASSOCIATE:
			case AVG:
			case BATCHSIZE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BIT:
			case BODY:
			case BREAK:
			case BYTE:
			case CALLER:
			case CASCADE:
			case CASESPECIFIC:
			case CLIENT:
			case CLOSE:
			case CLUSTERED:
			case CMP:
			case COLLECTION:
			case COMPRESS:
			case CONCAT:
			case CONDITION:
			case CONSTANT:
			case COUNT_BIG:
			case CREATOR:
			case CS:
			case CURSOR:
			case DAYS:
			case DEC:
			case DECLARE:
			case DEFINED:
			case DEFINER:
			case DEFINITION:
			case DELIMITED:
			case DELIMITER:
			case DIAGNOSTICS:
			case DIR:
			case DIRECTORY:
			case DISTRIBUTE:
			case ESCAPED:
			case EXEC:
			case EXCEPTION:
			case EXCLUSIVE:
			case EXIT:
			case FALLBACK:
			case FETCH:
			case FILES:
			case FOUND:
			case GET:
			case GO:
			case HANDLER:
			case HOST:
			case IDENTITY:
			case INCLUDE:
			case INITRANS:
			case INOUT:
			case INT2:
			case INT4:
			case INT8:
			case INVOKER:
			case ISOPEN:
			case ITEMS:
			case KEEP:
			case LANGUAGE:
			case LEAVE:
			case LOCATOR:
			case LOCATORS:
			case LOCKS:
			case LOG:
			case LOGGED:
			case LOGGING:
			case LOOP:
			case MATCHED:
			case MAXTRANS:
			case MESSAGE_TEXT:
			case MICROSECOND:
			case MICROSECONDS:
			case MULTISET:
			case NCHAR:
			case NEW:
			case NVARCHAR:
			case NOCOUNT:
			case NOCOMPRESS:
			case NOLOGGING:
			case NONE:
			case NOTFOUND:
			case NUMERIC:
			case NUMBER:
			case OBJECT:
			case OFF:
			case OUT:
			case OWNER:
			case PACKAGE:
			case PCTFREE:
			case PCTUSED:
			case PRECISION:
			case PRESERVE:
			case PRINT:
			case QUALIFY:
			case QUERY_BAND:
			case QUIT:
			case QUOTED_IDENTIFIER:
			case RAISE:
			case RESIGNAL:
			case RESTRICT:
			case RESULT:
			case RESULT_SET_LOCATOR:
			case RETURN:
			case REVERSE:
			case ROW_COUNT:
			case RR:
			case RS:
			case PWD:
			case SECONDS:
			case SECURITY:
			case SEGMENT:
			case SEL:
			case SESSIONS:
			case SHARE:
			case SIGNAL:
			case SIMPLE_DOUBLE:
			case SIMPLE_FLOAT:
			case SMALLDATETIME:
			case SQL:
			case SQLEXCEPTION:
			case SQLINSERT:
			case SQLSTATE:
			case SQLWARNING:
			case STATISTICS:
			case STEP:
			case STORED:
			case SUBDIR:
			case SUBSTRING:
			case SUMMARY:
			case SYS_REFCURSOR:
			case TABLESPACE:
			case TEXTIMAGE_ON:
			case TITLE:
			case TOP:
			case UR:
			case VAR:
			case VARCHAR2:
			case VARYING:
			case VOLATILE:
			case WHILE:
			case WITHOUT:
			case XML:
			case YES:
			case ACTIVITY_COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case PART_COUNT:
			case PART_LOC:
			case RANK:
			case ROW_NUMBER:
			case STDEV:
			case SYSDATE:
			case VARIANCE:
			case LEFT_BRACE:
			case RIGHT_BRACE:
			case ADDDATE:
			case AFTER:
			case AGG_STATE:
			case AGGREGATE:
			case ALIAS:
			case ANALYZED:
			case ARRAY:
			case ARRAY_RANGE:
			case AT:
			case AUTHORS:
			case AUTO_INCREMENT:
			case BACKENDS:
			case BACKUP:
			case BEGIN:
			case BELONG:
			case BIN:
			case BITAND:
			case BITMAP:
			case BITMAP_UNION:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BOOLEAN:
			case BRIEF:
			case BROKER:
			case BUCKETS:
			case BUILD:
			case BUILTIN:
			case BULK:
			case CACHED:
			case CALL:
			case CATALOG:
			case CATALOGS:
			case CHAIN:
			case CHAR:
			case CHARSET:
			case CHECK:
			case CLUSTER:
			case CLUSTERS:
			case COLLATION:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPACT:
			case COMPLETE:
			case CONFIG:
			case CONNECTION:
			case CONNECTION_ID:
			case CONSISTENT:
			case CONSTRAINTS:
			case CONVERT:
			case COPY:
			case COUNT:
			case CREATION:
			case CRON:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DATA:
			case DATE:
			case DATE_ADD:
			case DATE_CEIL:
			case DATE_DIFF:
			case DATE_FLOOR:
			case DATE_SUB:
			case DATEADD:
			case DATEDIFF:
			case DATETIME:
			case DATETIMEV2:
			case DATEV2:
			case DATETIMEV1:
			case DATEV1:
			case DAY:
			case DAYS_ADD:
			case DAYS_SUB:
			case DECIMAL:
			case DECIMALV2:
			case DECIMALV3:
			case DEFERRED:
			case DEMAND:
			case DIAGNOSE:
			case DISTINCTPC:
			case DISTINCTPCSA:
			case DO:
			case DORIS_INTERNAL_TABLE_ID:
			case DUAL:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTKEY:
			case ENCRYPTKEYS:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERRORS:
			case EVENTS:
			case EVERY:
			case EXCLUDE:
			case EXPIRED:
			case EXTERNAL:
			case FAILED_LOGIN_ATTEMPTS:
			case FAST:
			case FEATURE:
			case FIELDS:
			case FILE:
			case FILTER:
			case FIRST:
			case FORMAT:
			case FREE:
			case FRONTENDS:
			case FUNCTION:
			case GENERIC:
			case GLOBAL:
			case GRAPH:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HDFS:
			case HELP:
			case HISTOGRAM:
			case HLL_UNION:
			case HOSTNAME:
			case HOUR:
			case HUB:
			case IDENTIFIED:
			case IGNORE:
			case IMMEDIATE:
			case INCREMENTAL:
			case INDEXES:
			case INVERTED:
			case IPV4:
			case IPV6:
			case IS_NOT_NULL_PRED:
			case IS_NULL_PRED:
			case ISNULL:
			case ISOLATION:
			case JOB:
			case JOBS:
			case JSON:
			case JSONB:
			case KEYS:
			case LABEL:
			case LAST:
			case LDAP:
			case LDAP_ADMIN_PASSWORD:
			case LESS:
			case LEVEL:
			case LINES:
			case LINK:
			case LOCAL:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case LOCATION:
			case LOCK:
			case LOGICAL:
			case MANUAL:
			case MAP:
			case MATCH_ALL:
			case MATCH_ANY:
			case MATCH_ELEMENT_EQ:
			case MATCH_ELEMENT_GE:
			case MATCH_ELEMENT_GT:
			case MATCH_ELEMENT_LE:
			case MATCH_ELEMENT_LT:
			case MATCH_PHRASE:
			case MATCH_PHRASE_EDGE:
			case MATCH_PHRASE_PREFIX:
			case MATCH_REGEXP:
			case MATERIALIZED:
			case MAX:
			case MEMO:
			case MERGE:
			case MIGRATE:
			case MIGRATIONS:
			case MIN:
			case MINUTE:
			case MODIFY:
			case MONTH:
			case MTMV:
			case NAME:
			case NAMES:
			case NEGATIVE:
			case NEVER:
			case NEXT:
			case NGRAM_BF:
			case NO:
			case NON_NULLABLE:
			case NULLS:
			case OF:
			case OFFSET:
			case ONLY:
			case OPEN:
			case OPTIMIZED:
			case PARAMETER:
			case PARSED:
			case PARTITIONS:
			case PASSWORD:
			case PASSWORD_EXPIRE:
			case PASSWORD_HISTORY:
			case PASSWORD_LOCK_TIME:
			case PASSWORD_REUSE:
			case PATH:
			case PAUSE:
			case PERCENT:
			case PERIOD:
			case PERMISSIVE:
			case PHYSICAL:
			case PLAN:
			case PROCESS:
			case PLUGIN:
			case PLUGINS:
			case POLICY:
			case PROC:
			case PROCESSLIST:
			case PROFILE:
			case PROPERTIES:
			case PROPERTY:
			case QUANTILE_STATE:
			case QUANTILE_UNION:
			case QUERY:
			case QUOTA:
			case RANDOM:
			case RECOVER:
			case RECYCLE:
			case REFRESH:
			case REPEATABLE:
			case REPLACE:
			case REPLACE_IF_NOT_NULL:
			case REPOSITORIES:
			case REPOSITORY:
			case RESOURCE:
			case RESOURCES:
			case RESTORE:
			case RESTRICTIVE:
			case RESUME:
			case RETURNS:
			case REWRITTEN:
			case RLIKE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case S3:
			case SAMPLE:
			case SCHEDULE:
			case SCHEDULER:
			case SCHEMA:
			case SECOND:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION:
			case SHAPE:
			case SKEW:
			case SNAPSHOT:
			case SONAME:
			case SPLIT:
			case START:
			case STARTS:
			case STATS:
			case STATUS:
			case STOP:
			case STORAGE:
			case STREAM:
			case STREAMING:
			case STRING:
			case STRUCT:
			case SUBDATE:
			case SUM:
			case TABLES:
			case TASK:
			case TASKS:
			case TEMPORARY:
			case TEXT:
			case THAN:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TRANSACTION:
			case TREE:
			case TRIGGERS:
			case TRUNCATE:
			case TYPE:
			case TYPES:
			case UNCOMMITTED:
			case UNLOCK:
			case USER:
			case VALUE:
			case VARCHAR:
			case VARIABLES:
			case VARIANT:
			case VERBOSE:
			case VERSION:
			case VIEW:
			case WARNINGS:
			case WEEK:
			case WORK:
			case YEAR:
			case SUBTRACT:
			case IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(687);
				ident_pl();
				setState(689);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLON) {
					{
					setState(688);
					match(COLON);
					}
				}

				setState(691);
				match(EQ);
				setState(692);
				expr(0);
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(694);
				match(LEFT_PAREN);
				setState(695);
				ident_pl();
				setState(696);
				match(RIGHT_PAREN);
				setState(698);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLON) {
					{
					setState(697);
					match(COLON);
					}
				}

				setState(700);
				match(EQ);
				setState(701);
				expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assignment_stmt_collection_itemContext extends ParserRuleContext {
		public Expr_funcContext expr_func() {
			return getRuleContext(Expr_funcContext.class,0);
		}
		public TerminalNode COLON() { return getToken(PLParser.COLON, 0); }
		public TerminalNode EQ() { return getToken(PLParser.EQ, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public Assignment_stmt_collection_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignment_stmt_collection_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterAssignment_stmt_collection_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitAssignment_stmt_collection_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitAssignment_stmt_collection_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Assignment_stmt_collection_itemContext assignment_stmt_collection_item() throws RecognitionException {
		Assignment_stmt_collection_itemContext _localctx = new Assignment_stmt_collection_itemContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_assignment_stmt_collection_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(705);
			expr_func();
			setState(706);
			match(COLON);
			setState(707);
			match(EQ);
			setState(708);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assignment_stmt_multiple_itemContext extends ParserRuleContext {
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PLParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PLParser.LEFT_PAREN, i);
		}
		public List<Ident_plContext> ident_pl() {
			return getRuleContexts(Ident_plContext.class);
		}
		public Ident_plContext ident_pl(int i) {
			return getRuleContext(Ident_plContext.class,i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PLParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PLParser.RIGHT_PAREN, i);
		}
		public TerminalNode EQ() { return getToken(PLParser.EQ, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public TerminalNode COLON() { return getToken(PLParser.COLON, 0); }
		public Assignment_stmt_multiple_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignment_stmt_multiple_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterAssignment_stmt_multiple_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitAssignment_stmt_multiple_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitAssignment_stmt_multiple_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Assignment_stmt_multiple_itemContext assignment_stmt_multiple_item() throws RecognitionException {
		Assignment_stmt_multiple_itemContext _localctx = new Assignment_stmt_multiple_itemContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_assignment_stmt_multiple_item);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(710);
			match(LEFT_PAREN);
			setState(711);
			ident_pl();
			setState(716);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(712);
				match(COMMA);
				setState(713);
				ident_pl();
				}
				}
				setState(718);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(719);
			match(RIGHT_PAREN);
			setState(721);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLON) {
				{
				setState(720);
				match(COLON);
				}
			}

			setState(723);
			match(EQ);
			setState(724);
			match(LEFT_PAREN);
			setState(725);
			expr(0);
			setState(730);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(726);
				match(COMMA);
				setState(727);
				expr(0);
				}
				}
				setState(732);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(733);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assignment_stmt_select_itemContext extends ParserRuleContext {
		public TerminalNode EQ() { return getToken(PLParser.EQ, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PLParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PLParser.LEFT_PAREN, i);
		}
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PLParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PLParser.RIGHT_PAREN, i);
		}
		public List<Ident_plContext> ident_pl() {
			return getRuleContexts(Ident_plContext.class);
		}
		public Ident_plContext ident_pl(int i) {
			return getRuleContext(Ident_plContext.class,i);
		}
		public TerminalNode COLON() { return getToken(PLParser.COLON, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public Assignment_stmt_select_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignment_stmt_select_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterAssignment_stmt_select_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitAssignment_stmt_select_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitAssignment_stmt_select_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Assignment_stmt_select_itemContext assignment_stmt_select_item() throws RecognitionException {
		Assignment_stmt_select_itemContext _localctx = new Assignment_stmt_select_itemContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_assignment_stmt_select_item);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(747);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ACTION:
			case ALLOCATE:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ASSOCIATE:
			case AVG:
			case BATCHSIZE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BIT:
			case BODY:
			case BREAK:
			case BYTE:
			case CALLER:
			case CASCADE:
			case CASESPECIFIC:
			case CLIENT:
			case CLOSE:
			case CLUSTERED:
			case CMP:
			case COLLECTION:
			case COMPRESS:
			case CONCAT:
			case CONDITION:
			case CONSTANT:
			case COUNT_BIG:
			case CREATOR:
			case CS:
			case CURSOR:
			case DAYS:
			case DEC:
			case DECLARE:
			case DEFINED:
			case DEFINER:
			case DEFINITION:
			case DELIMITED:
			case DELIMITER:
			case DIAGNOSTICS:
			case DIR:
			case DIRECTORY:
			case DISTRIBUTE:
			case ESCAPED:
			case EXEC:
			case EXCEPTION:
			case EXCLUSIVE:
			case EXIT:
			case FALLBACK:
			case FETCH:
			case FILES:
			case FOUND:
			case GET:
			case GO:
			case HANDLER:
			case HOST:
			case IDENTITY:
			case INCLUDE:
			case INITRANS:
			case INOUT:
			case INT2:
			case INT4:
			case INT8:
			case INVOKER:
			case ISOPEN:
			case ITEMS:
			case KEEP:
			case LANGUAGE:
			case LEAVE:
			case LOCATOR:
			case LOCATORS:
			case LOCKS:
			case LOG:
			case LOGGED:
			case LOGGING:
			case LOOP:
			case MATCHED:
			case MAXTRANS:
			case MESSAGE_TEXT:
			case MICROSECOND:
			case MICROSECONDS:
			case MULTISET:
			case NCHAR:
			case NEW:
			case NVARCHAR:
			case NOCOUNT:
			case NOCOMPRESS:
			case NOLOGGING:
			case NONE:
			case NOTFOUND:
			case NUMERIC:
			case NUMBER:
			case OBJECT:
			case OFF:
			case OUT:
			case OWNER:
			case PACKAGE:
			case PCTFREE:
			case PCTUSED:
			case PRECISION:
			case PRESERVE:
			case PRINT:
			case QUALIFY:
			case QUERY_BAND:
			case QUIT:
			case QUOTED_IDENTIFIER:
			case RAISE:
			case RESIGNAL:
			case RESTRICT:
			case RESULT:
			case RESULT_SET_LOCATOR:
			case RETURN:
			case REVERSE:
			case ROW_COUNT:
			case RR:
			case RS:
			case PWD:
			case SECONDS:
			case SECURITY:
			case SEGMENT:
			case SEL:
			case SESSIONS:
			case SHARE:
			case SIGNAL:
			case SIMPLE_DOUBLE:
			case SIMPLE_FLOAT:
			case SMALLDATETIME:
			case SQL:
			case SQLEXCEPTION:
			case SQLINSERT:
			case SQLSTATE:
			case SQLWARNING:
			case STATISTICS:
			case STEP:
			case STORED:
			case SUBDIR:
			case SUBSTRING:
			case SUMMARY:
			case SYS_REFCURSOR:
			case TABLESPACE:
			case TEXTIMAGE_ON:
			case TITLE:
			case TOP:
			case UR:
			case VAR:
			case VARCHAR2:
			case VARYING:
			case VOLATILE:
			case WHILE:
			case WITHOUT:
			case XML:
			case YES:
			case ACTIVITY_COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case PART_COUNT:
			case PART_LOC:
			case RANK:
			case ROW_NUMBER:
			case STDEV:
			case SYSDATE:
			case VARIANCE:
			case LEFT_BRACE:
			case RIGHT_BRACE:
			case ADDDATE:
			case AFTER:
			case AGG_STATE:
			case AGGREGATE:
			case ALIAS:
			case ANALYZED:
			case ARRAY:
			case ARRAY_RANGE:
			case AT:
			case AUTHORS:
			case AUTO_INCREMENT:
			case BACKENDS:
			case BACKUP:
			case BEGIN:
			case BELONG:
			case BIN:
			case BITAND:
			case BITMAP:
			case BITMAP_UNION:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BOOLEAN:
			case BRIEF:
			case BROKER:
			case BUCKETS:
			case BUILD:
			case BUILTIN:
			case BULK:
			case CACHED:
			case CALL:
			case CATALOG:
			case CATALOGS:
			case CHAIN:
			case CHAR:
			case CHARSET:
			case CHECK:
			case CLUSTER:
			case CLUSTERS:
			case COLLATION:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPACT:
			case COMPLETE:
			case CONFIG:
			case CONNECTION:
			case CONNECTION_ID:
			case CONSISTENT:
			case CONSTRAINTS:
			case CONVERT:
			case COPY:
			case COUNT:
			case CREATION:
			case CRON:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DATA:
			case DATE:
			case DATE_ADD:
			case DATE_CEIL:
			case DATE_DIFF:
			case DATE_FLOOR:
			case DATE_SUB:
			case DATEADD:
			case DATEDIFF:
			case DATETIME:
			case DATETIMEV2:
			case DATEV2:
			case DATETIMEV1:
			case DATEV1:
			case DAY:
			case DAYS_ADD:
			case DAYS_SUB:
			case DECIMAL:
			case DECIMALV2:
			case DECIMALV3:
			case DEFERRED:
			case DEMAND:
			case DIAGNOSE:
			case DISTINCTPC:
			case DISTINCTPCSA:
			case DO:
			case DORIS_INTERNAL_TABLE_ID:
			case DUAL:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTKEY:
			case ENCRYPTKEYS:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERRORS:
			case EVENTS:
			case EVERY:
			case EXCLUDE:
			case EXPIRED:
			case EXTERNAL:
			case FAILED_LOGIN_ATTEMPTS:
			case FAST:
			case FEATURE:
			case FIELDS:
			case FILE:
			case FILTER:
			case FIRST:
			case FORMAT:
			case FREE:
			case FRONTENDS:
			case FUNCTION:
			case GENERIC:
			case GLOBAL:
			case GRAPH:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HDFS:
			case HELP:
			case HISTOGRAM:
			case HLL_UNION:
			case HOSTNAME:
			case HOUR:
			case HUB:
			case IDENTIFIED:
			case IGNORE:
			case IMMEDIATE:
			case INCREMENTAL:
			case INDEXES:
			case INVERTED:
			case IPV4:
			case IPV6:
			case IS_NOT_NULL_PRED:
			case IS_NULL_PRED:
			case ISNULL:
			case ISOLATION:
			case JOB:
			case JOBS:
			case JSON:
			case JSONB:
			case KEYS:
			case LABEL:
			case LAST:
			case LDAP:
			case LDAP_ADMIN_PASSWORD:
			case LESS:
			case LEVEL:
			case LINES:
			case LINK:
			case LOCAL:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case LOCATION:
			case LOCK:
			case LOGICAL:
			case MANUAL:
			case MAP:
			case MATCH_ALL:
			case MATCH_ANY:
			case MATCH_ELEMENT_EQ:
			case MATCH_ELEMENT_GE:
			case MATCH_ELEMENT_GT:
			case MATCH_ELEMENT_LE:
			case MATCH_ELEMENT_LT:
			case MATCH_PHRASE:
			case MATCH_PHRASE_EDGE:
			case MATCH_PHRASE_PREFIX:
			case MATCH_REGEXP:
			case MATERIALIZED:
			case MAX:
			case MEMO:
			case MERGE:
			case MIGRATE:
			case MIGRATIONS:
			case MIN:
			case MINUTE:
			case MODIFY:
			case MONTH:
			case MTMV:
			case NAME:
			case NAMES:
			case NEGATIVE:
			case NEVER:
			case NEXT:
			case NGRAM_BF:
			case NO:
			case NON_NULLABLE:
			case NULLS:
			case OF:
			case OFFSET:
			case ONLY:
			case OPEN:
			case OPTIMIZED:
			case PARAMETER:
			case PARSED:
			case PARTITIONS:
			case PASSWORD:
			case PASSWORD_EXPIRE:
			case PASSWORD_HISTORY:
			case PASSWORD_LOCK_TIME:
			case PASSWORD_REUSE:
			case PATH:
			case PAUSE:
			case PERCENT:
			case PERIOD:
			case PERMISSIVE:
			case PHYSICAL:
			case PLAN:
			case PROCESS:
			case PLUGIN:
			case PLUGINS:
			case POLICY:
			case PROC:
			case PROCESSLIST:
			case PROFILE:
			case PROPERTIES:
			case PROPERTY:
			case QUANTILE_STATE:
			case QUANTILE_UNION:
			case QUERY:
			case QUOTA:
			case RANDOM:
			case RECOVER:
			case RECYCLE:
			case REFRESH:
			case REPEATABLE:
			case REPLACE:
			case REPLACE_IF_NOT_NULL:
			case REPOSITORIES:
			case REPOSITORY:
			case RESOURCE:
			case RESOURCES:
			case RESTORE:
			case RESTRICTIVE:
			case RESUME:
			case RETURNS:
			case REWRITTEN:
			case RLIKE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case S3:
			case SAMPLE:
			case SCHEDULE:
			case SCHEDULER:
			case SCHEMA:
			case SECOND:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION:
			case SHAPE:
			case SKEW:
			case SNAPSHOT:
			case SONAME:
			case SPLIT:
			case START:
			case STARTS:
			case STATS:
			case STATUS:
			case STOP:
			case STORAGE:
			case STREAM:
			case STREAMING:
			case STRING:
			case STRUCT:
			case SUBDATE:
			case SUM:
			case TABLES:
			case TASK:
			case TASKS:
			case TEMPORARY:
			case TEXT:
			case THAN:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TRANSACTION:
			case TREE:
			case TRIGGERS:
			case TRUNCATE:
			case TYPE:
			case TYPES:
			case UNCOMMITTED:
			case UNLOCK:
			case USER:
			case VALUE:
			case VARCHAR:
			case VARIABLES:
			case VARIANT:
			case VERBOSE:
			case VERSION:
			case VIEW:
			case WARNINGS:
			case WEEK:
			case WORK:
			case YEAR:
			case SUBTRACT:
			case IDENTIFIER:
				{
				setState(735);
				ident_pl();
				}
				break;
			case LEFT_PAREN:
				{
				{
				setState(736);
				match(LEFT_PAREN);
				setState(737);
				ident_pl();
				setState(742);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(738);
					match(COMMA);
					setState(739);
					ident_pl();
					}
					}
					setState(744);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(745);
				match(RIGHT_PAREN);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(750);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLON) {
				{
				setState(749);
				match(COLON);
				}
			}

			setState(752);
			match(EQ);
			setState(753);
			match(LEFT_PAREN);
			setState(754);
			query();
			setState(755);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Allocate_cursor_stmtContext extends ParserRuleContext {
		public TerminalNode ALLOCATE() { return getToken(PLParser.ALLOCATE, 0); }
		public List<Ident_plContext> ident_pl() {
			return getRuleContexts(Ident_plContext.class);
		}
		public Ident_plContext ident_pl(int i) {
			return getRuleContext(Ident_plContext.class,i);
		}
		public TerminalNode CURSOR() { return getToken(PLParser.CURSOR, 0); }
		public TerminalNode FOR() { return getToken(PLParser.FOR, 0); }
		public TerminalNode PROCEDURE() { return getToken(PLParser.PROCEDURE, 0); }
		public TerminalNode RESULT() { return getToken(PLParser.RESULT, 0); }
		public TerminalNode SET() { return getToken(PLParser.SET, 0); }
		public Allocate_cursor_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_allocate_cursor_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterAllocate_cursor_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitAllocate_cursor_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitAllocate_cursor_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Allocate_cursor_stmtContext allocate_cursor_stmt() throws RecognitionException {
		Allocate_cursor_stmtContext _localctx = new Allocate_cursor_stmtContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_allocate_cursor_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(757);
			match(ALLOCATE);
			setState(758);
			ident_pl();
			setState(759);
			match(CURSOR);
			setState(760);
			match(FOR);
			setState(764);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RESULT:
				{
				{
				setState(761);
				match(RESULT);
				setState(762);
				match(SET);
				}
				}
				break;
			case PROCEDURE:
				{
				setState(763);
				match(PROCEDURE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(766);
			ident_pl();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Associate_locator_stmtContext extends ParserRuleContext {
		public TerminalNode ASSOCIATE() { return getToken(PLParser.ASSOCIATE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public List<Ident_plContext> ident_pl() {
			return getRuleContexts(Ident_plContext.class);
		}
		public Ident_plContext ident_pl(int i) {
			return getRuleContext(Ident_plContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public TerminalNode WITH() { return getToken(PLParser.WITH, 0); }
		public TerminalNode PROCEDURE() { return getToken(PLParser.PROCEDURE, 0); }
		public TerminalNode LOCATOR() { return getToken(PLParser.LOCATOR, 0); }
		public TerminalNode LOCATORS() { return getToken(PLParser.LOCATORS, 0); }
		public TerminalNode RESULT() { return getToken(PLParser.RESULT, 0); }
		public TerminalNode SET() { return getToken(PLParser.SET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public Associate_locator_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_associate_locator_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterAssociate_locator_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitAssociate_locator_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitAssociate_locator_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Associate_locator_stmtContext associate_locator_stmt() throws RecognitionException {
		Associate_locator_stmtContext _localctx = new Associate_locator_stmtContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_associate_locator_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(768);
			match(ASSOCIATE);
			setState(771);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RESULT) {
				{
				setState(769);
				match(RESULT);
				setState(770);
				match(SET);
				}
			}

			setState(773);
			_la = _input.LA(1);
			if ( !(_la==LOCATOR || _la==LOCATORS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(774);
			match(LEFT_PAREN);
			setState(775);
			ident_pl();
			setState(780);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(776);
				match(COMMA);
				setState(777);
				ident_pl();
				}
				}
				setState(782);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(783);
			match(RIGHT_PAREN);
			setState(784);
			match(WITH);
			setState(785);
			match(PROCEDURE);
			setState(786);
			ident_pl();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Break_stmtContext extends ParserRuleContext {
		public TerminalNode BREAK() { return getToken(PLParser.BREAK, 0); }
		public Break_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_break_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterBreak_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitBreak_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitBreak_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Break_stmtContext break_stmt() throws RecognitionException {
		Break_stmtContext _localctx = new Break_stmtContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_break_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(788);
			match(BREAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Call_stmtContext extends ParserRuleContext {
		public TerminalNode CALL() { return getToken(PLParser.CALL, 0); }
		public Expr_dotContext expr_dot() {
			return getRuleContext(Expr_dotContext.class,0);
		}
		public Expr_funcContext expr_func() {
			return getRuleContext(Expr_funcContext.class,0);
		}
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public Call_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_call_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterCall_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitCall_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitCall_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Call_stmtContext call_stmt() throws RecognitionException {
		Call_stmtContext _localctx = new Call_stmtContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_call_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(790);
			match(CALL);
			setState(794);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,29,_ctx) ) {
			case 1:
				{
				setState(791);
				expr_dot();
				}
				break;
			case 2:
				{
				setState(792);
				expr_func();
				}
				break;
			case 3:
				{
				setState(793);
				multipartIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_stmtContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(PLParser.DECLARE, 0); }
		public List<Declare_stmt_itemContext> declare_stmt_item() {
			return getRuleContexts(Declare_stmt_itemContext.class);
		}
		public Declare_stmt_itemContext declare_stmt_item(int i) {
			return getRuleContext(Declare_stmt_itemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public Declare_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterDeclare_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitDeclare_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitDeclare_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Declare_stmtContext declare_stmt() throws RecognitionException {
		Declare_stmtContext _localctx = new Declare_stmtContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_declare_stmt);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(796);
			match(DECLARE);
			setState(797);
			declare_stmt_item();
			setState(802);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,30,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(798);
					match(COMMA);
					setState(799);
					declare_stmt_item();
					}
					} 
				}
				setState(804);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,30,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_blockContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(PLParser.DECLARE, 0); }
		public List<Declare_stmt_itemContext> declare_stmt_item() {
			return getRuleContexts(Declare_stmt_itemContext.class);
		}
		public Declare_stmt_itemContext declare_stmt_item(int i) {
			return getRuleContext(Declare_stmt_itemContext.class,i);
		}
		public List<TerminalNode> SEMICOLON() { return getTokens(PLParser.SEMICOLON); }
		public TerminalNode SEMICOLON(int i) {
			return getToken(PLParser.SEMICOLON, i);
		}
		public Declare_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterDeclare_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitDeclare_block(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitDeclare_block(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Declare_blockContext declare_block() throws RecognitionException {
		Declare_blockContext _localctx = new Declare_blockContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_declare_block);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(805);
			match(DECLARE);
			setState(806);
			declare_stmt_item();
			setState(807);
			match(SEMICOLON);
			setState(813);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,31,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(808);
					declare_stmt_item();
					setState(809);
					match(SEMICOLON);
					}
					} 
				}
				setState(815);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,31,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_block_inplaceContext extends ParserRuleContext {
		public List<Declare_stmt_itemContext> declare_stmt_item() {
			return getRuleContexts(Declare_stmt_itemContext.class);
		}
		public Declare_stmt_itemContext declare_stmt_item(int i) {
			return getRuleContext(Declare_stmt_itemContext.class,i);
		}
		public List<TerminalNode> SEMICOLON() { return getTokens(PLParser.SEMICOLON); }
		public TerminalNode SEMICOLON(int i) {
			return getToken(PLParser.SEMICOLON, i);
		}
		public Declare_block_inplaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_block_inplace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterDeclare_block_inplace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitDeclare_block_inplace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitDeclare_block_inplace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Declare_block_inplaceContext declare_block_inplace() throws RecognitionException {
		Declare_block_inplaceContext _localctx = new Declare_block_inplaceContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_declare_block_inplace);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(816);
			declare_stmt_item();
			setState(817);
			match(SEMICOLON);
			setState(823);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,32,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(818);
					declare_stmt_item();
					setState(819);
					match(SEMICOLON);
					}
					} 
				}
				setState(825);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,32,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_stmt_itemContext extends ParserRuleContext {
		public Declare_cursor_itemContext declare_cursor_item() {
			return getRuleContext(Declare_cursor_itemContext.class,0);
		}
		public Declare_condition_itemContext declare_condition_item() {
			return getRuleContext(Declare_condition_itemContext.class,0);
		}
		public Declare_handler_itemContext declare_handler_item() {
			return getRuleContext(Declare_handler_itemContext.class,0);
		}
		public Declare_var_itemContext declare_var_item() {
			return getRuleContext(Declare_var_itemContext.class,0);
		}
		public Declare_stmt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_stmt_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterDeclare_stmt_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitDeclare_stmt_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitDeclare_stmt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Declare_stmt_itemContext declare_stmt_item() throws RecognitionException {
		Declare_stmt_itemContext _localctx = new Declare_stmt_itemContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_declare_stmt_item);
		try {
			setState(830);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,33,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(826);
				declare_cursor_item();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(827);
				declare_condition_item();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(828);
				declare_handler_item();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(829);
				declare_var_item();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_var_itemContext extends ParserRuleContext {
		public List<Ident_plContext> ident_pl() {
			return getRuleContexts(Ident_plContext.class);
		}
		public Ident_plContext ident_pl(int i) {
			return getRuleContext(Ident_plContext.class,i);
		}
		public DtypeContext dtype() {
			return getRuleContext(DtypeContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public TerminalNode AS() { return getToken(PLParser.AS, 0); }
		public Dtype_lenContext dtype_len() {
			return getRuleContext(Dtype_lenContext.class,0);
		}
		public List<Dtype_attrContext> dtype_attr() {
			return getRuleContexts(Dtype_attrContext.class);
		}
		public Dtype_attrContext dtype_attr(int i) {
			return getRuleContext(Dtype_attrContext.class,i);
		}
		public Dtype_defaultContext dtype_default() {
			return getRuleContext(Dtype_defaultContext.class,0);
		}
		public TerminalNode CONSTANT() { return getToken(PLParser.CONSTANT, 0); }
		public Declare_var_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_var_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterDeclare_var_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitDeclare_var_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitDeclare_var_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Declare_var_itemContext declare_var_item() throws RecognitionException {
		Declare_var_itemContext _localctx = new Declare_var_itemContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_declare_var_item);
		int _la;
		try {
			int _alt;
			setState(867);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,41,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(832);
				ident_pl();
				setState(837);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(833);
					match(COMMA);
					setState(834);
					ident_pl();
					}
					}
					setState(839);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(841);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(840);
					match(AS);
					}
				}

				setState(843);
				dtype();
				setState(845);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,36,_ctx) ) {
				case 1:
					{
					setState(844);
					dtype_len();
					}
					break;
				}
				setState(850);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,37,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(847);
						dtype_attr();
						}
						} 
					}
					setState(852);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,37,_ctx);
				}
				setState(854);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,38,_ctx) ) {
				case 1:
					{
					setState(853);
					dtype_default();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(856);
				ident_pl();
				setState(857);
				match(CONSTANT);
				setState(859);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(858);
					match(AS);
					}
				}

				setState(861);
				dtype();
				setState(863);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(862);
					dtype_len();
					}
				}

				setState(865);
				dtype_default();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_condition_itemContext extends ParserRuleContext {
		public Ident_plContext ident_pl() {
			return getRuleContext(Ident_plContext.class,0);
		}
		public TerminalNode CONDITION() { return getToken(PLParser.CONDITION, 0); }
		public Declare_condition_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_condition_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterDeclare_condition_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitDeclare_condition_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitDeclare_condition_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Declare_condition_itemContext declare_condition_item() throws RecognitionException {
		Declare_condition_itemContext _localctx = new Declare_condition_itemContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_declare_condition_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(869);
			ident_pl();
			setState(870);
			match(CONDITION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_cursor_itemContext extends ParserRuleContext {
		public TerminalNode IS() { return getToken(PLParser.IS, 0); }
		public TerminalNode AS() { return getToken(PLParser.AS, 0); }
		public TerminalNode FOR() { return getToken(PLParser.FOR, 0); }
		public TerminalNode CURSOR() { return getToken(PLParser.CURSOR, 0); }
		public Ident_plContext ident_pl() {
			return getRuleContext(Ident_plContext.class,0);
		}
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public Cursor_with_returnContext cursor_with_return() {
			return getRuleContext(Cursor_with_returnContext.class,0);
		}
		public Cursor_without_returnContext cursor_without_return() {
			return getRuleContext(Cursor_without_returnContext.class,0);
		}
		public Declare_cursor_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_cursor_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterDeclare_cursor_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitDeclare_cursor_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitDeclare_cursor_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Declare_cursor_itemContext declare_cursor_item() throws RecognitionException {
		Declare_cursor_itemContext _localctx = new Declare_cursor_itemContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_declare_cursor_item);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(877);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,42,_ctx) ) {
			case 1:
				{
				setState(872);
				match(CURSOR);
				setState(873);
				ident_pl();
				}
				break;
			case 2:
				{
				setState(874);
				ident_pl();
				setState(875);
				match(CURSOR);
				}
				break;
			}
			setState(881);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				{
				setState(879);
				cursor_with_return();
				}
				break;
			case WITHOUT:
				{
				setState(880);
				cursor_without_return();
				}
				break;
			case AS:
			case FOR:
			case IS:
				break;
			default:
				break;
			}
			setState(883);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==FOR || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(886);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,44,_ctx) ) {
			case 1:
				{
				setState(884);
				query();
				}
				break;
			case 2:
				{
				setState(885);
				expr(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_with_returnContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PLParser.WITH, 0); }
		public TerminalNode RETURN() { return getToken(PLParser.RETURN, 0); }
		public TerminalNode ONLY() { return getToken(PLParser.ONLY, 0); }
		public TerminalNode TO() { return getToken(PLParser.TO, 0); }
		public TerminalNode CALLER() { return getToken(PLParser.CALLER, 0); }
		public TerminalNode CLIENT() { return getToken(PLParser.CLIENT, 0); }
		public Cursor_with_returnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_with_return; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterCursor_with_return(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitCursor_with_return(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitCursor_with_return(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_with_returnContext cursor_with_return() throws RecognitionException {
		Cursor_with_returnContext _localctx = new Cursor_with_returnContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_cursor_with_return);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(888);
			match(WITH);
			setState(889);
			match(RETURN);
			setState(891);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ONLY) {
				{
				setState(890);
				match(ONLY);
				}
			}

			setState(895);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TO) {
				{
				setState(893);
				match(TO);
				setState(894);
				_la = _input.LA(1);
				if ( !(_la==CALLER || _la==CLIENT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_without_returnContext extends ParserRuleContext {
		public TerminalNode WITHOUT() { return getToken(PLParser.WITHOUT, 0); }
		public TerminalNode RETURN() { return getToken(PLParser.RETURN, 0); }
		public Cursor_without_returnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_without_return; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterCursor_without_return(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitCursor_without_return(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitCursor_without_return(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_without_returnContext cursor_without_return() throws RecognitionException {
		Cursor_without_returnContext _localctx = new Cursor_without_returnContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_cursor_without_return);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(897);
			match(WITHOUT);
			setState(898);
			match(RETURN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_handler_itemContext extends ParserRuleContext {
		public TerminalNode HANDLER() { return getToken(PLParser.HANDLER, 0); }
		public TerminalNode FOR() { return getToken(PLParser.FOR, 0); }
		public Single_block_stmtContext single_block_stmt() {
			return getRuleContext(Single_block_stmtContext.class,0);
		}
		public TerminalNode CONTINUE() { return getToken(PLParser.CONTINUE, 0); }
		public TerminalNode EXIT() { return getToken(PLParser.EXIT, 0); }
		public TerminalNode SQLEXCEPTION() { return getToken(PLParser.SQLEXCEPTION, 0); }
		public TerminalNode SQLWARNING() { return getToken(PLParser.SQLWARNING, 0); }
		public TerminalNode NOT() { return getToken(PLParser.NOT, 0); }
		public TerminalNode FOUND() { return getToken(PLParser.FOUND, 0); }
		public Ident_plContext ident_pl() {
			return getRuleContext(Ident_plContext.class,0);
		}
		public Declare_handler_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_handler_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterDeclare_handler_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitDeclare_handler_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitDeclare_handler_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Declare_handler_itemContext declare_handler_item() throws RecognitionException {
		Declare_handler_itemContext _localctx = new Declare_handler_itemContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_declare_handler_item);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(900);
			_la = _input.LA(1);
			if ( !(_la==CONTINUE || _la==EXIT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(901);
			match(HANDLER);
			setState(902);
			match(FOR);
			setState(908);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,47,_ctx) ) {
			case 1:
				{
				setState(903);
				match(SQLEXCEPTION);
				}
				break;
			case 2:
				{
				setState(904);
				match(SQLWARNING);
				}
				break;
			case 3:
				{
				setState(905);
				match(NOT);
				setState(906);
				match(FOUND);
				}
				break;
			case 4:
				{
				setState(907);
				ident_pl();
				}
				break;
			}
			setState(910);
			single_block_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DtypeContext extends ParserRuleContext {
		public TerminalNode CHAR() { return getToken(PLParser.CHAR, 0); }
		public TerminalNode BIGINT() { return getToken(PLParser.BIGINT, 0); }
		public TerminalNode BINARY_DOUBLE() { return getToken(PLParser.BINARY_DOUBLE, 0); }
		public TerminalNode BINARY_FLOAT() { return getToken(PLParser.BINARY_FLOAT, 0); }
		public TerminalNode BINARY_INTEGER() { return getToken(PLParser.BINARY_INTEGER, 0); }
		public TerminalNode BIT() { return getToken(PLParser.BIT, 0); }
		public TerminalNode DATE() { return getToken(PLParser.DATE, 0); }
		public TerminalNode DATETIME() { return getToken(PLParser.DATETIME, 0); }
		public TerminalNode DEC() { return getToken(PLParser.DEC, 0); }
		public TerminalNode DECIMAL() { return getToken(PLParser.DECIMAL, 0); }
		public TerminalNode DOUBLE() { return getToken(PLParser.DOUBLE, 0); }
		public TerminalNode PRECISION() { return getToken(PLParser.PRECISION, 0); }
		public TerminalNode FLOAT() { return getToken(PLParser.FLOAT, 0); }
		public TerminalNode INT() { return getToken(PLParser.INT, 0); }
		public TerminalNode INT2() { return getToken(PLParser.INT2, 0); }
		public TerminalNode INT4() { return getToken(PLParser.INT4, 0); }
		public TerminalNode INT8() { return getToken(PLParser.INT8, 0); }
		public TerminalNode INTEGER() { return getToken(PLParser.INTEGER, 0); }
		public TerminalNode NCHAR() { return getToken(PLParser.NCHAR, 0); }
		public TerminalNode NVARCHAR() { return getToken(PLParser.NVARCHAR, 0); }
		public TerminalNode NUMBER() { return getToken(PLParser.NUMBER, 0); }
		public TerminalNode NUMERIC() { return getToken(PLParser.NUMERIC, 0); }
		public TerminalNode PLS_INTEGER() { return getToken(PLParser.PLS_INTEGER, 0); }
		public TerminalNode REAL() { return getToken(PLParser.REAL, 0); }
		public TerminalNode RESULT_SET_LOCATOR() { return getToken(PLParser.RESULT_SET_LOCATOR, 0); }
		public TerminalNode VARYING() { return getToken(PLParser.VARYING, 0); }
		public TerminalNode SIMPLE_FLOAT() { return getToken(PLParser.SIMPLE_FLOAT, 0); }
		public TerminalNode SIMPLE_DOUBLE() { return getToken(PLParser.SIMPLE_DOUBLE, 0); }
		public TerminalNode SIMPLE_INTEGER() { return getToken(PLParser.SIMPLE_INTEGER, 0); }
		public TerminalNode SMALLINT() { return getToken(PLParser.SMALLINT, 0); }
		public TerminalNode SMALLDATETIME() { return getToken(PLParser.SMALLDATETIME, 0); }
		public TerminalNode STRING() { return getToken(PLParser.STRING, 0); }
		public TerminalNode SYS_REFCURSOR() { return getToken(PLParser.SYS_REFCURSOR, 0); }
		public TerminalNode TIMESTAMP() { return getToken(PLParser.TIMESTAMP, 0); }
		public TerminalNode TINYINT() { return getToken(PLParser.TINYINT, 0); }
		public TerminalNode VARCHAR() { return getToken(PLParser.VARCHAR, 0); }
		public TerminalNode VARCHAR2() { return getToken(PLParser.VARCHAR2, 0); }
		public TerminalNode XML() { return getToken(PLParser.XML, 0); }
		public QidentContext qident() {
			return getRuleContext(QidentContext.class,0);
		}
		public TerminalNode MOD() { return getToken(PLParser.MOD, 0); }
		public TerminalNode TYPE() { return getToken(PLParser.TYPE, 0); }
		public TerminalNode ROWTYPE() { return getToken(PLParser.ROWTYPE, 0); }
		public DtypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dtype; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterDtype(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitDtype(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitDtype(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DtypeContext dtype() throws RecognitionException {
		DtypeContext _localctx = new DtypeContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_dtype);
		int _la;
		try {
			setState(957);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,50,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(912);
				match(CHAR);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(913);
				match(BIGINT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(914);
				match(BINARY_DOUBLE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(915);
				match(BINARY_FLOAT);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(916);
				match(BINARY_INTEGER);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(917);
				match(BIT);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(918);
				match(DATE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(919);
				match(DATETIME);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(920);
				match(DEC);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(921);
				match(DECIMAL);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(922);
				match(DOUBLE);
				setState(924);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,48,_ctx) ) {
				case 1:
					{
					setState(923);
					match(PRECISION);
					}
					break;
				}
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(926);
				match(FLOAT);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(927);
				match(INT);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(928);
				match(INT2);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(929);
				match(INT4);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(930);
				match(INT8);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(931);
				match(INTEGER);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(932);
				match(NCHAR);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(933);
				match(NVARCHAR);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(934);
				match(NUMBER);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(935);
				match(NUMERIC);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(936);
				match(PLS_INTEGER);
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(937);
				match(REAL);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(938);
				match(RESULT_SET_LOCATOR);
				setState(939);
				match(VARYING);
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(940);
				match(SIMPLE_FLOAT);
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(941);
				match(SIMPLE_DOUBLE);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(942);
				match(SIMPLE_INTEGER);
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(943);
				match(SMALLINT);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(944);
				match(SMALLDATETIME);
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(945);
				match(STRING);
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(946);
				match(SYS_REFCURSOR);
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(947);
				match(TIMESTAMP);
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(948);
				match(TINYINT);
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(949);
				match(VARCHAR);
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(950);
				match(VARCHAR2);
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(951);
				match(XML);
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(952);
				qident();
				setState(955);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,49,_ctx) ) {
				case 1:
					{
					setState(953);
					match(MOD);
					setState(954);
					_la = _input.LA(1);
					if ( !(_la==ROWTYPE || _la==TYPE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dtype_lenContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> INTEGER_VALUE() { return getTokens(PLParser.INTEGER_VALUE); }
		public TerminalNode INTEGER_VALUE(int i) {
			return getToken(PLParser.INTEGER_VALUE, i);
		}
		public TerminalNode MAX() { return getToken(PLParser.MAX, 0); }
		public TerminalNode COMMA() { return getToken(PLParser.COMMA, 0); }
		public TerminalNode CHAR() { return getToken(PLParser.CHAR, 0); }
		public TerminalNode BYTE() { return getToken(PLParser.BYTE, 0); }
		public Dtype_lenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dtype_len; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterDtype_len(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitDtype_len(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitDtype_len(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dtype_lenContext dtype_len() throws RecognitionException {
		Dtype_lenContext _localctx = new Dtype_lenContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_dtype_len);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(959);
			match(LEFT_PAREN);
			setState(960);
			_la = _input.LA(1);
			if ( !(_la==MAX || _la==INTEGER_VALUE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(962);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BYTE || _la==CHAR) {
				{
				setState(961);
				_la = _input.LA(1);
				if ( !(_la==BYTE || _la==CHAR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(966);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(964);
				match(COMMA);
				setState(965);
				match(INTEGER_VALUE);
				}
			}

			setState(968);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dtype_attrContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(PLParser.NULL, 0); }
		public TerminalNode NOT() { return getToken(PLParser.NOT, 0); }
		public TerminalNode CHAR() { return getToken(PLParser.CHAR, 0); }
		public TerminalNode SET() { return getToken(PLParser.SET, 0); }
		public Ident_plContext ident_pl() {
			return getRuleContext(Ident_plContext.class,0);
		}
		public TerminalNode CASESPECIFIC() { return getToken(PLParser.CASESPECIFIC, 0); }
		public TerminalNode CS() { return getToken(PLParser.CS, 0); }
		public Dtype_attrContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dtype_attr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterDtype_attr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitDtype_attr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitDtype_attr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dtype_attrContext dtype_attr() throws RecognitionException {
		Dtype_attrContext _localctx = new Dtype_attrContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_dtype_attr);
		int _la;
		try {
			setState(981);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,55,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(971);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(970);
					match(NOT);
					}
				}

				setState(973);
				match(NULL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(974);
				match(CHAR);
				setState(975);
				match(SET);
				setState(976);
				ident_pl();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(978);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(977);
					match(NOT);
					}
				}

				setState(980);
				_la = _input.LA(1);
				if ( !(_la==CASESPECIFIC || _la==CS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dtype_defaultContext extends ParserRuleContext {
		public TerminalNode EQ() { return getToken(PLParser.EQ, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode COLON() { return getToken(PLParser.COLON, 0); }
		public TerminalNode DEFAULT() { return getToken(PLParser.DEFAULT, 0); }
		public TerminalNode WITH() { return getToken(PLParser.WITH, 0); }
		public Dtype_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dtype_default; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterDtype_default(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitDtype_default(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitDtype_default(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dtype_defaultContext dtype_default() throws RecognitionException {
		Dtype_defaultContext _localctx = new Dtype_defaultContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_dtype_default);
		int _la;
		try {
			setState(995);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EQ:
			case COLON:
				enterOuterAlt(_localctx, 1);
				{
				setState(984);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLON) {
					{
					setState(983);
					match(COLON);
					}
				}

				setState(986);
				match(EQ);
				setState(987);
				expr(0);
				}
				break;
			case DEFAULT:
			case WITH:
				enterOuterAlt(_localctx, 2);
				{
				setState(989);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(988);
					match(WITH);
					}
				}

				setState(991);
				match(DEFAULT);
				setState(993);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,58,_ctx) ) {
				case 1:
					{
					setState(992);
					expr(0);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_function_stmtContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(PLParser.FUNCTION, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public Create_function_returnContext create_function_return() {
			return getRuleContext(Create_function_returnContext.class,0);
		}
		public Single_block_stmtContext single_block_stmt() {
			return getRuleContext(Single_block_stmtContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(PLParser.ALTER, 0); }
		public TerminalNode CREATE() { return getToken(PLParser.CREATE, 0); }
		public TerminalNode REPLACE() { return getToken(PLParser.REPLACE, 0); }
		public Create_routine_paramsContext create_routine_params() {
			return getRuleContext(Create_routine_paramsContext.class,0);
		}
		public Declare_block_inplaceContext declare_block_inplace() {
			return getRuleContext(Declare_block_inplaceContext.class,0);
		}
		public TerminalNode AS() { return getToken(PLParser.AS, 0); }
		public TerminalNode IS() { return getToken(PLParser.IS, 0); }
		public TerminalNode OR() { return getToken(PLParser.OR, 0); }
		public Create_function_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_function_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterCreate_function_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitCreate_function_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitCreate_function_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_function_stmtContext create_function_stmt() throws RecognitionException {
		Create_function_stmtContext _localctx = new Create_function_stmtContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_create_function_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1004);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALTER:
				{
				setState(997);
				match(ALTER);
				}
				break;
			case CREATE:
				{
				setState(998);
				match(CREATE);
				setState(1001);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(999);
					match(OR);
					setState(1000);
					match(REPLACE);
					}
				}

				}
				break;
			case REPLACE:
				{
				setState(1003);
				match(REPLACE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1006);
			match(FUNCTION);
			setState(1007);
			multipartIdentifier();
			setState(1009);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,62,_ctx) ) {
			case 1:
				{
				setState(1008);
				create_routine_params();
				}
				break;
			}
			setState(1011);
			create_function_return();
			setState(1013);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,63,_ctx) ) {
			case 1:
				{
				setState(1012);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(1016);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,64,_ctx) ) {
			case 1:
				{
				setState(1015);
				declare_block_inplace();
				}
				break;
			}
			setState(1018);
			single_block_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_function_returnContext extends ParserRuleContext {
		public DtypeContext dtype() {
			return getRuleContext(DtypeContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(PLParser.RETURN, 0); }
		public TerminalNode RETURNS() { return getToken(PLParser.RETURNS, 0); }
		public Dtype_lenContext dtype_len() {
			return getRuleContext(Dtype_lenContext.class,0);
		}
		public Create_function_returnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_function_return; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterCreate_function_return(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitCreate_function_return(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitCreate_function_return(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_function_returnContext create_function_return() throws RecognitionException {
		Create_function_returnContext _localctx = new Create_function_returnContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_create_function_return);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1020);
			_la = _input.LA(1);
			if ( !(_la==RETURN || _la==RETURNS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1021);
			dtype();
			setState(1023);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,65,_ctx) ) {
			case 1:
				{
				setState(1022);
				dtype_len();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_package_stmtContext extends ParserRuleContext {
		public TerminalNode PACKAGE() { return getToken(PLParser.PACKAGE, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public Package_specContext package_spec() {
			return getRuleContext(Package_specContext.class,0);
		}
		public TerminalNode END() { return getToken(PLParser.END, 0); }
		public TerminalNode AS() { return getToken(PLParser.AS, 0); }
		public TerminalNode IS() { return getToken(PLParser.IS, 0); }
		public TerminalNode ALTER() { return getToken(PLParser.ALTER, 0); }
		public TerminalNode CREATE() { return getToken(PLParser.CREATE, 0); }
		public TerminalNode REPLACE() { return getToken(PLParser.REPLACE, 0); }
		public Ident_plContext ident_pl() {
			return getRuleContext(Ident_plContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(PLParser.SEMICOLON, 0); }
		public TerminalNode OR() { return getToken(PLParser.OR, 0); }
		public Create_package_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_package_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterCreate_package_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitCreate_package_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitCreate_package_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_package_stmtContext create_package_stmt() throws RecognitionException {
		Create_package_stmtContext _localctx = new Create_package_stmtContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_create_package_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1032);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALTER:
				{
				setState(1025);
				match(ALTER);
				}
				break;
			case CREATE:
				{
				setState(1026);
				match(CREATE);
				setState(1029);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(1027);
					match(OR);
					setState(1028);
					match(REPLACE);
					}
				}

				}
				break;
			case REPLACE:
				{
				setState(1031);
				match(REPLACE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1034);
			match(PACKAGE);
			setState(1035);
			multipartIdentifier();
			setState(1036);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1037);
			package_spec();
			setState(1038);
			match(END);
			setState(1042);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,68,_ctx) ) {
			case 1:
				{
				setState(1039);
				ident_pl();
				setState(1040);
				match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Package_specContext extends ParserRuleContext {
		public List<Package_spec_itemContext> package_spec_item() {
			return getRuleContexts(Package_spec_itemContext.class);
		}
		public Package_spec_itemContext package_spec_item(int i) {
			return getRuleContext(Package_spec_itemContext.class,i);
		}
		public List<TerminalNode> SEMICOLON() { return getTokens(PLParser.SEMICOLON); }
		public TerminalNode SEMICOLON(int i) {
			return getToken(PLParser.SEMICOLON, i);
		}
		public Package_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterPackage_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitPackage_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitPackage_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Package_specContext package_spec() throws RecognitionException {
		Package_specContext _localctx = new Package_specContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_package_spec);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1044);
			package_spec_item();
			setState(1045);
			match(SEMICOLON);
			setState(1051);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,69,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1046);
					package_spec_item();
					setState(1047);
					match(SEMICOLON);
					}
					} 
				}
				setState(1053);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,69,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Package_spec_itemContext extends ParserRuleContext {
		public Declare_stmt_itemContext declare_stmt_item() {
			return getRuleContext(Declare_stmt_itemContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(PLParser.FUNCTION, 0); }
		public Ident_plContext ident_pl() {
			return getRuleContext(Ident_plContext.class,0);
		}
		public Create_function_returnContext create_function_return() {
			return getRuleContext(Create_function_returnContext.class,0);
		}
		public Create_routine_paramsContext create_routine_params() {
			return getRuleContext(Create_routine_paramsContext.class,0);
		}
		public TerminalNode PROCEDURE() { return getToken(PLParser.PROCEDURE, 0); }
		public TerminalNode PROC() { return getToken(PLParser.PROC, 0); }
		public Package_spec_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_spec_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterPackage_spec_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitPackage_spec_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitPackage_spec_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Package_spec_itemContext package_spec_item() throws RecognitionException {
		Package_spec_itemContext _localctx = new Package_spec_itemContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_package_spec_item);
		int _la;
		try {
			setState(1067);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,72,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1054);
				declare_stmt_item();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1055);
				match(FUNCTION);
				setState(1056);
				ident_pl();
				setState(1058);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,70,_ctx) ) {
				case 1:
					{
					setState(1057);
					create_routine_params();
					}
					break;
				}
				setState(1060);
				create_function_return();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1062);
				_la = _input.LA(1);
				if ( !(_la==PROC || _la==PROCEDURE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1063);
				ident_pl();
				setState(1065);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,71,_ctx) ) {
				case 1:
					{
					setState(1064);
					create_routine_params();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_package_body_stmtContext extends ParserRuleContext {
		public TerminalNode PACKAGE() { return getToken(PLParser.PACKAGE, 0); }
		public TerminalNode BODY() { return getToken(PLParser.BODY, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public Package_bodyContext package_body() {
			return getRuleContext(Package_bodyContext.class,0);
		}
		public TerminalNode END() { return getToken(PLParser.END, 0); }
		public TerminalNode AS() { return getToken(PLParser.AS, 0); }
		public TerminalNode IS() { return getToken(PLParser.IS, 0); }
		public TerminalNode ALTER() { return getToken(PLParser.ALTER, 0); }
		public TerminalNode CREATE() { return getToken(PLParser.CREATE, 0); }
		public TerminalNode REPLACE() { return getToken(PLParser.REPLACE, 0); }
		public Ident_plContext ident_pl() {
			return getRuleContext(Ident_plContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(PLParser.SEMICOLON, 0); }
		public TerminalNode OR() { return getToken(PLParser.OR, 0); }
		public Create_package_body_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_package_body_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterCreate_package_body_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitCreate_package_body_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitCreate_package_body_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_package_body_stmtContext create_package_body_stmt() throws RecognitionException {
		Create_package_body_stmtContext _localctx = new Create_package_body_stmtContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_create_package_body_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1076);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALTER:
				{
				setState(1069);
				match(ALTER);
				}
				break;
			case CREATE:
				{
				setState(1070);
				match(CREATE);
				setState(1073);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(1071);
					match(OR);
					setState(1072);
					match(REPLACE);
					}
				}

				}
				break;
			case REPLACE:
				{
				setState(1075);
				match(REPLACE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1078);
			match(PACKAGE);
			setState(1079);
			match(BODY);
			setState(1080);
			multipartIdentifier();
			setState(1081);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1082);
			package_body();
			setState(1083);
			match(END);
			setState(1087);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,75,_ctx) ) {
			case 1:
				{
				setState(1084);
				ident_pl();
				setState(1085);
				match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Package_bodyContext extends ParserRuleContext {
		public List<Package_body_itemContext> package_body_item() {
			return getRuleContexts(Package_body_itemContext.class);
		}
		public Package_body_itemContext package_body_item(int i) {
			return getRuleContext(Package_body_itemContext.class,i);
		}
		public List<TerminalNode> SEMICOLON() { return getTokens(PLParser.SEMICOLON); }
		public TerminalNode SEMICOLON(int i) {
			return getToken(PLParser.SEMICOLON, i);
		}
		public Package_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterPackage_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitPackage_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitPackage_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Package_bodyContext package_body() throws RecognitionException {
		Package_bodyContext _localctx = new Package_bodyContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_package_body);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1089);
			package_body_item();
			setState(1090);
			match(SEMICOLON);
			setState(1096);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,76,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1091);
					package_body_item();
					setState(1092);
					match(SEMICOLON);
					}
					} 
				}
				setState(1098);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,76,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Package_body_itemContext extends ParserRuleContext {
		public Declare_stmt_itemContext declare_stmt_item() {
			return getRuleContext(Declare_stmt_itemContext.class,0);
		}
		public Create_function_stmtContext create_function_stmt() {
			return getRuleContext(Create_function_stmtContext.class,0);
		}
		public Create_procedure_stmtContext create_procedure_stmt() {
			return getRuleContext(Create_procedure_stmtContext.class,0);
		}
		public Package_body_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_body_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterPackage_body_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitPackage_body_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitPackage_body_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Package_body_itemContext package_body_item() throws RecognitionException {
		Package_body_itemContext _localctx = new Package_body_itemContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_package_body_item);
		try {
			setState(1102);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,77,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1099);
				declare_stmt_item();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1100);
				create_function_stmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1101);
				create_procedure_stmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_procedure_stmtContext extends ParserRuleContext {
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public Procedure_blockContext procedure_block() {
			return getRuleContext(Procedure_blockContext.class,0);
		}
		public TerminalNode PROCEDURE() { return getToken(PLParser.PROCEDURE, 0); }
		public TerminalNode PROC() { return getToken(PLParser.PROC, 0); }
		public TerminalNode ALTER() { return getToken(PLParser.ALTER, 0); }
		public TerminalNode CREATE() { return getToken(PLParser.CREATE, 0); }
		public TerminalNode REPLACE() { return getToken(PLParser.REPLACE, 0); }
		public Create_routine_paramsContext create_routine_params() {
			return getRuleContext(Create_routine_paramsContext.class,0);
		}
		public Create_routine_optionsContext create_routine_options() {
			return getRuleContext(Create_routine_optionsContext.class,0);
		}
		public Declare_block_inplaceContext declare_block_inplace() {
			return getRuleContext(Declare_block_inplaceContext.class,0);
		}
		public Label_stmtContext label_stmt() {
			return getRuleContext(Label_stmtContext.class,0);
		}
		public Ident_plContext ident_pl() {
			return getRuleContext(Ident_plContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(PLParser.SEMICOLON, 0); }
		public TerminalNode AS() { return getToken(PLParser.AS, 0); }
		public TerminalNode IS() { return getToken(PLParser.IS, 0); }
		public TerminalNode OR() { return getToken(PLParser.OR, 0); }
		public Create_procedure_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_procedure_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterCreate_procedure_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitCreate_procedure_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitCreate_procedure_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_procedure_stmtContext create_procedure_stmt() throws RecognitionException {
		Create_procedure_stmtContext _localctx = new Create_procedure_stmtContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_create_procedure_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1111);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALTER:
				{
				setState(1104);
				match(ALTER);
				}
				break;
			case CREATE:
				{
				setState(1105);
				match(CREATE);
				setState(1108);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(1106);
					match(OR);
					setState(1107);
					match(REPLACE);
					}
				}

				}
				break;
			case REPLACE:
				{
				setState(1110);
				match(REPLACE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1113);
			_la = _input.LA(1);
			if ( !(_la==PROC || _la==PROCEDURE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1114);
			multipartIdentifier();
			setState(1116);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,80,_ctx) ) {
			case 1:
				{
				setState(1115);
				create_routine_params();
				}
				break;
			}
			setState(1119);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,81,_ctx) ) {
			case 1:
				{
				setState(1118);
				create_routine_options();
				}
				break;
			}
			setState(1122);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,82,_ctx) ) {
			case 1:
				{
				setState(1121);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(1125);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,83,_ctx) ) {
			case 1:
				{
				setState(1124);
				declare_block_inplace();
				}
				break;
			}
			setState(1128);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,84,_ctx) ) {
			case 1:
				{
				setState(1127);
				label_stmt();
				}
				break;
			}
			setState(1130);
			procedure_block();
			setState(1134);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,85,_ctx) ) {
			case 1:
				{
				setState(1131);
				ident_pl();
				setState(1132);
				match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_procedure_stmtContext extends ParserRuleContext {
		public MultipartIdentifierContext name;
		public TerminalNode DROP() { return getToken(PLParser.DROP, 0); }
		public TerminalNode PROCEDURE() { return getToken(PLParser.PROCEDURE, 0); }
		public TerminalNode PROC() { return getToken(PLParser.PROC, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(PLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PLParser.EXISTS, 0); }
		public Drop_procedure_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_procedure_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterDrop_procedure_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitDrop_procedure_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitDrop_procedure_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_procedure_stmtContext drop_procedure_stmt() throws RecognitionException {
		Drop_procedure_stmtContext _localctx = new Drop_procedure_stmtContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_drop_procedure_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1136);
			match(DROP);
			setState(1137);
			_la = _input.LA(1);
			if ( !(_la==PROC || _la==PROCEDURE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1140);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1138);
				match(IF);
				setState(1139);
				match(EXISTS);
				}
			}

			setState(1142);
			((Drop_procedure_stmtContext)_localctx).name = multipartIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Show_procedure_stmtContext extends ParserRuleContext {
		public ValueExpressionContext pattern;
		public TerminalNode SHOW() { return getToken(PLParser.SHOW, 0); }
		public TerminalNode PROCEDURE() { return getToken(PLParser.PROCEDURE, 0); }
		public TerminalNode STATUS() { return getToken(PLParser.STATUS, 0); }
		public TerminalNode LIKE() { return getToken(PLParser.LIKE, 0); }
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public Show_procedure_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_procedure_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterShow_procedure_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitShow_procedure_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitShow_procedure_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_procedure_stmtContext show_procedure_stmt() throws RecognitionException {
		Show_procedure_stmtContext _localctx = new Show_procedure_stmtContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_show_procedure_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1144);
			match(SHOW);
			setState(1145);
			match(PROCEDURE);
			setState(1146);
			match(STATUS);
			setState(1150);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,87,_ctx) ) {
			case 1:
				{
				setState(1147);
				match(LIKE);
				setState(1148);
				((Show_procedure_stmtContext)_localctx).pattern = valueExpression(0);
				}
				break;
			case 2:
				{
				setState(1149);
				whereClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Show_create_procedure_stmtContext extends ParserRuleContext {
		public MultipartIdentifierContext name;
		public TerminalNode SHOW() { return getToken(PLParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(PLParser.CREATE, 0); }
		public TerminalNode PROCEDURE() { return getToken(PLParser.PROCEDURE, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public Show_create_procedure_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_create_procedure_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterShow_create_procedure_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitShow_create_procedure_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitShow_create_procedure_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_create_procedure_stmtContext show_create_procedure_stmt() throws RecognitionException {
		Show_create_procedure_stmtContext _localctx = new Show_create_procedure_stmtContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_show_create_procedure_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1152);
			match(SHOW);
			setState(1153);
			match(CREATE);
			setState(1154);
			match(PROCEDURE);
			setState(1155);
			((Show_create_procedure_stmtContext)_localctx).name = multipartIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_routine_paramsContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public List<Create_routine_param_itemContext> create_routine_param_item() {
			return getRuleContexts(Create_routine_param_itemContext.class);
		}
		public Create_routine_param_itemContext create_routine_param_item(int i) {
			return getRuleContext(Create_routine_param_itemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public Create_routine_paramsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_routine_params; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterCreate_routine_params(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitCreate_routine_params(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitCreate_routine_params(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_routine_paramsContext create_routine_params() throws RecognitionException {
		Create_routine_paramsContext _localctx = new Create_routine_paramsContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_create_routine_params);
		int _la;
		try {
			int _alt;
			setState(1179);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,90,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1157);
				match(LEFT_PAREN);
				setState(1158);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1159);
				match(LEFT_PAREN);
				setState(1160);
				create_routine_param_item();
				setState(1165);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1161);
					match(COMMA);
					setState(1162);
					create_routine_param_item();
					}
					}
					setState(1167);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1168);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1170);
				if (!(!_input.LT(1).getText().equalsIgnoreCase("IS") &&
				        !_input.LT(1).getText().equalsIgnoreCase("AS") &&
				        !(_input.LT(1).getText().equalsIgnoreCase("DYNAMIC") && _input.LT(2).getText().equalsIgnoreCase("RESULT"))
				        )) throw new FailedPredicateException(this, "!_input.LT(1).getText().equalsIgnoreCase(\"IS\") &&\n        !_input.LT(1).getText().equalsIgnoreCase(\"AS\") &&\n        !(_input.LT(1).getText().equalsIgnoreCase(\"DYNAMIC\") && _input.LT(2).getText().equalsIgnoreCase(\"RESULT\"))\n        ");
				setState(1171);
				create_routine_param_item();
				setState(1176);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,89,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1172);
						match(COMMA);
						setState(1173);
						create_routine_param_item();
						}
						} 
					}
					setState(1178);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,89,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_routine_param_itemContext extends ParserRuleContext {
		public Ident_plContext ident_pl() {
			return getRuleContext(Ident_plContext.class,0);
		}
		public DtypeContext dtype() {
			return getRuleContext(DtypeContext.class,0);
		}
		public TerminalNode IN() { return getToken(PLParser.IN, 0); }
		public TerminalNode OUT() { return getToken(PLParser.OUT, 0); }
		public TerminalNode INOUT() { return getToken(PLParser.INOUT, 0); }
		public Dtype_lenContext dtype_len() {
			return getRuleContext(Dtype_lenContext.class,0);
		}
		public List<Dtype_attrContext> dtype_attr() {
			return getRuleContexts(Dtype_attrContext.class);
		}
		public Dtype_attrContext dtype_attr(int i) {
			return getRuleContext(Dtype_attrContext.class,i);
		}
		public Dtype_defaultContext dtype_default() {
			return getRuleContext(Dtype_defaultContext.class,0);
		}
		public Create_routine_param_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_routine_param_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterCreate_routine_param_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitCreate_routine_param_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitCreate_routine_param_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_routine_param_itemContext create_routine_param_item() throws RecognitionException {
		Create_routine_param_itemContext _localctx = new Create_routine_param_itemContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_create_routine_param_item);
		try {
			int _alt;
			setState(1223);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,99,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1186);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,91,_ctx) ) {
				case 1:
					{
					setState(1181);
					match(IN);
					}
					break;
				case 2:
					{
					setState(1182);
					match(OUT);
					}
					break;
				case 3:
					{
					setState(1183);
					match(INOUT);
					}
					break;
				case 4:
					{
					setState(1184);
					match(IN);
					setState(1185);
					match(OUT);
					}
					break;
				}
				setState(1188);
				ident_pl();
				setState(1189);
				dtype();
				setState(1191);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,92,_ctx) ) {
				case 1:
					{
					setState(1190);
					dtype_len();
					}
					break;
				}
				setState(1196);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,93,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1193);
						dtype_attr();
						}
						} 
					}
					setState(1198);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,93,_ctx);
				}
				setState(1200);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,94,_ctx) ) {
				case 1:
					{
					setState(1199);
					dtype_default();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1202);
				ident_pl();
				setState(1208);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,95,_ctx) ) {
				case 1:
					{
					setState(1203);
					match(IN);
					}
					break;
				case 2:
					{
					setState(1204);
					match(OUT);
					}
					break;
				case 3:
					{
					setState(1205);
					match(INOUT);
					}
					break;
				case 4:
					{
					setState(1206);
					match(IN);
					setState(1207);
					match(OUT);
					}
					break;
				}
				setState(1210);
				dtype();
				setState(1212);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,96,_ctx) ) {
				case 1:
					{
					setState(1211);
					dtype_len();
					}
					break;
				}
				setState(1217);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,97,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1214);
						dtype_attr();
						}
						} 
					}
					setState(1219);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,97,_ctx);
				}
				setState(1221);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,98,_ctx) ) {
				case 1:
					{
					setState(1220);
					dtype_default();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_routine_optionsContext extends ParserRuleContext {
		public List<Create_routine_optionContext> create_routine_option() {
			return getRuleContexts(Create_routine_optionContext.class);
		}
		public Create_routine_optionContext create_routine_option(int i) {
			return getRuleContext(Create_routine_optionContext.class,i);
		}
		public Create_routine_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_routine_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterCreate_routine_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitCreate_routine_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitCreate_routine_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_routine_optionsContext create_routine_options() throws RecognitionException {
		Create_routine_optionsContext _localctx = new Create_routine_optionsContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_create_routine_options);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1226); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(1225);
					create_routine_option();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1228); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,100,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_routine_optionContext extends ParserRuleContext {
		public TerminalNode LANGUAGE() { return getToken(PLParser.LANGUAGE, 0); }
		public TerminalNode SQL() { return getToken(PLParser.SQL, 0); }
		public TerminalNode SECURITY() { return getToken(PLParser.SECURITY, 0); }
		public TerminalNode CREATOR() { return getToken(PLParser.CREATOR, 0); }
		public TerminalNode DEFINER() { return getToken(PLParser.DEFINER, 0); }
		public TerminalNode INVOKER() { return getToken(PLParser.INVOKER, 0); }
		public TerminalNode OWNER() { return getToken(PLParser.OWNER, 0); }
		public TerminalNode RESULT() { return getToken(PLParser.RESULT, 0); }
		public TerminalNode SETS() { return getToken(PLParser.SETS, 0); }
		public TerminalNode INTEGER_VALUE() { return getToken(PLParser.INTEGER_VALUE, 0); }
		public TerminalNode DYNAMIC() { return getToken(PLParser.DYNAMIC, 0); }
		public Create_routine_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_routine_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterCreate_routine_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitCreate_routine_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitCreate_routine_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_routine_optionContext create_routine_option() throws RecognitionException {
		Create_routine_optionContext _localctx = new Create_routine_optionContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_create_routine_option);
		int _la;
		try {
			setState(1241);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LANGUAGE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1230);
				match(LANGUAGE);
				setState(1231);
				match(SQL);
				}
				break;
			case SQL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1232);
				match(SQL);
				setState(1233);
				match(SECURITY);
				setState(1234);
				_la = _input.LA(1);
				if ( !(_la==CREATOR || _la==DEFINER || _la==INVOKER || _la==OWNER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case RESULT:
			case DYNAMIC:
				enterOuterAlt(_localctx, 3);
				{
				setState(1236);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DYNAMIC) {
					{
					setState(1235);
					match(DYNAMIC);
					}
				}

				setState(1238);
				match(RESULT);
				setState(1239);
				match(SETS);
				setState(1240);
				match(INTEGER_VALUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exec_stmtContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode EXEC() { return getToken(PLParser.EXEC, 0); }
		public TerminalNode EXECUTE() { return getToken(PLParser.EXECUTE, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PLParser.IMMEDIATE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public Expr_func_paramsContext expr_func_params() {
			return getRuleContext(Expr_func_paramsContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public TerminalNode INTO() { return getToken(PLParser.INTO, 0); }
		public List<TerminalNode> IDENTIFIER() { return getTokens(PLParser.IDENTIFIER); }
		public TerminalNode IDENTIFIER(int i) {
			return getToken(PLParser.IDENTIFIER, i);
		}
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public Exec_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exec_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterExec_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitExec_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitExec_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exec_stmtContext exec_stmt() throws RecognitionException {
		Exec_stmtContext _localctx = new Exec_stmtContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_exec_stmt);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1243);
			_la = _input.LA(1);
			if ( !(_la==EXEC || _la==EXECUTE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1245);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,103,_ctx) ) {
			case 1:
				{
				setState(1244);
				match(IMMEDIATE);
				}
				break;
			}
			setState(1247);
			expr(0);
			setState(1253);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,104,_ctx) ) {
			case 1:
				{
				setState(1248);
				match(LEFT_PAREN);
				setState(1249);
				expr_func_params();
				setState(1250);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(1252);
				expr_func_params();
				}
				break;
			}
			setState(1264);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,106,_ctx) ) {
			case 1:
				{
				setState(1255);
				match(INTO);
				setState(1256);
				match(IDENTIFIER);
				setState(1261);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,105,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1257);
						match(COMMA);
						setState(1258);
						match(IDENTIFIER);
						}
						} 
					}
					setState(1263);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,105,_ctx);
				}
				}
				break;
			}
			setState(1267);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,107,_ctx) ) {
			case 1:
				{
				setState(1266);
				using_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class If_stmtContext extends ParserRuleContext {
		public If_plsql_stmtContext if_plsql_stmt() {
			return getRuleContext(If_plsql_stmtContext.class,0);
		}
		public If_tsql_stmtContext if_tsql_stmt() {
			return getRuleContext(If_tsql_stmtContext.class,0);
		}
		public If_bteq_stmtContext if_bteq_stmt() {
			return getRuleContext(If_bteq_stmtContext.class,0);
		}
		public If_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_if_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterIf_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitIf_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitIf_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final If_stmtContext if_stmt() throws RecognitionException {
		If_stmtContext _localctx = new If_stmtContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_if_stmt);
		try {
			setState(1272);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,108,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1269);
				if_plsql_stmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1270);
				if_tsql_stmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1271);
				if_bteq_stmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class If_plsql_stmtContext extends ParserRuleContext {
		public List<TerminalNode> IF() { return getTokens(PLParser.IF); }
		public TerminalNode IF(int i) {
			return getToken(PLParser.IF, i);
		}
		public Bool_exprContext bool_expr() {
			return getRuleContext(Bool_exprContext.class,0);
		}
		public TerminalNode THEN() { return getToken(PLParser.THEN, 0); }
		public BlockContext block() {
			return getRuleContext(BlockContext.class,0);
		}
		public TerminalNode END() { return getToken(PLParser.END, 0); }
		public List<Elseif_blockContext> elseif_block() {
			return getRuleContexts(Elseif_blockContext.class);
		}
		public Elseif_blockContext elseif_block(int i) {
			return getRuleContext(Elseif_blockContext.class,i);
		}
		public Else_blockContext else_block() {
			return getRuleContext(Else_blockContext.class,0);
		}
		public If_plsql_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_if_plsql_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterIf_plsql_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitIf_plsql_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitIf_plsql_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final If_plsql_stmtContext if_plsql_stmt() throws RecognitionException {
		If_plsql_stmtContext _localctx = new If_plsql_stmtContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_if_plsql_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1274);
			match(IF);
			setState(1275);
			bool_expr(0);
			setState(1276);
			match(THEN);
			setState(1277);
			block();
			setState(1281);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ELSEIF || _la==ELSIF) {
				{
				{
				setState(1278);
				elseif_block();
				}
				}
				setState(1283);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1285);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(1284);
				else_block();
				}
			}

			setState(1287);
			match(END);
			setState(1288);
			match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class If_tsql_stmtContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(PLParser.IF, 0); }
		public Bool_exprContext bool_expr() {
			return getRuleContext(Bool_exprContext.class,0);
		}
		public List<Single_block_stmtContext> single_block_stmt() {
			return getRuleContexts(Single_block_stmtContext.class);
		}
		public Single_block_stmtContext single_block_stmt(int i) {
			return getRuleContext(Single_block_stmtContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(PLParser.ELSE, 0); }
		public If_tsql_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_if_tsql_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterIf_tsql_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitIf_tsql_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitIf_tsql_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final If_tsql_stmtContext if_tsql_stmt() throws RecognitionException {
		If_tsql_stmtContext _localctx = new If_tsql_stmtContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_if_tsql_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1290);
			match(IF);
			setState(1291);
			bool_expr(0);
			setState(1292);
			single_block_stmt();
			setState(1295);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,111,_ctx) ) {
			case 1:
				{
				setState(1293);
				match(ELSE);
				setState(1294);
				single_block_stmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class If_bteq_stmtContext extends ParserRuleContext {
		public TerminalNode DOT() { return getToken(PLParser.DOT, 0); }
		public TerminalNode IF() { return getToken(PLParser.IF, 0); }
		public Bool_exprContext bool_expr() {
			return getRuleContext(Bool_exprContext.class,0);
		}
		public TerminalNode THEN() { return getToken(PLParser.THEN, 0); }
		public Single_block_stmtContext single_block_stmt() {
			return getRuleContext(Single_block_stmtContext.class,0);
		}
		public If_bteq_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_if_bteq_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterIf_bteq_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitIf_bteq_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitIf_bteq_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final If_bteq_stmtContext if_bteq_stmt() throws RecognitionException {
		If_bteq_stmtContext _localctx = new If_bteq_stmtContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_if_bteq_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1297);
			match(DOT);
			setState(1298);
			match(IF);
			setState(1299);
			bool_expr(0);
			setState(1300);
			match(THEN);
			setState(1301);
			single_block_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Elseif_blockContext extends ParserRuleContext {
		public Bool_exprContext bool_expr() {
			return getRuleContext(Bool_exprContext.class,0);
		}
		public TerminalNode THEN() { return getToken(PLParser.THEN, 0); }
		public BlockContext block() {
			return getRuleContext(BlockContext.class,0);
		}
		public TerminalNode ELSIF() { return getToken(PLParser.ELSIF, 0); }
		public TerminalNode ELSEIF() { return getToken(PLParser.ELSEIF, 0); }
		public Elseif_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elseif_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterElseif_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitElseif_block(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitElseif_block(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Elseif_blockContext elseif_block() throws RecognitionException {
		Elseif_blockContext _localctx = new Elseif_blockContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_elseif_block);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1303);
			_la = _input.LA(1);
			if ( !(_la==ELSEIF || _la==ELSIF) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1304);
			bool_expr(0);
			setState(1305);
			match(THEN);
			setState(1306);
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Else_blockContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(PLParser.ELSE, 0); }
		public BlockContext block() {
			return getRuleContext(BlockContext.class,0);
		}
		public Else_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_else_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterElse_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitElse_block(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitElse_block(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Else_blockContext else_block() throws RecognitionException {
		Else_blockContext _localctx = new Else_blockContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_else_block);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1308);
			match(ELSE);
			setState(1309);
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Include_stmtContext extends ParserRuleContext {
		public TerminalNode INCLUDE() { return getToken(PLParser.INCLUDE, 0); }
		public File_nameContext file_name() {
			return getRuleContext(File_nameContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public Include_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_include_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterInclude_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitInclude_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitInclude_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Include_stmtContext include_stmt() throws RecognitionException {
		Include_stmtContext _localctx = new Include_stmtContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_include_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1311);
			match(INCLUDE);
			setState(1314);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,112,_ctx) ) {
			case 1:
				{
				setState(1312);
				file_name();
				}
				break;
			case 2:
				{
				setState(1313);
				expr(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exit_stmtContext extends ParserRuleContext {
		public TerminalNode EXIT() { return getToken(PLParser.EXIT, 0); }
		public TerminalNode IDENTIFIER() { return getToken(PLParser.IDENTIFIER, 0); }
		public TerminalNode WHEN() { return getToken(PLParser.WHEN, 0); }
		public Bool_exprContext bool_expr() {
			return getRuleContext(Bool_exprContext.class,0);
		}
		public Exit_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exit_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterExit_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitExit_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitExit_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exit_stmtContext exit_stmt() throws RecognitionException {
		Exit_stmtContext _localctx = new Exit_stmtContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_exit_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1316);
			match(EXIT);
			setState(1318);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,113,_ctx) ) {
			case 1:
				{
				setState(1317);
				match(IDENTIFIER);
				}
				break;
			}
			setState(1322);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,114,_ctx) ) {
			case 1:
				{
				setState(1320);
				match(WHEN);
				setState(1321);
				bool_expr(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Get_diag_stmtContext extends ParserRuleContext {
		public TerminalNode GET() { return getToken(PLParser.GET, 0); }
		public TerminalNode DIAGNOSTICS() { return getToken(PLParser.DIAGNOSTICS, 0); }
		public Get_diag_stmt_itemContext get_diag_stmt_item() {
			return getRuleContext(Get_diag_stmt_itemContext.class,0);
		}
		public Get_diag_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_get_diag_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterGet_diag_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitGet_diag_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitGet_diag_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Get_diag_stmtContext get_diag_stmt() throws RecognitionException {
		Get_diag_stmtContext _localctx = new Get_diag_stmtContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_get_diag_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1324);
			match(GET);
			setState(1325);
			match(DIAGNOSTICS);
			setState(1326);
			get_diag_stmt_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Get_diag_stmt_itemContext extends ParserRuleContext {
		public Get_diag_stmt_exception_itemContext get_diag_stmt_exception_item() {
			return getRuleContext(Get_diag_stmt_exception_itemContext.class,0);
		}
		public Get_diag_stmt_rowcount_itemContext get_diag_stmt_rowcount_item() {
			return getRuleContext(Get_diag_stmt_rowcount_itemContext.class,0);
		}
		public Get_diag_stmt_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_get_diag_stmt_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterGet_diag_stmt_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitGet_diag_stmt_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitGet_diag_stmt_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Get_diag_stmt_itemContext get_diag_stmt_item() throws RecognitionException {
		Get_diag_stmt_itemContext _localctx = new Get_diag_stmt_itemContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_get_diag_stmt_item);
		try {
			setState(1330);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,115,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1328);
				get_diag_stmt_exception_item();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1329);
				get_diag_stmt_rowcount_item();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Get_diag_stmt_exception_itemContext extends ParserRuleContext {
		public TerminalNode EXCEPTION() { return getToken(PLParser.EXCEPTION, 0); }
		public TerminalNode INTEGER_VALUE() { return getToken(PLParser.INTEGER_VALUE, 0); }
		public QidentContext qident() {
			return getRuleContext(QidentContext.class,0);
		}
		public TerminalNode EQ() { return getToken(PLParser.EQ, 0); }
		public TerminalNode MESSAGE_TEXT() { return getToken(PLParser.MESSAGE_TEXT, 0); }
		public Get_diag_stmt_exception_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_get_diag_stmt_exception_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterGet_diag_stmt_exception_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitGet_diag_stmt_exception_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitGet_diag_stmt_exception_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Get_diag_stmt_exception_itemContext get_diag_stmt_exception_item() throws RecognitionException {
		Get_diag_stmt_exception_itemContext _localctx = new Get_diag_stmt_exception_itemContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_get_diag_stmt_exception_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1332);
			match(EXCEPTION);
			setState(1333);
			match(INTEGER_VALUE);
			setState(1334);
			qident();
			setState(1335);
			match(EQ);
			setState(1336);
			match(MESSAGE_TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Get_diag_stmt_rowcount_itemContext extends ParserRuleContext {
		public QidentContext qident() {
			return getRuleContext(QidentContext.class,0);
		}
		public TerminalNode EQ() { return getToken(PLParser.EQ, 0); }
		public TerminalNode ROW_COUNT() { return getToken(PLParser.ROW_COUNT, 0); }
		public Get_diag_stmt_rowcount_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_get_diag_stmt_rowcount_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterGet_diag_stmt_rowcount_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitGet_diag_stmt_rowcount_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitGet_diag_stmt_rowcount_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Get_diag_stmt_rowcount_itemContext get_diag_stmt_rowcount_item() throws RecognitionException {
		Get_diag_stmt_rowcount_itemContext _localctx = new Get_diag_stmt_rowcount_itemContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_get_diag_stmt_rowcount_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1338);
			qident();
			setState(1339);
			match(EQ);
			setState(1340);
			match(ROW_COUNT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Leave_stmtContext extends ParserRuleContext {
		public TerminalNode LEAVE() { return getToken(PLParser.LEAVE, 0); }
		public TerminalNode IDENTIFIER() { return getToken(PLParser.IDENTIFIER, 0); }
		public Leave_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_leave_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterLeave_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitLeave_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitLeave_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Leave_stmtContext leave_stmt() throws RecognitionException {
		Leave_stmtContext _localctx = new Leave_stmtContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_leave_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1342);
			match(LEAVE);
			setState(1344);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,116,_ctx) ) {
			case 1:
				{
				setState(1343);
				match(IDENTIFIER);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Map_object_stmtContext extends ParserRuleContext {
		public TerminalNode MAP() { return getToken(PLParser.MAP, 0); }
		public TerminalNode OBJECT() { return getToken(PLParser.OBJECT, 0); }
		public List<Ident_plContext> ident_pl() {
			return getRuleContexts(Ident_plContext.class);
		}
		public Ident_plContext ident_pl(int i) {
			return getRuleContext(Ident_plContext.class,i);
		}
		public TerminalNode TO() { return getToken(PLParser.TO, 0); }
		public TerminalNode AT() { return getToken(PLParser.AT, 0); }
		public Map_object_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_map_object_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterMap_object_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitMap_object_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitMap_object_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Map_object_stmtContext map_object_stmt() throws RecognitionException {
		Map_object_stmtContext _localctx = new Map_object_stmtContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_map_object_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1346);
			match(MAP);
			setState(1347);
			match(OBJECT);
			setState(1348);
			ident_pl();
			setState(1351);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,117,_ctx) ) {
			case 1:
				{
				setState(1349);
				match(TO);
				setState(1350);
				ident_pl();
				}
				break;
			}
			setState(1355);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,118,_ctx) ) {
			case 1:
				{
				setState(1353);
				match(AT);
				setState(1354);
				ident_pl();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Open_stmtContext extends ParserRuleContext {
		public TerminalNode OPEN() { return getToken(PLParser.OPEN, 0); }
		public Ident_plContext ident_pl() {
			return getRuleContext(Ident_plContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PLParser.FOR, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public Open_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterOpen_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitOpen_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitOpen_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Open_stmtContext open_stmt() throws RecognitionException {
		Open_stmtContext _localctx = new Open_stmtContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_open_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1357);
			match(OPEN);
			setState(1358);
			ident_pl();
			setState(1364);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,120,_ctx) ) {
			case 1:
				{
				setState(1359);
				match(FOR);
				setState(1362);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,119,_ctx) ) {
				case 1:
					{
					setState(1360);
					query();
					}
					break;
				case 2:
					{
					setState(1361);
					expr(0);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fetch_stmtContext extends ParserRuleContext {
		public TerminalNode FETCH() { return getToken(PLParser.FETCH, 0); }
		public List<Ident_plContext> ident_pl() {
			return getRuleContexts(Ident_plContext.class);
		}
		public Ident_plContext ident_pl(int i) {
			return getRuleContext(Ident_plContext.class,i);
		}
		public TerminalNode INTO() { return getToken(PLParser.INTO, 0); }
		public TerminalNode FROM() { return getToken(PLParser.FROM, 0); }
		public BulkCollectClauseContext bulkCollectClause() {
			return getRuleContext(BulkCollectClauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public Fetch_limitContext fetch_limit() {
			return getRuleContext(Fetch_limitContext.class,0);
		}
		public Fetch_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetch_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterFetch_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitFetch_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitFetch_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fetch_stmtContext fetch_stmt() throws RecognitionException {
		Fetch_stmtContext _localctx = new Fetch_stmtContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_fetch_stmt);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1366);
			match(FETCH);
			setState(1368);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(1367);
				match(FROM);
				}
			}

			setState(1370);
			ident_pl();
			setState(1372);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BULK) {
				{
				setState(1371);
				bulkCollectClause();
				}
			}

			setState(1374);
			match(INTO);
			setState(1375);
			ident_pl();
			setState(1380);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,123,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1376);
					match(COMMA);
					setState(1377);
					ident_pl();
					}
					} 
				}
				setState(1382);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,123,_ctx);
			}
			setState(1384);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,124,_ctx) ) {
			case 1:
				{
				setState(1383);
				fetch_limit();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fetch_limitContext extends ParserRuleContext {
		public TerminalNode LIMIT() { return getToken(PLParser.LIMIT, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public Fetch_limitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetch_limit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterFetch_limit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitFetch_limit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitFetch_limit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fetch_limitContext fetch_limit() throws RecognitionException {
		Fetch_limitContext _localctx = new Fetch_limitContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_fetch_limit);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1386);
			match(LIMIT);
			setState(1387);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Close_stmtContext extends ParserRuleContext {
		public TerminalNode CLOSE() { return getToken(PLParser.CLOSE, 0); }
		public TerminalNode IDENTIFIER() { return getToken(PLParser.IDENTIFIER, 0); }
		public Close_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_close_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterClose_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitClose_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitClose_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Close_stmtContext close_stmt() throws RecognitionException {
		Close_stmtContext _localctx = new Close_stmtContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_close_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1389);
			match(CLOSE);
			setState(1390);
			match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Print_stmtContext extends ParserRuleContext {
		public TerminalNode PRINT() { return getToken(PLParser.PRINT, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public Print_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_print_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterPrint_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitPrint_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitPrint_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Print_stmtContext print_stmt() throws RecognitionException {
		Print_stmtContext _localctx = new Print_stmtContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_print_stmt);
		try {
			setState(1399);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,125,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1392);
				match(PRINT);
				setState(1393);
				expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1394);
				match(PRINT);
				setState(1395);
				match(LEFT_PAREN);
				setState(1396);
				expr(0);
				setState(1397);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Quit_stmtContext extends ParserRuleContext {
		public TerminalNode QUIT() { return getToken(PLParser.QUIT, 0); }
		public TerminalNode DOT() { return getToken(PLParser.DOT, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public Quit_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_quit_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterQuit_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitQuit_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitQuit_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Quit_stmtContext quit_stmt() throws RecognitionException {
		Quit_stmtContext _localctx = new Quit_stmtContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_quit_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1402);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DOT) {
				{
				setState(1401);
				match(DOT);
				}
			}

			setState(1404);
			match(QUIT);
			setState(1406);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,127,_ctx) ) {
			case 1:
				{
				setState(1405);
				expr(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Raise_stmtContext extends ParserRuleContext {
		public TerminalNode RAISE() { return getToken(PLParser.RAISE, 0); }
		public Raise_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_raise_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterRaise_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitRaise_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitRaise_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Raise_stmtContext raise_stmt() throws RecognitionException {
		Raise_stmtContext _localctx = new Raise_stmtContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_raise_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1408);
			match(RAISE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Resignal_stmtContext extends ParserRuleContext {
		public TerminalNode RESIGNAL() { return getToken(PLParser.RESIGNAL, 0); }
		public TerminalNode SQLSTATE() { return getToken(PLParser.SQLSTATE, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode VALUE() { return getToken(PLParser.VALUE, 0); }
		public TerminalNode SET() { return getToken(PLParser.SET, 0); }
		public TerminalNode MESSAGE_TEXT() { return getToken(PLParser.MESSAGE_TEXT, 0); }
		public TerminalNode EQ() { return getToken(PLParser.EQ, 0); }
		public Resignal_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resignal_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterResignal_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitResignal_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitResignal_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Resignal_stmtContext resignal_stmt() throws RecognitionException {
		Resignal_stmtContext _localctx = new Resignal_stmtContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_resignal_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1410);
			match(RESIGNAL);
			setState(1422);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,130,_ctx) ) {
			case 1:
				{
				setState(1411);
				match(SQLSTATE);
				setState(1413);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,128,_ctx) ) {
				case 1:
					{
					setState(1412);
					match(VALUE);
					}
					break;
				}
				setState(1415);
				expr(0);
				setState(1420);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,129,_ctx) ) {
				case 1:
					{
					setState(1416);
					match(SET);
					setState(1417);
					match(MESSAGE_TEXT);
					setState(1418);
					match(EQ);
					setState(1419);
					expr(0);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Return_stmtContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(PLParser.RETURN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public Return_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_return_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterReturn_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitReturn_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitReturn_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Return_stmtContext return_stmt() throws RecognitionException {
		Return_stmtContext _localctx = new Return_stmtContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_return_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1424);
			match(RETURN);
			setState(1426);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,131,_ctx) ) {
			case 1:
				{
				setState(1425);
				expr(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_session_optionContext extends ParserRuleContext {
		public Set_doris_session_optionContext set_doris_session_option() {
			return getRuleContext(Set_doris_session_optionContext.class,0);
		}
		public Set_current_schema_optionContext set_current_schema_option() {
			return getRuleContext(Set_current_schema_optionContext.class,0);
		}
		public Set_mssql_session_optionContext set_mssql_session_option() {
			return getRuleContext(Set_mssql_session_optionContext.class,0);
		}
		public Set_teradata_session_optionContext set_teradata_session_option() {
			return getRuleContext(Set_teradata_session_optionContext.class,0);
		}
		public Set_session_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_session_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterSet_session_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitSet_session_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitSet_session_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_session_optionContext set_session_option() throws RecognitionException {
		Set_session_optionContext _localctx = new Set_session_optionContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_set_session_option);
		try {
			setState(1432);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,132,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1428);
				set_doris_session_option();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1429);
				set_current_schema_option();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1430);
				set_mssql_session_option();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1431);
				set_teradata_session_option();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_doris_session_optionContext extends ParserRuleContext {
		public List<Ident_plContext> ident_pl() {
			return getRuleContexts(Ident_plContext.class);
		}
		public Ident_plContext ident_pl(int i) {
			return getRuleContext(Ident_plContext.class,i);
		}
		public TerminalNode EQ() { return getToken(PLParser.EQ, 0); }
		public TerminalNode GLOBAL() { return getToken(PLParser.GLOBAL, 0); }
		public TerminalNode LOCAL() { return getToken(PLParser.LOCAL, 0); }
		public TerminalNode SESSION() { return getToken(PLParser.SESSION, 0); }
		public Set_doris_session_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_doris_session_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterSet_doris_session_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitSet_doris_session_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitSet_doris_session_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_doris_session_optionContext set_doris_session_option() throws RecognitionException {
		Set_doris_session_optionContext _localctx = new Set_doris_session_optionContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_set_doris_session_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1435);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,133,_ctx) ) {
			case 1:
				{
				setState(1434);
				_la = _input.LA(1);
				if ( !(_la==GLOBAL || _la==LOCAL || _la==SESSION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(1437);
			ident_pl();
			setState(1438);
			match(EQ);
			setState(1439);
			ident_pl();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_current_schema_optionContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode CURRENT_SCHEMA() { return getToken(PLParser.CURRENT_SCHEMA, 0); }
		public TerminalNode EQ() { return getToken(PLParser.EQ, 0); }
		public TerminalNode SCHEMA() { return getToken(PLParser.SCHEMA, 0); }
		public TerminalNode CURRENT() { return getToken(PLParser.CURRENT, 0); }
		public Set_current_schema_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_current_schema_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterSet_current_schema_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitSet_current_schema_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitSet_current_schema_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_current_schema_optionContext set_current_schema_option() throws RecognitionException {
		Set_current_schema_optionContext _localctx = new Set_current_schema_optionContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_set_current_schema_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1446);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT:
			case SCHEMA:
				{
				{
				setState(1442);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CURRENT) {
					{
					setState(1441);
					match(CURRENT);
					}
				}

				setState(1444);
				match(SCHEMA);
				}
				}
				break;
			case CURRENT_SCHEMA:
				{
				setState(1445);
				match(CURRENT_SCHEMA);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1449);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQ) {
				{
				setState(1448);
				match(EQ);
				}
			}

			setState(1451);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_mssql_session_optionContext extends ParserRuleContext {
		public TerminalNode ANSI_NULLS() { return getToken(PLParser.ANSI_NULLS, 0); }
		public TerminalNode ANSI_PADDING() { return getToken(PLParser.ANSI_PADDING, 0); }
		public TerminalNode NOCOUNT() { return getToken(PLParser.NOCOUNT, 0); }
		public TerminalNode QUOTED_IDENTIFIER() { return getToken(PLParser.QUOTED_IDENTIFIER, 0); }
		public TerminalNode XACT_ABORT() { return getToken(PLParser.XACT_ABORT, 0); }
		public TerminalNode ON() { return getToken(PLParser.ON, 0); }
		public TerminalNode OFF() { return getToken(PLParser.OFF, 0); }
		public Set_mssql_session_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_mssql_session_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterSet_mssql_session_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitSet_mssql_session_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitSet_mssql_session_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_mssql_session_optionContext set_mssql_session_option() throws RecognitionException {
		Set_mssql_session_optionContext _localctx = new Set_mssql_session_optionContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_set_mssql_session_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1453);
			_la = _input.LA(1);
			if ( !(_la==ANSI_NULLS || _la==ANSI_PADDING || _la==NOCOUNT || _la==QUOTED_IDENTIFIER || _la==XACT_ABORT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1454);
			_la = _input.LA(1);
			if ( !(_la==OFF || _la==ON) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_teradata_session_optionContext extends ParserRuleContext {
		public TerminalNode QUERY_BAND() { return getToken(PLParser.QUERY_BAND, 0); }
		public TerminalNode EQ() { return getToken(PLParser.EQ, 0); }
		public TerminalNode FOR() { return getToken(PLParser.FOR, 0); }
		public TerminalNode TRANSACTION() { return getToken(PLParser.TRANSACTION, 0); }
		public TerminalNode SESSION() { return getToken(PLParser.SESSION, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode NONE() { return getToken(PLParser.NONE, 0); }
		public TerminalNode UPDATE() { return getToken(PLParser.UPDATE, 0); }
		public Set_teradata_session_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_teradata_session_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterSet_teradata_session_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitSet_teradata_session_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitSet_teradata_session_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_teradata_session_optionContext set_teradata_session_option() throws RecognitionException {
		Set_teradata_session_optionContext _localctx = new Set_teradata_session_optionContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_set_teradata_session_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1456);
			match(QUERY_BAND);
			setState(1457);
			match(EQ);
			setState(1460);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,137,_ctx) ) {
			case 1:
				{
				setState(1458);
				expr(0);
				}
				break;
			case 2:
				{
				setState(1459);
				match(NONE);
				}
				break;
			}
			setState(1463);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UPDATE) {
				{
				setState(1462);
				match(UPDATE);
				}
			}

			setState(1465);
			match(FOR);
			setState(1466);
			_la = _input.LA(1);
			if ( !(_la==SESSION || _la==TRANSACTION) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Signal_stmtContext extends ParserRuleContext {
		public TerminalNode SIGNAL() { return getToken(PLParser.SIGNAL, 0); }
		public Ident_plContext ident_pl() {
			return getRuleContext(Ident_plContext.class,0);
		}
		public Signal_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signal_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterSignal_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitSignal_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitSignal_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Signal_stmtContext signal_stmt() throws RecognitionException {
		Signal_stmtContext _localctx = new Signal_stmtContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_signal_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1468);
			match(SIGNAL);
			setState(1469);
			ident_pl();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Values_into_stmtContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(PLParser.VALUES, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode INTO() { return getToken(PLParser.INTO, 0); }
		public List<Ident_plContext> ident_pl() {
			return getRuleContexts(Ident_plContext.class);
		}
		public Ident_plContext ident_pl(int i) {
			return getRuleContext(Ident_plContext.class,i);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PLParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PLParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PLParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PLParser.RIGHT_PAREN, i);
		}
		public Values_into_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_values_into_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterValues_into_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitValues_into_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitValues_into_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Values_into_stmtContext values_into_stmt() throws RecognitionException {
		Values_into_stmtContext _localctx = new Values_into_stmtContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_values_into_stmt);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1471);
			match(VALUES);
			setState(1473);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,139,_ctx) ) {
			case 1:
				{
				setState(1472);
				match(LEFT_PAREN);
				}
				break;
			}
			setState(1475);
			expr(0);
			setState(1480);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1476);
				match(COMMA);
				setState(1477);
				expr(0);
				}
				}
				setState(1482);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1484);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RIGHT_PAREN) {
				{
				setState(1483);
				match(RIGHT_PAREN);
				}
			}

			setState(1486);
			match(INTO);
			setState(1488);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1487);
				match(LEFT_PAREN);
				}
			}

			setState(1490);
			ident_pl();
			setState(1495);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,143,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1491);
					match(COMMA);
					setState(1492);
					ident_pl();
					}
					} 
				}
				setState(1497);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,143,_ctx);
			}
			setState(1499);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,144,_ctx) ) {
			case 1:
				{
				setState(1498);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class While_stmtContext extends ParserRuleContext {
		public List<TerminalNode> WHILE() { return getTokens(PLParser.WHILE); }
		public TerminalNode WHILE(int i) {
			return getToken(PLParser.WHILE, i);
		}
		public Bool_exprContext bool_expr() {
			return getRuleContext(Bool_exprContext.class,0);
		}
		public BlockContext block() {
			return getRuleContext(BlockContext.class,0);
		}
		public TerminalNode END() { return getToken(PLParser.END, 0); }
		public TerminalNode DO() { return getToken(PLParser.DO, 0); }
		public List<TerminalNode> LOOP() { return getTokens(PLParser.LOOP); }
		public TerminalNode LOOP(int i) {
			return getToken(PLParser.LOOP, i);
		}
		public TerminalNode THEN() { return getToken(PLParser.THEN, 0); }
		public TerminalNode BEGIN() { return getToken(PLParser.BEGIN, 0); }
		public While_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_while_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterWhile_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitWhile_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitWhile_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final While_stmtContext while_stmt() throws RecognitionException {
		While_stmtContext _localctx = new While_stmtContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_while_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1501);
			match(WHILE);
			setState(1502);
			bool_expr(0);
			setState(1503);
			_la = _input.LA(1);
			if ( !(_la==LOOP || _la==BEGIN || _la==DO || _la==THEN) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1504);
			block();
			setState(1505);
			match(END);
			setState(1507);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,145,_ctx) ) {
			case 1:
				{
				setState(1506);
				_la = _input.LA(1);
				if ( !(_la==LOOP || _la==WHILE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unconditional_loop_stmtContext extends ParserRuleContext {
		public List<TerminalNode> LOOP() { return getTokens(PLParser.LOOP); }
		public TerminalNode LOOP(int i) {
			return getToken(PLParser.LOOP, i);
		}
		public BlockContext block() {
			return getRuleContext(BlockContext.class,0);
		}
		public TerminalNode END() { return getToken(PLParser.END, 0); }
		public Unconditional_loop_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unconditional_loop_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterUnconditional_loop_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitUnconditional_loop_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitUnconditional_loop_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unconditional_loop_stmtContext unconditional_loop_stmt() throws RecognitionException {
		Unconditional_loop_stmtContext _localctx = new Unconditional_loop_stmtContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_unconditional_loop_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1509);
			match(LOOP);
			setState(1510);
			block();
			setState(1511);
			match(END);
			setState(1512);
			match(LOOP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_cursor_stmtContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PLParser.FOR, 0); }
		public TerminalNode IDENTIFIER() { return getToken(PLParser.IDENTIFIER, 0); }
		public TerminalNode IN() { return getToken(PLParser.IN, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public List<TerminalNode> LOOP() { return getTokens(PLParser.LOOP); }
		public TerminalNode LOOP(int i) {
			return getToken(PLParser.LOOP, i);
		}
		public BlockContext block() {
			return getRuleContext(BlockContext.class,0);
		}
		public TerminalNode END() { return getToken(PLParser.END, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public For_cursor_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_cursor_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterFor_cursor_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitFor_cursor_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitFor_cursor_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_cursor_stmtContext for_cursor_stmt() throws RecognitionException {
		For_cursor_stmtContext _localctx = new For_cursor_stmtContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_for_cursor_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1514);
			match(FOR);
			setState(1515);
			match(IDENTIFIER);
			setState(1516);
			match(IN);
			setState(1518);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,146,_ctx) ) {
			case 1:
				{
				setState(1517);
				match(LEFT_PAREN);
				}
				break;
			}
			setState(1520);
			query();
			setState(1522);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RIGHT_PAREN) {
				{
				setState(1521);
				match(RIGHT_PAREN);
				}
			}

			setState(1524);
			match(LOOP);
			setState(1525);
			block();
			setState(1526);
			match(END);
			setState(1527);
			match(LOOP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_range_stmtContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PLParser.FOR, 0); }
		public TerminalNode IDENTIFIER() { return getToken(PLParser.IDENTIFIER, 0); }
		public TerminalNode IN() { return getToken(PLParser.IN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode DOT2() { return getToken(PLParser.DOT2, 0); }
		public List<TerminalNode> LOOP() { return getTokens(PLParser.LOOP); }
		public TerminalNode LOOP(int i) {
			return getToken(PLParser.LOOP, i);
		}
		public BlockContext block() {
			return getRuleContext(BlockContext.class,0);
		}
		public TerminalNode END() { return getToken(PLParser.END, 0); }
		public TerminalNode REVERSE() { return getToken(PLParser.REVERSE, 0); }
		public TerminalNode BY() { return getToken(PLParser.BY, 0); }
		public TerminalNode STEP() { return getToken(PLParser.STEP, 0); }
		public For_range_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_range_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterFor_range_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitFor_range_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitFor_range_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_range_stmtContext for_range_stmt() throws RecognitionException {
		For_range_stmtContext _localctx = new For_range_stmtContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_for_range_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1529);
			match(FOR);
			setState(1530);
			match(IDENTIFIER);
			setState(1531);
			match(IN);
			setState(1533);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,148,_ctx) ) {
			case 1:
				{
				setState(1532);
				match(REVERSE);
				}
				break;
			}
			setState(1535);
			expr(0);
			setState(1536);
			match(DOT2);
			setState(1537);
			expr(0);
			setState(1540);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STEP || _la==BY) {
				{
				setState(1538);
				_la = _input.LA(1);
				if ( !(_la==STEP || _la==BY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1539);
				expr(0);
				}
			}

			setState(1542);
			match(LOOP);
			setState(1543);
			block();
			setState(1544);
			match(END);
			setState(1545);
			match(LOOP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Label_stmtContext extends ParserRuleContext {
		public TerminalNode IDENTIFIER() { return getToken(PLParser.IDENTIFIER, 0); }
		public TerminalNode COLON() { return getToken(PLParser.COLON, 0); }
		public List<TerminalNode> LT() { return getTokens(PLParser.LT); }
		public TerminalNode LT(int i) {
			return getToken(PLParser.LT, i);
		}
		public List<TerminalNode> GT() { return getTokens(PLParser.GT); }
		public TerminalNode GT(int i) {
			return getToken(PLParser.GT, i);
		}
		public Label_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_label_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterLabel_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitLabel_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitLabel_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Label_stmtContext label_stmt() throws RecognitionException {
		Label_stmtContext _localctx = new Label_stmtContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_label_stmt);
		try {
			setState(1554);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1547);
				match(IDENTIFIER);
				setState(1548);
				match(COLON);
				}
				break;
			case LT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1549);
				match(LT);
				setState(1550);
				match(LT);
				setState(1551);
				match(IDENTIFIER);
				setState(1552);
				match(GT);
				setState(1553);
				match(GT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Using_clauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PLParser.USING, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public Using_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterUsing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitUsing_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitUsing_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Using_clauseContext using_clause() throws RecognitionException {
		Using_clauseContext _localctx = new Using_clauseContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_using_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1556);
			match(USING);
			setState(1557);
			expr(0);
			setState(1562);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,151,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1558);
					match(COMMA);
					setState(1559);
					expr(0);
					}
					} 
				}
				setState(1564);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,151,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bool_exprContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public List<Bool_exprContext> bool_expr() {
			return getRuleContexts(Bool_exprContext.class);
		}
		public Bool_exprContext bool_expr(int i) {
			return getRuleContext(Bool_exprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public TerminalNode NOT() { return getToken(PLParser.NOT, 0); }
		public Bool_expr_atomContext bool_expr_atom() {
			return getRuleContext(Bool_expr_atomContext.class,0);
		}
		public Bool_expr_logical_operatorContext bool_expr_logical_operator() {
			return getRuleContext(Bool_expr_logical_operatorContext.class,0);
		}
		public Bool_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bool_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterBool_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitBool_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitBool_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bool_exprContext bool_expr() throws RecognitionException {
		return bool_expr(0);
	}

	private Bool_exprContext bool_expr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Bool_exprContext _localctx = new Bool_exprContext(_ctx, _parentState);
		Bool_exprContext _prevctx = _localctx;
		int _startState = 180;
		enterRecursionRule(_localctx, 180, RULE_bool_expr, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1574);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,153,_ctx) ) {
			case 1:
				{
				setState(1567);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1566);
					match(NOT);
					}
				}

				setState(1569);
				match(LEFT_PAREN);
				setState(1570);
				bool_expr(0);
				setState(1571);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(1573);
				bool_expr_atom();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(1582);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,154,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Bool_exprContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_bool_expr);
					setState(1576);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(1577);
					bool_expr_logical_operator();
					setState(1578);
					bool_expr(3);
					}
					} 
				}
				setState(1584);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,154,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Bool_expr_atomContext extends ParserRuleContext {
		public Bool_expr_unaryContext bool_expr_unary() {
			return getRuleContext(Bool_expr_unaryContext.class,0);
		}
		public Bool_expr_binaryContext bool_expr_binary() {
			return getRuleContext(Bool_expr_binaryContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public Bool_expr_atomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bool_expr_atom; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterBool_expr_atom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitBool_expr_atom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitBool_expr_atom(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bool_expr_atomContext bool_expr_atom() throws RecognitionException {
		Bool_expr_atomContext _localctx = new Bool_expr_atomContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_bool_expr_atom);
		try {
			setState(1588);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,155,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1585);
				bool_expr_unary();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1586);
				bool_expr_binary();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1587);
				expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bool_expr_unaryContext extends ParserRuleContext {
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode IS() { return getToken(PLParser.IS, 0); }
		public TerminalNode NULL() { return getToken(PLParser.NULL, 0); }
		public TerminalNode NOT() { return getToken(PLParser.NOT, 0); }
		public TerminalNode BETWEEN() { return getToken(PLParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(PLParser.AND, 0); }
		public Bool_expr_unaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bool_expr_unary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterBool_expr_unary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitBool_expr_unary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitBool_expr_unary(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bool_expr_unaryContext bool_expr_unary() throws RecognitionException {
		Bool_expr_unaryContext _localctx = new Bool_expr_unaryContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_bool_expr_unary);
		int _la;
		try {
			setState(1603);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,157,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1590);
				expr(0);
				setState(1591);
				match(IS);
				setState(1593);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1592);
					match(NOT);
					}
				}

				setState(1595);
				match(NULL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1597);
				expr(0);
				setState(1598);
				match(BETWEEN);
				setState(1599);
				expr(0);
				setState(1600);
				match(AND);
				setState(1601);
				expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bool_expr_binaryContext extends ParserRuleContext {
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public Bool_expr_binary_operatorContext bool_expr_binary_operator() {
			return getRuleContext(Bool_expr_binary_operatorContext.class,0);
		}
		public Bool_expr_binaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bool_expr_binary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterBool_expr_binary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitBool_expr_binary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitBool_expr_binary(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bool_expr_binaryContext bool_expr_binary() throws RecognitionException {
		Bool_expr_binaryContext _localctx = new Bool_expr_binaryContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_bool_expr_binary);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1605);
			expr(0);
			setState(1606);
			bool_expr_binary_operator();
			setState(1607);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bool_expr_logical_operatorContext extends ParserRuleContext {
		public TerminalNode AND() { return getToken(PLParser.AND, 0); }
		public TerminalNode OR() { return getToken(PLParser.OR, 0); }
		public Bool_expr_logical_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bool_expr_logical_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterBool_expr_logical_operator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitBool_expr_logical_operator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitBool_expr_logical_operator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bool_expr_logical_operatorContext bool_expr_logical_operator() throws RecognitionException {
		Bool_expr_logical_operatorContext _localctx = new Bool_expr_logical_operatorContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_bool_expr_logical_operator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1609);
			_la = _input.LA(1);
			if ( !(_la==AND || _la==OR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bool_expr_binary_operatorContext extends ParserRuleContext {
		public TerminalNode EQ() { return getToken(PLParser.EQ, 0); }
		public TerminalNode NEQ() { return getToken(PLParser.NEQ, 0); }
		public TerminalNode LT() { return getToken(PLParser.LT, 0); }
		public TerminalNode LTE() { return getToken(PLParser.LTE, 0); }
		public TerminalNode GT() { return getToken(PLParser.GT, 0); }
		public TerminalNode GTE() { return getToken(PLParser.GTE, 0); }
		public TerminalNode LIKE() { return getToken(PLParser.LIKE, 0); }
		public TerminalNode RLIKE() { return getToken(PLParser.RLIKE, 0); }
		public TerminalNode REGEXP() { return getToken(PLParser.REGEXP, 0); }
		public TerminalNode NOT() { return getToken(PLParser.NOT, 0); }
		public Bool_expr_binary_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bool_expr_binary_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterBool_expr_binary_operator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitBool_expr_binary_operator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitBool_expr_binary_operator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bool_expr_binary_operatorContext bool_expr_binary_operator() throws RecognitionException {
		Bool_expr_binary_operatorContext _localctx = new Bool_expr_binary_operatorContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_bool_expr_binary_operator);
		int _la;
		try {
			setState(1621);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EQ:
				enterOuterAlt(_localctx, 1);
				{
				setState(1611);
				match(EQ);
				}
				break;
			case NEQ:
				enterOuterAlt(_localctx, 2);
				{
				setState(1612);
				match(NEQ);
				}
				break;
			case LT:
				enterOuterAlt(_localctx, 3);
				{
				setState(1613);
				match(LT);
				}
				break;
			case LTE:
				enterOuterAlt(_localctx, 4);
				{
				setState(1614);
				match(LTE);
				}
				break;
			case GT:
				enterOuterAlt(_localctx, 5);
				{
				setState(1615);
				match(GT);
				}
				break;
			case GTE:
				enterOuterAlt(_localctx, 6);
				{
				setState(1616);
				match(GTE);
				}
				break;
			case LIKE:
			case NOT:
			case REGEXP:
			case RLIKE:
				enterOuterAlt(_localctx, 7);
				{
				setState(1618);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1617);
					match(NOT);
					}
				}

				setState(1620);
				_la = _input.LA(1);
				if ( !(_la==LIKE || _la==REGEXP || _la==RLIKE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExprContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public Expr_intervalContext expr_interval() {
			return getRuleContext(Expr_intervalContext.class,0);
		}
		public Expr_concatContext expr_concat() {
			return getRuleContext(Expr_concatContext.class,0);
		}
		public Expr_dotContext expr_dot() {
			return getRuleContext(Expr_dotContext.class,0);
		}
		public Expr_caseContext expr_case() {
			return getRuleContext(Expr_caseContext.class,0);
		}
		public Expr_cursor_attributeContext expr_cursor_attribute() {
			return getRuleContext(Expr_cursor_attributeContext.class,0);
		}
		public Expr_agg_window_funcContext expr_agg_window_func() {
			return getRuleContext(Expr_agg_window_funcContext.class,0);
		}
		public Expr_spec_funcContext expr_spec_func() {
			return getRuleContext(Expr_spec_funcContext.class,0);
		}
		public Expr_funcContext expr_func() {
			return getRuleContext(Expr_funcContext.class,0);
		}
		public Expr_atomContext expr_atom() {
			return getRuleContext(Expr_atomContext.class,0);
		}
		public TerminalNode ASTERISK() { return getToken(PLParser.ASTERISK, 0); }
		public TerminalNode SLASH() { return getToken(PLParser.SLASH, 0); }
		public TerminalNode PLUS() { return getToken(PLParser.PLUS, 0); }
		public TerminalNode SUBTRACT() { return getToken(PLParser.SUBTRACT, 0); }
		public Interval_itemContext interval_item() {
			return getRuleContext(Interval_itemContext.class,0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExprContext expr() throws RecognitionException {
		return expr(0);
	}

	private ExprContext expr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 192;
		enterRecursionRule(_localctx, 192, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1641);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,160,_ctx) ) {
			case 1:
				{
				setState(1624);
				match(LEFT_PAREN);
				setState(1625);
				query();
				setState(1626);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(1628);
				match(LEFT_PAREN);
				setState(1629);
				expr(0);
				setState(1630);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				{
				setState(1632);
				expr_interval();
				}
				break;
			case 4:
				{
				setState(1633);
				expr_concat();
				}
				break;
			case 5:
				{
				setState(1634);
				expr_dot();
				}
				break;
			case 6:
				{
				setState(1635);
				expr_case();
				}
				break;
			case 7:
				{
				setState(1636);
				expr_cursor_attribute();
				}
				break;
			case 8:
				{
				setState(1637);
				expr_agg_window_func();
				}
				break;
			case 9:
				{
				setState(1638);
				expr_spec_func();
				}
				break;
			case 10:
				{
				setState(1639);
				expr_func();
				}
				break;
			case 11:
				{
				setState(1640);
				expr_atom();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(1653);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,162,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(1651);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,161,_ctx) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(1643);
						if (!(precpred(_ctx, 13))) throw new FailedPredicateException(this, "precpred(_ctx, 13)");
						setState(1644);
						_la = _input.LA(1);
						if ( !(_la==ASTERISK || _la==SLASH) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(1645);
						expr(14);
						}
						break;
					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(1646);
						if (!(precpred(_ctx, 12))) throw new FailedPredicateException(this, "precpred(_ctx, 12)");
						setState(1647);
						_la = _input.LA(1);
						if ( !(_la==PLUS || _la==SUBTRACT) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(1648);
						expr(13);
						}
						break;
					case 3:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(1649);
						if (!(precpred(_ctx, 14))) throw new FailedPredicateException(this, "precpred(_ctx, 14)");
						setState(1650);
						interval_item();
						}
						break;
					}
					} 
				}
				setState(1655);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,162,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Expr_atomContext extends ParserRuleContext {
		public Date_literalContext date_literal() {
			return getRuleContext(Date_literalContext.class,0);
		}
		public Timestamp_literalContext timestamp_literal() {
			return getRuleContext(Timestamp_literalContext.class,0);
		}
		public Bool_literalContext bool_literal() {
			return getRuleContext(Bool_literalContext.class,0);
		}
		public QidentContext qident() {
			return getRuleContext(QidentContext.class,0);
		}
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public Dec_numberContext dec_number() {
			return getRuleContext(Dec_numberContext.class,0);
		}
		public Int_numberContext int_number() {
			return getRuleContext(Int_numberContext.class,0);
		}
		public Null_constContext null_const() {
			return getRuleContext(Null_constContext.class,0);
		}
		public Expr_atomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_atom; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterExpr_atom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitExpr_atom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitExpr_atom(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_atomContext expr_atom() throws RecognitionException {
		Expr_atomContext _localctx = new Expr_atomContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_expr_atom);
		try {
			setState(1664);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,163,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1656);
				date_literal();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1657);
				timestamp_literal();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1658);
				bool_literal();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1659);
				qident();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1660);
				string();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1661);
				dec_number();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1662);
				int_number();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1663);
				null_const();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expr_intervalContext extends ParserRuleContext {
		public TerminalNode INTERVAL() { return getToken(PLParser.INTERVAL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public Interval_itemContext interval_item() {
			return getRuleContext(Interval_itemContext.class,0);
		}
		public Expr_intervalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_interval; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterExpr_interval(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitExpr_interval(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitExpr_interval(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_intervalContext expr_interval() throws RecognitionException {
		Expr_intervalContext _localctx = new Expr_intervalContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_expr_interval);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1666);
			match(INTERVAL);
			setState(1667);
			expr(0);
			setState(1668);
			interval_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interval_itemContext extends ParserRuleContext {
		public TerminalNode DAY() { return getToken(PLParser.DAY, 0); }
		public TerminalNode DAYS() { return getToken(PLParser.DAYS, 0); }
		public TerminalNode MICROSECOND() { return getToken(PLParser.MICROSECOND, 0); }
		public TerminalNode MICROSECONDS() { return getToken(PLParser.MICROSECONDS, 0); }
		public TerminalNode SECOND() { return getToken(PLParser.SECOND, 0); }
		public TerminalNode SECONDS() { return getToken(PLParser.SECONDS, 0); }
		public Interval_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterInterval_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitInterval_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitInterval_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interval_itemContext interval_item() throws RecognitionException {
		Interval_itemContext _localctx = new Interval_itemContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_interval_item);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1670);
			_la = _input.LA(1);
			if ( !(_la==DAYS || ((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & ((1L << (MICROSECOND - 83)) | (1L << (MICROSECONDS - 83)) | (1L << (SECONDS - 83)))) != 0) || _la==DAY || _la==SECOND) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expr_concatContext extends ParserRuleContext {
		public List<Expr_concat_itemContext> expr_concat_item() {
			return getRuleContexts(Expr_concat_itemContext.class);
		}
		public Expr_concat_itemContext expr_concat_item(int i) {
			return getRuleContext(Expr_concat_itemContext.class,i);
		}
		public List<TerminalNode> DOUBLEPIPES() { return getTokens(PLParser.DOUBLEPIPES); }
		public TerminalNode DOUBLEPIPES(int i) {
			return getToken(PLParser.DOUBLEPIPES, i);
		}
		public List<TerminalNode> CONCAT() { return getTokens(PLParser.CONCAT); }
		public TerminalNode CONCAT(int i) {
			return getToken(PLParser.CONCAT, i);
		}
		public Expr_concatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_concat; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterExpr_concat(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitExpr_concat(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitExpr_concat(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_concatContext expr_concat() throws RecognitionException {
		Expr_concatContext _localctx = new Expr_concatContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_expr_concat);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1672);
			expr_concat_item();
			setState(1673);
			_la = _input.LA(1);
			if ( !(_la==CONCAT || _la==DOUBLEPIPES) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1674);
			expr_concat_item();
			setState(1679);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,164,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1675);
					_la = _input.LA(1);
					if ( !(_la==CONCAT || _la==DOUBLEPIPES) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1676);
					expr_concat_item();
					}
					} 
				}
				setState(1681);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,164,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expr_concat_itemContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public Expr_caseContext expr_case() {
			return getRuleContext(Expr_caseContext.class,0);
		}
		public Expr_agg_window_funcContext expr_agg_window_func() {
			return getRuleContext(Expr_agg_window_funcContext.class,0);
		}
		public Expr_spec_funcContext expr_spec_func() {
			return getRuleContext(Expr_spec_funcContext.class,0);
		}
		public Expr_dotContext expr_dot() {
			return getRuleContext(Expr_dotContext.class,0);
		}
		public Expr_funcContext expr_func() {
			return getRuleContext(Expr_funcContext.class,0);
		}
		public Expr_atomContext expr_atom() {
			return getRuleContext(Expr_atomContext.class,0);
		}
		public Expr_concat_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_concat_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterExpr_concat_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitExpr_concat_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitExpr_concat_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_concat_itemContext expr_concat_item() throws RecognitionException {
		Expr_concat_itemContext _localctx = new Expr_concat_itemContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_expr_concat_item);
		try {
			setState(1692);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,165,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1682);
				match(LEFT_PAREN);
				setState(1683);
				expr(0);
				setState(1684);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1686);
				expr_case();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1687);
				expr_agg_window_func();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1688);
				expr_spec_func();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1689);
				expr_dot();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1690);
				expr_func();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1691);
				expr_atom();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expr_caseContext extends ParserRuleContext {
		public Expr_case_simpleContext expr_case_simple() {
			return getRuleContext(Expr_case_simpleContext.class,0);
		}
		public Expr_case_searchedContext expr_case_searched() {
			return getRuleContext(Expr_case_searchedContext.class,0);
		}
		public Expr_caseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_case; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterExpr_case(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitExpr_case(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitExpr_case(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_caseContext expr_case() throws RecognitionException {
		Expr_caseContext _localctx = new Expr_caseContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_expr_case);
		try {
			setState(1696);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,166,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1694);
				expr_case_simple();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1695);
				expr_case_searched();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expr_case_simpleContext extends ParserRuleContext {
		public TerminalNode CASE() { return getToken(PLParser.CASE, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode END() { return getToken(PLParser.END, 0); }
		public List<TerminalNode> WHEN() { return getTokens(PLParser.WHEN); }
		public TerminalNode WHEN(int i) {
			return getToken(PLParser.WHEN, i);
		}
		public List<TerminalNode> THEN() { return getTokens(PLParser.THEN); }
		public TerminalNode THEN(int i) {
			return getToken(PLParser.THEN, i);
		}
		public TerminalNode ELSE() { return getToken(PLParser.ELSE, 0); }
		public Expr_case_simpleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_case_simple; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterExpr_case_simple(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitExpr_case_simple(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitExpr_case_simple(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_case_simpleContext expr_case_simple() throws RecognitionException {
		Expr_case_simpleContext _localctx = new Expr_case_simpleContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_expr_case_simple);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1698);
			match(CASE);
			setState(1699);
			expr(0);
			setState(1705); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1700);
				match(WHEN);
				setState(1701);
				expr(0);
				setState(1702);
				match(THEN);
				setState(1703);
				expr(0);
				}
				}
				setState(1707); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(1711);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(1709);
				match(ELSE);
				setState(1710);
				expr(0);
				}
			}

			setState(1713);
			match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expr_case_searchedContext extends ParserRuleContext {
		public TerminalNode CASE() { return getToken(PLParser.CASE, 0); }
		public TerminalNode END() { return getToken(PLParser.END, 0); }
		public List<TerminalNode> WHEN() { return getTokens(PLParser.WHEN); }
		public TerminalNode WHEN(int i) {
			return getToken(PLParser.WHEN, i);
		}
		public List<Bool_exprContext> bool_expr() {
			return getRuleContexts(Bool_exprContext.class);
		}
		public Bool_exprContext bool_expr(int i) {
			return getRuleContext(Bool_exprContext.class,i);
		}
		public List<TerminalNode> THEN() { return getTokens(PLParser.THEN); }
		public TerminalNode THEN(int i) {
			return getToken(PLParser.THEN, i);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(PLParser.ELSE, 0); }
		public Expr_case_searchedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_case_searched; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterExpr_case_searched(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitExpr_case_searched(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitExpr_case_searched(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_case_searchedContext expr_case_searched() throws RecognitionException {
		Expr_case_searchedContext _localctx = new Expr_case_searchedContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_expr_case_searched);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1715);
			match(CASE);
			setState(1721); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1716);
				match(WHEN);
				setState(1717);
				bool_expr(0);
				setState(1718);
				match(THEN);
				setState(1719);
				expr(0);
				}
				}
				setState(1723); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(1727);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(1725);
				match(ELSE);
				setState(1726);
				expr(0);
				}
			}

			setState(1729);
			match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expr_cursor_attributeContext extends ParserRuleContext {
		public Ident_plContext ident_pl() {
			return getRuleContext(Ident_plContext.class,0);
		}
		public TerminalNode MOD() { return getToken(PLParser.MOD, 0); }
		public TerminalNode ISOPEN() { return getToken(PLParser.ISOPEN, 0); }
		public TerminalNode FOUND() { return getToken(PLParser.FOUND, 0); }
		public TerminalNode NOTFOUND() { return getToken(PLParser.NOTFOUND, 0); }
		public Expr_cursor_attributeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_cursor_attribute; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterExpr_cursor_attribute(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitExpr_cursor_attribute(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitExpr_cursor_attribute(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_cursor_attributeContext expr_cursor_attribute() throws RecognitionException {
		Expr_cursor_attributeContext _localctx = new Expr_cursor_attributeContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_expr_cursor_attribute);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1731);
			ident_pl();
			setState(1732);
			match(MOD);
			setState(1733);
			_la = _input.LA(1);
			if ( !(((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (FOUND - 55)) | (1L << (ISOPEN - 55)) | (1L << (NOTFOUND - 55)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expr_agg_window_funcContext extends ParserRuleContext {
		public TerminalNode AVG() { return getToken(PLParser.AVG, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public Expr_func_all_distinctContext expr_func_all_distinct() {
			return getRuleContext(Expr_func_all_distinctContext.class,0);
		}
		public Expr_func_over_clauseContext expr_func_over_clause() {
			return getRuleContext(Expr_func_over_clauseContext.class,0);
		}
		public TerminalNode COUNT() { return getToken(PLParser.COUNT, 0); }
		public TerminalNode ASTERISK() { return getToken(PLParser.ASTERISK, 0); }
		public TerminalNode COUNT_BIG() { return getToken(PLParser.COUNT_BIG, 0); }
		public TerminalNode CUME_DIST() { return getToken(PLParser.CUME_DIST, 0); }
		public TerminalNode DENSE_RANK() { return getToken(PLParser.DENSE_RANK, 0); }
		public TerminalNode FIRST_VALUE() { return getToken(PLParser.FIRST_VALUE, 0); }
		public TerminalNode LAG() { return getToken(PLParser.LAG, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public TerminalNode LAST_VALUE() { return getToken(PLParser.LAST_VALUE, 0); }
		public TerminalNode LEAD() { return getToken(PLParser.LEAD, 0); }
		public TerminalNode MAX() { return getToken(PLParser.MAX, 0); }
		public TerminalNode MIN() { return getToken(PLParser.MIN, 0); }
		public TerminalNode RANK() { return getToken(PLParser.RANK, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(PLParser.ROW_NUMBER, 0); }
		public TerminalNode STDEV() { return getToken(PLParser.STDEV, 0); }
		public TerminalNode SUM() { return getToken(PLParser.SUM, 0); }
		public TerminalNode VAR() { return getToken(PLParser.VAR, 0); }
		public TerminalNode VARIANCE() { return getToken(PLParser.VARIANCE, 0); }
		public Expr_agg_window_funcContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_agg_window_func; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterExpr_agg_window_func(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitExpr_agg_window_func(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitExpr_agg_window_func(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_agg_window_funcContext expr_agg_window_func() throws RecognitionException {
		Expr_agg_window_funcContext _localctx = new Expr_agg_window_funcContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_expr_agg_window_func);
		int _la;
		try {
			setState(1887);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AVG:
				enterOuterAlt(_localctx, 1);
				{
				setState(1735);
				match(AVG);
				setState(1736);
				match(LEFT_PAREN);
				setState(1738);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					setState(1737);
					expr_func_all_distinct();
					}
				}

				setState(1740);
				expr(0);
				setState(1741);
				match(RIGHT_PAREN);
				setState(1743);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,172,_ctx) ) {
				case 1:
					{
					setState(1742);
					expr_func_over_clause();
					}
					break;
				}
				}
				break;
			case COUNT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1745);
				match(COUNT);
				setState(1746);
				match(LEFT_PAREN);
				setState(1752);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ACTION:
				case ALLOCATE:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ASSOCIATE:
				case AVG:
				case BATCHSIZE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BIT:
				case BODY:
				case BREAK:
				case BYTE:
				case CALLER:
				case CASCADE:
				case CASESPECIFIC:
				case CLIENT:
				case CLOSE:
				case CLUSTERED:
				case CMP:
				case COLLECTION:
				case COMPRESS:
				case CONCAT:
				case CONDITION:
				case CONSTANT:
				case COUNT_BIG:
				case CREATOR:
				case CS:
				case CURSOR:
				case DAYS:
				case DEC:
				case DECLARE:
				case DEFINED:
				case DEFINER:
				case DEFINITION:
				case DELIMITED:
				case DELIMITER:
				case DIAGNOSTICS:
				case DIR:
				case DIRECTORY:
				case DISTRIBUTE:
				case ESCAPED:
				case EXEC:
				case EXCEPTION:
				case EXCLUSIVE:
				case EXIT:
				case FALLBACK:
				case FETCH:
				case FILES:
				case FOUND:
				case GET:
				case GO:
				case HANDLER:
				case HOST:
				case IDENTITY:
				case INCLUDE:
				case INITRANS:
				case INOUT:
				case INT2:
				case INT4:
				case INT8:
				case INVOKER:
				case ISOPEN:
				case ITEMS:
				case KEEP:
				case LANGUAGE:
				case LEAVE:
				case LOCATOR:
				case LOCATORS:
				case LOCKS:
				case LOG:
				case LOGGED:
				case LOGGING:
				case LOOP:
				case MATCHED:
				case MAXTRANS:
				case MESSAGE_TEXT:
				case MICROSECOND:
				case MICROSECONDS:
				case MULTISET:
				case NCHAR:
				case NEW:
				case NVARCHAR:
				case NOCOUNT:
				case NOCOMPRESS:
				case NOLOGGING:
				case NONE:
				case NOTFOUND:
				case NUMERIC:
				case NUMBER:
				case OBJECT:
				case OFF:
				case OUT:
				case OWNER:
				case PACKAGE:
				case PCTFREE:
				case PCTUSED:
				case PRECISION:
				case PRESERVE:
				case PRINT:
				case QUALIFY:
				case QUERY_BAND:
				case QUIT:
				case QUOTED_IDENTIFIER:
				case RAISE:
				case RESIGNAL:
				case RESTRICT:
				case RESULT:
				case RESULT_SET_LOCATOR:
				case RETURN:
				case REVERSE:
				case ROW_COUNT:
				case RR:
				case RS:
				case PWD:
				case SECONDS:
				case SECURITY:
				case SEGMENT:
				case SEL:
				case SESSIONS:
				case SHARE:
				case SIGNAL:
				case SIMPLE_DOUBLE:
				case SIMPLE_FLOAT:
				case SMALLDATETIME:
				case SQL:
				case SQLEXCEPTION:
				case SQLINSERT:
				case SQLSTATE:
				case SQLWARNING:
				case STATISTICS:
				case STEP:
				case STORED:
				case SUBDIR:
				case SUBSTRING:
				case SUMMARY:
				case SYS_REFCURSOR:
				case TABLESPACE:
				case TEXTIMAGE_ON:
				case TITLE:
				case TOP:
				case UR:
				case VAR:
				case VARCHAR2:
				case VARYING:
				case VOLATILE:
				case WHILE:
				case WITHOUT:
				case XML:
				case YES:
				case ACTIVITY_COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX_PART_STRING:
				case MIN_PART_STRING:
				case MAX_PART_INT:
				case MIN_PART_INT:
				case MAX_PART_DATE:
				case MIN_PART_DATE:
				case PART_COUNT:
				case PART_LOC:
				case RANK:
				case ROW_NUMBER:
				case STDEV:
				case SYSDATE:
				case VARIANCE:
				case LEFT_PAREN:
				case LEFT_BRACE:
				case RIGHT_BRACE:
				case ADDDATE:
				case AFTER:
				case AGG_STATE:
				case AGGREGATE:
				case ALIAS:
				case ALL:
				case ANALYZED:
				case ARRAY:
				case ARRAY_RANGE:
				case AT:
				case AUTHORS:
				case AUTO_INCREMENT:
				case BACKENDS:
				case BACKUP:
				case BEGIN:
				case BELONG:
				case BIN:
				case BITAND:
				case BITMAP:
				case BITMAP_UNION:
				case BITOR:
				case BITXOR:
				case BLOB:
				case BOOLEAN:
				case BRIEF:
				case BROKER:
				case BUCKETS:
				case BUILD:
				case BUILTIN:
				case BULK:
				case CACHED:
				case CALL:
				case CASE:
				case CAST:
				case CATALOG:
				case CATALOGS:
				case CHAIN:
				case CHAR:
				case CHARSET:
				case CHECK:
				case CLUSTER:
				case CLUSTERS:
				case COLLATION:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPACT:
				case COMPLETE:
				case CONFIG:
				case CONNECTION:
				case CONNECTION_ID:
				case CONSISTENT:
				case CONSTRAINTS:
				case CONVERT:
				case COPY:
				case COUNT:
				case CREATION:
				case CRON:
				case CURRENT:
				case CURRENT_CATALOG:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DATA:
				case DATE:
				case DATE_ADD:
				case DATE_CEIL:
				case DATE_DIFF:
				case DATE_FLOOR:
				case DATE_SUB:
				case DATEADD:
				case DATEDIFF:
				case DATETIME:
				case DATETIMEV2:
				case DATEV2:
				case DATETIMEV1:
				case DATEV1:
				case DAY:
				case DAYS_ADD:
				case DAYS_SUB:
				case DECIMAL:
				case DECIMALV2:
				case DECIMALV3:
				case DEFERRED:
				case DEMAND:
				case DIAGNOSE:
				case DISTINCT:
				case DISTINCTPC:
				case DISTINCTPCSA:
				case DO:
				case DORIS_INTERNAL_TABLE_ID:
				case DUAL:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTKEY:
				case ENCRYPTKEYS:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERRORS:
				case EVENTS:
				case EVERY:
				case EXCLUDE:
				case EXPIRED:
				case EXTERNAL:
				case FAILED_LOGIN_ATTEMPTS:
				case FALSE:
				case FAST:
				case FEATURE:
				case FIELDS:
				case FILE:
				case FILTER:
				case FIRST:
				case FORMAT:
				case FREE:
				case FRONTENDS:
				case FUNCTION:
				case GENERIC:
				case GLOBAL:
				case GRAPH:
				case GROUPING:
				case GROUPS:
				case HASH:
				case HDFS:
				case HELP:
				case HISTOGRAM:
				case HLL_UNION:
				case HOSTNAME:
				case HOUR:
				case HUB:
				case IDENTIFIED:
				case IGNORE:
				case IMMEDIATE:
				case INCREMENTAL:
				case INDEXES:
				case INTERVAL:
				case INVERTED:
				case IPV4:
				case IPV6:
				case IS_NOT_NULL_PRED:
				case IS_NULL_PRED:
				case ISNULL:
				case ISOLATION:
				case JOB:
				case JOBS:
				case JSON:
				case JSONB:
				case KEYS:
				case LABEL:
				case LAST:
				case LDAP:
				case LDAP_ADMIN_PASSWORD:
				case LESS:
				case LEVEL:
				case LINES:
				case LINK:
				case LOCAL:
				case LOCALTIME:
				case LOCALTIMESTAMP:
				case LOCATION:
				case LOCK:
				case LOGICAL:
				case MANUAL:
				case MAP:
				case MATCH_ALL:
				case MATCH_ANY:
				case MATCH_ELEMENT_EQ:
				case MATCH_ELEMENT_GE:
				case MATCH_ELEMENT_GT:
				case MATCH_ELEMENT_LE:
				case MATCH_ELEMENT_LT:
				case MATCH_PHRASE:
				case MATCH_PHRASE_EDGE:
				case MATCH_PHRASE_PREFIX:
				case MATCH_REGEXP:
				case MATERIALIZED:
				case MAX:
				case MEMO:
				case MERGE:
				case MIGRATE:
				case MIGRATIONS:
				case MIN:
				case MINUTE:
				case MODIFY:
				case MONTH:
				case MTMV:
				case NAME:
				case NAMES:
				case NEGATIVE:
				case NEVER:
				case NEXT:
				case NGRAM_BF:
				case NO:
				case NON_NULLABLE:
				case NULL:
				case NULLS:
				case OF:
				case OFFSET:
				case ONLY:
				case OPEN:
				case OPTIMIZED:
				case PARAMETER:
				case PARSED:
				case PARTITIONS:
				case PASSWORD:
				case PASSWORD_EXPIRE:
				case PASSWORD_HISTORY:
				case PASSWORD_LOCK_TIME:
				case PASSWORD_REUSE:
				case PATH:
				case PAUSE:
				case PERCENT:
				case PERIOD:
				case PERMISSIVE:
				case PHYSICAL:
				case PLAN:
				case PROCESS:
				case PLUGIN:
				case PLUGINS:
				case POLICY:
				case PROC:
				case PROCESSLIST:
				case PROFILE:
				case PROPERTIES:
				case PROPERTY:
				case QUANTILE_STATE:
				case QUANTILE_UNION:
				case QUERY:
				case QUOTA:
				case RANDOM:
				case RECOVER:
				case RECYCLE:
				case REFRESH:
				case REPEATABLE:
				case REPLACE:
				case REPLACE_IF_NOT_NULL:
				case REPOSITORIES:
				case REPOSITORY:
				case RESOURCE:
				case RESOURCES:
				case RESTORE:
				case RESTRICTIVE:
				case RESUME:
				case RETURNS:
				case REWRITTEN:
				case RLIKE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case S3:
				case SAMPLE:
				case SCHEDULE:
				case SCHEDULER:
				case SCHEMA:
				case SECOND:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION:
				case SHAPE:
				case SKEW:
				case SNAPSHOT:
				case SONAME:
				case SPLIT:
				case START:
				case STARTS:
				case STATS:
				case STATUS:
				case STOP:
				case STORAGE:
				case STREAM:
				case STREAMING:
				case STRING:
				case STRUCT:
				case SUBDATE:
				case SUM:
				case TABLES:
				case TASK:
				case TASKS:
				case TEMPORARY:
				case TEXT:
				case THAN:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TRANSACTION:
				case TREE:
				case TRIGGERS:
				case TRIM:
				case TRUE:
				case TRUNCATE:
				case TYPE:
				case TYPES:
				case UNCOMMITTED:
				case UNLOCK:
				case USER:
				case VALUE:
				case VARCHAR:
				case VARIABLES:
				case VARIANT:
				case VERBOSE:
				case VERSION:
				case VIEW:
				case WARNINGS:
				case WEEK:
				case WORK:
				case YEAR:
				case PLUS:
				case SUBTRACT:
				case STRING_LITERAL:
				case INTEGER_VALUE:
				case DECIMAL_VALUE:
				case IDENTIFIER:
				case BACKQUOTED_IDENTIFIER:
					{
					{
					setState(1748);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALL || _la==DISTINCT) {
						{
						setState(1747);
						expr_func_all_distinct();
						}
					}

					setState(1750);
					expr(0);
					}
					}
					break;
				case ASTERISK:
					{
					setState(1751);
					match(ASTERISK);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1754);
				match(RIGHT_PAREN);
				setState(1756);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,175,_ctx) ) {
				case 1:
					{
					setState(1755);
					expr_func_over_clause();
					}
					break;
				}
				}
				break;
			case COUNT_BIG:
				enterOuterAlt(_localctx, 3);
				{
				setState(1758);
				match(COUNT_BIG);
				setState(1759);
				match(LEFT_PAREN);
				setState(1765);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ACTION:
				case ALLOCATE:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ASSOCIATE:
				case AVG:
				case BATCHSIZE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BIT:
				case BODY:
				case BREAK:
				case BYTE:
				case CALLER:
				case CASCADE:
				case CASESPECIFIC:
				case CLIENT:
				case CLOSE:
				case CLUSTERED:
				case CMP:
				case COLLECTION:
				case COMPRESS:
				case CONCAT:
				case CONDITION:
				case CONSTANT:
				case COUNT_BIG:
				case CREATOR:
				case CS:
				case CURSOR:
				case DAYS:
				case DEC:
				case DECLARE:
				case DEFINED:
				case DEFINER:
				case DEFINITION:
				case DELIMITED:
				case DELIMITER:
				case DIAGNOSTICS:
				case DIR:
				case DIRECTORY:
				case DISTRIBUTE:
				case ESCAPED:
				case EXEC:
				case EXCEPTION:
				case EXCLUSIVE:
				case EXIT:
				case FALLBACK:
				case FETCH:
				case FILES:
				case FOUND:
				case GET:
				case GO:
				case HANDLER:
				case HOST:
				case IDENTITY:
				case INCLUDE:
				case INITRANS:
				case INOUT:
				case INT2:
				case INT4:
				case INT8:
				case INVOKER:
				case ISOPEN:
				case ITEMS:
				case KEEP:
				case LANGUAGE:
				case LEAVE:
				case LOCATOR:
				case LOCATORS:
				case LOCKS:
				case LOG:
				case LOGGED:
				case LOGGING:
				case LOOP:
				case MATCHED:
				case MAXTRANS:
				case MESSAGE_TEXT:
				case MICROSECOND:
				case MICROSECONDS:
				case MULTISET:
				case NCHAR:
				case NEW:
				case NVARCHAR:
				case NOCOUNT:
				case NOCOMPRESS:
				case NOLOGGING:
				case NONE:
				case NOTFOUND:
				case NUMERIC:
				case NUMBER:
				case OBJECT:
				case OFF:
				case OUT:
				case OWNER:
				case PACKAGE:
				case PCTFREE:
				case PCTUSED:
				case PRECISION:
				case PRESERVE:
				case PRINT:
				case QUALIFY:
				case QUERY_BAND:
				case QUIT:
				case QUOTED_IDENTIFIER:
				case RAISE:
				case RESIGNAL:
				case RESTRICT:
				case RESULT:
				case RESULT_SET_LOCATOR:
				case RETURN:
				case REVERSE:
				case ROW_COUNT:
				case RR:
				case RS:
				case PWD:
				case SECONDS:
				case SECURITY:
				case SEGMENT:
				case SEL:
				case SESSIONS:
				case SHARE:
				case SIGNAL:
				case SIMPLE_DOUBLE:
				case SIMPLE_FLOAT:
				case SMALLDATETIME:
				case SQL:
				case SQLEXCEPTION:
				case SQLINSERT:
				case SQLSTATE:
				case SQLWARNING:
				case STATISTICS:
				case STEP:
				case STORED:
				case SUBDIR:
				case SUBSTRING:
				case SUMMARY:
				case SYS_REFCURSOR:
				case TABLESPACE:
				case TEXTIMAGE_ON:
				case TITLE:
				case TOP:
				case UR:
				case VAR:
				case VARCHAR2:
				case VARYING:
				case VOLATILE:
				case WHILE:
				case WITHOUT:
				case XML:
				case YES:
				case ACTIVITY_COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX_PART_STRING:
				case MIN_PART_STRING:
				case MAX_PART_INT:
				case MIN_PART_INT:
				case MAX_PART_DATE:
				case MIN_PART_DATE:
				case PART_COUNT:
				case PART_LOC:
				case RANK:
				case ROW_NUMBER:
				case STDEV:
				case SYSDATE:
				case VARIANCE:
				case LEFT_PAREN:
				case LEFT_BRACE:
				case RIGHT_BRACE:
				case ADDDATE:
				case AFTER:
				case AGG_STATE:
				case AGGREGATE:
				case ALIAS:
				case ALL:
				case ANALYZED:
				case ARRAY:
				case ARRAY_RANGE:
				case AT:
				case AUTHORS:
				case AUTO_INCREMENT:
				case BACKENDS:
				case BACKUP:
				case BEGIN:
				case BELONG:
				case BIN:
				case BITAND:
				case BITMAP:
				case BITMAP_UNION:
				case BITOR:
				case BITXOR:
				case BLOB:
				case BOOLEAN:
				case BRIEF:
				case BROKER:
				case BUCKETS:
				case BUILD:
				case BUILTIN:
				case BULK:
				case CACHED:
				case CALL:
				case CASE:
				case CAST:
				case CATALOG:
				case CATALOGS:
				case CHAIN:
				case CHAR:
				case CHARSET:
				case CHECK:
				case CLUSTER:
				case CLUSTERS:
				case COLLATION:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPACT:
				case COMPLETE:
				case CONFIG:
				case CONNECTION:
				case CONNECTION_ID:
				case CONSISTENT:
				case CONSTRAINTS:
				case CONVERT:
				case COPY:
				case COUNT:
				case CREATION:
				case CRON:
				case CURRENT:
				case CURRENT_CATALOG:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DATA:
				case DATE:
				case DATE_ADD:
				case DATE_CEIL:
				case DATE_DIFF:
				case DATE_FLOOR:
				case DATE_SUB:
				case DATEADD:
				case DATEDIFF:
				case DATETIME:
				case DATETIMEV2:
				case DATEV2:
				case DATETIMEV1:
				case DATEV1:
				case DAY:
				case DAYS_ADD:
				case DAYS_SUB:
				case DECIMAL:
				case DECIMALV2:
				case DECIMALV3:
				case DEFERRED:
				case DEMAND:
				case DIAGNOSE:
				case DISTINCT:
				case DISTINCTPC:
				case DISTINCTPCSA:
				case DO:
				case DORIS_INTERNAL_TABLE_ID:
				case DUAL:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTKEY:
				case ENCRYPTKEYS:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERRORS:
				case EVENTS:
				case EVERY:
				case EXCLUDE:
				case EXPIRED:
				case EXTERNAL:
				case FAILED_LOGIN_ATTEMPTS:
				case FALSE:
				case FAST:
				case FEATURE:
				case FIELDS:
				case FILE:
				case FILTER:
				case FIRST:
				case FORMAT:
				case FREE:
				case FRONTENDS:
				case FUNCTION:
				case GENERIC:
				case GLOBAL:
				case GRAPH:
				case GROUPING:
				case GROUPS:
				case HASH:
				case HDFS:
				case HELP:
				case HISTOGRAM:
				case HLL_UNION:
				case HOSTNAME:
				case HOUR:
				case HUB:
				case IDENTIFIED:
				case IGNORE:
				case IMMEDIATE:
				case INCREMENTAL:
				case INDEXES:
				case INTERVAL:
				case INVERTED:
				case IPV4:
				case IPV6:
				case IS_NOT_NULL_PRED:
				case IS_NULL_PRED:
				case ISNULL:
				case ISOLATION:
				case JOB:
				case JOBS:
				case JSON:
				case JSONB:
				case KEYS:
				case LABEL:
				case LAST:
				case LDAP:
				case LDAP_ADMIN_PASSWORD:
				case LESS:
				case LEVEL:
				case LINES:
				case LINK:
				case LOCAL:
				case LOCALTIME:
				case LOCALTIMESTAMP:
				case LOCATION:
				case LOCK:
				case LOGICAL:
				case MANUAL:
				case MAP:
				case MATCH_ALL:
				case MATCH_ANY:
				case MATCH_ELEMENT_EQ:
				case MATCH_ELEMENT_GE:
				case MATCH_ELEMENT_GT:
				case MATCH_ELEMENT_LE:
				case MATCH_ELEMENT_LT:
				case MATCH_PHRASE:
				case MATCH_PHRASE_EDGE:
				case MATCH_PHRASE_PREFIX:
				case MATCH_REGEXP:
				case MATERIALIZED:
				case MAX:
				case MEMO:
				case MERGE:
				case MIGRATE:
				case MIGRATIONS:
				case MIN:
				case MINUTE:
				case MODIFY:
				case MONTH:
				case MTMV:
				case NAME:
				case NAMES:
				case NEGATIVE:
				case NEVER:
				case NEXT:
				case NGRAM_BF:
				case NO:
				case NON_NULLABLE:
				case NULL:
				case NULLS:
				case OF:
				case OFFSET:
				case ONLY:
				case OPEN:
				case OPTIMIZED:
				case PARAMETER:
				case PARSED:
				case PARTITIONS:
				case PASSWORD:
				case PASSWORD_EXPIRE:
				case PASSWORD_HISTORY:
				case PASSWORD_LOCK_TIME:
				case PASSWORD_REUSE:
				case PATH:
				case PAUSE:
				case PERCENT:
				case PERIOD:
				case PERMISSIVE:
				case PHYSICAL:
				case PLAN:
				case PROCESS:
				case PLUGIN:
				case PLUGINS:
				case POLICY:
				case PROC:
				case PROCESSLIST:
				case PROFILE:
				case PROPERTIES:
				case PROPERTY:
				case QUANTILE_STATE:
				case QUANTILE_UNION:
				case QUERY:
				case QUOTA:
				case RANDOM:
				case RECOVER:
				case RECYCLE:
				case REFRESH:
				case REPEATABLE:
				case REPLACE:
				case REPLACE_IF_NOT_NULL:
				case REPOSITORIES:
				case REPOSITORY:
				case RESOURCE:
				case RESOURCES:
				case RESTORE:
				case RESTRICTIVE:
				case RESUME:
				case RETURNS:
				case REWRITTEN:
				case RLIKE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case S3:
				case SAMPLE:
				case SCHEDULE:
				case SCHEDULER:
				case SCHEMA:
				case SECOND:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION:
				case SHAPE:
				case SKEW:
				case SNAPSHOT:
				case SONAME:
				case SPLIT:
				case START:
				case STARTS:
				case STATS:
				case STATUS:
				case STOP:
				case STORAGE:
				case STREAM:
				case STREAMING:
				case STRING:
				case STRUCT:
				case SUBDATE:
				case SUM:
				case TABLES:
				case TASK:
				case TASKS:
				case TEMPORARY:
				case TEXT:
				case THAN:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TRANSACTION:
				case TREE:
				case TRIGGERS:
				case TRIM:
				case TRUE:
				case TRUNCATE:
				case TYPE:
				case TYPES:
				case UNCOMMITTED:
				case UNLOCK:
				case USER:
				case VALUE:
				case VARCHAR:
				case VARIABLES:
				case VARIANT:
				case VERBOSE:
				case VERSION:
				case VIEW:
				case WARNINGS:
				case WEEK:
				case WORK:
				case YEAR:
				case PLUS:
				case SUBTRACT:
				case STRING_LITERAL:
				case INTEGER_VALUE:
				case DECIMAL_VALUE:
				case IDENTIFIER:
				case BACKQUOTED_IDENTIFIER:
					{
					{
					setState(1761);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALL || _la==DISTINCT) {
						{
						setState(1760);
						expr_func_all_distinct();
						}
					}

					setState(1763);
					expr(0);
					}
					}
					break;
				case ASTERISK:
					{
					setState(1764);
					match(ASTERISK);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1767);
				match(RIGHT_PAREN);
				setState(1769);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,178,_ctx) ) {
				case 1:
					{
					setState(1768);
					expr_func_over_clause();
					}
					break;
				}
				}
				break;
			case CUME_DIST:
				enterOuterAlt(_localctx, 4);
				{
				setState(1771);
				match(CUME_DIST);
				setState(1772);
				match(LEFT_PAREN);
				setState(1773);
				match(RIGHT_PAREN);
				setState(1774);
				expr_func_over_clause();
				}
				break;
			case DENSE_RANK:
				enterOuterAlt(_localctx, 5);
				{
				setState(1775);
				match(DENSE_RANK);
				setState(1776);
				match(LEFT_PAREN);
				setState(1777);
				match(RIGHT_PAREN);
				setState(1778);
				expr_func_over_clause();
				}
				break;
			case FIRST_VALUE:
				enterOuterAlt(_localctx, 6);
				{
				setState(1779);
				match(FIRST_VALUE);
				setState(1780);
				match(LEFT_PAREN);
				setState(1781);
				expr(0);
				setState(1782);
				match(RIGHT_PAREN);
				setState(1783);
				expr_func_over_clause();
				}
				break;
			case LAG:
				enterOuterAlt(_localctx, 7);
				{
				setState(1785);
				match(LAG);
				setState(1786);
				match(LEFT_PAREN);
				setState(1787);
				expr(0);
				setState(1794);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1788);
					match(COMMA);
					setState(1789);
					expr(0);
					setState(1792);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1790);
						match(COMMA);
						setState(1791);
						expr(0);
						}
					}

					}
				}

				setState(1796);
				match(RIGHT_PAREN);
				setState(1797);
				expr_func_over_clause();
				}
				break;
			case LAST_VALUE:
				enterOuterAlt(_localctx, 8);
				{
				setState(1799);
				match(LAST_VALUE);
				setState(1800);
				match(LEFT_PAREN);
				setState(1801);
				expr(0);
				setState(1802);
				match(RIGHT_PAREN);
				setState(1803);
				expr_func_over_clause();
				}
				break;
			case LEAD:
				enterOuterAlt(_localctx, 9);
				{
				setState(1805);
				match(LEAD);
				setState(1806);
				match(LEFT_PAREN);
				setState(1807);
				expr(0);
				setState(1814);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1808);
					match(COMMA);
					setState(1809);
					expr(0);
					setState(1812);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1810);
						match(COMMA);
						setState(1811);
						expr(0);
						}
					}

					}
				}

				setState(1816);
				match(RIGHT_PAREN);
				setState(1817);
				expr_func_over_clause();
				}
				break;
			case MAX:
				enterOuterAlt(_localctx, 10);
				{
				setState(1819);
				match(MAX);
				setState(1820);
				match(LEFT_PAREN);
				setState(1822);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					setState(1821);
					expr_func_all_distinct();
					}
				}

				setState(1824);
				expr(0);
				setState(1825);
				match(RIGHT_PAREN);
				setState(1827);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,184,_ctx) ) {
				case 1:
					{
					setState(1826);
					expr_func_over_clause();
					}
					break;
				}
				}
				break;
			case MIN:
				enterOuterAlt(_localctx, 11);
				{
				setState(1829);
				match(MIN);
				setState(1830);
				match(LEFT_PAREN);
				setState(1832);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					setState(1831);
					expr_func_all_distinct();
					}
				}

				setState(1834);
				expr(0);
				setState(1835);
				match(RIGHT_PAREN);
				setState(1837);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,186,_ctx) ) {
				case 1:
					{
					setState(1836);
					expr_func_over_clause();
					}
					break;
				}
				}
				break;
			case RANK:
				enterOuterAlt(_localctx, 12);
				{
				setState(1839);
				match(RANK);
				setState(1840);
				match(LEFT_PAREN);
				setState(1841);
				match(RIGHT_PAREN);
				setState(1842);
				expr_func_over_clause();
				}
				break;
			case ROW_NUMBER:
				enterOuterAlt(_localctx, 13);
				{
				setState(1843);
				match(ROW_NUMBER);
				setState(1844);
				match(LEFT_PAREN);
				setState(1845);
				match(RIGHT_PAREN);
				setState(1846);
				expr_func_over_clause();
				}
				break;
			case STDEV:
				enterOuterAlt(_localctx, 14);
				{
				setState(1847);
				match(STDEV);
				setState(1848);
				match(LEFT_PAREN);
				setState(1850);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					setState(1849);
					expr_func_all_distinct();
					}
				}

				setState(1852);
				expr(0);
				setState(1853);
				match(RIGHT_PAREN);
				setState(1855);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,188,_ctx) ) {
				case 1:
					{
					setState(1854);
					expr_func_over_clause();
					}
					break;
				}
				}
				break;
			case SUM:
				enterOuterAlt(_localctx, 15);
				{
				setState(1857);
				match(SUM);
				setState(1858);
				match(LEFT_PAREN);
				setState(1860);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					setState(1859);
					expr_func_all_distinct();
					}
				}

				setState(1862);
				expr(0);
				setState(1863);
				match(RIGHT_PAREN);
				setState(1865);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,190,_ctx) ) {
				case 1:
					{
					setState(1864);
					expr_func_over_clause();
					}
					break;
				}
				}
				break;
			case VAR:
				enterOuterAlt(_localctx, 16);
				{
				setState(1867);
				match(VAR);
				setState(1868);
				match(LEFT_PAREN);
				setState(1870);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					setState(1869);
					expr_func_all_distinct();
					}
				}

				setState(1872);
				expr(0);
				setState(1873);
				match(RIGHT_PAREN);
				setState(1875);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,192,_ctx) ) {
				case 1:
					{
					setState(1874);
					expr_func_over_clause();
					}
					break;
				}
				}
				break;
			case VARIANCE:
				enterOuterAlt(_localctx, 17);
				{
				setState(1877);
				match(VARIANCE);
				setState(1878);
				match(LEFT_PAREN);
				setState(1880);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					setState(1879);
					expr_func_all_distinct();
					}
				}

				setState(1882);
				expr(0);
				setState(1883);
				match(RIGHT_PAREN);
				setState(1885);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,194,_ctx) ) {
				case 1:
					{
					setState(1884);
					expr_func_over_clause();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expr_func_all_distinctContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(PLParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(PLParser.DISTINCT, 0); }
		public Expr_func_all_distinctContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_func_all_distinct; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterExpr_func_all_distinct(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitExpr_func_all_distinct(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitExpr_func_all_distinct(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_func_all_distinctContext expr_func_all_distinct() throws RecognitionException {
		Expr_func_all_distinctContext _localctx = new Expr_func_all_distinctContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_expr_func_all_distinct);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1889);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==DISTINCT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_by_clauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(PLParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(PLParser.BY, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public List<TerminalNode> ASC() { return getTokens(PLParser.ASC); }
		public TerminalNode ASC(int i) {
			return getToken(PLParser.ASC, i);
		}
		public List<TerminalNode> DESC() { return getTokens(PLParser.DESC); }
		public TerminalNode DESC(int i) {
			return getToken(PLParser.DESC, i);
		}
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterOrder_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitOrder_by_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitOrder_by_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Order_by_clauseContext order_by_clause() throws RecognitionException {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_order_by_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1891);
			match(ORDER);
			setState(1892);
			match(BY);
			setState(1893);
			expr(0);
			setState(1895);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(1894);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1904);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1897);
				match(COMMA);
				setState(1898);
				expr(0);
				setState(1900);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					setState(1899);
					_la = _input.LA(1);
					if ( !(_la==ASC || _la==DESC) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				}
				setState(1906);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expr_func_over_clauseContext extends ParserRuleContext {
		public TerminalNode OVER() { return getToken(PLParser.OVER, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public Expr_func_partition_by_clauseContext expr_func_partition_by_clause() {
			return getRuleContext(Expr_func_partition_by_clauseContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Expr_func_over_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_func_over_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterExpr_func_over_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitExpr_func_over_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitExpr_func_over_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_func_over_clauseContext expr_func_over_clause() throws RecognitionException {
		Expr_func_over_clauseContext _localctx = new Expr_func_over_clauseContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_expr_func_over_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1907);
			match(OVER);
			setState(1908);
			match(LEFT_PAREN);
			setState(1910);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(1909);
				expr_func_partition_by_clause();
				}
			}

			setState(1913);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(1912);
				order_by_clause();
				}
			}

			setState(1915);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expr_func_partition_by_clauseContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(PLParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(PLParser.BY, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public Expr_func_partition_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_func_partition_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterExpr_func_partition_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitExpr_func_partition_by_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitExpr_func_partition_by_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_func_partition_by_clauseContext expr_func_partition_by_clause() throws RecognitionException {
		Expr_func_partition_by_clauseContext _localctx = new Expr_func_partition_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_expr_func_partition_by_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1917);
			match(PARTITION);
			setState(1918);
			match(BY);
			setState(1919);
			expr(0);
			setState(1924);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1920);
				match(COMMA);
				setState(1921);
				expr(0);
				}
				}
				setState(1926);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expr_spec_funcContext extends ParserRuleContext {
		public TerminalNode ACTIVITY_COUNT() { return getToken(PLParser.ACTIVITY_COUNT, 0); }
		public TerminalNode CAST() { return getToken(PLParser.CAST, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode AS() { return getToken(PLParser.AS, 0); }
		public DtypeContext dtype() {
			return getRuleContext(DtypeContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public Dtype_lenContext dtype_len() {
			return getRuleContext(Dtype_lenContext.class,0);
		}
		public TerminalNode COUNT() { return getToken(PLParser.COUNT, 0); }
		public TerminalNode ASTERISK() { return getToken(PLParser.ASTERISK, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(PLParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT() { return getToken(PLParser.CURRENT, 0); }
		public TerminalNode DATE() { return getToken(PLParser.DATE, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(PLParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode TIMESTAMP() { return getToken(PLParser.TIMESTAMP, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PLParser.CURRENT_USER, 0); }
		public TerminalNode USER() { return getToken(PLParser.USER, 0); }
		public TerminalNode MAX_PART_STRING() { return getToken(PLParser.MAX_PART_STRING, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public List<TerminalNode> EQ() { return getTokens(PLParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(PLParser.EQ, i);
		}
		public TerminalNode MIN_PART_STRING() { return getToken(PLParser.MIN_PART_STRING, 0); }
		public TerminalNode MAX_PART_INT() { return getToken(PLParser.MAX_PART_INT, 0); }
		public TerminalNode MIN_PART_INT() { return getToken(PLParser.MIN_PART_INT, 0); }
		public TerminalNode MAX_PART_DATE() { return getToken(PLParser.MAX_PART_DATE, 0); }
		public TerminalNode MIN_PART_DATE() { return getToken(PLParser.MIN_PART_DATE, 0); }
		public TerminalNode PART_COUNT() { return getToken(PLParser.PART_COUNT, 0); }
		public TerminalNode PART_LOC() { return getToken(PLParser.PART_LOC, 0); }
		public TerminalNode TRIM() { return getToken(PLParser.TRIM, 0); }
		public TerminalNode SUBSTRING() { return getToken(PLParser.SUBSTRING, 0); }
		public TerminalNode FROM() { return getToken(PLParser.FROM, 0); }
		public TerminalNode FOR() { return getToken(PLParser.FOR, 0); }
		public TerminalNode SYSDATE() { return getToken(PLParser.SYSDATE, 0); }
		public Expr_spec_funcContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_spec_func; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterExpr_spec_func(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitExpr_spec_func(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitExpr_spec_func(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_spec_funcContext expr_spec_func() throws RecognitionException {
		Expr_spec_funcContext _localctx = new Expr_spec_funcContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_expr_spec_func);
		int _la;
		try {
			int _alt;
			setState(2127);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,222,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1927);
				match(ACTIVITY_COUNT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1928);
				match(CAST);
				setState(1929);
				match(LEFT_PAREN);
				setState(1930);
				expr(0);
				setState(1931);
				match(AS);
				setState(1932);
				dtype();
				setState(1934);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(1933);
					dtype_len();
					}
				}

				setState(1936);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1938);
				match(COUNT);
				setState(1939);
				match(LEFT_PAREN);
				setState(1942);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ACTION:
				case ALLOCATE:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ASSOCIATE:
				case AVG:
				case BATCHSIZE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BIT:
				case BODY:
				case BREAK:
				case BYTE:
				case CALLER:
				case CASCADE:
				case CASESPECIFIC:
				case CLIENT:
				case CLOSE:
				case CLUSTERED:
				case CMP:
				case COLLECTION:
				case COMPRESS:
				case CONCAT:
				case CONDITION:
				case CONSTANT:
				case COUNT_BIG:
				case CREATOR:
				case CS:
				case CURSOR:
				case DAYS:
				case DEC:
				case DECLARE:
				case DEFINED:
				case DEFINER:
				case DEFINITION:
				case DELIMITED:
				case DELIMITER:
				case DIAGNOSTICS:
				case DIR:
				case DIRECTORY:
				case DISTRIBUTE:
				case ESCAPED:
				case EXEC:
				case EXCEPTION:
				case EXCLUSIVE:
				case EXIT:
				case FALLBACK:
				case FETCH:
				case FILES:
				case FOUND:
				case GET:
				case GO:
				case HANDLER:
				case HOST:
				case IDENTITY:
				case INCLUDE:
				case INITRANS:
				case INOUT:
				case INT2:
				case INT4:
				case INT8:
				case INVOKER:
				case ISOPEN:
				case ITEMS:
				case KEEP:
				case LANGUAGE:
				case LEAVE:
				case LOCATOR:
				case LOCATORS:
				case LOCKS:
				case LOG:
				case LOGGED:
				case LOGGING:
				case LOOP:
				case MATCHED:
				case MAXTRANS:
				case MESSAGE_TEXT:
				case MICROSECOND:
				case MICROSECONDS:
				case MULTISET:
				case NCHAR:
				case NEW:
				case NVARCHAR:
				case NOCOUNT:
				case NOCOMPRESS:
				case NOLOGGING:
				case NONE:
				case NOTFOUND:
				case NUMERIC:
				case NUMBER:
				case OBJECT:
				case OFF:
				case OUT:
				case OWNER:
				case PACKAGE:
				case PCTFREE:
				case PCTUSED:
				case PRECISION:
				case PRESERVE:
				case PRINT:
				case QUALIFY:
				case QUERY_BAND:
				case QUIT:
				case QUOTED_IDENTIFIER:
				case RAISE:
				case RESIGNAL:
				case RESTRICT:
				case RESULT:
				case RESULT_SET_LOCATOR:
				case RETURN:
				case REVERSE:
				case ROW_COUNT:
				case RR:
				case RS:
				case PWD:
				case SECONDS:
				case SECURITY:
				case SEGMENT:
				case SEL:
				case SESSIONS:
				case SHARE:
				case SIGNAL:
				case SIMPLE_DOUBLE:
				case SIMPLE_FLOAT:
				case SMALLDATETIME:
				case SQL:
				case SQLEXCEPTION:
				case SQLINSERT:
				case SQLSTATE:
				case SQLWARNING:
				case STATISTICS:
				case STEP:
				case STORED:
				case SUBDIR:
				case SUBSTRING:
				case SUMMARY:
				case SYS_REFCURSOR:
				case TABLESPACE:
				case TEXTIMAGE_ON:
				case TITLE:
				case TOP:
				case UR:
				case VAR:
				case VARCHAR2:
				case VARYING:
				case VOLATILE:
				case WHILE:
				case WITHOUT:
				case XML:
				case YES:
				case ACTIVITY_COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX_PART_STRING:
				case MIN_PART_STRING:
				case MAX_PART_INT:
				case MIN_PART_INT:
				case MAX_PART_DATE:
				case MIN_PART_DATE:
				case PART_COUNT:
				case PART_LOC:
				case RANK:
				case ROW_NUMBER:
				case STDEV:
				case SYSDATE:
				case VARIANCE:
				case LEFT_PAREN:
				case LEFT_BRACE:
				case RIGHT_BRACE:
				case ADDDATE:
				case AFTER:
				case AGG_STATE:
				case AGGREGATE:
				case ALIAS:
				case ANALYZED:
				case ARRAY:
				case ARRAY_RANGE:
				case AT:
				case AUTHORS:
				case AUTO_INCREMENT:
				case BACKENDS:
				case BACKUP:
				case BEGIN:
				case BELONG:
				case BIN:
				case BITAND:
				case BITMAP:
				case BITMAP_UNION:
				case BITOR:
				case BITXOR:
				case BLOB:
				case BOOLEAN:
				case BRIEF:
				case BROKER:
				case BUCKETS:
				case BUILD:
				case BUILTIN:
				case BULK:
				case CACHED:
				case CALL:
				case CASE:
				case CAST:
				case CATALOG:
				case CATALOGS:
				case CHAIN:
				case CHAR:
				case CHARSET:
				case CHECK:
				case CLUSTER:
				case CLUSTERS:
				case COLLATION:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPACT:
				case COMPLETE:
				case CONFIG:
				case CONNECTION:
				case CONNECTION_ID:
				case CONSISTENT:
				case CONSTRAINTS:
				case CONVERT:
				case COPY:
				case COUNT:
				case CREATION:
				case CRON:
				case CURRENT:
				case CURRENT_CATALOG:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DATA:
				case DATE:
				case DATE_ADD:
				case DATE_CEIL:
				case DATE_DIFF:
				case DATE_FLOOR:
				case DATE_SUB:
				case DATEADD:
				case DATEDIFF:
				case DATETIME:
				case DATETIMEV2:
				case DATEV2:
				case DATETIMEV1:
				case DATEV1:
				case DAY:
				case DAYS_ADD:
				case DAYS_SUB:
				case DECIMAL:
				case DECIMALV2:
				case DECIMALV3:
				case DEFERRED:
				case DEMAND:
				case DIAGNOSE:
				case DISTINCTPC:
				case DISTINCTPCSA:
				case DO:
				case DORIS_INTERNAL_TABLE_ID:
				case DUAL:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTKEY:
				case ENCRYPTKEYS:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERRORS:
				case EVENTS:
				case EVERY:
				case EXCLUDE:
				case EXPIRED:
				case EXTERNAL:
				case FAILED_LOGIN_ATTEMPTS:
				case FALSE:
				case FAST:
				case FEATURE:
				case FIELDS:
				case FILE:
				case FILTER:
				case FIRST:
				case FORMAT:
				case FREE:
				case FRONTENDS:
				case FUNCTION:
				case GENERIC:
				case GLOBAL:
				case GRAPH:
				case GROUPING:
				case GROUPS:
				case HASH:
				case HDFS:
				case HELP:
				case HISTOGRAM:
				case HLL_UNION:
				case HOSTNAME:
				case HOUR:
				case HUB:
				case IDENTIFIED:
				case IGNORE:
				case IMMEDIATE:
				case INCREMENTAL:
				case INDEXES:
				case INTERVAL:
				case INVERTED:
				case IPV4:
				case IPV6:
				case IS_NOT_NULL_PRED:
				case IS_NULL_PRED:
				case ISNULL:
				case ISOLATION:
				case JOB:
				case JOBS:
				case JSON:
				case JSONB:
				case KEYS:
				case LABEL:
				case LAST:
				case LDAP:
				case LDAP_ADMIN_PASSWORD:
				case LESS:
				case LEVEL:
				case LINES:
				case LINK:
				case LOCAL:
				case LOCALTIME:
				case LOCALTIMESTAMP:
				case LOCATION:
				case LOCK:
				case LOGICAL:
				case MANUAL:
				case MAP:
				case MATCH_ALL:
				case MATCH_ANY:
				case MATCH_ELEMENT_EQ:
				case MATCH_ELEMENT_GE:
				case MATCH_ELEMENT_GT:
				case MATCH_ELEMENT_LE:
				case MATCH_ELEMENT_LT:
				case MATCH_PHRASE:
				case MATCH_PHRASE_EDGE:
				case MATCH_PHRASE_PREFIX:
				case MATCH_REGEXP:
				case MATERIALIZED:
				case MAX:
				case MEMO:
				case MERGE:
				case MIGRATE:
				case MIGRATIONS:
				case MIN:
				case MINUTE:
				case MODIFY:
				case MONTH:
				case MTMV:
				case NAME:
				case NAMES:
				case NEGATIVE:
				case NEVER:
				case NEXT:
				case NGRAM_BF:
				case NO:
				case NON_NULLABLE:
				case NULL:
				case NULLS:
				case OF:
				case OFFSET:
				case ONLY:
				case OPEN:
				case OPTIMIZED:
				case PARAMETER:
				case PARSED:
				case PARTITIONS:
				case PASSWORD:
				case PASSWORD_EXPIRE:
				case PASSWORD_HISTORY:
				case PASSWORD_LOCK_TIME:
				case PASSWORD_REUSE:
				case PATH:
				case PAUSE:
				case PERCENT:
				case PERIOD:
				case PERMISSIVE:
				case PHYSICAL:
				case PLAN:
				case PROCESS:
				case PLUGIN:
				case PLUGINS:
				case POLICY:
				case PROC:
				case PROCESSLIST:
				case PROFILE:
				case PROPERTIES:
				case PROPERTY:
				case QUANTILE_STATE:
				case QUANTILE_UNION:
				case QUERY:
				case QUOTA:
				case RANDOM:
				case RECOVER:
				case RECYCLE:
				case REFRESH:
				case REPEATABLE:
				case REPLACE:
				case REPLACE_IF_NOT_NULL:
				case REPOSITORIES:
				case REPOSITORY:
				case RESOURCE:
				case RESOURCES:
				case RESTORE:
				case RESTRICTIVE:
				case RESUME:
				case RETURNS:
				case REWRITTEN:
				case RLIKE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case S3:
				case SAMPLE:
				case SCHEDULE:
				case SCHEDULER:
				case SCHEMA:
				case SECOND:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION:
				case SHAPE:
				case SKEW:
				case SNAPSHOT:
				case SONAME:
				case SPLIT:
				case START:
				case STARTS:
				case STATS:
				case STATUS:
				case STOP:
				case STORAGE:
				case STREAM:
				case STREAMING:
				case STRING:
				case STRUCT:
				case SUBDATE:
				case SUM:
				case TABLES:
				case TASK:
				case TASKS:
				case TEMPORARY:
				case TEXT:
				case THAN:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TRANSACTION:
				case TREE:
				case TRIGGERS:
				case TRIM:
				case TRUE:
				case TRUNCATE:
				case TYPE:
				case TYPES:
				case UNCOMMITTED:
				case UNLOCK:
				case USER:
				case VALUE:
				case VARCHAR:
				case VARIABLES:
				case VARIANT:
				case VERBOSE:
				case VERSION:
				case VIEW:
				case WARNINGS:
				case WEEK:
				case WORK:
				case YEAR:
				case PLUS:
				case SUBTRACT:
				case STRING_LITERAL:
				case INTEGER_VALUE:
				case DECIMAL_VALUE:
				case IDENTIFIER:
				case BACKQUOTED_IDENTIFIER:
					{
					setState(1940);
					expr(0);
					}
					break;
				case ASTERISK:
					{
					setState(1941);
					match(ASTERISK);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1944);
				match(RIGHT_PAREN);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1945);
				match(CURRENT_DATE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1946);
				match(CURRENT);
				setState(1947);
				match(DATE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1951);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT_TIMESTAMP:
					{
					setState(1948);
					match(CURRENT_TIMESTAMP);
					}
					break;
				case CURRENT:
					{
					setState(1949);
					match(CURRENT);
					setState(1950);
					match(TIMESTAMP);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1957);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,205,_ctx) ) {
				case 1:
					{
					setState(1953);
					match(LEFT_PAREN);
					setState(1954);
					expr(0);
					setState(1955);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1959);
				match(CURRENT_USER);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1960);
				match(CURRENT);
				setState(1961);
				match(USER);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1962);
				match(MAX_PART_STRING);
				setState(1963);
				match(LEFT_PAREN);
				setState(1964);
				expr(0);
				setState(1977);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1965);
					match(COMMA);
					setState(1966);
					expr(0);
					setState(1974);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1967);
						match(COMMA);
						setState(1968);
						expr(0);
						setState(1969);
						match(EQ);
						setState(1970);
						expr(0);
						}
						}
						setState(1976);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(1979);
				match(RIGHT_PAREN);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1981);
				match(MIN_PART_STRING);
				setState(1982);
				match(LEFT_PAREN);
				setState(1983);
				expr(0);
				setState(1996);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1984);
					match(COMMA);
					setState(1985);
					expr(0);
					setState(1993);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1986);
						match(COMMA);
						setState(1987);
						expr(0);
						setState(1988);
						match(EQ);
						setState(1989);
						expr(0);
						}
						}
						setState(1995);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(1998);
				match(RIGHT_PAREN);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2000);
				match(MAX_PART_INT);
				setState(2001);
				match(LEFT_PAREN);
				setState(2002);
				expr(0);
				setState(2015);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2003);
					match(COMMA);
					setState(2004);
					expr(0);
					setState(2012);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2005);
						match(COMMA);
						setState(2006);
						expr(0);
						setState(2007);
						match(EQ);
						setState(2008);
						expr(0);
						}
						}
						setState(2014);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(2017);
				match(RIGHT_PAREN);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2019);
				match(MIN_PART_INT);
				setState(2020);
				match(LEFT_PAREN);
				setState(2021);
				expr(0);
				setState(2034);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2022);
					match(COMMA);
					setState(2023);
					expr(0);
					setState(2031);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2024);
						match(COMMA);
						setState(2025);
						expr(0);
						setState(2026);
						match(EQ);
						setState(2027);
						expr(0);
						}
						}
						setState(2033);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(2036);
				match(RIGHT_PAREN);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2038);
				match(MAX_PART_DATE);
				setState(2039);
				match(LEFT_PAREN);
				setState(2040);
				expr(0);
				setState(2053);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2041);
					match(COMMA);
					setState(2042);
					expr(0);
					setState(2050);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2043);
						match(COMMA);
						setState(2044);
						expr(0);
						setState(2045);
						match(EQ);
						setState(2046);
						expr(0);
						}
						}
						setState(2052);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(2055);
				match(RIGHT_PAREN);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(2057);
				match(MIN_PART_DATE);
				setState(2058);
				match(LEFT_PAREN);
				setState(2059);
				expr(0);
				setState(2072);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2060);
					match(COMMA);
					setState(2061);
					expr(0);
					setState(2069);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2062);
						match(COMMA);
						setState(2063);
						expr(0);
						setState(2064);
						match(EQ);
						setState(2065);
						expr(0);
						}
						}
						setState(2071);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(2074);
				match(RIGHT_PAREN);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(2076);
				match(PART_COUNT);
				setState(2077);
				match(LEFT_PAREN);
				setState(2078);
				expr(0);
				setState(2086);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2079);
					match(COMMA);
					setState(2080);
					expr(0);
					setState(2081);
					match(EQ);
					setState(2082);
					expr(0);
					}
					}
					setState(2088);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2089);
				match(RIGHT_PAREN);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(2091);
				match(PART_LOC);
				setState(2092);
				match(LEFT_PAREN);
				setState(2093);
				expr(0);
				setState(2099); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(2094);
						match(COMMA);
						setState(2095);
						expr(0);
						setState(2096);
						match(EQ);
						setState(2097);
						expr(0);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2101); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,219,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(2105);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2103);
					match(COMMA);
					setState(2104);
					expr(0);
					}
				}

				setState(2107);
				match(RIGHT_PAREN);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(2109);
				match(TRIM);
				setState(2110);
				match(LEFT_PAREN);
				setState(2111);
				expr(0);
				setState(2112);
				match(RIGHT_PAREN);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(2114);
				match(SUBSTRING);
				setState(2115);
				match(LEFT_PAREN);
				setState(2116);
				expr(0);
				setState(2117);
				match(FROM);
				setState(2118);
				expr(0);
				setState(2121);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(2119);
					match(FOR);
					setState(2120);
					expr(0);
					}
				}

				setState(2123);
				match(RIGHT_PAREN);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(2125);
				match(SYSDATE);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(2126);
				match(USER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expr_funcContext extends ParserRuleContext {
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public Expr_func_paramsContext expr_func_params() {
			return getRuleContext(Expr_func_paramsContext.class,0);
		}
		public Expr_funcContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_func; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterExpr_func(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitExpr_func(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitExpr_func(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_funcContext expr_func() throws RecognitionException {
		Expr_funcContext _localctx = new Expr_funcContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_expr_func);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2129);
			multipartIdentifier();
			setState(2130);
			match(LEFT_PAREN);
			setState(2132);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,223,_ctx) ) {
			case 1:
				{
				setState(2131);
				expr_func_params();
				}
				break;
			}
			setState(2134);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expr_dotContext extends ParserRuleContext {
		public Expr_dot_method_callContext expr_dot_method_call() {
			return getRuleContext(Expr_dot_method_callContext.class,0);
		}
		public Expr_dot_property_accessContext expr_dot_property_access() {
			return getRuleContext(Expr_dot_property_accessContext.class,0);
		}
		public Expr_dotContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_dot; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterExpr_dot(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitExpr_dot(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitExpr_dot(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_dotContext expr_dot() throws RecognitionException {
		Expr_dotContext _localctx = new Expr_dotContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_expr_dot);
		try {
			setState(2138);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,224,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2136);
				expr_dot_method_call();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2137);
				expr_dot_property_access();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expr_dot_method_callContext extends ParserRuleContext {
		public TerminalNode DOT() { return getToken(PLParser.DOT, 0); }
		public List<Expr_funcContext> expr_func() {
			return getRuleContexts(Expr_funcContext.class);
		}
		public Expr_funcContext expr_func(int i) {
			return getRuleContext(Expr_funcContext.class,i);
		}
		public Ident_plContext ident_pl() {
			return getRuleContext(Ident_plContext.class,0);
		}
		public Expr_dot_method_callContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_dot_method_call; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterExpr_dot_method_call(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitExpr_dot_method_call(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitExpr_dot_method_call(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_dot_method_callContext expr_dot_method_call() throws RecognitionException {
		Expr_dot_method_callContext _localctx = new Expr_dot_method_callContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_expr_dot_method_call);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2142);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,225,_ctx) ) {
			case 1:
				{
				setState(2140);
				ident_pl();
				}
				break;
			case 2:
				{
				setState(2141);
				expr_func();
				}
				break;
			}
			setState(2144);
			match(DOT);
			setState(2145);
			expr_func();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expr_dot_property_accessContext extends ParserRuleContext {
		public TerminalNode DOT() { return getToken(PLParser.DOT, 0); }
		public List<Ident_plContext> ident_pl() {
			return getRuleContexts(Ident_plContext.class);
		}
		public Ident_plContext ident_pl(int i) {
			return getRuleContext(Ident_plContext.class,i);
		}
		public Expr_funcContext expr_func() {
			return getRuleContext(Expr_funcContext.class,0);
		}
		public Expr_dot_property_accessContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_dot_property_access; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterExpr_dot_property_access(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitExpr_dot_property_access(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitExpr_dot_property_access(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_dot_property_accessContext expr_dot_property_access() throws RecognitionException {
		Expr_dot_property_accessContext _localctx = new Expr_dot_property_accessContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_expr_dot_property_access);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2149);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,226,_ctx) ) {
			case 1:
				{
				setState(2147);
				ident_pl();
				}
				break;
			case 2:
				{
				setState(2148);
				expr_func();
				}
				break;
			}
			setState(2151);
			match(DOT);
			setState(2152);
			ident_pl();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expr_func_paramsContext extends ParserRuleContext {
		public List<Func_paramContext> func_param() {
			return getRuleContexts(Func_paramContext.class);
		}
		public Func_paramContext func_param(int i) {
			return getRuleContext(Func_paramContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public Expr_func_paramsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_func_params; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterExpr_func_params(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitExpr_func_params(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitExpr_func_params(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_func_paramsContext expr_func_params() throws RecognitionException {
		Expr_func_paramsContext _localctx = new Expr_func_paramsContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_expr_func_params);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2154);
			func_param();
			setState(2159);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,227,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2155);
					match(COMMA);
					setState(2156);
					func_param();
					}
					} 
				}
				setState(2161);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,227,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_paramContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public Ident_plContext ident_pl() {
			return getRuleContext(Ident_plContext.class,0);
		}
		public TerminalNode EQ() { return getToken(PLParser.EQ, 0); }
		public TerminalNode GT() { return getToken(PLParser.GT, 0); }
		public Func_paramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_param; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterFunc_param(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitFunc_param(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitFunc_param(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_paramContext func_param() throws RecognitionException {
		Func_paramContext _localctx = new Func_paramContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_func_param);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2162);
			if (!(!_input.LT(1).getText().equalsIgnoreCase("INTO"))) throw new FailedPredicateException(this, "!_input.LT(1).getText().equalsIgnoreCase(\"INTO\")");
			setState(2168);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,229,_ctx) ) {
			case 1:
				{
				setState(2163);
				ident_pl();
				setState(2164);
				match(EQ);
				setState(2166);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GT) {
					{
					setState(2165);
					match(GT);
					}
				}

				}
				break;
			}
			setState(2170);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Host_plContext extends ParserRuleContext {
		public TerminalNode LOGICALNOT() { return getToken(PLParser.LOGICALNOT, 0); }
		public Host_cmdContext host_cmd() {
			return getRuleContext(Host_cmdContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(PLParser.SEMICOLON, 0); }
		public Host_stmtContext host_stmt() {
			return getRuleContext(Host_stmtContext.class,0);
		}
		public Host_plContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_host_pl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterHost_pl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitHost_pl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitHost_pl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Host_plContext host_pl() throws RecognitionException {
		Host_plContext _localctx = new Host_plContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_host_pl);
		try {
			setState(2177);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOGICALNOT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2172);
				match(LOGICALNOT);
				setState(2173);
				host_cmd();
				setState(2174);
				match(SEMICOLON);
				}
				break;
			case HOST:
				enterOuterAlt(_localctx, 2);
				{
				setState(2176);
				host_stmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Host_cmdContext extends ParserRuleContext {
		public Host_cmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_host_cmd; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterHost_cmd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitHost_cmd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitHost_cmd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Host_cmdContext host_cmd() throws RecognitionException {
		Host_cmdContext _localctx = new Host_cmdContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_host_cmd);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2182);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,231,_ctx);
			while ( _alt!=1 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					setState(2179);
					matchWildcard();
					}
					} 
				}
				setState(2184);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,231,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Host_stmtContext extends ParserRuleContext {
		public TerminalNode HOST() { return getToken(PLParser.HOST, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public Host_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_host_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterHost_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitHost_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitHost_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Host_stmtContext host_stmt() throws RecognitionException {
		Host_stmtContext _localctx = new Host_stmtContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_host_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2185);
			match(HOST);
			setState(2186);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_nameContext extends ParserRuleContext {
		public TerminalNode STRING_LITERAL() { return getToken(PLParser.STRING_LITERAL, 0); }
		public List<QidentContext> qident() {
			return getRuleContexts(QidentContext.class);
		}
		public QidentContext qident(int i) {
			return getRuleContext(QidentContext.class,i);
		}
		public List<TerminalNode> SLASH() { return getTokens(PLParser.SLASH); }
		public TerminalNode SLASH(int i) {
			return getToken(PLParser.SLASH, i);
		}
		public TerminalNode DOT() { return getToken(PLParser.DOT, 0); }
		public File_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterFile_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitFile_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitFile_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final File_nameContext file_name() throws RecognitionException {
		File_nameContext _localctx = new File_nameContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_file_name);
		try {
			int _alt;
			setState(2202);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2188);
				match(STRING_LITERAL);
				}
				break;
			case ACTION:
			case ALLOCATE:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ASSOCIATE:
			case AVG:
			case BATCHSIZE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BIT:
			case BODY:
			case BREAK:
			case BYTE:
			case CALLER:
			case CASCADE:
			case CASESPECIFIC:
			case CLIENT:
			case CLOSE:
			case CLUSTERED:
			case CMP:
			case COLLECTION:
			case COMPRESS:
			case CONCAT:
			case CONDITION:
			case CONSTANT:
			case COUNT_BIG:
			case CREATOR:
			case CS:
			case CURSOR:
			case DAYS:
			case DEC:
			case DECLARE:
			case DEFINED:
			case DEFINER:
			case DEFINITION:
			case DELIMITED:
			case DELIMITER:
			case DIAGNOSTICS:
			case DIR:
			case DIRECTORY:
			case DISTRIBUTE:
			case ESCAPED:
			case EXEC:
			case EXCEPTION:
			case EXCLUSIVE:
			case EXIT:
			case FALLBACK:
			case FETCH:
			case FILES:
			case FOUND:
			case GET:
			case GO:
			case HANDLER:
			case HOST:
			case IDENTITY:
			case INCLUDE:
			case INITRANS:
			case INOUT:
			case INT2:
			case INT4:
			case INT8:
			case INVOKER:
			case ISOPEN:
			case ITEMS:
			case KEEP:
			case LANGUAGE:
			case LEAVE:
			case LOCATOR:
			case LOCATORS:
			case LOCKS:
			case LOG:
			case LOGGED:
			case LOGGING:
			case LOOP:
			case MATCHED:
			case MAXTRANS:
			case MESSAGE_TEXT:
			case MICROSECOND:
			case MICROSECONDS:
			case MULTISET:
			case NCHAR:
			case NEW:
			case NVARCHAR:
			case NOCOUNT:
			case NOCOMPRESS:
			case NOLOGGING:
			case NONE:
			case NOTFOUND:
			case NUMERIC:
			case NUMBER:
			case OBJECT:
			case OFF:
			case OUT:
			case OWNER:
			case PACKAGE:
			case PCTFREE:
			case PCTUSED:
			case PRECISION:
			case PRESERVE:
			case PRINT:
			case QUALIFY:
			case QUERY_BAND:
			case QUIT:
			case QUOTED_IDENTIFIER:
			case RAISE:
			case RESIGNAL:
			case RESTRICT:
			case RESULT:
			case RESULT_SET_LOCATOR:
			case RETURN:
			case REVERSE:
			case ROW_COUNT:
			case RR:
			case RS:
			case PWD:
			case SECONDS:
			case SECURITY:
			case SEGMENT:
			case SEL:
			case SESSIONS:
			case SHARE:
			case SIGNAL:
			case SIMPLE_DOUBLE:
			case SIMPLE_FLOAT:
			case SMALLDATETIME:
			case SQL:
			case SQLEXCEPTION:
			case SQLINSERT:
			case SQLSTATE:
			case SQLWARNING:
			case STATISTICS:
			case STEP:
			case STORED:
			case SUBDIR:
			case SUBSTRING:
			case SUMMARY:
			case SYS_REFCURSOR:
			case TABLESPACE:
			case TEXTIMAGE_ON:
			case TITLE:
			case TOP:
			case UR:
			case VAR:
			case VARCHAR2:
			case VARYING:
			case VOLATILE:
			case WHILE:
			case WITHOUT:
			case XML:
			case YES:
			case ACTIVITY_COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case PART_COUNT:
			case PART_LOC:
			case RANK:
			case ROW_NUMBER:
			case STDEV:
			case SYSDATE:
			case VARIANCE:
			case DOT:
			case LEFT_BRACE:
			case RIGHT_BRACE:
			case ADDDATE:
			case AFTER:
			case AGG_STATE:
			case AGGREGATE:
			case ALIAS:
			case ANALYZED:
			case ARRAY:
			case ARRAY_RANGE:
			case AT:
			case AUTHORS:
			case AUTO_INCREMENT:
			case BACKENDS:
			case BACKUP:
			case BEGIN:
			case BELONG:
			case BIN:
			case BITAND:
			case BITMAP:
			case BITMAP_UNION:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BOOLEAN:
			case BRIEF:
			case BROKER:
			case BUCKETS:
			case BUILD:
			case BUILTIN:
			case BULK:
			case CACHED:
			case CALL:
			case CATALOG:
			case CATALOGS:
			case CHAIN:
			case CHAR:
			case CHARSET:
			case CHECK:
			case CLUSTER:
			case CLUSTERS:
			case COLLATION:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPACT:
			case COMPLETE:
			case CONFIG:
			case CONNECTION:
			case CONNECTION_ID:
			case CONSISTENT:
			case CONSTRAINTS:
			case CONVERT:
			case COPY:
			case COUNT:
			case CREATION:
			case CRON:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DATA:
			case DATE:
			case DATE_ADD:
			case DATE_CEIL:
			case DATE_DIFF:
			case DATE_FLOOR:
			case DATE_SUB:
			case DATEADD:
			case DATEDIFF:
			case DATETIME:
			case DATETIMEV2:
			case DATEV2:
			case DATETIMEV1:
			case DATEV1:
			case DAY:
			case DAYS_ADD:
			case DAYS_SUB:
			case DECIMAL:
			case DECIMALV2:
			case DECIMALV3:
			case DEFERRED:
			case DEMAND:
			case DIAGNOSE:
			case DISTINCTPC:
			case DISTINCTPCSA:
			case DO:
			case DORIS_INTERNAL_TABLE_ID:
			case DUAL:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTKEY:
			case ENCRYPTKEYS:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERRORS:
			case EVENTS:
			case EVERY:
			case EXCLUDE:
			case EXPIRED:
			case EXTERNAL:
			case FAILED_LOGIN_ATTEMPTS:
			case FAST:
			case FEATURE:
			case FIELDS:
			case FILE:
			case FILTER:
			case FIRST:
			case FORMAT:
			case FREE:
			case FRONTENDS:
			case FUNCTION:
			case GENERIC:
			case GLOBAL:
			case GRAPH:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HDFS:
			case HELP:
			case HISTOGRAM:
			case HLL_UNION:
			case HOSTNAME:
			case HOUR:
			case HUB:
			case IDENTIFIED:
			case IGNORE:
			case IMMEDIATE:
			case INCREMENTAL:
			case INDEXES:
			case INVERTED:
			case IPV4:
			case IPV6:
			case IS_NOT_NULL_PRED:
			case IS_NULL_PRED:
			case ISNULL:
			case ISOLATION:
			case JOB:
			case JOBS:
			case JSON:
			case JSONB:
			case KEYS:
			case LABEL:
			case LAST:
			case LDAP:
			case LDAP_ADMIN_PASSWORD:
			case LESS:
			case LEVEL:
			case LINES:
			case LINK:
			case LOCAL:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case LOCATION:
			case LOCK:
			case LOGICAL:
			case MANUAL:
			case MAP:
			case MATCH_ALL:
			case MATCH_ANY:
			case MATCH_ELEMENT_EQ:
			case MATCH_ELEMENT_GE:
			case MATCH_ELEMENT_GT:
			case MATCH_ELEMENT_LE:
			case MATCH_ELEMENT_LT:
			case MATCH_PHRASE:
			case MATCH_PHRASE_EDGE:
			case MATCH_PHRASE_PREFIX:
			case MATCH_REGEXP:
			case MATERIALIZED:
			case MAX:
			case MEMO:
			case MERGE:
			case MIGRATE:
			case MIGRATIONS:
			case MIN:
			case MINUTE:
			case MODIFY:
			case MONTH:
			case MTMV:
			case NAME:
			case NAMES:
			case NEGATIVE:
			case NEVER:
			case NEXT:
			case NGRAM_BF:
			case NO:
			case NON_NULLABLE:
			case NULLS:
			case OF:
			case OFFSET:
			case ONLY:
			case OPEN:
			case OPTIMIZED:
			case PARAMETER:
			case PARSED:
			case PARTITIONS:
			case PASSWORD:
			case PASSWORD_EXPIRE:
			case PASSWORD_HISTORY:
			case PASSWORD_LOCK_TIME:
			case PASSWORD_REUSE:
			case PATH:
			case PAUSE:
			case PERCENT:
			case PERIOD:
			case PERMISSIVE:
			case PHYSICAL:
			case PLAN:
			case PROCESS:
			case PLUGIN:
			case PLUGINS:
			case POLICY:
			case PROC:
			case PROCESSLIST:
			case PROFILE:
			case PROPERTIES:
			case PROPERTY:
			case QUANTILE_STATE:
			case QUANTILE_UNION:
			case QUERY:
			case QUOTA:
			case RANDOM:
			case RECOVER:
			case RECYCLE:
			case REFRESH:
			case REPEATABLE:
			case REPLACE:
			case REPLACE_IF_NOT_NULL:
			case REPOSITORIES:
			case REPOSITORY:
			case RESOURCE:
			case RESOURCES:
			case RESTORE:
			case RESTRICTIVE:
			case RESUME:
			case RETURNS:
			case REWRITTEN:
			case RLIKE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case S3:
			case SAMPLE:
			case SCHEDULE:
			case SCHEDULER:
			case SCHEMA:
			case SECOND:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION:
			case SHAPE:
			case SKEW:
			case SNAPSHOT:
			case SONAME:
			case SPLIT:
			case START:
			case STARTS:
			case STATS:
			case STATUS:
			case STOP:
			case STORAGE:
			case STREAM:
			case STREAMING:
			case STRING:
			case STRUCT:
			case SUBDATE:
			case SUM:
			case TABLES:
			case TASK:
			case TASKS:
			case TEMPORARY:
			case TEXT:
			case THAN:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TRANSACTION:
			case TREE:
			case TRIGGERS:
			case TRUNCATE:
			case TYPE:
			case TYPES:
			case UNCOMMITTED:
			case UNLOCK:
			case USER:
			case VALUE:
			case VARCHAR:
			case VARIABLES:
			case VARIANT:
			case VERBOSE:
			case VERSION:
			case VIEW:
			case WARNINGS:
			case WEEK:
			case WORK:
			case YEAR:
			case SUBTRACT:
			case SLASH:
			case IDENTIFIER:
				enterOuterAlt(_localctx, 2);
				{
				setState(2192);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SLASH:
					{
					setState(2189);
					match(SLASH);
					}
					break;
				case DOT:
					{
					setState(2190);
					match(DOT);
					setState(2191);
					match(SLASH);
					}
					break;
				case ACTION:
				case ALLOCATE:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ASSOCIATE:
				case AVG:
				case BATCHSIZE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BIT:
				case BODY:
				case BREAK:
				case BYTE:
				case CALLER:
				case CASCADE:
				case CASESPECIFIC:
				case CLIENT:
				case CLOSE:
				case CLUSTERED:
				case CMP:
				case COLLECTION:
				case COMPRESS:
				case CONCAT:
				case CONDITION:
				case CONSTANT:
				case COUNT_BIG:
				case CREATOR:
				case CS:
				case CURSOR:
				case DAYS:
				case DEC:
				case DECLARE:
				case DEFINED:
				case DEFINER:
				case DEFINITION:
				case DELIMITED:
				case DELIMITER:
				case DIAGNOSTICS:
				case DIR:
				case DIRECTORY:
				case DISTRIBUTE:
				case ESCAPED:
				case EXEC:
				case EXCEPTION:
				case EXCLUSIVE:
				case EXIT:
				case FALLBACK:
				case FETCH:
				case FILES:
				case FOUND:
				case GET:
				case GO:
				case HANDLER:
				case HOST:
				case IDENTITY:
				case INCLUDE:
				case INITRANS:
				case INOUT:
				case INT2:
				case INT4:
				case INT8:
				case INVOKER:
				case ISOPEN:
				case ITEMS:
				case KEEP:
				case LANGUAGE:
				case LEAVE:
				case LOCATOR:
				case LOCATORS:
				case LOCKS:
				case LOG:
				case LOGGED:
				case LOGGING:
				case LOOP:
				case MATCHED:
				case MAXTRANS:
				case MESSAGE_TEXT:
				case MICROSECOND:
				case MICROSECONDS:
				case MULTISET:
				case NCHAR:
				case NEW:
				case NVARCHAR:
				case NOCOUNT:
				case NOCOMPRESS:
				case NOLOGGING:
				case NONE:
				case NOTFOUND:
				case NUMERIC:
				case NUMBER:
				case OBJECT:
				case OFF:
				case OUT:
				case OWNER:
				case PACKAGE:
				case PCTFREE:
				case PCTUSED:
				case PRECISION:
				case PRESERVE:
				case PRINT:
				case QUALIFY:
				case QUERY_BAND:
				case QUIT:
				case QUOTED_IDENTIFIER:
				case RAISE:
				case RESIGNAL:
				case RESTRICT:
				case RESULT:
				case RESULT_SET_LOCATOR:
				case RETURN:
				case REVERSE:
				case ROW_COUNT:
				case RR:
				case RS:
				case PWD:
				case SECONDS:
				case SECURITY:
				case SEGMENT:
				case SEL:
				case SESSIONS:
				case SHARE:
				case SIGNAL:
				case SIMPLE_DOUBLE:
				case SIMPLE_FLOAT:
				case SMALLDATETIME:
				case SQL:
				case SQLEXCEPTION:
				case SQLINSERT:
				case SQLSTATE:
				case SQLWARNING:
				case STATISTICS:
				case STEP:
				case STORED:
				case SUBDIR:
				case SUBSTRING:
				case SUMMARY:
				case SYS_REFCURSOR:
				case TABLESPACE:
				case TEXTIMAGE_ON:
				case TITLE:
				case TOP:
				case UR:
				case VAR:
				case VARCHAR2:
				case VARYING:
				case VOLATILE:
				case WHILE:
				case WITHOUT:
				case XML:
				case YES:
				case ACTIVITY_COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case PART_COUNT:
				case PART_LOC:
				case RANK:
				case ROW_NUMBER:
				case STDEV:
				case SYSDATE:
				case VARIANCE:
				case LEFT_BRACE:
				case RIGHT_BRACE:
				case ADDDATE:
				case AFTER:
				case AGG_STATE:
				case AGGREGATE:
				case ALIAS:
				case ANALYZED:
				case ARRAY:
				case ARRAY_RANGE:
				case AT:
				case AUTHORS:
				case AUTO_INCREMENT:
				case BACKENDS:
				case BACKUP:
				case BEGIN:
				case BELONG:
				case BIN:
				case BITAND:
				case BITMAP:
				case BITMAP_UNION:
				case BITOR:
				case BITXOR:
				case BLOB:
				case BOOLEAN:
				case BRIEF:
				case BROKER:
				case BUCKETS:
				case BUILD:
				case BUILTIN:
				case BULK:
				case CACHED:
				case CALL:
				case CATALOG:
				case CATALOGS:
				case CHAIN:
				case CHAR:
				case CHARSET:
				case CHECK:
				case CLUSTER:
				case CLUSTERS:
				case COLLATION:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPACT:
				case COMPLETE:
				case CONFIG:
				case CONNECTION:
				case CONNECTION_ID:
				case CONSISTENT:
				case CONSTRAINTS:
				case CONVERT:
				case COPY:
				case COUNT:
				case CREATION:
				case CRON:
				case CURRENT_CATALOG:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DATA:
				case DATE:
				case DATE_ADD:
				case DATE_CEIL:
				case DATE_DIFF:
				case DATE_FLOOR:
				case DATE_SUB:
				case DATEADD:
				case DATEDIFF:
				case DATETIME:
				case DATETIMEV2:
				case DATEV2:
				case DATETIMEV1:
				case DATEV1:
				case DAY:
				case DAYS_ADD:
				case DAYS_SUB:
				case DECIMAL:
				case DECIMALV2:
				case DECIMALV3:
				case DEFERRED:
				case DEMAND:
				case DIAGNOSE:
				case DISTINCTPC:
				case DISTINCTPCSA:
				case DO:
				case DORIS_INTERNAL_TABLE_ID:
				case DUAL:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTKEY:
				case ENCRYPTKEYS:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERRORS:
				case EVENTS:
				case EVERY:
				case EXCLUDE:
				case EXPIRED:
				case EXTERNAL:
				case FAILED_LOGIN_ATTEMPTS:
				case FAST:
				case FEATURE:
				case FIELDS:
				case FILE:
				case FILTER:
				case FIRST:
				case FORMAT:
				case FREE:
				case FRONTENDS:
				case FUNCTION:
				case GENERIC:
				case GLOBAL:
				case GRAPH:
				case GROUPING:
				case GROUPS:
				case HASH:
				case HDFS:
				case HELP:
				case HISTOGRAM:
				case HLL_UNION:
				case HOSTNAME:
				case HOUR:
				case HUB:
				case IDENTIFIED:
				case IGNORE:
				case IMMEDIATE:
				case INCREMENTAL:
				case INDEXES:
				case INVERTED:
				case IPV4:
				case IPV6:
				case IS_NOT_NULL_PRED:
				case IS_NULL_PRED:
				case ISNULL:
				case ISOLATION:
				case JOB:
				case JOBS:
				case JSON:
				case JSONB:
				case KEYS:
				case LABEL:
				case LAST:
				case LDAP:
				case LDAP_ADMIN_PASSWORD:
				case LESS:
				case LEVEL:
				case LINES:
				case LINK:
				case LOCAL:
				case LOCALTIME:
				case LOCALTIMESTAMP:
				case LOCATION:
				case LOCK:
				case LOGICAL:
				case MANUAL:
				case MAP:
				case MATCH_ALL:
				case MATCH_ANY:
				case MATCH_ELEMENT_EQ:
				case MATCH_ELEMENT_GE:
				case MATCH_ELEMENT_GT:
				case MATCH_ELEMENT_LE:
				case MATCH_ELEMENT_LT:
				case MATCH_PHRASE:
				case MATCH_PHRASE_EDGE:
				case MATCH_PHRASE_PREFIX:
				case MATCH_REGEXP:
				case MATERIALIZED:
				case MAX:
				case MEMO:
				case MERGE:
				case MIGRATE:
				case MIGRATIONS:
				case MIN:
				case MINUTE:
				case MODIFY:
				case MONTH:
				case MTMV:
				case NAME:
				case NAMES:
				case NEGATIVE:
				case NEVER:
				case NEXT:
				case NGRAM_BF:
				case NO:
				case NON_NULLABLE:
				case NULLS:
				case OF:
				case OFFSET:
				case ONLY:
				case OPEN:
				case OPTIMIZED:
				case PARAMETER:
				case PARSED:
				case PARTITIONS:
				case PASSWORD:
				case PASSWORD_EXPIRE:
				case PASSWORD_HISTORY:
				case PASSWORD_LOCK_TIME:
				case PASSWORD_REUSE:
				case PATH:
				case PAUSE:
				case PERCENT:
				case PERIOD:
				case PERMISSIVE:
				case PHYSICAL:
				case PLAN:
				case PROCESS:
				case PLUGIN:
				case PLUGINS:
				case POLICY:
				case PROC:
				case PROCESSLIST:
				case PROFILE:
				case PROPERTIES:
				case PROPERTY:
				case QUANTILE_STATE:
				case QUANTILE_UNION:
				case QUERY:
				case QUOTA:
				case RANDOM:
				case RECOVER:
				case RECYCLE:
				case REFRESH:
				case REPEATABLE:
				case REPLACE:
				case REPLACE_IF_NOT_NULL:
				case REPOSITORIES:
				case REPOSITORY:
				case RESOURCE:
				case RESOURCES:
				case RESTORE:
				case RESTRICTIVE:
				case RESUME:
				case RETURNS:
				case REWRITTEN:
				case RLIKE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case S3:
				case SAMPLE:
				case SCHEDULE:
				case SCHEDULER:
				case SCHEMA:
				case SECOND:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION:
				case SHAPE:
				case SKEW:
				case SNAPSHOT:
				case SONAME:
				case SPLIT:
				case START:
				case STARTS:
				case STATS:
				case STATUS:
				case STOP:
				case STORAGE:
				case STREAM:
				case STREAMING:
				case STRING:
				case STRUCT:
				case SUBDATE:
				case SUM:
				case TABLES:
				case TASK:
				case TASKS:
				case TEMPORARY:
				case TEXT:
				case THAN:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TRANSACTION:
				case TREE:
				case TRIGGERS:
				case TRUNCATE:
				case TYPE:
				case TYPES:
				case UNCOMMITTED:
				case UNLOCK:
				case USER:
				case VALUE:
				case VARCHAR:
				case VARIABLES:
				case VARIANT:
				case VERBOSE:
				case VERSION:
				case VIEW:
				case WARNINGS:
				case WEEK:
				case WORK:
				case YEAR:
				case SUBTRACT:
				case IDENTIFIER:
					break;
				default:
					break;
				}
				setState(2194);
				qident();
				setState(2199);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,233,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2195);
						match(SLASH);
						setState(2196);
						qident();
						}
						} 
					}
					setState(2201);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,233,_ctx);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Date_literalContext extends ParserRuleContext {
		public TerminalNode DATE() { return getToken(PLParser.DATE, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public Date_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_date_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterDate_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitDate_literal(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitDate_literal(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Date_literalContext date_literal() throws RecognitionException {
		Date_literalContext _localctx = new Date_literalContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_date_literal);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2204);
			match(DATE);
			setState(2205);
			string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Timestamp_literalContext extends ParserRuleContext {
		public TerminalNode TIMESTAMP() { return getToken(PLParser.TIMESTAMP, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public Timestamp_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timestamp_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterTimestamp_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitTimestamp_literal(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitTimestamp_literal(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Timestamp_literalContext timestamp_literal() throws RecognitionException {
		Timestamp_literalContext _localctx = new Timestamp_literalContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_timestamp_literal);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2207);
			match(TIMESTAMP);
			setState(2208);
			string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ident_plContext extends ParserRuleContext {
		public TerminalNode IDENTIFIER() { return getToken(PLParser.IDENTIFIER, 0); }
		public Non_reserved_wordsContext non_reserved_words() {
			return getRuleContext(Non_reserved_wordsContext.class,0);
		}
		public NonReservedContext nonReserved() {
			return getRuleContext(NonReservedContext.class,0);
		}
		public TerminalNode SUBTRACT() { return getToken(PLParser.SUBTRACT, 0); }
		public Ident_plContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ident_pl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterIdent_pl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitIdent_pl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitIdent_pl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ident_plContext ident_pl() throws RecognitionException {
		Ident_plContext _localctx = new Ident_plContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_ident_pl);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2211);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SUBTRACT) {
				{
				setState(2210);
				match(SUBTRACT);
				}
			}

			setState(2216);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,236,_ctx) ) {
			case 1:
				{
				setState(2213);
				match(IDENTIFIER);
				}
				break;
			case 2:
				{
				setState(2214);
				non_reserved_words();
				}
				break;
			case 3:
				{
				setState(2215);
				nonReserved();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QidentContext extends ParserRuleContext {
		public List<Ident_plContext> ident_pl() {
			return getRuleContexts(Ident_plContext.class);
		}
		public Ident_plContext ident_pl(int i) {
			return getRuleContext(Ident_plContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(PLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(PLParser.DOT, i);
		}
		public QidentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qident; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterQident(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitQident(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitQident(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QidentContext qident() throws RecognitionException {
		QidentContext _localctx = new QidentContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_qident);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2218);
			ident_pl();
			setState(2223);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,237,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2219);
					match(DOT);
					setState(2220);
					ident_pl();
					}
					} 
				}
				setState(2225);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,237,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StringContext extends ParserRuleContext {
		public TerminalNode STRING_LITERAL() { return getToken(PLParser.STRING_LITERAL, 0); }
		public StringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_string; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterString(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitString(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitString(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StringContext string() throws RecognitionException {
		StringContext _localctx = new StringContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_string);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2226);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Int_numberContext extends ParserRuleContext {
		public TerminalNode INTEGER_VALUE() { return getToken(PLParser.INTEGER_VALUE, 0); }
		public TerminalNode SUBTRACT() { return getToken(PLParser.SUBTRACT, 0); }
		public TerminalNode PLUS() { return getToken(PLParser.PLUS, 0); }
		public Int_numberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_int_number; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterInt_number(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitInt_number(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitInt_number(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Int_numberContext int_number() throws RecognitionException {
		Int_numberContext _localctx = new Int_numberContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_int_number);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2229);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PLUS || _la==SUBTRACT) {
				{
				setState(2228);
				_la = _input.LA(1);
				if ( !(_la==PLUS || _la==SUBTRACT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2231);
			match(INTEGER_VALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dec_numberContext extends ParserRuleContext {
		public TerminalNode DECIMAL_VALUE() { return getToken(PLParser.DECIMAL_VALUE, 0); }
		public TerminalNode SUBTRACT() { return getToken(PLParser.SUBTRACT, 0); }
		public TerminalNode PLUS() { return getToken(PLParser.PLUS, 0); }
		public Dec_numberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dec_number; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterDec_number(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitDec_number(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitDec_number(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dec_numberContext dec_number() throws RecognitionException {
		Dec_numberContext _localctx = new Dec_numberContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_dec_number);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2234);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PLUS || _la==SUBTRACT) {
				{
				setState(2233);
				_la = _input.LA(1);
				if ( !(_la==PLUS || _la==SUBTRACT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2236);
			match(DECIMAL_VALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bool_literalContext extends ParserRuleContext {
		public TerminalNode TRUE() { return getToken(PLParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(PLParser.FALSE, 0); }
		public Bool_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bool_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterBool_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitBool_literal(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitBool_literal(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bool_literalContext bool_literal() throws RecognitionException {
		Bool_literalContext _localctx = new Bool_literalContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_bool_literal);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2238);
			_la = _input.LA(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_constContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(PLParser.NULL, 0); }
		public Null_constContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_const; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterNull_const(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitNull_const(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitNull_const(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Null_constContext null_const() throws RecognitionException {
		Null_constContext _localctx = new Null_constContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_null_const);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2240);
			match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Non_reserved_wordsContext extends ParserRuleContext {
		public TerminalNode ACTION() { return getToken(PLParser.ACTION, 0); }
		public TerminalNode ACTIVITY_COUNT() { return getToken(PLParser.ACTIVITY_COUNT, 0); }
		public TerminalNode ALLOCATE() { return getToken(PLParser.ALLOCATE, 0); }
		public TerminalNode ANSI_NULLS() { return getToken(PLParser.ANSI_NULLS, 0); }
		public TerminalNode ANSI_PADDING() { return getToken(PLParser.ANSI_PADDING, 0); }
		public TerminalNode ASSOCIATE() { return getToken(PLParser.ASSOCIATE, 0); }
		public TerminalNode AVG() { return getToken(PLParser.AVG, 0); }
		public TerminalNode BATCHSIZE() { return getToken(PLParser.BATCHSIZE, 0); }
		public TerminalNode BINARY_DOUBLE() { return getToken(PLParser.BINARY_DOUBLE, 0); }
		public TerminalNode BINARY_FLOAT() { return getToken(PLParser.BINARY_FLOAT, 0); }
		public TerminalNode BIT() { return getToken(PLParser.BIT, 0); }
		public TerminalNode BODY() { return getToken(PLParser.BODY, 0); }
		public TerminalNode BREAK() { return getToken(PLParser.BREAK, 0); }
		public TerminalNode BYTE() { return getToken(PLParser.BYTE, 0); }
		public TerminalNode CALLER() { return getToken(PLParser.CALLER, 0); }
		public TerminalNode CASCADE() { return getToken(PLParser.CASCADE, 0); }
		public TerminalNode CASESPECIFIC() { return getToken(PLParser.CASESPECIFIC, 0); }
		public TerminalNode CLIENT() { return getToken(PLParser.CLIENT, 0); }
		public TerminalNode CLOSE() { return getToken(PLParser.CLOSE, 0); }
		public TerminalNode CLUSTERED() { return getToken(PLParser.CLUSTERED, 0); }
		public TerminalNode CMP() { return getToken(PLParser.CMP, 0); }
		public TerminalNode COLLECTION() { return getToken(PLParser.COLLECTION, 0); }
		public TerminalNode COMPRESS() { return getToken(PLParser.COMPRESS, 0); }
		public TerminalNode CONSTANT() { return getToken(PLParser.CONSTANT, 0); }
		public TerminalNode CONCAT() { return getToken(PLParser.CONCAT, 0); }
		public TerminalNode CONDITION() { return getToken(PLParser.CONDITION, 0); }
		public TerminalNode COUNT_BIG() { return getToken(PLParser.COUNT_BIG, 0); }
		public TerminalNode CREATOR() { return getToken(PLParser.CREATOR, 0); }
		public TerminalNode CS() { return getToken(PLParser.CS, 0); }
		public TerminalNode CUME_DIST() { return getToken(PLParser.CUME_DIST, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(PLParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(PLParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PLParser.CURRENT_USER, 0); }
		public TerminalNode CURSOR() { return getToken(PLParser.CURSOR, 0); }
		public TerminalNode DAYS() { return getToken(PLParser.DAYS, 0); }
		public TerminalNode DEC() { return getToken(PLParser.DEC, 0); }
		public TerminalNode DECLARE() { return getToken(PLParser.DECLARE, 0); }
		public TerminalNode DEFINED() { return getToken(PLParser.DEFINED, 0); }
		public TerminalNode DEFINER() { return getToken(PLParser.DEFINER, 0); }
		public TerminalNode DEFINITION() { return getToken(PLParser.DEFINITION, 0); }
		public TerminalNode DELIMITED() { return getToken(PLParser.DELIMITED, 0); }
		public TerminalNode DELIMITER() { return getToken(PLParser.DELIMITER, 0); }
		public TerminalNode DENSE_RANK() { return getToken(PLParser.DENSE_RANK, 0); }
		public TerminalNode DIAGNOSTICS() { return getToken(PLParser.DIAGNOSTICS, 0); }
		public TerminalNode DIR() { return getToken(PLParser.DIR, 0); }
		public TerminalNode DIRECTORY() { return getToken(PLParser.DIRECTORY, 0); }
		public TerminalNode DISTRIBUTE() { return getToken(PLParser.DISTRIBUTE, 0); }
		public TerminalNode ESCAPED() { return getToken(PLParser.ESCAPED, 0); }
		public TerminalNode EXEC() { return getToken(PLParser.EXEC, 0); }
		public TerminalNode EXCEPTION() { return getToken(PLParser.EXCEPTION, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(PLParser.EXCLUSIVE, 0); }
		public TerminalNode EXIT() { return getToken(PLParser.EXIT, 0); }
		public TerminalNode FALLBACK() { return getToken(PLParser.FALLBACK, 0); }
		public TerminalNode FETCH() { return getToken(PLParser.FETCH, 0); }
		public TerminalNode FILES() { return getToken(PLParser.FILES, 0); }
		public TerminalNode FIRST_VALUE() { return getToken(PLParser.FIRST_VALUE, 0); }
		public TerminalNode FOUND() { return getToken(PLParser.FOUND, 0); }
		public TerminalNode GET() { return getToken(PLParser.GET, 0); }
		public TerminalNode GO() { return getToken(PLParser.GO, 0); }
		public TerminalNode HANDLER() { return getToken(PLParser.HANDLER, 0); }
		public TerminalNode HOST() { return getToken(PLParser.HOST, 0); }
		public TerminalNode IDENTITY() { return getToken(PLParser.IDENTITY, 0); }
		public TerminalNode INCLUDE() { return getToken(PLParser.INCLUDE, 0); }
		public TerminalNode INITRANS() { return getToken(PLParser.INITRANS, 0); }
		public TerminalNode INOUT() { return getToken(PLParser.INOUT, 0); }
		public TerminalNode INT2() { return getToken(PLParser.INT2, 0); }
		public TerminalNode INT4() { return getToken(PLParser.INT4, 0); }
		public TerminalNode INT8() { return getToken(PLParser.INT8, 0); }
		public TerminalNode INVOKER() { return getToken(PLParser.INVOKER, 0); }
		public TerminalNode ITEMS() { return getToken(PLParser.ITEMS, 0); }
		public TerminalNode ISOPEN() { return getToken(PLParser.ISOPEN, 0); }
		public TerminalNode KEEP() { return getToken(PLParser.KEEP, 0); }
		public TerminalNode KEYS() { return getToken(PLParser.KEYS, 0); }
		public TerminalNode LAG() { return getToken(PLParser.LAG, 0); }
		public TerminalNode LANGUAGE() { return getToken(PLParser.LANGUAGE, 0); }
		public TerminalNode LAST_VALUE() { return getToken(PLParser.LAST_VALUE, 0); }
		public TerminalNode LEAD() { return getToken(PLParser.LEAD, 0); }
		public TerminalNode LEAVE() { return getToken(PLParser.LEAVE, 0); }
		public TerminalNode LOCATOR() { return getToken(PLParser.LOCATOR, 0); }
		public TerminalNode LOCATORS() { return getToken(PLParser.LOCATORS, 0); }
		public TerminalNode LOCKS() { return getToken(PLParser.LOCKS, 0); }
		public TerminalNode LOG() { return getToken(PLParser.LOG, 0); }
		public TerminalNode LOGGED() { return getToken(PLParser.LOGGED, 0); }
		public TerminalNode LOGGING() { return getToken(PLParser.LOGGING, 0); }
		public TerminalNode LOOP() { return getToken(PLParser.LOOP, 0); }
		public TerminalNode MATCHED() { return getToken(PLParser.MATCHED, 0); }
		public TerminalNode MAXTRANS() { return getToken(PLParser.MAXTRANS, 0); }
		public TerminalNode MESSAGE_TEXT() { return getToken(PLParser.MESSAGE_TEXT, 0); }
		public TerminalNode MICROSECOND() { return getToken(PLParser.MICROSECOND, 0); }
		public TerminalNode MICROSECONDS() { return getToken(PLParser.MICROSECONDS, 0); }
		public TerminalNode MULTISET() { return getToken(PLParser.MULTISET, 0); }
		public TerminalNode NCHAR() { return getToken(PLParser.NCHAR, 0); }
		public TerminalNode NEW() { return getToken(PLParser.NEW, 0); }
		public TerminalNode NVARCHAR() { return getToken(PLParser.NVARCHAR, 0); }
		public TerminalNode NOCOMPRESS() { return getToken(PLParser.NOCOMPRESS, 0); }
		public TerminalNode NOCOUNT() { return getToken(PLParser.NOCOUNT, 0); }
		public TerminalNode NOLOGGING() { return getToken(PLParser.NOLOGGING, 0); }
		public TerminalNode NONE() { return getToken(PLParser.NONE, 0); }
		public TerminalNode NOTFOUND() { return getToken(PLParser.NOTFOUND, 0); }
		public TerminalNode NUMERIC() { return getToken(PLParser.NUMERIC, 0); }
		public TerminalNode NUMBER() { return getToken(PLParser.NUMBER, 0); }
		public TerminalNode OBJECT() { return getToken(PLParser.OBJECT, 0); }
		public TerminalNode OFF() { return getToken(PLParser.OFF, 0); }
		public TerminalNode OUT() { return getToken(PLParser.OUT, 0); }
		public TerminalNode OWNER() { return getToken(PLParser.OWNER, 0); }
		public TerminalNode PACKAGE() { return getToken(PLParser.PACKAGE, 0); }
		public TerminalNode PART_COUNT() { return getToken(PLParser.PART_COUNT, 0); }
		public TerminalNode PART_LOC() { return getToken(PLParser.PART_LOC, 0); }
		public TerminalNode PCTFREE() { return getToken(PLParser.PCTFREE, 0); }
		public TerminalNode PCTUSED() { return getToken(PLParser.PCTUSED, 0); }
		public TerminalNode PRECISION() { return getToken(PLParser.PRECISION, 0); }
		public TerminalNode PRESERVE() { return getToken(PLParser.PRESERVE, 0); }
		public TerminalNode PRINT() { return getToken(PLParser.PRINT, 0); }
		public TerminalNode PWD() { return getToken(PLParser.PWD, 0); }
		public TerminalNode QUALIFY() { return getToken(PLParser.QUALIFY, 0); }
		public TerminalNode QUERY_BAND() { return getToken(PLParser.QUERY_BAND, 0); }
		public TerminalNode QUIT() { return getToken(PLParser.QUIT, 0); }
		public TerminalNode QUOTED_IDENTIFIER() { return getToken(PLParser.QUOTED_IDENTIFIER, 0); }
		public TerminalNode RAISE() { return getToken(PLParser.RAISE, 0); }
		public TerminalNode RANK() { return getToken(PLParser.RANK, 0); }
		public TerminalNode RR() { return getToken(PLParser.RR, 0); }
		public TerminalNode RESIGNAL() { return getToken(PLParser.RESIGNAL, 0); }
		public TerminalNode RESTRICT() { return getToken(PLParser.RESTRICT, 0); }
		public TerminalNode RESULT() { return getToken(PLParser.RESULT, 0); }
		public TerminalNode RESULT_SET_LOCATOR() { return getToken(PLParser.RESULT_SET_LOCATOR, 0); }
		public TerminalNode RETURN() { return getToken(PLParser.RETURN, 0); }
		public TerminalNode REVERSE() { return getToken(PLParser.REVERSE, 0); }
		public TerminalNode RS() { return getToken(PLParser.RS, 0); }
		public TerminalNode ROW_COUNT() { return getToken(PLParser.ROW_COUNT, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(PLParser.ROW_NUMBER, 0); }
		public TerminalNode SECONDS() { return getToken(PLParser.SECONDS, 0); }
		public TerminalNode SECURITY() { return getToken(PLParser.SECURITY, 0); }
		public TerminalNode SEGMENT() { return getToken(PLParser.SEGMENT, 0); }
		public TerminalNode SEL() { return getToken(PLParser.SEL, 0); }
		public TerminalNode SESSIONS() { return getToken(PLParser.SESSIONS, 0); }
		public TerminalNode SHARE() { return getToken(PLParser.SHARE, 0); }
		public TerminalNode SIGNAL() { return getToken(PLParser.SIGNAL, 0); }
		public TerminalNode SIMPLE_DOUBLE() { return getToken(PLParser.SIMPLE_DOUBLE, 0); }
		public TerminalNode SIMPLE_FLOAT() { return getToken(PLParser.SIMPLE_FLOAT, 0); }
		public TerminalNode SMALLDATETIME() { return getToken(PLParser.SMALLDATETIME, 0); }
		public TerminalNode SQL() { return getToken(PLParser.SQL, 0); }
		public TerminalNode SQLEXCEPTION() { return getToken(PLParser.SQLEXCEPTION, 0); }
		public TerminalNode SQLINSERT() { return getToken(PLParser.SQLINSERT, 0); }
		public TerminalNode SQLSTATE() { return getToken(PLParser.SQLSTATE, 0); }
		public TerminalNode SQLWARNING() { return getToken(PLParser.SQLWARNING, 0); }
		public TerminalNode STATISTICS() { return getToken(PLParser.STATISTICS, 0); }
		public TerminalNode STEP() { return getToken(PLParser.STEP, 0); }
		public TerminalNode STDEV() { return getToken(PLParser.STDEV, 0); }
		public TerminalNode STORED() { return getToken(PLParser.STORED, 0); }
		public TerminalNode SUBDIR() { return getToken(PLParser.SUBDIR, 0); }
		public TerminalNode SUBSTRING() { return getToken(PLParser.SUBSTRING, 0); }
		public TerminalNode SUMMARY() { return getToken(PLParser.SUMMARY, 0); }
		public TerminalNode SYSDATE() { return getToken(PLParser.SYSDATE, 0); }
		public TerminalNode SYS_REFCURSOR() { return getToken(PLParser.SYS_REFCURSOR, 0); }
		public TerminalNode TABLESPACE() { return getToken(PLParser.TABLESPACE, 0); }
		public TerminalNode TEXTIMAGE_ON() { return getToken(PLParser.TEXTIMAGE_ON, 0); }
		public TerminalNode TITLE() { return getToken(PLParser.TITLE, 0); }
		public TerminalNode TOP() { return getToken(PLParser.TOP, 0); }
		public TerminalNode UR() { return getToken(PLParser.UR, 0); }
		public TerminalNode VAR() { return getToken(PLParser.VAR, 0); }
		public TerminalNode VARCHAR2() { return getToken(PLParser.VARCHAR2, 0); }
		public TerminalNode VARYING() { return getToken(PLParser.VARYING, 0); }
		public TerminalNode VARIANCE() { return getToken(PLParser.VARIANCE, 0); }
		public TerminalNode VOLATILE() { return getToken(PLParser.VOLATILE, 0); }
		public TerminalNode WHILE() { return getToken(PLParser.WHILE, 0); }
		public TerminalNode WITHOUT() { return getToken(PLParser.WITHOUT, 0); }
		public TerminalNode XML() { return getToken(PLParser.XML, 0); }
		public TerminalNode YES() { return getToken(PLParser.YES, 0); }
		public Non_reserved_wordsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_non_reserved_words; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterNon_reserved_words(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitNon_reserved_words(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitNon_reserved_words(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Non_reserved_wordsContext non_reserved_words() throws RecognitionException {
		Non_reserved_wordsContext _localctx = new Non_reserved_wordsContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_non_reserved_words);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2242);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACTION) | (1L << ALLOCATE) | (1L << ANSI_NULLS) | (1L << ANSI_PADDING) | (1L << ASSOCIATE) | (1L << AVG) | (1L << BATCHSIZE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BIT) | (1L << BODY) | (1L << BREAK) | (1L << BYTE) | (1L << CALLER) | (1L << CASCADE) | (1L << CASESPECIFIC) | (1L << CLIENT) | (1L << CLOSE) | (1L << CLUSTERED) | (1L << CMP) | (1L << COLLECTION) | (1L << COMPRESS) | (1L << CONCAT) | (1L << CONDITION) | (1L << CONSTANT) | (1L << COUNT_BIG) | (1L << CREATOR) | (1L << CS) | (1L << CURSOR) | (1L << DAYS) | (1L << DEC) | (1L << DECLARE) | (1L << DEFINED) | (1L << DEFINER) | (1L << DEFINITION) | (1L << DELIMITED) | (1L << DELIMITER) | (1L << DIAGNOSTICS) | (1L << DIR) | (1L << DIRECTORY) | (1L << DISTRIBUTE) | (1L << ESCAPED) | (1L << EXEC) | (1L << EXCEPTION) | (1L << EXCLUSIVE) | (1L << EXIT) | (1L << FALLBACK) | (1L << FETCH) | (1L << FILES) | (1L << FOUND) | (1L << GET) | (1L << GO) | (1L << HANDLER) | (1L << HOST) | (1L << IDENTITY) | (1L << INCLUDE) | (1L << INITRANS) | (1L << INOUT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (INT2 - 64)) | (1L << (INT4 - 64)) | (1L << (INT8 - 64)) | (1L << (INVOKER - 64)) | (1L << (ISOPEN - 64)) | (1L << (ITEMS - 64)) | (1L << (KEEP - 64)) | (1L << (LANGUAGE - 64)) | (1L << (LEAVE - 64)) | (1L << (LOCATOR - 64)) | (1L << (LOCATORS - 64)) | (1L << (LOCKS - 64)) | (1L << (LOG - 64)) | (1L << (LOGGED - 64)) | (1L << (LOGGING - 64)) | (1L << (LOOP - 64)) | (1L << (MATCHED - 64)) | (1L << (MAXTRANS - 64)) | (1L << (MESSAGE_TEXT - 64)) | (1L << (MICROSECOND - 64)) | (1L << (MICROSECONDS - 64)) | (1L << (MULTISET - 64)) | (1L << (NCHAR - 64)) | (1L << (NEW - 64)) | (1L << (NVARCHAR - 64)) | (1L << (NOCOUNT - 64)) | (1L << (NOCOMPRESS - 64)) | (1L << (NOLOGGING - 64)) | (1L << (NONE - 64)) | (1L << (NOTFOUND - 64)) | (1L << (NUMERIC - 64)) | (1L << (NUMBER - 64)) | (1L << (OBJECT - 64)) | (1L << (OFF - 64)) | (1L << (OUT - 64)) | (1L << (OWNER - 64)) | (1L << (PACKAGE - 64)) | (1L << (PCTFREE - 64)) | (1L << (PCTUSED - 64)) | (1L << (PRECISION - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (QUALIFY - 64)) | (1L << (QUERY_BAND - 64)) | (1L << (QUIT - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (RAISE - 64)) | (1L << (RESIGNAL - 64)) | (1L << (RESTRICT - 64)) | (1L << (RESULT - 64)) | (1L << (RESULT_SET_LOCATOR - 64)) | (1L << (RETURN - 64)) | (1L << (REVERSE - 64)) | (1L << (ROW_COUNT - 64)) | (1L << (RR - 64)) | (1L << (RS - 64)) | (1L << (PWD - 64)) | (1L << (SECONDS - 64)) | (1L << (SECURITY - 64)) | (1L << (SEGMENT - 64)) | (1L << (SEL - 64)) | (1L << (SESSIONS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (SHARE - 128)) | (1L << (SIGNAL - 128)) | (1L << (SIMPLE_DOUBLE - 128)) | (1L << (SIMPLE_FLOAT - 128)) | (1L << (SMALLDATETIME - 128)) | (1L << (SQL - 128)) | (1L << (SQLEXCEPTION - 128)) | (1L << (SQLINSERT - 128)) | (1L << (SQLSTATE - 128)) | (1L << (SQLWARNING - 128)) | (1L << (STATISTICS - 128)) | (1L << (STEP - 128)) | (1L << (STORED - 128)) | (1L << (SUBDIR - 128)) | (1L << (SUBSTRING - 128)) | (1L << (SUMMARY - 128)) | (1L << (SYS_REFCURSOR - 128)) | (1L << (TABLESPACE - 128)) | (1L << (TEXTIMAGE_ON - 128)) | (1L << (TITLE - 128)) | (1L << (TOP - 128)) | (1L << (UR - 128)) | (1L << (VAR - 128)) | (1L << (VARCHAR2 - 128)) | (1L << (VARYING - 128)) | (1L << (VOLATILE - 128)) | (1L << (WHILE - 128)) | (1L << (WITHOUT - 128)) | (1L << (XML - 128)) | (1L << (YES - 128)) | (1L << (ACTIVITY_COUNT - 128)) | (1L << (CUME_DIST - 128)) | (1L << (DENSE_RANK - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (LAG - 128)) | (1L << (LAST_VALUE - 128)) | (1L << (LEAD - 128)) | (1L << (PART_COUNT - 128)) | (1L << (PART_LOC - 128)) | (1L << (RANK - 128)) | (1L << (ROW_NUMBER - 128)) | (1L << (STDEV - 128)) | (1L << (SYSDATE - 128)) | (1L << (VARIANCE - 128)))) != 0) || ((((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & ((1L << (CURRENT_DATE - 278)) | (1L << (CURRENT_TIMESTAMP - 278)) | (1L << (CURRENT_USER - 278)))) != 0) || _la==KEYS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultiStatementsContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(PLParser.EOF, 0); }
		public List<StatementContext> statement() {
			return getRuleContexts(StatementContext.class);
		}
		public StatementContext statement(int i) {
			return getRuleContext(StatementContext.class,i);
		}
		public List<TerminalNode> SEMICOLON() { return getTokens(PLParser.SEMICOLON); }
		public TerminalNode SEMICOLON(int i) {
			return getToken(PLParser.SEMICOLON, i);
		}
		public MultiStatementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiStatements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterMultiStatements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitMultiStatements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitMultiStatements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultiStatementsContext multiStatements() throws RecognitionException {
		MultiStatementsContext _localctx = new MultiStatementsContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_multiStatements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2251); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2244);
				statement();
				setState(2248);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==SEMICOLON) {
					{
					{
					setState(2245);
					match(SEMICOLON);
					}
					}
					setState(2250);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				setState(2253); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 182)) & ~0x3f) == 0 && ((1L << (_la - 182)) & ((1L << (LEFT_PAREN - 182)) | (1L << (ALTER - 182)) | (1L << (CALL - 182)) | (1L << (CANCEL - 182)))) != 0) || ((((_la - 271)) & ~0x3f) == 0 && ((1L << (_la - 271)) & ((1L << (CREATE - 271)) | (1L << (DELETE - 271)) | (1L << (DESC - 271)) | (1L << (DESCRIBE - 271)) | (1L << (DROP - 271)))) != 0) || ((((_la - 344)) & ~0x3f) == 0 && ((1L << (_la - 344)) & ((1L << (EXPLAIN - 344)) | (1L << (EXPORT - 344)) | (1L << (INSERT - 344)))) != 0) || _la==LOAD || ((((_la - 507)) & ~0x3f) == 0 && ((1L << (_la - 507)) & ((1L << (PAUSE - 507)) | (1L << (REFRESH - 507)) | (1L << (REPLACE - 507)) | (1L << (RESUME - 507)))) != 0) || ((((_la - 573)) & ~0x3f) == 0 && ((1L << (_la - 573)) & ((1L << (SELECT - 573)) | (1L << (SET - 573)) | (1L << (SHOW - 573)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (UPDATE - 640)) | (1L << (USE - 640)) | (1L << (VALUES - 640)) | (1L << (WITH - 640)))) != 0) );
			setState(2255);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SingleStatementContext extends ParserRuleContext {
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public TerminalNode EOF() { return getToken(PLParser.EOF, 0); }
		public List<TerminalNode> SEMICOLON() { return getTokens(PLParser.SEMICOLON); }
		public TerminalNode SEMICOLON(int i) {
			return getToken(PLParser.SEMICOLON, i);
		}
		public SingleStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterSingleStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitSingleStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitSingleStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SingleStatementContext singleStatement() throws RecognitionException {
		SingleStatementContext _localctx = new SingleStatementContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_singleStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2257);
			statement();
			setState(2261);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==SEMICOLON) {
				{
				{
				setState(2258);
				match(SEMICOLON);
				}
				}
				setState(2263);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2264);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatementContext extends ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement; }
	 
		public StatementContext() { }
		public void copyFrom(StatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ShowCreateProcedureContext extends StatementContext {
		public MultipartIdentifierContext name;
		public TerminalNode SHOW() { return getToken(PLParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(PLParser.CREATE, 0); }
		public TerminalNode PROCEDURE() { return getToken(PLParser.PROCEDURE, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public ShowCreateProcedureContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterShowCreateProcedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitShowCreateProcedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitShowCreateProcedure(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StatementBaseAliasContext extends StatementContext {
		public StatementBaseContext statementBase() {
			return getRuleContext(StatementBaseContext.class,0);
		}
		public StatementBaseAliasContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterStatementBaseAlias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitStatementBaseAlias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitStatementBaseAlias(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowProcedureStatusContext extends StatementContext {
		public ValueExpressionContext pattern;
		public TerminalNode SHOW() { return getToken(PLParser.SHOW, 0); }
		public TerminalNode PROCEDURE() { return getToken(PLParser.PROCEDURE, 0); }
		public TerminalNode STATUS() { return getToken(PLParser.STATUS, 0); }
		public TerminalNode LIKE() { return getToken(PLParser.LIKE, 0); }
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public ShowProcedureStatusContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterShowProcedureStatus(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitShowProcedureStatus(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitShowProcedureStatus(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CreateProcedureContext extends StatementContext {
		public MultipartIdentifierContext name;
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public TerminalNode PROCEDURE() { return getToken(PLParser.PROCEDURE, 0); }
		public TerminalNode PROC() { return getToken(PLParser.PROC, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(PLParser.ALTER, 0); }
		public TerminalNode CREATE() { return getToken(PLParser.CREATE, 0); }
		public TerminalNode REPLACE() { return getToken(PLParser.REPLACE, 0); }
		public TerminalNode OR() { return getToken(PLParser.OR, 0); }
		public CreateProcedureContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterCreateProcedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitCreateProcedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitCreateProcedure(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CallProcedureContext extends StatementContext {
		public MultipartIdentifierContext name;
		public TerminalNode CALL() { return getToken(PLParser.CALL, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public CallProcedureContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterCallProcedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitCallProcedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitCallProcedure(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DropProcedureContext extends StatementContext {
		public MultipartIdentifierContext name;
		public TerminalNode DROP() { return getToken(PLParser.DROP, 0); }
		public TerminalNode PROCEDURE() { return getToken(PLParser.PROCEDURE, 0); }
		public TerminalNode PROC() { return getToken(PLParser.PROC, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(PLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PLParser.EXISTS, 0); }
		public DropProcedureContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterDropProcedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitDropProcedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitDropProcedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StatementContext statement() throws RecognitionException {
		StatementContext _localctx = new StatementContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_statement);
		int _la;
		try {
			int _alt;
			setState(2326);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,251,_ctx) ) {
			case 1:
				_localctx = new StatementBaseAliasContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2266);
				statementBase();
				}
				break;
			case 2:
				_localctx = new CallProcedureContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2267);
				match(CALL);
				setState(2268);
				((CallProcedureContext)_localctx).name = multipartIdentifier();
				setState(2269);
				match(LEFT_PAREN);
				setState(2278);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 182)) & ~0x3f) == 0 && ((1L << (_la - 182)) & ((1L << (LEFT_PAREN - 182)) | (1L << (LEFT_BRACKET - 182)) | (1L << (LEFT_BRACE - 182)) | (1L << (RIGHT_BRACE - 182)) | (1L << (ADD - 182)) | (1L << (ADDDATE - 182)) | (1L << (AFTER - 182)) | (1L << (AGG_STATE - 182)) | (1L << (AGGREGATE - 182)) | (1L << (ALIAS - 182)) | (1L << (ANALYZED - 182)) | (1L << (ARRAY - 182)) | (1L << (ARRAY_RANGE - 182)) | (1L << (AT - 182)) | (1L << (AUTHORS - 182)) | (1L << (AUTO_INCREMENT - 182)) | (1L << (BACKENDS - 182)) | (1L << (BACKUP - 182)) | (1L << (BEGIN - 182)) | (1L << (BELONG - 182)) | (1L << (BIN - 182)) | (1L << (BINARY - 182)) | (1L << (BITAND - 182)) | (1L << (BITMAP - 182)) | (1L << (BITMAP_UNION - 182)) | (1L << (BITOR - 182)) | (1L << (BITXOR - 182)) | (1L << (BLOB - 182)) | (1L << (BOOLEAN - 182)) | (1L << (BRIEF - 182)) | (1L << (BROKER - 182)) | (1L << (BUCKETS - 182)) | (1L << (BUILD - 182)) | (1L << (BUILTIN - 182)) | (1L << (BULK - 182)) | (1L << (CACHED - 182)) | (1L << (CALL - 182)) | (1L << (CASE - 182)) | (1L << (CAST - 182)) | (1L << (CATALOG - 182)) | (1L << (CATALOGS - 182)) | (1L << (CHAIN - 182)))) != 0) || ((((_la - 246)) & ~0x3f) == 0 && ((1L << (_la - 246)) & ((1L << (CHAR - 246)) | (1L << (CHARSET - 246)) | (1L << (CHECK - 246)) | (1L << (CLUSTER - 246)) | (1L << (CLUSTERS - 246)) | (1L << (COLLATION - 246)) | (1L << (COLLECT - 246)) | (1L << (COLUMNS - 246)) | (1L << (COMMENT - 246)) | (1L << (COMMIT - 246)) | (1L << (COMMITTED - 246)) | (1L << (COMPACT - 246)) | (1L << (COMPLETE - 246)) | (1L << (CONFIG - 246)) | (1L << (CONNECTION - 246)) | (1L << (CONNECTION_ID - 246)) | (1L << (CONSISTENT - 246)) | (1L << (CONSTRAINTS - 246)) | (1L << (CONVERT - 246)) | (1L << (COPY - 246)) | (1L << (COUNT - 246)) | (1L << (CREATION - 246)) | (1L << (CRON - 246)) | (1L << (CURRENT_CATALOG - 246)) | (1L << (CURRENT_DATE - 246)) | (1L << (CURRENT_TIME - 246)) | (1L << (CURRENT_TIMESTAMP - 246)) | (1L << (CURRENT_USER - 246)) | (1L << (DATA - 246)) | (1L << (DATABASE - 246)) | (1L << (DATE - 246)) | (1L << (DATE_ADD - 246)) | (1L << (DATE_CEIL - 246)) | (1L << (DATE_DIFF - 246)) | (1L << (DATE_FLOOR - 246)) | (1L << (DATE_SUB - 246)) | (1L << (DATEADD - 246)) | (1L << (DATEDIFF - 246)) | (1L << (DATETIME - 246)) | (1L << (DATETIMEV2 - 246)) | (1L << (DATEV2 - 246)) | (1L << (DATETIMEV1 - 246)) | (1L << (DATEV1 - 246)) | (1L << (DAY - 246)) | (1L << (DAYS_ADD - 246)) | (1L << (DAYS_SUB - 246)) | (1L << (DECIMAL - 246)) | (1L << (DECIMALV2 - 246)) | (1L << (DECIMALV3 - 246)) | (1L << (DEFERRED - 246)) | (1L << (DEMAND - 246)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (DIAGNOSE - 311)) | (1L << (DISTINCTPC - 311)) | (1L << (DISTINCTPCSA - 311)) | (1L << (DO - 311)) | (1L << (DORIS_INTERNAL_TABLE_ID - 311)) | (1L << (DUAL - 311)) | (1L << (DYNAMIC - 311)) | (1L << (ENABLE - 311)) | (1L << (ENCRYPTKEY - 311)) | (1L << (ENCRYPTKEYS - 311)) | (1L << (END - 311)) | (1L << (ENDS - 311)) | (1L << (ENGINE - 311)) | (1L << (ENGINES - 311)) | (1L << (ERRORS - 311)) | (1L << (EVENTS - 311)) | (1L << (EVERY - 311)) | (1L << (EXCLUDE - 311)) | (1L << (EXISTS - 311)) | (1L << (EXPIRED - 311)) | (1L << (EXTERNAL - 311)) | (1L << (EXTRACT - 311)) | (1L << (FAILED_LOGIN_ATTEMPTS - 311)) | (1L << (FALSE - 311)) | (1L << (FAST - 311)) | (1L << (FEATURE - 311)) | (1L << (FIELDS - 311)) | (1L << (FILE - 311)) | (1L << (FILTER - 311)) | (1L << (FIRST - 311)) | (1L << (FORMAT - 311)) | (1L << (FREE - 311)) | (1L << (FRONTENDS - 311)) | (1L << (FUNCTION - 311)) | (1L << (GENERIC - 311)) | (1L << (GLOBAL - 311)))) != 0) || ((((_la - 375)) & ~0x3f) == 0 && ((1L << (_la - 375)) & ((1L << (GRAPH - 375)) | (1L << (GROUPING - 375)) | (1L << (GROUPS - 375)) | (1L << (HASH - 375)) | (1L << (HDFS - 375)) | (1L << (HELP - 375)) | (1L << (HISTOGRAM - 375)) | (1L << (HLL_UNION - 375)) | (1L << (HOSTNAME - 375)) | (1L << (HOUR - 375)) | (1L << (HUB - 375)) | (1L << (IDENTIFIED - 375)) | (1L << (IF - 375)) | (1L << (IGNORE - 375)) | (1L << (IMMEDIATE - 375)) | (1L << (INCREMENTAL - 375)) | (1L << (INDEXES - 375)) | (1L << (INTERVAL - 375)) | (1L << (INVERTED - 375)) | (1L << (IPV4 - 375)) | (1L << (IPV6 - 375)) | (1L << (IS_NOT_NULL_PRED - 375)) | (1L << (IS_NULL_PRED - 375)) | (1L << (ISNULL - 375)) | (1L << (ISOLATION - 375)) | (1L << (JOB - 375)) | (1L << (JOBS - 375)) | (1L << (JSON - 375)) | (1L << (JSONB - 375)) | (1L << (KEY - 375)) | (1L << (LABEL - 375)) | (1L << (LAST - 375)) | (1L << (LDAP - 375)) | (1L << (LDAP_ADMIN_PASSWORD - 375)) | (1L << (LEFT - 375)) | (1L << (LESS - 375)) | (1L << (LEVEL - 375)) | (1L << (LIKE - 375)) | (1L << (LINES - 375)) | (1L << (LINK - 375)) | (1L << (LOCAL - 375)))) != 0) || ((((_la - 439)) & ~0x3f) == 0 && ((1L << (_la - 439)) & ((1L << (LOCALTIME - 439)) | (1L << (LOCALTIMESTAMP - 439)) | (1L << (LOCATION - 439)) | (1L << (LOCK - 439)) | (1L << (LOGICAL - 439)) | (1L << (MANUAL - 439)) | (1L << (MAP - 439)) | (1L << (MATCH_ALL - 439)) | (1L << (MATCH_ANY - 439)) | (1L << (MATCH_ELEMENT_EQ - 439)) | (1L << (MATCH_ELEMENT_GE - 439)) | (1L << (MATCH_ELEMENT_GT - 439)) | (1L << (MATCH_ELEMENT_LE - 439)) | (1L << (MATCH_ELEMENT_LT - 439)) | (1L << (MATCH_PHRASE - 439)) | (1L << (MATCH_PHRASE_EDGE - 439)) | (1L << (MATCH_PHRASE_PREFIX - 439)) | (1L << (MATCH_REGEXP - 439)) | (1L << (MATERIALIZED - 439)) | (1L << (MAX - 439)) | (1L << (MEMO - 439)) | (1L << (MERGE - 439)) | (1L << (MIGRATE - 439)) | (1L << (MIGRATIONS - 439)) | (1L << (MIN - 439)) | (1L << (MINUTE - 439)) | (1L << (MODIFY - 439)) | (1L << (MONTH - 439)) | (1L << (MTMV - 439)) | (1L << (NAME - 439)) | (1L << (NAMES - 439)) | (1L << (NEGATIVE - 439)) | (1L << (NEVER - 439)) | (1L << (NEXT - 439)) | (1L << (NGRAM_BF - 439)) | (1L << (NO - 439)) | (1L << (NON_NULLABLE - 439)) | (1L << (NOT - 439)) | (1L << (NULL - 439)) | (1L << (NULLS - 439)) | (1L << (OF - 439)) | (1L << (OFFSET - 439)) | (1L << (ONLY - 439)) | (1L << (OPEN - 439)) | (1L << (OPTIMIZED - 439)) | (1L << (PARAMETER - 439)) | (1L << (PARSED - 439)) | (1L << (PARTITIONS - 439)) | (1L << (PASSWORD - 439)) | (1L << (PASSWORD_EXPIRE - 439)))) != 0) || ((((_la - 503)) & ~0x3f) == 0 && ((1L << (_la - 503)) & ((1L << (PASSWORD_HISTORY - 503)) | (1L << (PASSWORD_LOCK_TIME - 503)) | (1L << (PASSWORD_REUSE - 503)) | (1L << (PATH - 503)) | (1L << (PAUSE - 503)) | (1L << (PERCENT - 503)) | (1L << (PERIOD - 503)) | (1L << (PERMISSIVE - 503)) | (1L << (PHYSICAL - 503)) | (1L << (PLAN - 503)) | (1L << (PROCESS - 503)) | (1L << (PLUGIN - 503)) | (1L << (PLUGINS - 503)) | (1L << (POLICY - 503)) | (1L << (PROC - 503)) | (1L << (PROCESSLIST - 503)) | (1L << (PROFILE - 503)) | (1L << (PROPERTIES - 503)) | (1L << (PROPERTY - 503)) | (1L << (QUANTILE_STATE - 503)) | (1L << (QUANTILE_UNION - 503)) | (1L << (QUERY - 503)) | (1L << (QUOTA - 503)) | (1L << (RANDOM - 503)) | (1L << (RECOVER - 503)) | (1L << (RECYCLE - 503)) | (1L << (REFRESH - 503)) | (1L << (REGEXP - 503)) | (1L << (REPEATABLE - 503)) | (1L << (REPLACE - 503)) | (1L << (REPLACE_IF_NOT_NULL - 503)) | (1L << (REPOSITORIES - 503)) | (1L << (REPOSITORY - 503)) | (1L << (RESOURCE - 503)) | (1L << (RESOURCES - 503)) | (1L << (RESTORE - 503)) | (1L << (RESTRICTIVE - 503)) | (1L << (RESUME - 503)) | (1L << (RETURNS - 503)) | (1L << (REWRITTEN - 503)) | (1L << (RIGHT - 503)) | (1L << (RLIKE - 503)) | (1L << (ROLLBACK - 503)) | (1L << (ROLLUP - 503)) | (1L << (ROUTINE - 503)) | (1L << (S3 - 503)))) != 0) || ((((_la - 567)) & ~0x3f) == 0 && ((1L << (_la - 567)) & ((1L << (SAMPLE - 567)) | (1L << (SCHEDULE - 567)) | (1L << (SCHEDULER - 567)) | (1L << (SCHEMA - 567)) | (1L << (SECOND - 567)) | (1L << (SEQUENCE - 567)) | (1L << (SERIALIZABLE - 567)) | (1L << (SESSION - 567)) | (1L << (SHAPE - 567)) | (1L << (SKEW - 567)) | (1L << (SNAPSHOT - 567)) | (1L << (SONAME - 567)) | (1L << (SPLIT - 567)) | (1L << (START - 567)) | (1L << (STARTS - 567)) | (1L << (STATS - 567)) | (1L << (STATUS - 567)) | (1L << (STOP - 567)) | (1L << (STORAGE - 567)) | (1L << (STREAM - 567)) | (1L << (STREAMING - 567)) | (1L << (STRING - 567)) | (1L << (STRUCT - 567)) | (1L << (SUBDATE - 567)) | (1L << (SUM - 567)) | (1L << (TABLES - 567)) | (1L << (TASK - 567)) | (1L << (TASKS - 567)) | (1L << (TEMPORARY - 567)) | (1L << (TEXT - 567)) | (1L << (THAN - 567)) | (1L << (TIME - 567)) | (1L << (TIMESTAMP - 567)) | (1L << (TIMESTAMPADD - 567)) | (1L << (TIMESTAMPDIFF - 567)) | (1L << (TRANSACTION - 567)) | (1L << (TREE - 567)) | (1L << (TRIGGERS - 567)) | (1L << (TRIM - 567)) | (1L << (TRUE - 567)) | (1L << (TRUNCATE - 567)) | (1L << (TYPE - 567)))) != 0) || ((((_la - 632)) & ~0x3f) == 0 && ((1L << (_la - 632)) & ((1L << (TYPES - 632)) | (1L << (UNCOMMITTED - 632)) | (1L << (UNLOCK - 632)) | (1L << (USER - 632)) | (1L << (VALUE - 632)) | (1L << (VARCHAR - 632)) | (1L << (VARIABLES - 632)) | (1L << (VARIANT - 632)) | (1L << (VERBOSE - 632)) | (1L << (VERSION - 632)) | (1L << (VIEW - 632)) | (1L << (WARNINGS - 632)) | (1L << (WEEK - 632)) | (1L << (WORK - 632)) | (1L << (YEAR - 632)) | (1L << (PLUS - 632)) | (1L << (SUBTRACT - 632)) | (1L << (ASTERISK - 632)) | (1L << (TILDE - 632)) | (1L << (LOGICALNOT - 632)) | (1L << (ATSIGN - 632)) | (1L << (DOUBLEATSIGN - 632)) | (1L << (STRING_LITERAL - 632)) | (1L << (INTEGER_VALUE - 632)) | (1L << (EXPONENT_VALUE - 632)) | (1L << (DECIMAL_VALUE - 632)))) != 0) || _la==IDENTIFIER || _la==BACKQUOTED_IDENTIFIER) {
					{
					setState(2270);
					expression();
					setState(2275);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2271);
						match(COMMA);
						setState(2272);
						expression();
						}
						}
						setState(2277);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(2280);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				_localctx = new CreateProcedureContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2289);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALTER:
					{
					setState(2282);
					match(ALTER);
					}
					break;
				case CREATE:
					{
					setState(2283);
					match(CREATE);
					setState(2286);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OR) {
						{
						setState(2284);
						match(OR);
						setState(2285);
						match(REPLACE);
						}
					}

					}
					break;
				case REPLACE:
					{
					setState(2288);
					match(REPLACE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2291);
				_la = _input.LA(1);
				if ( !(_la==PROC || _la==PROCEDURE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2292);
				((CreateProcedureContext)_localctx).name = multipartIdentifier();
				setState(2293);
				match(LEFT_PAREN);
				setState(2297);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,247,_ctx);
				while ( _alt!=1 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						setState(2294);
						matchWildcard();
						}
						} 
					}
					setState(2299);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,247,_ctx);
				}
				setState(2300);
				match(RIGHT_PAREN);
				setState(2304);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,248,_ctx);
				while ( _alt!=1 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						setState(2301);
						matchWildcard();
						}
						} 
					}
					setState(2306);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,248,_ctx);
				}
				}
				break;
			case 4:
				_localctx = new DropProcedureContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2307);
				match(DROP);
				setState(2308);
				_la = _input.LA(1);
				if ( !(_la==PROC || _la==PROCEDURE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2311);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(2309);
					match(IF);
					setState(2310);
					match(EXISTS);
					}
				}

				setState(2313);
				((DropProcedureContext)_localctx).name = multipartIdentifier();
				}
				break;
			case 5:
				_localctx = new ShowProcedureStatusContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2314);
				match(SHOW);
				setState(2315);
				match(PROCEDURE);
				setState(2316);
				match(STATUS);
				setState(2320);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LIKE:
					{
					setState(2317);
					match(LIKE);
					setState(2318);
					((ShowProcedureStatusContext)_localctx).pattern = valueExpression(0);
					}
					break;
				case WHERE:
					{
					setState(2319);
					whereClause();
					}
					break;
				case EOF:
				case SEMICOLON:
				case LEFT_PAREN:
				case ALTER:
				case CALL:
				case CANCEL:
				case CREATE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DROP:
				case EXPLAIN:
				case EXPORT:
				case INSERT:
				case LOAD:
				case PAUSE:
				case REFRESH:
				case REPLACE:
				case RESUME:
				case SELECT:
				case SET:
				case SHOW:
				case UPDATE:
				case USE:
				case VALUES:
				case WITH:
					break;
				default:
					break;
				}
				}
				break;
			case 6:
				_localctx = new ShowCreateProcedureContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(2322);
				match(SHOW);
				setState(2323);
				match(CREATE);
				setState(2324);
				match(PROCEDURE);
				setState(2325);
				((ShowCreateProcedureContext)_localctx).name = multipartIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatementBaseContext extends ParserRuleContext {
		public StatementBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statementBase; }
	 
		public StatementBaseContext() { }
		public void copyFrom(StatementBaseContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class RefreshMTMVContext extends StatementBaseContext {
		public MultipartIdentifierContext mvName;
		public TerminalNode REFRESH() { return getToken(PLParser.REFRESH, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PLParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(PLParser.VIEW, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public TerminalNode COMPLETE() { return getToken(PLParser.COMPLETE, 0); }
		public TerminalNode AUTO() { return getToken(PLParser.AUTO, 0); }
		public RefreshMTMVContext(StatementBaseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterRefreshMTMV(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitRefreshMTMV(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitRefreshMTMV(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CreateTableContext extends StatementBaseContext {
		public MultipartIdentifierContext name;
		public IdentifierListContext ctasCols;
		public IdentifierContext engine;
		public IdentifierListContext keys;
		public IdentifierListContext clusterKeys;
		public PartitionTableContext partition;
		public IdentifierListContext hashKeys;
		public Token autoBucket;
		public PropertyClauseContext properties;
		public PropertyClauseContext extProperties;
		public TerminalNode CREATE() { return getToken(PLParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(PLParser.TABLE, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode EXTERNAL() { return getToken(PLParser.EXTERNAL, 0); }
		public TerminalNode IF() { return getToken(PLParser.IF, 0); }
		public TerminalNode NOT() { return getToken(PLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PLParser.EXISTS, 0); }
		public TerminalNode ENGINE() { return getToken(PLParser.ENGINE, 0); }
		public TerminalNode EQ() { return getToken(PLParser.EQ, 0); }
		public TerminalNode KEY() { return getToken(PLParser.KEY, 0); }
		public TerminalNode COMMENT() { return getToken(PLParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(PLParser.STRING_LITERAL, 0); }
		public TerminalNode DISTRIBUTED() { return getToken(PLParser.DISTRIBUTED, 0); }
		public List<TerminalNode> BY() { return getTokens(PLParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(PLParser.BY, i);
		}
		public TerminalNode ROLLUP() { return getToken(PLParser.ROLLUP, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PLParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PLParser.LEFT_PAREN, i);
		}
		public RollupDefsContext rollupDefs() {
			return getRuleContext(RollupDefsContext.class,0);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PLParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PLParser.RIGHT_PAREN, i);
		}
		public TerminalNode BROKER() { return getToken(PLParser.BROKER, 0); }
		public TerminalNode AS() { return getToken(PLParser.AS, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public ColumnDefsContext columnDefs() {
			return getRuleContext(ColumnDefsContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode AGGREGATE() { return getToken(PLParser.AGGREGATE, 0); }
		public TerminalNode UNIQUE() { return getToken(PLParser.UNIQUE, 0); }
		public TerminalNode DUPLICATE() { return getToken(PLParser.DUPLICATE, 0); }
		public List<IdentifierListContext> identifierList() {
			return getRuleContexts(IdentifierListContext.class);
		}
		public IdentifierListContext identifierList(int i) {
			return getRuleContext(IdentifierListContext.class,i);
		}
		public PartitionTableContext partitionTable() {
			return getRuleContext(PartitionTableContext.class,0);
		}
		public List<PropertyClauseContext> propertyClause() {
			return getRuleContexts(PropertyClauseContext.class);
		}
		public PropertyClauseContext propertyClause(int i) {
			return getRuleContext(PropertyClauseContext.class,i);
		}
		public TerminalNode HASH() { return getToken(PLParser.HASH, 0); }
		public TerminalNode RANDOM() { return getToken(PLParser.RANDOM, 0); }
		public TerminalNode CLUSTER() { return getToken(PLParser.CLUSTER, 0); }
		public TerminalNode BUCKETS() { return getToken(PLParser.BUCKETS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public IndexDefsContext indexDefs() {
			return getRuleContext(IndexDefsContext.class,0);
		}
		public TerminalNode INTEGER_VALUE() { return getToken(PLParser.INTEGER_VALUE, 0); }
		public TerminalNode AUTO() { return getToken(PLParser.AUTO, 0); }
		public CreateTableContext(StatementBaseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterCreateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitCreateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitCreateTable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterMTMVContext extends StatementBaseContext {
		public MultipartIdentifierContext mvName;
		public IdentifierContext newName;
		public PropertyItemListContext fileProperties;
		public TerminalNode ALTER() { return getToken(PLParser.ALTER, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PLParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(PLParser.VIEW, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(PLParser.RENAME, 0); }
		public TerminalNode REFRESH() { return getToken(PLParser.REFRESH, 0); }
		public TerminalNode SET() { return getToken(PLParser.SET, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public PropertyItemListContext propertyItemList() {
			return getRuleContext(PropertyItemListContext.class,0);
		}
		public RefreshMethodContext refreshMethod() {
			return getRuleContext(RefreshMethodContext.class,0);
		}
		public RefreshTriggerContext refreshTrigger() {
			return getRuleContext(RefreshTriggerContext.class,0);
		}
		public AlterMTMVContext(StatementBaseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterAlterMTMV(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitAlterMTMV(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitAlterMTMV(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class InsertTableContext extends StatementBaseContext {
		public MultipartIdentifierContext tableName;
		public Token tableId;
		public IdentifierContext labelName;
		public IdentifierListContext cols;
		public IdentifierSeqContext hints;
		public TerminalNode INSERT() { return getToken(PLParser.INSERT, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public TerminalNode INTO() { return getToken(PLParser.INTO, 0); }
		public TerminalNode OVERWRITE() { return getToken(PLParser.OVERWRITE, 0); }
		public TerminalNode TABLE() { return getToken(PLParser.TABLE, 0); }
		public TerminalNode DORIS_INTERNAL_TABLE_ID() { return getToken(PLParser.DORIS_INTERNAL_TABLE_ID, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public ExplainContext explain() {
			return getRuleContext(ExplainContext.class,0);
		}
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode INTEGER_VALUE() { return getToken(PLParser.INTEGER_VALUE, 0); }
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PLParser.WITH, 0); }
		public TerminalNode LABEL() { return getToken(PLParser.LABEL, 0); }
		public TerminalNode LEFT_BRACKET() { return getToken(PLParser.LEFT_BRACKET, 0); }
		public TerminalNode RIGHT_BRACKET() { return getToken(PLParser.RIGHT_BRACKET, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public IdentifierSeqContext identifierSeq() {
			return getRuleContext(IdentifierSeqContext.class,0);
		}
		public InsertTableContext(StatementBaseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterInsertTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitInsertTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitInsertTable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DropConstraintContext extends StatementBaseContext {
		public MultipartIdentifierContext table;
		public ErrorCapturingIdentifierContext constraintName;
		public TerminalNode ALTER() { return getToken(PLParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(PLParser.TABLE, 0); }
		public TerminalNode DROP() { return getToken(PLParser.DROP, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PLParser.CONSTRAINT, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
			return getRuleContext(ErrorCapturingIdentifierContext.class,0);
		}
		public DropConstraintContext(StatementBaseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterDropConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitDropConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitDropConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AddConstraintContext extends StatementBaseContext {
		public MultipartIdentifierContext table;
		public ErrorCapturingIdentifierContext constraintName;
		public TerminalNode ALTER() { return getToken(PLParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(PLParser.TABLE, 0); }
		public TerminalNode ADD() { return getToken(PLParser.ADD, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PLParser.CONSTRAINT, 0); }
		public ConstraintContext constraint() {
			return getRuleContext(ConstraintContext.class,0);
		}
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
			return getRuleContext(ErrorCapturingIdentifierContext.class,0);
		}
		public AddConstraintContext(StatementBaseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterAddConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitAddConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitAddConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CreateTableLikeContext extends StatementBaseContext {
		public MultipartIdentifierContext name;
		public MultipartIdentifierContext existedTable;
		public IdentifierListContext rollupNames;
		public TerminalNode CREATE() { return getToken(PLParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(PLParser.TABLE, 0); }
		public TerminalNode LIKE() { return getToken(PLParser.LIKE, 0); }
		public List<MultipartIdentifierContext> multipartIdentifier() {
			return getRuleContexts(MultipartIdentifierContext.class);
		}
		public MultipartIdentifierContext multipartIdentifier(int i) {
			return getRuleContext(MultipartIdentifierContext.class,i);
		}
		public TerminalNode EXTERNAL() { return getToken(PLParser.EXTERNAL, 0); }
		public TerminalNode IF() { return getToken(PLParser.IF, 0); }
		public TerminalNode NOT() { return getToken(PLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PLParser.EXISTS, 0); }
		public TerminalNode WITH() { return getToken(PLParser.WITH, 0); }
		public TerminalNode ROLLUP() { return getToken(PLParser.ROLLUP, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public CreateTableLikeContext(StatementBaseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterCreateTableLike(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitCreateTableLike(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitCreateTableLike(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UpdateContext extends StatementBaseContext {
		public MultipartIdentifierContext tableName;
		public TerminalNode UPDATE() { return getToken(PLParser.UPDATE, 0); }
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public TerminalNode SET() { return getToken(PLParser.SET, 0); }
		public UpdateAssignmentSeqContext updateAssignmentSeq() {
			return getRuleContext(UpdateAssignmentSeqContext.class,0);
		}
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public ExplainContext explain() {
			return getRuleContext(ExplainContext.class,0);
		}
		public CteContext cte() {
			return getRuleContext(CteContext.class,0);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public UpdateContext(StatementBaseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterUpdate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitUpdate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitUpdate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PauseMTMVContext extends StatementBaseContext {
		public MultipartIdentifierContext mvName;
		public TerminalNode PAUSE() { return getToken(PLParser.PAUSE, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PLParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(PLParser.VIEW, 0); }
		public TerminalNode JOB() { return getToken(PLParser.JOB, 0); }
		public TerminalNode ON() { return getToken(PLParser.ON, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public PauseMTMVContext(StatementBaseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterPauseMTMV(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitPauseMTMV(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitPauseMTMV(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DropMTMVContext extends StatementBaseContext {
		public MultipartIdentifierContext mvName;
		public TerminalNode DROP() { return getToken(PLParser.DROP, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PLParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(PLParser.VIEW, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(PLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PLParser.EXISTS, 0); }
		public DropMTMVContext(StatementBaseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterDropMTMV(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitDropMTMV(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitDropMTMV(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DeleteContext extends StatementBaseContext {
		public MultipartIdentifierContext tableName;
		public TerminalNode DELETE() { return getToken(PLParser.DELETE, 0); }
		public TerminalNode FROM() { return getToken(PLParser.FROM, 0); }
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public ExplainContext explain() {
			return getRuleContext(ExplainContext.class,0);
		}
		public CteContext cte() {
			return getRuleContext(CteContext.class,0);
		}
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public TerminalNode USING() { return getToken(PLParser.USING, 0); }
		public RelationsContext relations() {
			return getRuleContext(RelationsContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public DeleteContext(StatementBaseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterDelete(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitDelete(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitDelete(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CreateRowPolicyContext extends StatementBaseContext {
		public IdentifierContext name;
		public MultipartIdentifierContext table;
		public Token type;
		public UserIdentifyContext user;
		public IdentifierContext roleName;
		public TerminalNode CREATE() { return getToken(PLParser.CREATE, 0); }
		public TerminalNode ROW() { return getToken(PLParser.ROW, 0); }
		public TerminalNode POLICY() { return getToken(PLParser.POLICY, 0); }
		public TerminalNode ON() { return getToken(PLParser.ON, 0); }
		public TerminalNode AS() { return getToken(PLParser.AS, 0); }
		public TerminalNode TO() { return getToken(PLParser.TO, 0); }
		public TerminalNode USING() { return getToken(PLParser.USING, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public BooleanExpressionContext booleanExpression() {
			return getRuleContext(BooleanExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode RESTRICTIVE() { return getToken(PLParser.RESTRICTIVE, 0); }
		public TerminalNode PERMISSIVE() { return getToken(PLParser.PERMISSIVE, 0); }
		public TerminalNode ROLE() { return getToken(PLParser.ROLE, 0); }
		public TerminalNode IF() { return getToken(PLParser.IF, 0); }
		public TerminalNode NOT() { return getToken(PLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PLParser.EXISTS, 0); }
		public UserIdentifyContext userIdentify() {
			return getRuleContext(UserIdentifyContext.class,0);
		}
		public CreateRowPolicyContext(StatementBaseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterCreateRowPolicy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitCreateRowPolicy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitCreateRowPolicy(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MysqlLoadContext extends StatementBaseContext {
		public PropertyItemListContext properties;
		public TerminalNode LOAD() { return getToken(PLParser.LOAD, 0); }
		public MysqlDataDescContext mysqlDataDesc() {
			return getRuleContext(MysqlDataDescContext.class,0);
		}
		public TerminalNode PROPERTIES() { return getToken(PLParser.PROPERTIES, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public CommentSpecContext commentSpec() {
			return getRuleContext(CommentSpecContext.class,0);
		}
		public PropertyItemListContext propertyItemList() {
			return getRuleContext(PropertyItemListContext.class,0);
		}
		public MysqlLoadContext(StatementBaseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterMysqlLoad(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitMysqlLoad(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitMysqlLoad(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowConstraintContext extends StatementBaseContext {
		public MultipartIdentifierContext table;
		public TerminalNode SHOW() { return getToken(PLParser.SHOW, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(PLParser.CONSTRAINTS, 0); }
		public TerminalNode FROM() { return getToken(PLParser.FROM, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public ShowConstraintContext(StatementBaseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterShowConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitShowConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitShowConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterViewContext extends StatementBaseContext {
		public MultipartIdentifierContext name;
		public SimpleColumnDefsContext cols;
		public TerminalNode ALTER() { return getToken(PLParser.ALTER, 0); }
		public TerminalNode VIEW() { return getToken(PLParser.VIEW, 0); }
		public TerminalNode AS() { return getToken(PLParser.AS, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public SimpleColumnDefsContext simpleColumnDefs() {
			return getRuleContext(SimpleColumnDefsContext.class,0);
		}
		public AlterViewContext(StatementBaseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterAlterView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitAlterView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitAlterView(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UnsupportedContext extends StatementBaseContext {
		public UnsupportedStatementContext unsupportedStatement() {
			return getRuleContext(UnsupportedStatementContext.class,0);
		}
		public UnsupportedContext(StatementBaseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterUnsupported(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitUnsupported(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitUnsupported(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LoadContext extends StatementBaseContext {
		public IdentifierContext lableName;
		public DataDescContext dataDesc;
		public List<DataDescContext> dataDescs = new ArrayList<DataDescContext>();
		public PropertyItemListContext properties;
		public TerminalNode LOAD() { return getToken(PLParser.LOAD, 0); }
		public TerminalNode LABEL() { return getToken(PLParser.LABEL, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PLParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PLParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PLParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PLParser.RIGHT_PAREN, i);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<DataDescContext> dataDesc() {
			return getRuleContexts(DataDescContext.class);
		}
		public DataDescContext dataDesc(int i) {
			return getRuleContext(DataDescContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public WithRemoteStorageSystemContext withRemoteStorageSystem() {
			return getRuleContext(WithRemoteStorageSystemContext.class,0);
		}
		public TerminalNode PROPERTIES() { return getToken(PLParser.PROPERTIES, 0); }
		public CommentSpecContext commentSpec() {
			return getRuleContext(CommentSpecContext.class,0);
		}
		public PropertyItemListContext propertyItemList() {
			return getRuleContext(PropertyItemListContext.class,0);
		}
		public LoadContext(StatementBaseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterLoad(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitLoad(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitLoad(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StatementDefaultContext extends StatementBaseContext {
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public ExplainContext explain() {
			return getRuleContext(ExplainContext.class,0);
		}
		public OutFileClauseContext outFileClause() {
			return getRuleContext(OutFileClauseContext.class,0);
		}
		public StatementDefaultContext(StatementBaseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterStatementDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitStatementDefault(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitStatementDefault(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CreateMTMVContext extends StatementBaseContext {
		public MultipartIdentifierContext mvName;
		public SimpleColumnDefsContext cols;
		public IdentifierListContext keys;
		public IdentifierContext partitionKey;
		public IdentifierListContext hashKeys;
		public TerminalNode CREATE() { return getToken(PLParser.CREATE, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PLParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(PLParser.VIEW, 0); }
		public TerminalNode AS() { return getToken(PLParser.AS, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(PLParser.IF, 0); }
		public TerminalNode NOT() { return getToken(PLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PLParser.EXISTS, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PLParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PLParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PLParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PLParser.RIGHT_PAREN, i);
		}
		public BuildModeContext buildMode() {
			return getRuleContext(BuildModeContext.class,0);
		}
		public TerminalNode REFRESH() { return getToken(PLParser.REFRESH, 0); }
		public TerminalNode KEY() { return getToken(PLParser.KEY, 0); }
		public TerminalNode COMMENT() { return getToken(PLParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(PLParser.STRING_LITERAL, 0); }
		public TerminalNode PARTITION() { return getToken(PLParser.PARTITION, 0); }
		public List<TerminalNode> BY() { return getTokens(PLParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(PLParser.BY, i);
		}
		public TerminalNode DISTRIBUTED() { return getToken(PLParser.DISTRIBUTED, 0); }
		public PropertyClauseContext propertyClause() {
			return getRuleContext(PropertyClauseContext.class,0);
		}
		public SimpleColumnDefsContext simpleColumnDefs() {
			return getRuleContext(SimpleColumnDefsContext.class,0);
		}
		public List<IdentifierListContext> identifierList() {
			return getRuleContexts(IdentifierListContext.class);
		}
		public IdentifierListContext identifierList(int i) {
			return getRuleContext(IdentifierListContext.class,i);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode HASH() { return getToken(PLParser.HASH, 0); }
		public TerminalNode RANDOM() { return getToken(PLParser.RANDOM, 0); }
		public RefreshMethodContext refreshMethod() {
			return getRuleContext(RefreshMethodContext.class,0);
		}
		public RefreshTriggerContext refreshTrigger() {
			return getRuleContext(RefreshTriggerContext.class,0);
		}
		public TerminalNode DUPLICATE() { return getToken(PLParser.DUPLICATE, 0); }
		public TerminalNode BUCKETS() { return getToken(PLParser.BUCKETS, 0); }
		public TerminalNode INTEGER_VALUE() { return getToken(PLParser.INTEGER_VALUE, 0); }
		public TerminalNode AUTO() { return getToken(PLParser.AUTO, 0); }
		public CreateMTMVContext(StatementBaseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterCreateMTMV(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitCreateMTMV(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitCreateMTMV(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ResumeMTMVContext extends StatementBaseContext {
		public MultipartIdentifierContext mvName;
		public TerminalNode RESUME() { return getToken(PLParser.RESUME, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PLParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(PLParser.VIEW, 0); }
		public TerminalNode JOB() { return getToken(PLParser.JOB, 0); }
		public TerminalNode ON() { return getToken(PLParser.ON, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public ResumeMTMVContext(StatementBaseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterResumeMTMV(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitResumeMTMV(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitResumeMTMV(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CancelMTMVTaskContext extends StatementBaseContext {
		public Token taskId;
		public MultipartIdentifierContext mvName;
		public TerminalNode CANCEL() { return getToken(PLParser.CANCEL, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PLParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(PLParser.VIEW, 0); }
		public TerminalNode TASK() { return getToken(PLParser.TASK, 0); }
		public TerminalNode ON() { return getToken(PLParser.ON, 0); }
		public TerminalNode INTEGER_VALUE() { return getToken(PLParser.INTEGER_VALUE, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public CancelMTMVTaskContext(StatementBaseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterCancelMTMVTask(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitCancelMTMVTask(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitCancelMTMVTask(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CreateViewContext extends StatementBaseContext {
		public MultipartIdentifierContext name;
		public SimpleColumnDefsContext cols;
		public TerminalNode CREATE() { return getToken(PLParser.CREATE, 0); }
		public TerminalNode VIEW() { return getToken(PLParser.VIEW, 0); }
		public TerminalNode AS() { return getToken(PLParser.AS, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(PLParser.IF, 0); }
		public TerminalNode NOT() { return getToken(PLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PLParser.EXISTS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public TerminalNode COMMENT() { return getToken(PLParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(PLParser.STRING_LITERAL, 0); }
		public SimpleColumnDefsContext simpleColumnDefs() {
			return getRuleContext(SimpleColumnDefsContext.class,0);
		}
		public CreateViewContext(StatementBaseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterCreateView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitCreateView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitCreateView(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExportContext extends StatementBaseContext {
		public MultipartIdentifierContext tableName;
		public IdentifierListContext partition;
		public Token filePath;
		public TerminalNode EXPORT() { return getToken(PLParser.EXPORT, 0); }
		public TerminalNode TABLE() { return getToken(PLParser.TABLE, 0); }
		public TerminalNode TO() { return getToken(PLParser.TO, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(PLParser.STRING_LITERAL, 0); }
		public TerminalNode PARTITION() { return getToken(PLParser.PARTITION, 0); }
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public PropertyClauseContext propertyClause() {
			return getRuleContext(PropertyClauseContext.class,0);
		}
		public WithRemoteStorageSystemContext withRemoteStorageSystem() {
			return getRuleContext(WithRemoteStorageSystemContext.class,0);
		}
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public ExportContext(StatementBaseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterExport(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitExport(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitExport(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StatementBaseContext statementBase() throws RecognitionException {
		StatementBaseContext _localctx = new StatementBaseContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_statementBase);
		int _la;
		try {
			setState(2764);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,327,_ctx) ) {
			case 1:
				_localctx = new StatementDefaultContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2329);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 309)) & ~0x3f) == 0 && ((1L << (_la - 309)) & ((1L << (DESC - 309)) | (1L << (DESCRIBE - 309)) | (1L << (EXPLAIN - 309)))) != 0)) {
					{
					setState(2328);
					explain();
					}
				}

				setState(2331);
				query();
				setState(2333);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,253,_ctx) ) {
				case 1:
					{
					setState(2332);
					outFileClause();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new CreateRowPolicyContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2335);
				match(CREATE);
				setState(2336);
				match(ROW);
				setState(2337);
				match(POLICY);
				setState(2341);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(2338);
					match(IF);
					setState(2339);
					match(NOT);
					setState(2340);
					match(EXISTS);
					}
				}

				setState(2343);
				((CreateRowPolicyContext)_localctx).name = identifier();
				setState(2344);
				match(ON);
				setState(2345);
				((CreateRowPolicyContext)_localctx).table = multipartIdentifier();
				setState(2346);
				match(AS);
				setState(2347);
				((CreateRowPolicyContext)_localctx).type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==PERMISSIVE || _la==RESTRICTIVE) ) {
					((CreateRowPolicyContext)_localctx).type = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2348);
				match(TO);
				setState(2352);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LEFT_BRACE:
				case RIGHT_BRACE:
				case ADDDATE:
				case AFTER:
				case AGG_STATE:
				case AGGREGATE:
				case ALIAS:
				case ANALYZED:
				case ARRAY:
				case ARRAY_RANGE:
				case AT:
				case AUTHORS:
				case AUTO_INCREMENT:
				case BACKENDS:
				case BACKUP:
				case BEGIN:
				case BELONG:
				case BIN:
				case BITAND:
				case BITMAP:
				case BITMAP_UNION:
				case BITOR:
				case BITXOR:
				case BLOB:
				case BOOLEAN:
				case BRIEF:
				case BROKER:
				case BUCKETS:
				case BUILD:
				case BUILTIN:
				case BULK:
				case CACHED:
				case CALL:
				case CATALOG:
				case CATALOGS:
				case CHAIN:
				case CHAR:
				case CHARSET:
				case CHECK:
				case CLUSTER:
				case CLUSTERS:
				case COLLATION:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPACT:
				case COMPLETE:
				case CONFIG:
				case CONNECTION:
				case CONNECTION_ID:
				case CONSISTENT:
				case CONSTRAINTS:
				case CONVERT:
				case COPY:
				case COUNT:
				case CREATION:
				case CRON:
				case CURRENT_CATALOG:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DATA:
				case DATE:
				case DATE_ADD:
				case DATE_CEIL:
				case DATE_DIFF:
				case DATE_FLOOR:
				case DATE_SUB:
				case DATEADD:
				case DATEDIFF:
				case DATETIME:
				case DATETIMEV2:
				case DATEV2:
				case DATETIMEV1:
				case DATEV1:
				case DAY:
				case DAYS_ADD:
				case DAYS_SUB:
				case DECIMAL:
				case DECIMALV2:
				case DECIMALV3:
				case DEFERRED:
				case DEMAND:
				case DIAGNOSE:
				case DISTINCTPC:
				case DISTINCTPCSA:
				case DO:
				case DORIS_INTERNAL_TABLE_ID:
				case DUAL:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTKEY:
				case ENCRYPTKEYS:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERRORS:
				case EVENTS:
				case EVERY:
				case EXCLUDE:
				case EXPIRED:
				case EXTERNAL:
				case FAILED_LOGIN_ATTEMPTS:
				case FAST:
				case FEATURE:
				case FIELDS:
				case FILE:
				case FILTER:
				case FIRST:
				case FORMAT:
				case FREE:
				case FRONTENDS:
				case FUNCTION:
				case GENERIC:
				case GLOBAL:
				case GRAPH:
				case GROUPING:
				case GROUPS:
				case HASH:
				case HDFS:
				case HELP:
				case HISTOGRAM:
				case HLL_UNION:
				case HOSTNAME:
				case HOUR:
				case HUB:
				case IDENTIFIED:
				case IGNORE:
				case IMMEDIATE:
				case INCREMENTAL:
				case INDEXES:
				case INVERTED:
				case IPV4:
				case IPV6:
				case IS_NOT_NULL_PRED:
				case IS_NULL_PRED:
				case ISNULL:
				case ISOLATION:
				case JOB:
				case JOBS:
				case JSON:
				case JSONB:
				case LABEL:
				case LAST:
				case LDAP:
				case LDAP_ADMIN_PASSWORD:
				case LESS:
				case LEVEL:
				case LINES:
				case LINK:
				case LOCAL:
				case LOCALTIME:
				case LOCALTIMESTAMP:
				case LOCATION:
				case LOCK:
				case LOGICAL:
				case MANUAL:
				case MAP:
				case MATCH_ALL:
				case MATCH_ANY:
				case MATCH_ELEMENT_EQ:
				case MATCH_ELEMENT_GE:
				case MATCH_ELEMENT_GT:
				case MATCH_ELEMENT_LE:
				case MATCH_ELEMENT_LT:
				case MATCH_PHRASE:
				case MATCH_PHRASE_EDGE:
				case MATCH_PHRASE_PREFIX:
				case MATCH_REGEXP:
				case MATERIALIZED:
				case MAX:
				case MEMO:
				case MERGE:
				case MIGRATE:
				case MIGRATIONS:
				case MIN:
				case MINUTE:
				case MODIFY:
				case MONTH:
				case MTMV:
				case NAME:
				case NAMES:
				case NEGATIVE:
				case NEVER:
				case NEXT:
				case NGRAM_BF:
				case NO:
				case NON_NULLABLE:
				case NULLS:
				case OF:
				case OFFSET:
				case ONLY:
				case OPEN:
				case OPTIMIZED:
				case PARAMETER:
				case PARSED:
				case PARTITIONS:
				case PASSWORD:
				case PASSWORD_EXPIRE:
				case PASSWORD_HISTORY:
				case PASSWORD_LOCK_TIME:
				case PASSWORD_REUSE:
				case PATH:
				case PAUSE:
				case PERCENT:
				case PERIOD:
				case PERMISSIVE:
				case PHYSICAL:
				case PLAN:
				case PROCESS:
				case PLUGIN:
				case PLUGINS:
				case POLICY:
				case PROC:
				case PROCESSLIST:
				case PROFILE:
				case PROPERTIES:
				case PROPERTY:
				case QUANTILE_STATE:
				case QUANTILE_UNION:
				case QUERY:
				case QUOTA:
				case RANDOM:
				case RECOVER:
				case RECYCLE:
				case REFRESH:
				case REPEATABLE:
				case REPLACE:
				case REPLACE_IF_NOT_NULL:
				case REPOSITORIES:
				case REPOSITORY:
				case RESOURCE:
				case RESOURCES:
				case RESTORE:
				case RESTRICTIVE:
				case RESUME:
				case RETURNS:
				case REWRITTEN:
				case RLIKE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case S3:
				case SAMPLE:
				case SCHEDULE:
				case SCHEDULER:
				case SCHEMA:
				case SECOND:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION:
				case SHAPE:
				case SKEW:
				case SNAPSHOT:
				case SONAME:
				case SPLIT:
				case START:
				case STARTS:
				case STATS:
				case STATUS:
				case STOP:
				case STORAGE:
				case STREAM:
				case STREAMING:
				case STRING:
				case STRUCT:
				case SUBDATE:
				case SUM:
				case TABLES:
				case TASK:
				case TASKS:
				case TEMPORARY:
				case TEXT:
				case THAN:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TRANSACTION:
				case TREE:
				case TRIGGERS:
				case TRUNCATE:
				case TYPE:
				case TYPES:
				case UNCOMMITTED:
				case UNLOCK:
				case USER:
				case VALUE:
				case VARCHAR:
				case VARIABLES:
				case VARIANT:
				case VERBOSE:
				case VERSION:
				case VIEW:
				case WARNINGS:
				case WEEK:
				case WORK:
				case YEAR:
				case STRING_LITERAL:
				case LEADING_STRING:
				case IDENTIFIER:
				case BACKQUOTED_IDENTIFIER:
					{
					setState(2349);
					((CreateRowPolicyContext)_localctx).user = userIdentify();
					}
					break;
				case ROLE:
					{
					setState(2350);
					match(ROLE);
					setState(2351);
					((CreateRowPolicyContext)_localctx).roleName = identifier();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2354);
				match(USING);
				setState(2355);
				match(LEFT_PAREN);
				setState(2356);
				booleanExpression(0);
				setState(2357);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				_localctx = new CreateTableContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2359);
				match(CREATE);
				setState(2361);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXTERNAL) {
					{
					setState(2360);
					match(EXTERNAL);
					}
				}

				setState(2363);
				match(TABLE);
				setState(2367);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(2364);
					match(IF);
					setState(2365);
					match(NOT);
					setState(2366);
					match(EXISTS);
					}
				}

				setState(2369);
				((CreateTableContext)_localctx).name = multipartIdentifier();
				setState(2384);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,261,_ctx) ) {
				case 1:
					{
					setState(2371);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,258,_ctx) ) {
					case 1:
						{
						setState(2370);
						((CreateTableContext)_localctx).ctasCols = identifierList();
						}
						break;
					}
					}
					break;
				case 2:
					{
					{
					setState(2373);
					match(LEFT_PAREN);
					setState(2374);
					columnDefs();
					setState(2377);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,259,_ctx) ) {
					case 1:
						{
						setState(2375);
						match(COMMA);
						setState(2376);
						indexDefs();
						}
						break;
					}
					setState(2380);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2379);
						match(COMMA);
						}
					}

					setState(2382);
					match(RIGHT_PAREN);
					}
					}
					break;
				}
				setState(2389);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,262,_ctx) ) {
				case 1:
					{
					setState(2386);
					match(ENGINE);
					setState(2387);
					match(EQ);
					setState(2388);
					((CreateTableContext)_localctx).engine = identifier();
					}
					break;
				}
				setState(2399);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,264,_ctx) ) {
				case 1:
					{
					setState(2391);
					_la = _input.LA(1);
					if ( !(_la==AGGREGATE || _la==DUPLICATE || _la==UNIQUE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(2392);
					match(KEY);
					setState(2393);
					((CreateTableContext)_localctx).keys = identifierList();
					setState(2397);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,263,_ctx) ) {
					case 1:
						{
						setState(2394);
						match(CLUSTER);
						setState(2395);
						match(BY);
						setState(2396);
						((CreateTableContext)_localctx).clusterKeys = identifierList();
						}
						break;
					}
					}
					break;
				}
				setState(2403);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,265,_ctx) ) {
				case 1:
					{
					setState(2401);
					match(COMMENT);
					setState(2402);
					match(STRING_LITERAL);
					}
					break;
				}
				setState(2406);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,266,_ctx) ) {
				case 1:
					{
					setState(2405);
					((CreateTableContext)_localctx).partition = partitionTable();
					}
					break;
				}
				setState(2422);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,270,_ctx) ) {
				case 1:
					{
					setState(2408);
					match(DISTRIBUTED);
					setState(2409);
					match(BY);
					setState(2413);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case HASH:
						{
						setState(2410);
						match(HASH);
						setState(2411);
						((CreateTableContext)_localctx).hashKeys = identifierList();
						}
						break;
					case RANDOM:
						{
						setState(2412);
						match(RANDOM);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2420);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,269,_ctx) ) {
					case 1:
						{
						setState(2415);
						match(BUCKETS);
						setState(2418);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case INTEGER_VALUE:
							{
							setState(2416);
							match(INTEGER_VALUE);
							}
							break;
						case AUTO:
							{
							setState(2417);
							((CreateTableContext)_localctx).autoBucket = match(AUTO);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					}
					}
					break;
				}
				setState(2429);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,271,_ctx) ) {
				case 1:
					{
					setState(2424);
					match(ROLLUP);
					setState(2425);
					match(LEFT_PAREN);
					setState(2426);
					rollupDefs();
					setState(2427);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(2432);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,272,_ctx) ) {
				case 1:
					{
					setState(2431);
					((CreateTableContext)_localctx).properties = propertyClause();
					}
					break;
				}
				setState(2436);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,273,_ctx) ) {
				case 1:
					{
					setState(2434);
					match(BROKER);
					setState(2435);
					((CreateTableContext)_localctx).extProperties = propertyClause();
					}
					break;
				}
				setState(2440);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,274,_ctx) ) {
				case 1:
					{
					setState(2438);
					match(AS);
					setState(2439);
					query();
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new CreateViewContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2442);
				match(CREATE);
				setState(2443);
				match(VIEW);
				setState(2447);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(2444);
					match(IF);
					setState(2445);
					match(NOT);
					setState(2446);
					match(EXISTS);
					}
				}

				setState(2449);
				((CreateViewContext)_localctx).name = multipartIdentifier();
				setState(2454);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(2450);
					match(LEFT_PAREN);
					setState(2451);
					((CreateViewContext)_localctx).cols = simpleColumnDefs();
					setState(2452);
					match(RIGHT_PAREN);
					}
				}

				setState(2458);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(2456);
					match(COMMENT);
					setState(2457);
					match(STRING_LITERAL);
					}
				}

				setState(2460);
				match(AS);
				setState(2461);
				query();
				}
				break;
			case 5:
				_localctx = new AlterViewContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2463);
				match(ALTER);
				setState(2464);
				match(VIEW);
				setState(2465);
				((AlterViewContext)_localctx).name = multipartIdentifier();
				setState(2470);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(2466);
					match(LEFT_PAREN);
					setState(2467);
					((AlterViewContext)_localctx).cols = simpleColumnDefs();
					setState(2468);
					match(RIGHT_PAREN);
					}
				}

				setState(2472);
				match(AS);
				setState(2473);
				query();
				}
				break;
			case 6:
				_localctx = new CreateTableLikeContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(2475);
				match(CREATE);
				setState(2477);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXTERNAL) {
					{
					setState(2476);
					match(EXTERNAL);
					}
				}

				setState(2479);
				match(TABLE);
				setState(2483);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(2480);
					match(IF);
					setState(2481);
					match(NOT);
					setState(2482);
					match(EXISTS);
					}
				}

				setState(2485);
				((CreateTableLikeContext)_localctx).name = multipartIdentifier();
				setState(2486);
				match(LIKE);
				setState(2487);
				((CreateTableLikeContext)_localctx).existedTable = multipartIdentifier();
				setState(2493);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,282,_ctx) ) {
				case 1:
					{
					setState(2488);
					match(WITH);
					setState(2489);
					match(ROLLUP);
					setState(2491);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,281,_ctx) ) {
					case 1:
						{
						setState(2490);
						((CreateTableLikeContext)_localctx).rollupNames = identifierList();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 7:
				_localctx = new InsertTableContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(2496);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 309)) & ~0x3f) == 0 && ((1L << (_la - 309)) & ((1L << (DESC - 309)) | (1L << (DESCRIBE - 309)) | (1L << (EXPLAIN - 309)))) != 0)) {
					{
					setState(2495);
					explain();
					}
				}

				setState(2498);
				match(INSERT);
				setState(2502);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case INTO:
					{
					setState(2499);
					match(INTO);
					}
					break;
				case OVERWRITE:
					{
					setState(2500);
					match(OVERWRITE);
					setState(2501);
					match(TABLE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2509);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,285,_ctx) ) {
				case 1:
					{
					setState(2504);
					((InsertTableContext)_localctx).tableName = multipartIdentifier();
					}
					break;
				case 2:
					{
					setState(2505);
					match(DORIS_INTERNAL_TABLE_ID);
					setState(2506);
					match(LEFT_PAREN);
					setState(2507);
					((InsertTableContext)_localctx).tableId = match(INTEGER_VALUE);
					setState(2508);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(2512);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION || _la==PARTITIONS || _la==TEMPORARY) {
					{
					setState(2511);
					partitionSpec();
					}
				}

				setState(2517);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,287,_ctx) ) {
				case 1:
					{
					setState(2514);
					match(WITH);
					setState(2515);
					match(LABEL);
					setState(2516);
					((InsertTableContext)_localctx).labelName = identifier();
					}
					break;
				}
				setState(2520);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,288,_ctx) ) {
				case 1:
					{
					setState(2519);
					((InsertTableContext)_localctx).cols = identifierList();
					}
					break;
				}
				setState(2526);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_BRACKET) {
					{
					setState(2522);
					match(LEFT_BRACKET);
					setState(2523);
					((InsertTableContext)_localctx).hints = identifierSeq();
					setState(2524);
					match(RIGHT_BRACKET);
					}
				}

				setState(2528);
				query();
				}
				break;
			case 8:
				_localctx = new UpdateContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(2530);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 309)) & ~0x3f) == 0 && ((1L << (_la - 309)) & ((1L << (DESC - 309)) | (1L << (DESCRIBE - 309)) | (1L << (EXPLAIN - 309)))) != 0)) {
					{
					setState(2529);
					explain();
					}
				}

				setState(2533);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(2532);
					cte();
					}
				}

				setState(2535);
				match(UPDATE);
				setState(2536);
				((UpdateContext)_localctx).tableName = multipartIdentifier();
				setState(2537);
				tableAlias();
				setState(2538);
				match(SET);
				setState(2539);
				updateAssignmentSeq();
				setState(2541);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,292,_ctx) ) {
				case 1:
					{
					setState(2540);
					fromClause();
					}
					break;
				}
				setState(2544);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,293,_ctx) ) {
				case 1:
					{
					setState(2543);
					whereClause();
					}
					break;
				}
				}
				break;
			case 9:
				_localctx = new DeleteContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(2547);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 309)) & ~0x3f) == 0 && ((1L << (_la - 309)) & ((1L << (DESC - 309)) | (1L << (DESCRIBE - 309)) | (1L << (EXPLAIN - 309)))) != 0)) {
					{
					setState(2546);
					explain();
					}
				}

				setState(2550);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(2549);
					cte();
					}
				}

				setState(2552);
				match(DELETE);
				setState(2553);
				match(FROM);
				setState(2554);
				((DeleteContext)_localctx).tableName = multipartIdentifier();
				setState(2556);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,296,_ctx) ) {
				case 1:
					{
					setState(2555);
					partitionSpec();
					}
					break;
				}
				setState(2558);
				tableAlias();
				setState(2561);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,297,_ctx) ) {
				case 1:
					{
					setState(2559);
					match(USING);
					setState(2560);
					relations();
					}
					break;
				}
				setState(2564);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,298,_ctx) ) {
				case 1:
					{
					setState(2563);
					whereClause();
					}
					break;
				}
				}
				break;
			case 10:
				_localctx = new LoadContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(2566);
				match(LOAD);
				setState(2567);
				match(LABEL);
				setState(2568);
				((LoadContext)_localctx).lableName = identifier();
				setState(2569);
				match(LEFT_PAREN);
				setState(2570);
				((LoadContext)_localctx).dataDesc = dataDesc();
				((LoadContext)_localctx).dataDescs.add(((LoadContext)_localctx).dataDesc);
				setState(2575);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2571);
					match(COMMA);
					setState(2572);
					((LoadContext)_localctx).dataDesc = dataDesc();
					((LoadContext)_localctx).dataDescs.add(((LoadContext)_localctx).dataDesc);
					}
					}
					setState(2577);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2578);
				match(RIGHT_PAREN);
				setState(2580);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,300,_ctx) ) {
				case 1:
					{
					setState(2579);
					withRemoteStorageSystem();
					}
					break;
				}
				setState(2587);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,301,_ctx) ) {
				case 1:
					{
					setState(2582);
					match(PROPERTIES);
					setState(2583);
					match(LEFT_PAREN);
					setState(2584);
					((LoadContext)_localctx).properties = propertyItemList();
					setState(2585);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(2590);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,302,_ctx) ) {
				case 1:
					{
					setState(2589);
					commentSpec();
					}
					break;
				}
				}
				break;
			case 11:
				_localctx = new MysqlLoadContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(2592);
				match(LOAD);
				setState(2593);
				mysqlDataDesc();
				setState(2599);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,303,_ctx) ) {
				case 1:
					{
					setState(2594);
					match(PROPERTIES);
					setState(2595);
					match(LEFT_PAREN);
					setState(2596);
					((MysqlLoadContext)_localctx).properties = propertyItemList();
					setState(2597);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(2602);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,304,_ctx) ) {
				case 1:
					{
					setState(2601);
					commentSpec();
					}
					break;
				}
				}
				break;
			case 12:
				_localctx = new ExportContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(2604);
				match(EXPORT);
				setState(2605);
				match(TABLE);
				setState(2606);
				((ExportContext)_localctx).tableName = multipartIdentifier();
				setState(2609);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(2607);
					match(PARTITION);
					setState(2608);
					((ExportContext)_localctx).partition = identifierList();
					}
				}

				setState(2612);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(2611);
					whereClause();
					}
				}

				setState(2614);
				match(TO);
				setState(2615);
				((ExportContext)_localctx).filePath = match(STRING_LITERAL);
				setState(2617);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,307,_ctx) ) {
				case 1:
					{
					setState(2616);
					propertyClause();
					}
					break;
				}
				setState(2620);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,308,_ctx) ) {
				case 1:
					{
					setState(2619);
					withRemoteStorageSystem();
					}
					break;
				}
				}
				break;
			case 13:
				_localctx = new CreateMTMVContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(2622);
				match(CREATE);
				setState(2623);
				match(MATERIALIZED);
				setState(2624);
				match(VIEW);
				setState(2628);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(2625);
					match(IF);
					setState(2626);
					match(NOT);
					setState(2627);
					match(EXISTS);
					}
				}

				setState(2630);
				((CreateMTMVContext)_localctx).mvName = multipartIdentifier();
				setState(2635);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(2631);
					match(LEFT_PAREN);
					setState(2632);
					((CreateMTMVContext)_localctx).cols = simpleColumnDefs();
					setState(2633);
					match(RIGHT_PAREN);
					}
				}

				setState(2638);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BUILD) {
					{
					setState(2637);
					buildMode();
					}
				}

				setState(2647);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REFRESH) {
					{
					setState(2640);
					match(REFRESH);
					setState(2642);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AUTO || _la==COMPLETE) {
						{
						setState(2641);
						refreshMethod();
						}
					}

					setState(2645);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ON) {
						{
						setState(2644);
						refreshTrigger();
						}
					}

					}
				}

				setState(2654);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DUPLICATE || _la==KEY) {
					{
					setState(2650);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DUPLICATE) {
						{
						setState(2649);
						match(DUPLICATE);
						}
					}

					setState(2652);
					match(KEY);
					setState(2653);
					((CreateMTMVContext)_localctx).keys = identifierList();
					}
				}

				setState(2658);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(2656);
					match(COMMENT);
					setState(2657);
					match(STRING_LITERAL);
					}
				}

				setState(2666);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(2660);
					match(PARTITION);
					setState(2661);
					match(BY);
					setState(2662);
					match(LEFT_PAREN);
					setState(2663);
					((CreateMTMVContext)_localctx).partitionKey = identifier();
					setState(2664);
					match(RIGHT_PAREN);
					}
				}

				setState(2679);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DISTRIBUTED) {
					{
					setState(2668);
					match(DISTRIBUTED);
					setState(2669);
					match(BY);
					setState(2673);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case HASH:
						{
						setState(2670);
						match(HASH);
						setState(2671);
						((CreateMTMVContext)_localctx).hashKeys = identifierList();
						}
						break;
					case RANDOM:
						{
						setState(2672);
						match(RANDOM);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2677);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==BUCKETS) {
						{
						setState(2675);
						match(BUCKETS);
						setState(2676);
						_la = _input.LA(1);
						if ( !(_la==AUTO || _la==INTEGER_VALUE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					}
				}

				setState(2682);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROPERTIES) {
					{
					setState(2681);
					propertyClause();
					}
				}

				setState(2684);
				match(AS);
				setState(2685);
				query();
				}
				break;
			case 14:
				_localctx = new RefreshMTMVContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(2687);
				match(REFRESH);
				setState(2688);
				match(MATERIALIZED);
				setState(2689);
				match(VIEW);
				setState(2690);
				((RefreshMTMVContext)_localctx).mvName = multipartIdentifier();
				setState(2694);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PARTITION:
				case PARTITIONS:
				case TEMPORARY:
					{
					setState(2691);
					partitionSpec();
					}
					break;
				case COMPLETE:
					{
					setState(2692);
					match(COMPLETE);
					}
					break;
				case AUTO:
					{
					setState(2693);
					match(AUTO);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 15:
				_localctx = new AlterMTMVContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(2696);
				match(ALTER);
				setState(2697);
				match(MATERIALIZED);
				setState(2698);
				match(VIEW);
				setState(2699);
				((AlterMTMVContext)_localctx).mvName = multipartIdentifier();
				setState(2715);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case RENAME:
					{
					{
					setState(2700);
					match(RENAME);
					setState(2701);
					((AlterMTMVContext)_localctx).newName = identifier();
					}
					}
					break;
				case REFRESH:
					{
					{
					setState(2702);
					match(REFRESH);
					setState(2708);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,324,_ctx) ) {
					case 1:
						{
						setState(2703);
						refreshMethod();
						}
						break;
					case 2:
						{
						setState(2704);
						refreshTrigger();
						}
						break;
					case 3:
						{
						setState(2705);
						refreshMethod();
						setState(2706);
						refreshTrigger();
						}
						break;
					}
					}
					}
					break;
				case SET:
					{
					{
					setState(2710);
					match(SET);
					setState(2711);
					match(LEFT_PAREN);
					setState(2712);
					((AlterMTMVContext)_localctx).fileProperties = propertyItemList();
					setState(2713);
					match(RIGHT_PAREN);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 16:
				_localctx = new DropMTMVContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(2717);
				match(DROP);
				setState(2718);
				match(MATERIALIZED);
				setState(2719);
				match(VIEW);
				setState(2722);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(2720);
					match(IF);
					setState(2721);
					match(EXISTS);
					}
				}

				setState(2724);
				((DropMTMVContext)_localctx).mvName = multipartIdentifier();
				}
				break;
			case 17:
				_localctx = new PauseMTMVContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(2725);
				match(PAUSE);
				setState(2726);
				match(MATERIALIZED);
				setState(2727);
				match(VIEW);
				setState(2728);
				match(JOB);
				setState(2729);
				match(ON);
				setState(2730);
				((PauseMTMVContext)_localctx).mvName = multipartIdentifier();
				}
				break;
			case 18:
				_localctx = new ResumeMTMVContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(2731);
				match(RESUME);
				setState(2732);
				match(MATERIALIZED);
				setState(2733);
				match(VIEW);
				setState(2734);
				match(JOB);
				setState(2735);
				match(ON);
				setState(2736);
				((ResumeMTMVContext)_localctx).mvName = multipartIdentifier();
				}
				break;
			case 19:
				_localctx = new CancelMTMVTaskContext(_localctx);
				enterOuterAlt(_localctx, 19);
				{
				setState(2737);
				match(CANCEL);
				setState(2738);
				match(MATERIALIZED);
				setState(2739);
				match(VIEW);
				setState(2740);
				match(TASK);
				setState(2741);
				((CancelMTMVTaskContext)_localctx).taskId = match(INTEGER_VALUE);
				setState(2742);
				match(ON);
				setState(2743);
				((CancelMTMVTaskContext)_localctx).mvName = multipartIdentifier();
				}
				break;
			case 20:
				_localctx = new AddConstraintContext(_localctx);
				enterOuterAlt(_localctx, 20);
				{
				setState(2744);
				match(ALTER);
				setState(2745);
				match(TABLE);
				setState(2746);
				((AddConstraintContext)_localctx).table = multipartIdentifier();
				setState(2747);
				match(ADD);
				setState(2748);
				match(CONSTRAINT);
				setState(2749);
				((AddConstraintContext)_localctx).constraintName = errorCapturingIdentifier();
				setState(2750);
				constraint();
				}
				break;
			case 21:
				_localctx = new DropConstraintContext(_localctx);
				enterOuterAlt(_localctx, 21);
				{
				setState(2752);
				match(ALTER);
				setState(2753);
				match(TABLE);
				setState(2754);
				((DropConstraintContext)_localctx).table = multipartIdentifier();
				setState(2755);
				match(DROP);
				setState(2756);
				match(CONSTRAINT);
				setState(2757);
				((DropConstraintContext)_localctx).constraintName = errorCapturingIdentifier();
				}
				break;
			case 22:
				_localctx = new ShowConstraintContext(_localctx);
				enterOuterAlt(_localctx, 22);
				{
				setState(2759);
				match(SHOW);
				setState(2760);
				match(CONSTRAINTS);
				setState(2761);
				match(FROM);
				setState(2762);
				((ShowConstraintContext)_localctx).table = multipartIdentifier();
				}
				break;
			case 23:
				_localctx = new UnsupportedContext(_localctx);
				enterOuterAlt(_localctx, 23);
				{
				setState(2763);
				unsupportedStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnsupportedStatementContext extends ParserRuleContext {
		public UnsupportedStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unsupportedStatement; }
	 
		public UnsupportedStatementContext() { }
		public void copyFrom(UnsupportedStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SetTransactionContext extends UnsupportedStatementContext {
		public TerminalNode SET() { return getToken(PLParser.SET, 0); }
		public TerminalNode TRANSACTION() { return getToken(PLParser.TRANSACTION, 0); }
		public TransactionAccessModeContext transactionAccessMode() {
			return getRuleContext(TransactionAccessModeContext.class,0);
		}
		public IsolationLevelContext isolationLevel() {
			return getRuleContext(IsolationLevelContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PLParser.COMMA, 0); }
		public TerminalNode GLOBAL() { return getToken(PLParser.GLOBAL, 0); }
		public TerminalNode LOCAL() { return getToken(PLParser.LOCAL, 0); }
		public TerminalNode SESSION() { return getToken(PLParser.SESSION, 0); }
		public SetTransactionContext(UnsupportedStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterSetTransaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitSetTransaction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitSetTransaction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UseCloudClusterContext extends UnsupportedStatementContext {
		public IdentifierContext catalog;
		public IdentifierContext database;
		public IdentifierContext cluster;
		public TerminalNode USE() { return getToken(PLParser.USE, 0); }
		public TerminalNode ATSIGN() { return getToken(PLParser.ATSIGN, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode DOT() { return getToken(PLParser.DOT, 0); }
		public UseCloudClusterContext(UnsupportedStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterUseCloudCluster(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitUseCloudCluster(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitUseCloudCluster(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetCharsetContext extends UnsupportedStatementContext {
		public IdentifierOrTextContext charsetName;
		public List<TerminalNode> SET() { return getTokens(PLParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(PLParser.SET, i);
		}
		public TerminalNode CHAR() { return getToken(PLParser.CHAR, 0); }
		public TerminalNode CHARSET() { return getToken(PLParser.CHARSET, 0); }
		public TerminalNode DEFAULT() { return getToken(PLParser.DEFAULT, 0); }
		public IdentifierOrTextContext identifierOrText() {
			return getRuleContext(IdentifierOrTextContext.class,0);
		}
		public SetCharsetContext(UnsupportedStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterSetCharset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitSetCharset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitSetCharset(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetNamesContext extends UnsupportedStatementContext {
		public TerminalNode SET() { return getToken(PLParser.SET, 0); }
		public TerminalNode NAMES() { return getToken(PLParser.NAMES, 0); }
		public TerminalNode EQ() { return getToken(PLParser.EQ, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public SetNamesContext(UnsupportedStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterSetNames(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitSetNames(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitSetNames(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetCollateContext extends UnsupportedStatementContext {
		public IdentifierOrTextContext charsetName;
		public IdentifierOrTextContext collateName;
		public TerminalNode SET() { return getToken(PLParser.SET, 0); }
		public TerminalNode NAMES() { return getToken(PLParser.NAMES, 0); }
		public List<TerminalNode> DEFAULT() { return getTokens(PLParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(PLParser.DEFAULT, i);
		}
		public List<IdentifierOrTextContext> identifierOrText() {
			return getRuleContexts(IdentifierOrTextContext.class);
		}
		public IdentifierOrTextContext identifierOrText(int i) {
			return getRuleContext(IdentifierOrTextContext.class,i);
		}
		public TerminalNode COLLATE() { return getToken(PLParser.COLLATE, 0); }
		public SetCollateContext(UnsupportedStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterSetCollate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitSetCollate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitSetCollate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetPasswordContext extends UnsupportedStatementContext {
		public TerminalNode SET() { return getToken(PLParser.SET, 0); }
		public List<TerminalNode> PASSWORD() { return getTokens(PLParser.PASSWORD); }
		public TerminalNode PASSWORD(int i) {
			return getToken(PLParser.PASSWORD, i);
		}
		public TerminalNode EQ() { return getToken(PLParser.EQ, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(PLParser.STRING_LITERAL, 0); }
		public TerminalNode FOR() { return getToken(PLParser.FOR, 0); }
		public UserIdentifyContext userIdentify() {
			return getRuleContext(UserIdentifyContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public SetPasswordContext(UnsupportedStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterSetPassword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitSetPassword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitSetPassword(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetSystemVariableWithTypeContext extends UnsupportedStatementContext {
		public TerminalNode SET() { return getToken(PLParser.SET, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode EQ() { return getToken(PLParser.EQ, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PLParser.DEFAULT, 0); }
		public TerminalNode GLOBAL() { return getToken(PLParser.GLOBAL, 0); }
		public TerminalNode LOCAL() { return getToken(PLParser.LOCAL, 0); }
		public TerminalNode SESSION() { return getToken(PLParser.SESSION, 0); }
		public SetSystemVariableWithTypeContext(UnsupportedStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterSetSystemVariableWithType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitSetSystemVariableWithType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitSetSystemVariableWithType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetUserPropertiesContext extends UnsupportedStatementContext {
		public IdentifierOrTextContext user;
		public TerminalNode SET() { return getToken(PLParser.SET, 0); }
		public TerminalNode PROPERTY() { return getToken(PLParser.PROPERTY, 0); }
		public PropertyItemListContext propertyItemList() {
			return getRuleContext(PropertyItemListContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PLParser.FOR, 0); }
		public IdentifierOrTextContext identifierOrText() {
			return getRuleContext(IdentifierOrTextContext.class,0);
		}
		public SetUserPropertiesContext(UnsupportedStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterSetUserProperties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitSetUserProperties(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitSetUserProperties(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UseDatabaseContext extends UnsupportedStatementContext {
		public IdentifierContext catalog;
		public IdentifierContext database;
		public TerminalNode USE() { return getToken(PLParser.USE, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode DOT() { return getToken(PLParser.DOT, 0); }
		public UseDatabaseContext(UnsupportedStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterUseDatabase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitUseDatabase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitUseDatabase(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetSystemVariableWithoutTypeContext extends UnsupportedStatementContext {
		public TerminalNode SET() { return getToken(PLParser.SET, 0); }
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public SetSystemVariableWithoutTypeContext(UnsupportedStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterSetSystemVariableWithoutType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitSetSystemVariableWithoutType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitSetSystemVariableWithoutType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetDefaultStorageVaultContext extends UnsupportedStatementContext {
		public TerminalNode SET() { return getToken(PLParser.SET, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode AS() { return getToken(PLParser.AS, 0); }
		public TerminalNode DEFAULT() { return getToken(PLParser.DEFAULT, 0); }
		public TerminalNode STORAGE() { return getToken(PLParser.STORAGE, 0); }
		public TerminalNode VAULT() { return getToken(PLParser.VAULT, 0); }
		public SetDefaultStorageVaultContext(UnsupportedStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterSetDefaultStorageVault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitSetDefaultStorageVault(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitSetDefaultStorageVault(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetLdapAdminPasswordContext extends UnsupportedStatementContext {
		public TerminalNode SET() { return getToken(PLParser.SET, 0); }
		public TerminalNode LDAP_ADMIN_PASSWORD() { return getToken(PLParser.LDAP_ADMIN_PASSWORD, 0); }
		public TerminalNode EQ() { return getToken(PLParser.EQ, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(PLParser.STRING_LITERAL, 0); }
		public TerminalNode PASSWORD() { return getToken(PLParser.PASSWORD, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public SetLdapAdminPasswordContext(UnsupportedStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterSetLdapAdminPassword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitSetLdapAdminPassword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitSetLdapAdminPassword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnsupportedStatementContext unsupportedStatement() throws RecognitionException {
		UnsupportedStatementContext _localctx = new UnsupportedStatementContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_unsupportedStatement);
		int _la;
		try {
			setState(2876);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,343,_ctx) ) {
			case 1:
				_localctx = new SetDefaultStorageVaultContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2766);
				match(SET);
				setState(2767);
				identifier();
				setState(2768);
				match(AS);
				setState(2769);
				match(DEFAULT);
				setState(2770);
				match(STORAGE);
				setState(2771);
				match(VAULT);
				}
				break;
			case 2:
				_localctx = new SetUserPropertiesContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2773);
				match(SET);
				setState(2774);
				match(PROPERTY);
				setState(2777);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(2775);
					match(FOR);
					setState(2776);
					((SetUserPropertiesContext)_localctx).user = identifierOrText();
					}
				}

				setState(2779);
				propertyItemList();
				}
				break;
			case 3:
				_localctx = new SetSystemVariableWithTypeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2780);
				match(SET);
				setState(2782);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,329,_ctx) ) {
				case 1:
					{
					setState(2781);
					_la = _input.LA(1);
					if ( !(_la==GLOBAL || _la==LOCAL || _la==SESSION) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(2784);
				identifier();
				setState(2785);
				match(EQ);
				setState(2788);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LEFT_PAREN:
				case LEFT_BRACKET:
				case LEFT_BRACE:
				case RIGHT_BRACE:
				case ADD:
				case ADDDATE:
				case AFTER:
				case AGG_STATE:
				case AGGREGATE:
				case ALIAS:
				case ANALYZED:
				case ARRAY:
				case ARRAY_RANGE:
				case AT:
				case AUTHORS:
				case AUTO_INCREMENT:
				case BACKENDS:
				case BACKUP:
				case BEGIN:
				case BELONG:
				case BIN:
				case BINARY:
				case BITAND:
				case BITMAP:
				case BITMAP_UNION:
				case BITOR:
				case BITXOR:
				case BLOB:
				case BOOLEAN:
				case BRIEF:
				case BROKER:
				case BUCKETS:
				case BUILD:
				case BUILTIN:
				case BULK:
				case CACHED:
				case CALL:
				case CASE:
				case CAST:
				case CATALOG:
				case CATALOGS:
				case CHAIN:
				case CHAR:
				case CHARSET:
				case CHECK:
				case CLUSTER:
				case CLUSTERS:
				case COLLATION:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPACT:
				case COMPLETE:
				case CONFIG:
				case CONNECTION:
				case CONNECTION_ID:
				case CONSISTENT:
				case CONSTRAINTS:
				case CONVERT:
				case COPY:
				case COUNT:
				case CREATION:
				case CRON:
				case CURRENT_CATALOG:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DATA:
				case DATABASE:
				case DATE:
				case DATE_ADD:
				case DATE_CEIL:
				case DATE_DIFF:
				case DATE_FLOOR:
				case DATE_SUB:
				case DATEADD:
				case DATEDIFF:
				case DATETIME:
				case DATETIMEV2:
				case DATEV2:
				case DATETIMEV1:
				case DATEV1:
				case DAY:
				case DAYS_ADD:
				case DAYS_SUB:
				case DECIMAL:
				case DECIMALV2:
				case DECIMALV3:
				case DEFERRED:
				case DEMAND:
				case DIAGNOSE:
				case DISTINCTPC:
				case DISTINCTPCSA:
				case DO:
				case DORIS_INTERNAL_TABLE_ID:
				case DUAL:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTKEY:
				case ENCRYPTKEYS:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERRORS:
				case EVENTS:
				case EVERY:
				case EXCLUDE:
				case EXISTS:
				case EXPIRED:
				case EXTERNAL:
				case EXTRACT:
				case FAILED_LOGIN_ATTEMPTS:
				case FALSE:
				case FAST:
				case FEATURE:
				case FIELDS:
				case FILE:
				case FILTER:
				case FIRST:
				case FORMAT:
				case FREE:
				case FRONTENDS:
				case FUNCTION:
				case GENERIC:
				case GLOBAL:
				case GRAPH:
				case GROUPING:
				case GROUPS:
				case HASH:
				case HDFS:
				case HELP:
				case HISTOGRAM:
				case HLL_UNION:
				case HOSTNAME:
				case HOUR:
				case HUB:
				case IDENTIFIED:
				case IF:
				case IGNORE:
				case IMMEDIATE:
				case INCREMENTAL:
				case INDEXES:
				case INTERVAL:
				case INVERTED:
				case IPV4:
				case IPV6:
				case IS_NOT_NULL_PRED:
				case IS_NULL_PRED:
				case ISNULL:
				case ISOLATION:
				case JOB:
				case JOBS:
				case JSON:
				case JSONB:
				case KEY:
				case LABEL:
				case LAST:
				case LDAP:
				case LDAP_ADMIN_PASSWORD:
				case LEFT:
				case LESS:
				case LEVEL:
				case LIKE:
				case LINES:
				case LINK:
				case LOCAL:
				case LOCALTIME:
				case LOCALTIMESTAMP:
				case LOCATION:
				case LOCK:
				case LOGICAL:
				case MANUAL:
				case MAP:
				case MATCH_ALL:
				case MATCH_ANY:
				case MATCH_ELEMENT_EQ:
				case MATCH_ELEMENT_GE:
				case MATCH_ELEMENT_GT:
				case MATCH_ELEMENT_LE:
				case MATCH_ELEMENT_LT:
				case MATCH_PHRASE:
				case MATCH_PHRASE_EDGE:
				case MATCH_PHRASE_PREFIX:
				case MATCH_REGEXP:
				case MATERIALIZED:
				case MAX:
				case MEMO:
				case MERGE:
				case MIGRATE:
				case MIGRATIONS:
				case MIN:
				case MINUTE:
				case MODIFY:
				case MONTH:
				case MTMV:
				case NAME:
				case NAMES:
				case NEGATIVE:
				case NEVER:
				case NEXT:
				case NGRAM_BF:
				case NO:
				case NON_NULLABLE:
				case NOT:
				case NULL:
				case NULLS:
				case OF:
				case OFFSET:
				case ONLY:
				case OPEN:
				case OPTIMIZED:
				case PARAMETER:
				case PARSED:
				case PARTITIONS:
				case PASSWORD:
				case PASSWORD_EXPIRE:
				case PASSWORD_HISTORY:
				case PASSWORD_LOCK_TIME:
				case PASSWORD_REUSE:
				case PATH:
				case PAUSE:
				case PERCENT:
				case PERIOD:
				case PERMISSIVE:
				case PHYSICAL:
				case PLAN:
				case PROCESS:
				case PLUGIN:
				case PLUGINS:
				case POLICY:
				case PROC:
				case PROCESSLIST:
				case PROFILE:
				case PROPERTIES:
				case PROPERTY:
				case QUANTILE_STATE:
				case QUANTILE_UNION:
				case QUERY:
				case QUOTA:
				case RANDOM:
				case RECOVER:
				case RECYCLE:
				case REFRESH:
				case REGEXP:
				case REPEATABLE:
				case REPLACE:
				case REPLACE_IF_NOT_NULL:
				case REPOSITORIES:
				case REPOSITORY:
				case RESOURCE:
				case RESOURCES:
				case RESTORE:
				case RESTRICTIVE:
				case RESUME:
				case RETURNS:
				case REWRITTEN:
				case RIGHT:
				case RLIKE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case S3:
				case SAMPLE:
				case SCHEDULE:
				case SCHEDULER:
				case SCHEMA:
				case SECOND:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION:
				case SHAPE:
				case SKEW:
				case SNAPSHOT:
				case SONAME:
				case SPLIT:
				case START:
				case STARTS:
				case STATS:
				case STATUS:
				case STOP:
				case STORAGE:
				case STREAM:
				case STREAMING:
				case STRING:
				case STRUCT:
				case SUBDATE:
				case SUM:
				case TABLES:
				case TASK:
				case TASKS:
				case TEMPORARY:
				case TEXT:
				case THAN:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TRANSACTION:
				case TREE:
				case TRIGGERS:
				case TRIM:
				case TRUE:
				case TRUNCATE:
				case TYPE:
				case TYPES:
				case UNCOMMITTED:
				case UNLOCK:
				case USER:
				case VALUE:
				case VARCHAR:
				case VARIABLES:
				case VARIANT:
				case VERBOSE:
				case VERSION:
				case VIEW:
				case WARNINGS:
				case WEEK:
				case WORK:
				case YEAR:
				case PLUS:
				case SUBTRACT:
				case ASTERISK:
				case TILDE:
				case LOGICALNOT:
				case ATSIGN:
				case DOUBLEATSIGN:
				case STRING_LITERAL:
				case INTEGER_VALUE:
				case EXPONENT_VALUE:
				case DECIMAL_VALUE:
				case IDENTIFIER:
				case BACKQUOTED_IDENTIFIER:
					{
					setState(2786);
					expression();
					}
					break;
				case DEFAULT:
					{
					setState(2787);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				_localctx = new SetSystemVariableWithoutTypeContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2790);
				match(SET);
				setState(2791);
				variable();
				}
				break;
			case 5:
				_localctx = new SetCharsetContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2792);
				match(SET);
				setState(2796);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHAR:
					{
					setState(2793);
					match(CHAR);
					setState(2794);
					match(SET);
					}
					break;
				case CHARSET:
					{
					setState(2795);
					match(CHARSET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2800);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LEFT_BRACE:
				case RIGHT_BRACE:
				case ADDDATE:
				case AFTER:
				case AGG_STATE:
				case AGGREGATE:
				case ALIAS:
				case ANALYZED:
				case ARRAY:
				case ARRAY_RANGE:
				case AT:
				case AUTHORS:
				case AUTO_INCREMENT:
				case BACKENDS:
				case BACKUP:
				case BEGIN:
				case BELONG:
				case BIN:
				case BITAND:
				case BITMAP:
				case BITMAP_UNION:
				case BITOR:
				case BITXOR:
				case BLOB:
				case BOOLEAN:
				case BRIEF:
				case BROKER:
				case BUCKETS:
				case BUILD:
				case BUILTIN:
				case BULK:
				case CACHED:
				case CALL:
				case CATALOG:
				case CATALOGS:
				case CHAIN:
				case CHAR:
				case CHARSET:
				case CHECK:
				case CLUSTER:
				case CLUSTERS:
				case COLLATION:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPACT:
				case COMPLETE:
				case CONFIG:
				case CONNECTION:
				case CONNECTION_ID:
				case CONSISTENT:
				case CONSTRAINTS:
				case CONVERT:
				case COPY:
				case COUNT:
				case CREATION:
				case CRON:
				case CURRENT_CATALOG:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DATA:
				case DATE:
				case DATE_ADD:
				case DATE_CEIL:
				case DATE_DIFF:
				case DATE_FLOOR:
				case DATE_SUB:
				case DATEADD:
				case DATEDIFF:
				case DATETIME:
				case DATETIMEV2:
				case DATEV2:
				case DATETIMEV1:
				case DATEV1:
				case DAY:
				case DAYS_ADD:
				case DAYS_SUB:
				case DECIMAL:
				case DECIMALV2:
				case DECIMALV3:
				case DEFERRED:
				case DEMAND:
				case DIAGNOSE:
				case DISTINCTPC:
				case DISTINCTPCSA:
				case DO:
				case DORIS_INTERNAL_TABLE_ID:
				case DUAL:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTKEY:
				case ENCRYPTKEYS:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERRORS:
				case EVENTS:
				case EVERY:
				case EXCLUDE:
				case EXPIRED:
				case EXTERNAL:
				case FAILED_LOGIN_ATTEMPTS:
				case FAST:
				case FEATURE:
				case FIELDS:
				case FILE:
				case FILTER:
				case FIRST:
				case FORMAT:
				case FREE:
				case FRONTENDS:
				case FUNCTION:
				case GENERIC:
				case GLOBAL:
				case GRAPH:
				case GROUPING:
				case GROUPS:
				case HASH:
				case HDFS:
				case HELP:
				case HISTOGRAM:
				case HLL_UNION:
				case HOSTNAME:
				case HOUR:
				case HUB:
				case IDENTIFIED:
				case IGNORE:
				case IMMEDIATE:
				case INCREMENTAL:
				case INDEXES:
				case INVERTED:
				case IPV4:
				case IPV6:
				case IS_NOT_NULL_PRED:
				case IS_NULL_PRED:
				case ISNULL:
				case ISOLATION:
				case JOB:
				case JOBS:
				case JSON:
				case JSONB:
				case LABEL:
				case LAST:
				case LDAP:
				case LDAP_ADMIN_PASSWORD:
				case LESS:
				case LEVEL:
				case LINES:
				case LINK:
				case LOCAL:
				case LOCALTIME:
				case LOCALTIMESTAMP:
				case LOCATION:
				case LOCK:
				case LOGICAL:
				case MANUAL:
				case MAP:
				case MATCH_ALL:
				case MATCH_ANY:
				case MATCH_ELEMENT_EQ:
				case MATCH_ELEMENT_GE:
				case MATCH_ELEMENT_GT:
				case MATCH_ELEMENT_LE:
				case MATCH_ELEMENT_LT:
				case MATCH_PHRASE:
				case MATCH_PHRASE_EDGE:
				case MATCH_PHRASE_PREFIX:
				case MATCH_REGEXP:
				case MATERIALIZED:
				case MAX:
				case MEMO:
				case MERGE:
				case MIGRATE:
				case MIGRATIONS:
				case MIN:
				case MINUTE:
				case MODIFY:
				case MONTH:
				case MTMV:
				case NAME:
				case NAMES:
				case NEGATIVE:
				case NEVER:
				case NEXT:
				case NGRAM_BF:
				case NO:
				case NON_NULLABLE:
				case NULLS:
				case OF:
				case OFFSET:
				case ONLY:
				case OPEN:
				case OPTIMIZED:
				case PARAMETER:
				case PARSED:
				case PARTITIONS:
				case PASSWORD:
				case PASSWORD_EXPIRE:
				case PASSWORD_HISTORY:
				case PASSWORD_LOCK_TIME:
				case PASSWORD_REUSE:
				case PATH:
				case PAUSE:
				case PERCENT:
				case PERIOD:
				case PERMISSIVE:
				case PHYSICAL:
				case PLAN:
				case PROCESS:
				case PLUGIN:
				case PLUGINS:
				case POLICY:
				case PROC:
				case PROCESSLIST:
				case PROFILE:
				case PROPERTIES:
				case PROPERTY:
				case QUANTILE_STATE:
				case QUANTILE_UNION:
				case QUERY:
				case QUOTA:
				case RANDOM:
				case RECOVER:
				case RECYCLE:
				case REFRESH:
				case REPEATABLE:
				case REPLACE:
				case REPLACE_IF_NOT_NULL:
				case REPOSITORIES:
				case REPOSITORY:
				case RESOURCE:
				case RESOURCES:
				case RESTORE:
				case RESTRICTIVE:
				case RESUME:
				case RETURNS:
				case REWRITTEN:
				case RLIKE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case S3:
				case SAMPLE:
				case SCHEDULE:
				case SCHEDULER:
				case SCHEMA:
				case SECOND:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION:
				case SHAPE:
				case SKEW:
				case SNAPSHOT:
				case SONAME:
				case SPLIT:
				case START:
				case STARTS:
				case STATS:
				case STATUS:
				case STOP:
				case STORAGE:
				case STREAM:
				case STREAMING:
				case STRING:
				case STRUCT:
				case SUBDATE:
				case SUM:
				case TABLES:
				case TASK:
				case TASKS:
				case TEMPORARY:
				case TEXT:
				case THAN:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TRANSACTION:
				case TREE:
				case TRIGGERS:
				case TRUNCATE:
				case TYPE:
				case TYPES:
				case UNCOMMITTED:
				case UNLOCK:
				case USER:
				case VALUE:
				case VARCHAR:
				case VARIABLES:
				case VARIANT:
				case VERBOSE:
				case VERSION:
				case VIEW:
				case WARNINGS:
				case WEEK:
				case WORK:
				case YEAR:
				case STRING_LITERAL:
				case LEADING_STRING:
				case IDENTIFIER:
				case BACKQUOTED_IDENTIFIER:
					{
					setState(2798);
					((SetCharsetContext)_localctx).charsetName = identifierOrText();
					}
					break;
				case DEFAULT:
					{
					setState(2799);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 6:
				_localctx = new SetNamesContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(2802);
				match(SET);
				setState(2803);
				match(NAMES);
				setState(2804);
				match(EQ);
				setState(2805);
				expression();
				}
				break;
			case 7:
				_localctx = new SetTransactionContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(2806);
				match(SET);
				setState(2808);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GLOBAL || _la==LOCAL || _la==SESSION) {
					{
					setState(2807);
					_la = _input.LA(1);
					if ( !(_la==GLOBAL || _la==LOCAL || _la==SESSION) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2810);
				match(TRANSACTION);
				setState(2821);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,334,_ctx) ) {
				case 1:
					{
					setState(2811);
					transactionAccessMode();
					}
					break;
				case 2:
					{
					setState(2812);
					isolationLevel();
					}
					break;
				case 3:
					{
					setState(2813);
					transactionAccessMode();
					setState(2814);
					match(COMMA);
					setState(2815);
					isolationLevel();
					}
					break;
				case 4:
					{
					setState(2817);
					isolationLevel();
					setState(2818);
					match(COMMA);
					setState(2819);
					transactionAccessMode();
					}
					break;
				}
				}
				break;
			case 8:
				_localctx = new SetCollateContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(2823);
				match(SET);
				setState(2824);
				match(NAMES);
				setState(2827);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LEFT_BRACE:
				case RIGHT_BRACE:
				case ADDDATE:
				case AFTER:
				case AGG_STATE:
				case AGGREGATE:
				case ALIAS:
				case ANALYZED:
				case ARRAY:
				case ARRAY_RANGE:
				case AT:
				case AUTHORS:
				case AUTO_INCREMENT:
				case BACKENDS:
				case BACKUP:
				case BEGIN:
				case BELONG:
				case BIN:
				case BITAND:
				case BITMAP:
				case BITMAP_UNION:
				case BITOR:
				case BITXOR:
				case BLOB:
				case BOOLEAN:
				case BRIEF:
				case BROKER:
				case BUCKETS:
				case BUILD:
				case BUILTIN:
				case BULK:
				case CACHED:
				case CALL:
				case CATALOG:
				case CATALOGS:
				case CHAIN:
				case CHAR:
				case CHARSET:
				case CHECK:
				case CLUSTER:
				case CLUSTERS:
				case COLLATION:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPACT:
				case COMPLETE:
				case CONFIG:
				case CONNECTION:
				case CONNECTION_ID:
				case CONSISTENT:
				case CONSTRAINTS:
				case CONVERT:
				case COPY:
				case COUNT:
				case CREATION:
				case CRON:
				case CURRENT_CATALOG:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DATA:
				case DATE:
				case DATE_ADD:
				case DATE_CEIL:
				case DATE_DIFF:
				case DATE_FLOOR:
				case DATE_SUB:
				case DATEADD:
				case DATEDIFF:
				case DATETIME:
				case DATETIMEV2:
				case DATEV2:
				case DATETIMEV1:
				case DATEV1:
				case DAY:
				case DAYS_ADD:
				case DAYS_SUB:
				case DECIMAL:
				case DECIMALV2:
				case DECIMALV3:
				case DEFERRED:
				case DEMAND:
				case DIAGNOSE:
				case DISTINCTPC:
				case DISTINCTPCSA:
				case DO:
				case DORIS_INTERNAL_TABLE_ID:
				case DUAL:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTKEY:
				case ENCRYPTKEYS:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERRORS:
				case EVENTS:
				case EVERY:
				case EXCLUDE:
				case EXPIRED:
				case EXTERNAL:
				case FAILED_LOGIN_ATTEMPTS:
				case FAST:
				case FEATURE:
				case FIELDS:
				case FILE:
				case FILTER:
				case FIRST:
				case FORMAT:
				case FREE:
				case FRONTENDS:
				case FUNCTION:
				case GENERIC:
				case GLOBAL:
				case GRAPH:
				case GROUPING:
				case GROUPS:
				case HASH:
				case HDFS:
				case HELP:
				case HISTOGRAM:
				case HLL_UNION:
				case HOSTNAME:
				case HOUR:
				case HUB:
				case IDENTIFIED:
				case IGNORE:
				case IMMEDIATE:
				case INCREMENTAL:
				case INDEXES:
				case INVERTED:
				case IPV4:
				case IPV6:
				case IS_NOT_NULL_PRED:
				case IS_NULL_PRED:
				case ISNULL:
				case ISOLATION:
				case JOB:
				case JOBS:
				case JSON:
				case JSONB:
				case LABEL:
				case LAST:
				case LDAP:
				case LDAP_ADMIN_PASSWORD:
				case LESS:
				case LEVEL:
				case LINES:
				case LINK:
				case LOCAL:
				case LOCALTIME:
				case LOCALTIMESTAMP:
				case LOCATION:
				case LOCK:
				case LOGICAL:
				case MANUAL:
				case MAP:
				case MATCH_ALL:
				case MATCH_ANY:
				case MATCH_ELEMENT_EQ:
				case MATCH_ELEMENT_GE:
				case MATCH_ELEMENT_GT:
				case MATCH_ELEMENT_LE:
				case MATCH_ELEMENT_LT:
				case MATCH_PHRASE:
				case MATCH_PHRASE_EDGE:
				case MATCH_PHRASE_PREFIX:
				case MATCH_REGEXP:
				case MATERIALIZED:
				case MAX:
				case MEMO:
				case MERGE:
				case MIGRATE:
				case MIGRATIONS:
				case MIN:
				case MINUTE:
				case MODIFY:
				case MONTH:
				case MTMV:
				case NAME:
				case NAMES:
				case NEGATIVE:
				case NEVER:
				case NEXT:
				case NGRAM_BF:
				case NO:
				case NON_NULLABLE:
				case NULLS:
				case OF:
				case OFFSET:
				case ONLY:
				case OPEN:
				case OPTIMIZED:
				case PARAMETER:
				case PARSED:
				case PARTITIONS:
				case PASSWORD:
				case PASSWORD_EXPIRE:
				case PASSWORD_HISTORY:
				case PASSWORD_LOCK_TIME:
				case PASSWORD_REUSE:
				case PATH:
				case PAUSE:
				case PERCENT:
				case PERIOD:
				case PERMISSIVE:
				case PHYSICAL:
				case PLAN:
				case PROCESS:
				case PLUGIN:
				case PLUGINS:
				case POLICY:
				case PROC:
				case PROCESSLIST:
				case PROFILE:
				case PROPERTIES:
				case PROPERTY:
				case QUANTILE_STATE:
				case QUANTILE_UNION:
				case QUERY:
				case QUOTA:
				case RANDOM:
				case RECOVER:
				case RECYCLE:
				case REFRESH:
				case REPEATABLE:
				case REPLACE:
				case REPLACE_IF_NOT_NULL:
				case REPOSITORIES:
				case REPOSITORY:
				case RESOURCE:
				case RESOURCES:
				case RESTORE:
				case RESTRICTIVE:
				case RESUME:
				case RETURNS:
				case REWRITTEN:
				case RLIKE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case S3:
				case SAMPLE:
				case SCHEDULE:
				case SCHEDULER:
				case SCHEMA:
				case SECOND:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION:
				case SHAPE:
				case SKEW:
				case SNAPSHOT:
				case SONAME:
				case SPLIT:
				case START:
				case STARTS:
				case STATS:
				case STATUS:
				case STOP:
				case STORAGE:
				case STREAM:
				case STREAMING:
				case STRING:
				case STRUCT:
				case SUBDATE:
				case SUM:
				case TABLES:
				case TASK:
				case TASKS:
				case TEMPORARY:
				case TEXT:
				case THAN:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TRANSACTION:
				case TREE:
				case TRIGGERS:
				case TRUNCATE:
				case TYPE:
				case TYPES:
				case UNCOMMITTED:
				case UNLOCK:
				case USER:
				case VALUE:
				case VARCHAR:
				case VARIABLES:
				case VARIANT:
				case VERBOSE:
				case VERSION:
				case VIEW:
				case WARNINGS:
				case WEEK:
				case WORK:
				case YEAR:
				case STRING_LITERAL:
				case LEADING_STRING:
				case IDENTIFIER:
				case BACKQUOTED_IDENTIFIER:
					{
					setState(2825);
					((SetCollateContext)_localctx).charsetName = identifierOrText();
					}
					break;
				case DEFAULT:
					{
					setState(2826);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2832);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,336,_ctx) ) {
				case 1:
					{
					setState(2829);
					match(COLLATE);
					setState(2830);
					((SetCollateContext)_localctx).collateName = identifierOrText();
					}
					break;
				case 2:
					{
					setState(2831);
					match(DEFAULT);
					}
					break;
				}
				}
				break;
			case 9:
				_localctx = new SetPasswordContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(2834);
				match(SET);
				setState(2835);
				match(PASSWORD);
				setState(2838);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(2836);
					match(FOR);
					setState(2837);
					userIdentify();
					}
				}

				setState(2840);
				match(EQ);
				setState(2846);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STRING_LITERAL:
					{
					setState(2841);
					match(STRING_LITERAL);
					}
					break;
				case PASSWORD:
					{
					{
					setState(2842);
					match(PASSWORD);
					setState(2843);
					match(LEFT_PAREN);
					setState(2844);
					match(STRING_LITERAL);
					setState(2845);
					match(RIGHT_PAREN);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 10:
				_localctx = new SetLdapAdminPasswordContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(2848);
				match(SET);
				setState(2849);
				match(LDAP_ADMIN_PASSWORD);
				setState(2850);
				match(EQ);
				setState(2856);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STRING_LITERAL:
					{
					setState(2851);
					match(STRING_LITERAL);
					}
					break;
				case PASSWORD:
					{
					{
					setState(2852);
					match(PASSWORD);
					setState(2853);
					match(LEFT_PAREN);
					setState(2854);
					match(STRING_LITERAL);
					setState(2855);
					match(RIGHT_PAREN);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 11:
				_localctx = new UseDatabaseContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(2858);
				match(USE);
				setState(2862);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,340,_ctx) ) {
				case 1:
					{
					setState(2859);
					((UseDatabaseContext)_localctx).catalog = identifier();
					setState(2860);
					match(DOT);
					}
					break;
				}
				setState(2864);
				((UseDatabaseContext)_localctx).database = identifier();
				}
				break;
			case 12:
				_localctx = new UseCloudClusterContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(2865);
				match(USE);
				setState(2872);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & ((1L << (LEFT_BRACE - 188)) | (1L << (RIGHT_BRACE - 188)) | (1L << (ADDDATE - 188)) | (1L << (AFTER - 188)) | (1L << (AGG_STATE - 188)) | (1L << (AGGREGATE - 188)) | (1L << (ALIAS - 188)) | (1L << (ANALYZED - 188)) | (1L << (ARRAY - 188)) | (1L << (ARRAY_RANGE - 188)) | (1L << (AT - 188)) | (1L << (AUTHORS - 188)) | (1L << (AUTO_INCREMENT - 188)) | (1L << (BACKENDS - 188)) | (1L << (BACKUP - 188)) | (1L << (BEGIN - 188)) | (1L << (BELONG - 188)) | (1L << (BIN - 188)) | (1L << (BITAND - 188)) | (1L << (BITMAP - 188)) | (1L << (BITMAP_UNION - 188)) | (1L << (BITOR - 188)) | (1L << (BITXOR - 188)) | (1L << (BLOB - 188)) | (1L << (BOOLEAN - 188)) | (1L << (BRIEF - 188)) | (1L << (BROKER - 188)) | (1L << (BUCKETS - 188)) | (1L << (BUILD - 188)) | (1L << (BUILTIN - 188)) | (1L << (BULK - 188)) | (1L << (CACHED - 188)) | (1L << (CALL - 188)) | (1L << (CATALOG - 188)) | (1L << (CATALOGS - 188)) | (1L << (CHAIN - 188)) | (1L << (CHAR - 188)) | (1L << (CHARSET - 188)) | (1L << (CHECK - 188)) | (1L << (CLUSTER - 188)) | (1L << (CLUSTERS - 188)))) != 0) || ((((_la - 253)) & ~0x3f) == 0 && ((1L << (_la - 253)) & ((1L << (COLLATION - 253)) | (1L << (COLLECT - 253)) | (1L << (COLUMNS - 253)) | (1L << (COMMENT - 253)) | (1L << (COMMIT - 253)) | (1L << (COMMITTED - 253)) | (1L << (COMPACT - 253)) | (1L << (COMPLETE - 253)) | (1L << (CONFIG - 253)) | (1L << (CONNECTION - 253)) | (1L << (CONNECTION_ID - 253)) | (1L << (CONSISTENT - 253)) | (1L << (CONSTRAINTS - 253)) | (1L << (CONVERT - 253)) | (1L << (COPY - 253)) | (1L << (COUNT - 253)) | (1L << (CREATION - 253)) | (1L << (CRON - 253)) | (1L << (CURRENT_CATALOG - 253)) | (1L << (CURRENT_DATE - 253)) | (1L << (CURRENT_TIME - 253)) | (1L << (CURRENT_TIMESTAMP - 253)) | (1L << (CURRENT_USER - 253)) | (1L << (DATA - 253)) | (1L << (DATE - 253)) | (1L << (DATE_ADD - 253)) | (1L << (DATE_CEIL - 253)) | (1L << (DATE_DIFF - 253)) | (1L << (DATE_FLOOR - 253)) | (1L << (DATE_SUB - 253)) | (1L << (DATEADD - 253)) | (1L << (DATEDIFF - 253)) | (1L << (DATETIME - 253)) | (1L << (DATETIMEV2 - 253)) | (1L << (DATEV2 - 253)) | (1L << (DATETIMEV1 - 253)) | (1L << (DATEV1 - 253)) | (1L << (DAY - 253)) | (1L << (DAYS_ADD - 253)) | (1L << (DAYS_SUB - 253)) | (1L << (DECIMAL - 253)) | (1L << (DECIMALV2 - 253)) | (1L << (DECIMALV3 - 253)) | (1L << (DEFERRED - 253)) | (1L << (DEMAND - 253)) | (1L << (DIAGNOSE - 253)) | (1L << (DISTINCTPC - 253)) | (1L << (DISTINCTPCSA - 253)))) != 0) || ((((_la - 319)) & ~0x3f) == 0 && ((1L << (_la - 319)) & ((1L << (DO - 319)) | (1L << (DORIS_INTERNAL_TABLE_ID - 319)) | (1L << (DUAL - 319)) | (1L << (DYNAMIC - 319)) | (1L << (ENABLE - 319)) | (1L << (ENCRYPTKEY - 319)) | (1L << (ENCRYPTKEYS - 319)) | (1L << (END - 319)) | (1L << (ENDS - 319)) | (1L << (ENGINE - 319)) | (1L << (ENGINES - 319)) | (1L << (ERRORS - 319)) | (1L << (EVENTS - 319)) | (1L << (EVERY - 319)) | (1L << (EXCLUDE - 319)) | (1L << (EXPIRED - 319)) | (1L << (EXTERNAL - 319)) | (1L << (FAILED_LOGIN_ATTEMPTS - 319)) | (1L << (FAST - 319)) | (1L << (FEATURE - 319)) | (1L << (FIELDS - 319)) | (1L << (FILE - 319)) | (1L << (FILTER - 319)) | (1L << (FIRST - 319)) | (1L << (FORMAT - 319)) | (1L << (FREE - 319)) | (1L << (FRONTENDS - 319)) | (1L << (FUNCTION - 319)) | (1L << (GENERIC - 319)) | (1L << (GLOBAL - 319)) | (1L << (GRAPH - 319)) | (1L << (GROUPING - 319)) | (1L << (GROUPS - 319)) | (1L << (HASH - 319)) | (1L << (HDFS - 319)) | (1L << (HELP - 319)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (HISTOGRAM - 383)) | (1L << (HLL_UNION - 383)) | (1L << (HOSTNAME - 383)) | (1L << (HOUR - 383)) | (1L << (HUB - 383)) | (1L << (IDENTIFIED - 383)) | (1L << (IGNORE - 383)) | (1L << (IMMEDIATE - 383)) | (1L << (INCREMENTAL - 383)) | (1L << (INDEXES - 383)) | (1L << (INVERTED - 383)) | (1L << (IPV4 - 383)) | (1L << (IPV6 - 383)) | (1L << (IS_NOT_NULL_PRED - 383)) | (1L << (IS_NULL_PRED - 383)) | (1L << (ISNULL - 383)) | (1L << (ISOLATION - 383)) | (1L << (JOB - 383)) | (1L << (JOBS - 383)) | (1L << (JSON - 383)) | (1L << (JSONB - 383)) | (1L << (LABEL - 383)) | (1L << (LAST - 383)) | (1L << (LDAP - 383)) | (1L << (LDAP_ADMIN_PASSWORD - 383)) | (1L << (LESS - 383)) | (1L << (LEVEL - 383)) | (1L << (LINES - 383)) | (1L << (LINK - 383)) | (1L << (LOCAL - 383)) | (1L << (LOCALTIME - 383)) | (1L << (LOCALTIMESTAMP - 383)) | (1L << (LOCATION - 383)) | (1L << (LOCK - 383)) | (1L << (LOGICAL - 383)) | (1L << (MANUAL - 383)) | (1L << (MAP - 383)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (MATCH_ALL - 448)) | (1L << (MATCH_ANY - 448)) | (1L << (MATCH_ELEMENT_EQ - 448)) | (1L << (MATCH_ELEMENT_GE - 448)) | (1L << (MATCH_ELEMENT_GT - 448)) | (1L << (MATCH_ELEMENT_LE - 448)) | (1L << (MATCH_ELEMENT_LT - 448)) | (1L << (MATCH_PHRASE - 448)) | (1L << (MATCH_PHRASE_EDGE - 448)) | (1L << (MATCH_PHRASE_PREFIX - 448)) | (1L << (MATCH_REGEXP - 448)) | (1L << (MATERIALIZED - 448)) | (1L << (MAX - 448)) | (1L << (MEMO - 448)) | (1L << (MERGE - 448)) | (1L << (MIGRATE - 448)) | (1L << (MIGRATIONS - 448)) | (1L << (MIN - 448)) | (1L << (MINUTE - 448)) | (1L << (MODIFY - 448)) | (1L << (MONTH - 448)) | (1L << (MTMV - 448)) | (1L << (NAME - 448)) | (1L << (NAMES - 448)) | (1L << (NEGATIVE - 448)) | (1L << (NEVER - 448)) | (1L << (NEXT - 448)) | (1L << (NGRAM_BF - 448)) | (1L << (NO - 448)) | (1L << (NON_NULLABLE - 448)) | (1L << (NULLS - 448)) | (1L << (OF - 448)) | (1L << (OFFSET - 448)) | (1L << (ONLY - 448)) | (1L << (OPEN - 448)) | (1L << (OPTIMIZED - 448)) | (1L << (PARAMETER - 448)) | (1L << (PARSED - 448)) | (1L << (PARTITIONS - 448)) | (1L << (PASSWORD - 448)) | (1L << (PASSWORD_EXPIRE - 448)) | (1L << (PASSWORD_HISTORY - 448)) | (1L << (PASSWORD_LOCK_TIME - 448)) | (1L << (PASSWORD_REUSE - 448)) | (1L << (PATH - 448)) | (1L << (PAUSE - 448)) | (1L << (PERCENT - 448)) | (1L << (PERIOD - 448)) | (1L << (PERMISSIVE - 448)) | (1L << (PHYSICAL - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PLAN - 512)) | (1L << (PROCESS - 512)) | (1L << (PLUGIN - 512)) | (1L << (PLUGINS - 512)) | (1L << (POLICY - 512)) | (1L << (PROC - 512)) | (1L << (PROCESSLIST - 512)) | (1L << (PROFILE - 512)) | (1L << (PROPERTIES - 512)) | (1L << (PROPERTY - 512)) | (1L << (QUANTILE_STATE - 512)) | (1L << (QUANTILE_UNION - 512)) | (1L << (QUERY - 512)) | (1L << (QUOTA - 512)) | (1L << (RANDOM - 512)) | (1L << (RECOVER - 512)) | (1L << (RECYCLE - 512)) | (1L << (REFRESH - 512)) | (1L << (REPEATABLE - 512)) | (1L << (REPLACE - 512)) | (1L << (REPLACE_IF_NOT_NULL - 512)) | (1L << (REPOSITORIES - 512)) | (1L << (REPOSITORY - 512)) | (1L << (RESOURCE - 512)) | (1L << (RESOURCES - 512)) | (1L << (RESTORE - 512)) | (1L << (RESTRICTIVE - 512)) | (1L << (RESUME - 512)) | (1L << (RETURNS - 512)) | (1L << (REWRITTEN - 512)) | (1L << (RLIKE - 512)) | (1L << (ROLLBACK - 512)) | (1L << (ROLLUP - 512)) | (1L << (ROUTINE - 512)) | (1L << (S3 - 512)) | (1L << (SAMPLE - 512)) | (1L << (SCHEDULE - 512)) | (1L << (SCHEDULER - 512)) | (1L << (SCHEMA - 512)) | (1L << (SECOND - 512)) | (1L << (SEQUENCE - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (SERIALIZABLE - 576)) | (1L << (SESSION - 576)) | (1L << (SHAPE - 576)) | (1L << (SKEW - 576)) | (1L << (SNAPSHOT - 576)) | (1L << (SONAME - 576)) | (1L << (SPLIT - 576)) | (1L << (START - 576)) | (1L << (STARTS - 576)) | (1L << (STATS - 576)) | (1L << (STATUS - 576)) | (1L << (STOP - 576)) | (1L << (STORAGE - 576)) | (1L << (STREAM - 576)) | (1L << (STREAMING - 576)) | (1L << (STRING - 576)) | (1L << (STRUCT - 576)) | (1L << (SUBDATE - 576)) | (1L << (SUM - 576)) | (1L << (TABLES - 576)) | (1L << (TASK - 576)) | (1L << (TASKS - 576)) | (1L << (TEMPORARY - 576)) | (1L << (TEXT - 576)) | (1L << (THAN - 576)) | (1L << (TIME - 576)) | (1L << (TIMESTAMP - 576)) | (1L << (TIMESTAMPADD - 576)) | (1L << (TIMESTAMPDIFF - 576)) | (1L << (TRANSACTION - 576)) | (1L << (TREE - 576)) | (1L << (TRIGGERS - 576)) | (1L << (TRUNCATE - 576)) | (1L << (TYPE - 576)) | (1L << (TYPES - 576)) | (1L << (UNCOMMITTED - 576)) | (1L << (UNLOCK - 576)))) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & ((1L << (USER - 642)) | (1L << (VALUE - 642)) | (1L << (VARCHAR - 642)) | (1L << (VARIABLES - 642)) | (1L << (VARIANT - 642)) | (1L << (VERBOSE - 642)) | (1L << (VERSION - 642)) | (1L << (VIEW - 642)) | (1L << (WARNINGS - 642)) | (1L << (WEEK - 642)) | (1L << (WORK - 642)) | (1L << (YEAR - 642)) | (1L << (IDENTIFIER - 642)) | (1L << (BACKQUOTED_IDENTIFIER - 642)))) != 0)) {
					{
					setState(2869);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,341,_ctx) ) {
					case 1:
						{
						setState(2866);
						((UseCloudClusterContext)_localctx).catalog = identifier();
						setState(2867);
						match(DOT);
						}
						break;
					}
					setState(2871);
					((UseCloudClusterContext)_localctx).database = identifier();
					}
				}

				setState(2874);
				match(ATSIGN);
				setState(2875);
				((UseCloudClusterContext)_localctx).cluster = identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableContext extends ParserRuleContext {
		public VariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable; }
	 
		public VariableContext() { }
		public void copyFrom(VariableContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SetUserVariableContext extends VariableContext {
		public TerminalNode ATSIGN() { return getToken(PLParser.ATSIGN, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode EQ() { return getToken(PLParser.EQ, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public SetUserVariableContext(VariableContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterSetUserVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitSetUserVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitSetUserVariable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetSystemVariableContext extends VariableContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode EQ() { return getToken(PLParser.EQ, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PLParser.DEFAULT, 0); }
		public List<TerminalNode> ATSIGN() { return getTokens(PLParser.ATSIGN); }
		public TerminalNode ATSIGN(int i) {
			return getToken(PLParser.ATSIGN, i);
		}
		public TerminalNode GLOBAL() { return getToken(PLParser.GLOBAL, 0); }
		public TerminalNode LOCAL() { return getToken(PLParser.LOCAL, 0); }
		public TerminalNode SESSION() { return getToken(PLParser.SESSION, 0); }
		public SetSystemVariableContext(VariableContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterSetSystemVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitSetSystemVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitSetSystemVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableContext variable() throws RecognitionException {
		VariableContext _localctx = new VariableContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_variable);
		int _la;
		try {
			setState(2896);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,347,_ctx) ) {
			case 1:
				_localctx = new SetSystemVariableContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2883);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ATSIGN) {
					{
					setState(2878);
					match(ATSIGN);
					setState(2879);
					match(ATSIGN);
					setState(2881);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,344,_ctx) ) {
					case 1:
						{
						setState(2880);
						_la = _input.LA(1);
						if ( !(_la==GLOBAL || _la==LOCAL || _la==SESSION) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					}
					}
				}

				setState(2885);
				identifier();
				setState(2886);
				match(EQ);
				setState(2889);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LEFT_PAREN:
				case LEFT_BRACKET:
				case LEFT_BRACE:
				case RIGHT_BRACE:
				case ADD:
				case ADDDATE:
				case AFTER:
				case AGG_STATE:
				case AGGREGATE:
				case ALIAS:
				case ANALYZED:
				case ARRAY:
				case ARRAY_RANGE:
				case AT:
				case AUTHORS:
				case AUTO_INCREMENT:
				case BACKENDS:
				case BACKUP:
				case BEGIN:
				case BELONG:
				case BIN:
				case BINARY:
				case BITAND:
				case BITMAP:
				case BITMAP_UNION:
				case BITOR:
				case BITXOR:
				case BLOB:
				case BOOLEAN:
				case BRIEF:
				case BROKER:
				case BUCKETS:
				case BUILD:
				case BUILTIN:
				case BULK:
				case CACHED:
				case CALL:
				case CASE:
				case CAST:
				case CATALOG:
				case CATALOGS:
				case CHAIN:
				case CHAR:
				case CHARSET:
				case CHECK:
				case CLUSTER:
				case CLUSTERS:
				case COLLATION:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPACT:
				case COMPLETE:
				case CONFIG:
				case CONNECTION:
				case CONNECTION_ID:
				case CONSISTENT:
				case CONSTRAINTS:
				case CONVERT:
				case COPY:
				case COUNT:
				case CREATION:
				case CRON:
				case CURRENT_CATALOG:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DATA:
				case DATABASE:
				case DATE:
				case DATE_ADD:
				case DATE_CEIL:
				case DATE_DIFF:
				case DATE_FLOOR:
				case DATE_SUB:
				case DATEADD:
				case DATEDIFF:
				case DATETIME:
				case DATETIMEV2:
				case DATEV2:
				case DATETIMEV1:
				case DATEV1:
				case DAY:
				case DAYS_ADD:
				case DAYS_SUB:
				case DECIMAL:
				case DECIMALV2:
				case DECIMALV3:
				case DEFERRED:
				case DEMAND:
				case DIAGNOSE:
				case DISTINCTPC:
				case DISTINCTPCSA:
				case DO:
				case DORIS_INTERNAL_TABLE_ID:
				case DUAL:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTKEY:
				case ENCRYPTKEYS:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERRORS:
				case EVENTS:
				case EVERY:
				case EXCLUDE:
				case EXISTS:
				case EXPIRED:
				case EXTERNAL:
				case EXTRACT:
				case FAILED_LOGIN_ATTEMPTS:
				case FALSE:
				case FAST:
				case FEATURE:
				case FIELDS:
				case FILE:
				case FILTER:
				case FIRST:
				case FORMAT:
				case FREE:
				case FRONTENDS:
				case FUNCTION:
				case GENERIC:
				case GLOBAL:
				case GRAPH:
				case GROUPING:
				case GROUPS:
				case HASH:
				case HDFS:
				case HELP:
				case HISTOGRAM:
				case HLL_UNION:
				case HOSTNAME:
				case HOUR:
				case HUB:
				case IDENTIFIED:
				case IF:
				case IGNORE:
				case IMMEDIATE:
				case INCREMENTAL:
				case INDEXES:
				case INTERVAL:
				case INVERTED:
				case IPV4:
				case IPV6:
				case IS_NOT_NULL_PRED:
				case IS_NULL_PRED:
				case ISNULL:
				case ISOLATION:
				case JOB:
				case JOBS:
				case JSON:
				case JSONB:
				case KEY:
				case LABEL:
				case LAST:
				case LDAP:
				case LDAP_ADMIN_PASSWORD:
				case LEFT:
				case LESS:
				case LEVEL:
				case LIKE:
				case LINES:
				case LINK:
				case LOCAL:
				case LOCALTIME:
				case LOCALTIMESTAMP:
				case LOCATION:
				case LOCK:
				case LOGICAL:
				case MANUAL:
				case MAP:
				case MATCH_ALL:
				case MATCH_ANY:
				case MATCH_ELEMENT_EQ:
				case MATCH_ELEMENT_GE:
				case MATCH_ELEMENT_GT:
				case MATCH_ELEMENT_LE:
				case MATCH_ELEMENT_LT:
				case MATCH_PHRASE:
				case MATCH_PHRASE_EDGE:
				case MATCH_PHRASE_PREFIX:
				case MATCH_REGEXP:
				case MATERIALIZED:
				case MAX:
				case MEMO:
				case MERGE:
				case MIGRATE:
				case MIGRATIONS:
				case MIN:
				case MINUTE:
				case MODIFY:
				case MONTH:
				case MTMV:
				case NAME:
				case NAMES:
				case NEGATIVE:
				case NEVER:
				case NEXT:
				case NGRAM_BF:
				case NO:
				case NON_NULLABLE:
				case NOT:
				case NULL:
				case NULLS:
				case OF:
				case OFFSET:
				case ONLY:
				case OPEN:
				case OPTIMIZED:
				case PARAMETER:
				case PARSED:
				case PARTITIONS:
				case PASSWORD:
				case PASSWORD_EXPIRE:
				case PASSWORD_HISTORY:
				case PASSWORD_LOCK_TIME:
				case PASSWORD_REUSE:
				case PATH:
				case PAUSE:
				case PERCENT:
				case PERIOD:
				case PERMISSIVE:
				case PHYSICAL:
				case PLAN:
				case PROCESS:
				case PLUGIN:
				case PLUGINS:
				case POLICY:
				case PROC:
				case PROCESSLIST:
				case PROFILE:
				case PROPERTIES:
				case PROPERTY:
				case QUANTILE_STATE:
				case QUANTILE_UNION:
				case QUERY:
				case QUOTA:
				case RANDOM:
				case RECOVER:
				case RECYCLE:
				case REFRESH:
				case REGEXP:
				case REPEATABLE:
				case REPLACE:
				case REPLACE_IF_NOT_NULL:
				case REPOSITORIES:
				case REPOSITORY:
				case RESOURCE:
				case RESOURCES:
				case RESTORE:
				case RESTRICTIVE:
				case RESUME:
				case RETURNS:
				case REWRITTEN:
				case RIGHT:
				case RLIKE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case S3:
				case SAMPLE:
				case SCHEDULE:
				case SCHEDULER:
				case SCHEMA:
				case SECOND:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION:
				case SHAPE:
				case SKEW:
				case SNAPSHOT:
				case SONAME:
				case SPLIT:
				case START:
				case STARTS:
				case STATS:
				case STATUS:
				case STOP:
				case STORAGE:
				case STREAM:
				case STREAMING:
				case STRING:
				case STRUCT:
				case SUBDATE:
				case SUM:
				case TABLES:
				case TASK:
				case TASKS:
				case TEMPORARY:
				case TEXT:
				case THAN:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TRANSACTION:
				case TREE:
				case TRIGGERS:
				case TRIM:
				case TRUE:
				case TRUNCATE:
				case TYPE:
				case TYPES:
				case UNCOMMITTED:
				case UNLOCK:
				case USER:
				case VALUE:
				case VARCHAR:
				case VARIABLES:
				case VARIANT:
				case VERBOSE:
				case VERSION:
				case VIEW:
				case WARNINGS:
				case WEEK:
				case WORK:
				case YEAR:
				case PLUS:
				case SUBTRACT:
				case ASTERISK:
				case TILDE:
				case LOGICALNOT:
				case ATSIGN:
				case DOUBLEATSIGN:
				case STRING_LITERAL:
				case INTEGER_VALUE:
				case EXPONENT_VALUE:
				case DECIMAL_VALUE:
				case IDENTIFIER:
				case BACKQUOTED_IDENTIFIER:
					{
					setState(2887);
					expression();
					}
					break;
				case DEFAULT:
					{
					setState(2888);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				_localctx = new SetUserVariableContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2891);
				match(ATSIGN);
				setState(2892);
				identifier();
				setState(2893);
				match(EQ);
				setState(2894);
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionAccessModeContext extends ParserRuleContext {
		public TerminalNode READ() { return getToken(PLParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(PLParser.ONLY, 0); }
		public TerminalNode WRITE() { return getToken(PLParser.WRITE, 0); }
		public TransactionAccessModeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionAccessMode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterTransactionAccessMode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitTransactionAccessMode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitTransactionAccessMode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionAccessModeContext transactionAccessMode() throws RecognitionException {
		TransactionAccessModeContext _localctx = new TransactionAccessModeContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_transactionAccessMode);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2898);
			match(READ);
			setState(2899);
			_la = _input.LA(1);
			if ( !(_la==ONLY || _la==WRITE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IsolationLevelContext extends ParserRuleContext {
		public TerminalNode ISOLATION() { return getToken(PLParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(PLParser.LEVEL, 0); }
		public TerminalNode READ() { return getToken(PLParser.READ, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(PLParser.UNCOMMITTED, 0); }
		public TerminalNode COMMITTED() { return getToken(PLParser.COMMITTED, 0); }
		public TerminalNode REPEATABLE() { return getToken(PLParser.REPEATABLE, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(PLParser.SERIALIZABLE, 0); }
		public IsolationLevelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_isolationLevel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterIsolationLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitIsolationLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitIsolationLevel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IsolationLevelContext isolationLevel() throws RecognitionException {
		IsolationLevelContext _localctx = new IsolationLevelContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_isolationLevel);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2901);
			match(ISOLATION);
			setState(2902);
			match(LEVEL);
			setState(2910);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,348,_ctx) ) {
			case 1:
				{
				{
				setState(2903);
				match(READ);
				setState(2904);
				match(UNCOMMITTED);
				}
				}
				break;
			case 2:
				{
				{
				setState(2905);
				match(READ);
				setState(2906);
				match(COMMITTED);
				}
				}
				break;
			case 3:
				{
				{
				setState(2907);
				match(REPEATABLE);
				setState(2908);
				match(READ);
				}
				}
				break;
			case 4:
				{
				{
				setState(2909);
				match(SERIALIZABLE);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintContext extends ParserRuleContext {
		public IdentifierListContext slots;
		public MultipartIdentifierContext referenceTable;
		public IdentifierListContext referencedSlots;
		public TerminalNode PRIMARY() { return getToken(PLParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(PLParser.KEY, 0); }
		public List<IdentifierListContext> identifierList() {
			return getRuleContexts(IdentifierListContext.class);
		}
		public IdentifierListContext identifierList(int i) {
			return getRuleContext(IdentifierListContext.class,i);
		}
		public TerminalNode UNIQUE() { return getToken(PLParser.UNIQUE, 0); }
		public TerminalNode FOREIGN() { return getToken(PLParser.FOREIGN, 0); }
		public TerminalNode REFERENCES() { return getToken(PLParser.REFERENCES, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public ConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintContext constraint() throws RecognitionException {
		ConstraintContext _localctx = new ConstraintContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_constraint);
		try {
			setState(2924);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PRIMARY:
				enterOuterAlt(_localctx, 1);
				{
				setState(2912);
				match(PRIMARY);
				setState(2913);
				match(KEY);
				setState(2914);
				((ConstraintContext)_localctx).slots = identifierList();
				}
				break;
			case UNIQUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2915);
				match(UNIQUE);
				setState(2916);
				((ConstraintContext)_localctx).slots = identifierList();
				}
				break;
			case FOREIGN:
				enterOuterAlt(_localctx, 3);
				{
				setState(2917);
				match(FOREIGN);
				setState(2918);
				match(KEY);
				setState(2919);
				((ConstraintContext)_localctx).slots = identifierList();
				setState(2920);
				match(REFERENCES);
				setState(2921);
				((ConstraintContext)_localctx).referenceTable = multipartIdentifier();
				setState(2922);
				((ConstraintContext)_localctx).referencedSlots = identifierList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionSpecContext extends ParserRuleContext {
		public IdentifierListContext partitions;
		public ErrorCapturingIdentifierContext partition;
		public TerminalNode PARTITION() { return getToken(PLParser.PARTITION, 0); }
		public TerminalNode PARTITIONS() { return getToken(PLParser.PARTITIONS, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(PLParser.TEMPORARY, 0); }
		public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
			return getRuleContext(ErrorCapturingIdentifierContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public TerminalNode ASTERISK() { return getToken(PLParser.ASTERISK, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public PartitionSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterPartitionSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitPartitionSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitPartitionSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionSpecContext partitionSpec() throws RecognitionException {
		PartitionSpecContext _localctx = new PartitionSpecContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_partitionSpec);
		int _la;
		try {
			setState(2940);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,352,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2927);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(2926);
					match(TEMPORARY);
					}
				}

				setState(2929);
				_la = _input.LA(1);
				if ( !(_la==PARTITION || _la==PARTITIONS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2930);
				((PartitionSpecContext)_localctx).partitions = identifierList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2932);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(2931);
					match(TEMPORARY);
					}
				}

				setState(2934);
				match(PARTITION);
				setState(2935);
				((PartitionSpecContext)_localctx).partition = errorCapturingIdentifier();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2936);
				_la = _input.LA(1);
				if ( !(_la==PARTITION || _la==PARTITIONS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2937);
				match(LEFT_PAREN);
				setState(2938);
				match(ASTERISK);
				setState(2939);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionTableContext extends ParserRuleContext {
		public Token autoPartition;
		public IdentityOrFunctionListContext partitionList;
		public PartitionsDefContext partitions;
		public TerminalNode PARTITION() { return getToken(PLParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(PLParser.BY, 0); }
		public IdentityOrFunctionListContext identityOrFunctionList() {
			return getRuleContext(IdentityOrFunctionListContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public TerminalNode AUTO() { return getToken(PLParser.AUTO, 0); }
		public TerminalNode RANGE() { return getToken(PLParser.RANGE, 0); }
		public TerminalNode LIST() { return getToken(PLParser.LIST, 0); }
		public PartitionsDefContext partitionsDef() {
			return getRuleContext(PartitionsDefContext.class,0);
		}
		public PartitionTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterPartitionTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitPartitionTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitPartitionTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionTableContext partitionTable() throws RecognitionException {
		PartitionTableContext _localctx = new PartitionTableContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_partitionTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2943);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTO) {
				{
				setState(2942);
				((PartitionTableContext)_localctx).autoPartition = match(AUTO);
				}
			}

			setState(2945);
			match(PARTITION);
			setState(2946);
			match(BY);
			setState(2948);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIST || _la==RANGE) {
				{
				setState(2947);
				_la = _input.LA(1);
				if ( !(_la==LIST || _la==RANGE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2950);
			((PartitionTableContext)_localctx).partitionList = identityOrFunctionList();
			{
			setState(2951);
			match(LEFT_PAREN);
			setState(2953);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM || _la==PARTITION) {
				{
				setState(2952);
				((PartitionTableContext)_localctx).partitions = partitionsDef();
				}
			}

			setState(2955);
			match(RIGHT_PAREN);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentityOrFunctionListContext extends ParserRuleContext {
		public IdentityOrFunctionContext identityOrFunction;
		public List<IdentityOrFunctionContext> partitions = new ArrayList<IdentityOrFunctionContext>();
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public List<IdentityOrFunctionContext> identityOrFunction() {
			return getRuleContexts(IdentityOrFunctionContext.class);
		}
		public IdentityOrFunctionContext identityOrFunction(int i) {
			return getRuleContext(IdentityOrFunctionContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public IdentityOrFunctionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identityOrFunctionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterIdentityOrFunctionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitIdentityOrFunctionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitIdentityOrFunctionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentityOrFunctionListContext identityOrFunctionList() throws RecognitionException {
		IdentityOrFunctionListContext _localctx = new IdentityOrFunctionListContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_identityOrFunctionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2957);
			match(LEFT_PAREN);
			setState(2958);
			identityOrFunction();
			setState(2963);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2959);
				match(COMMA);
				setState(2960);
				((IdentityOrFunctionListContext)_localctx).identityOrFunction = identityOrFunction();
				((IdentityOrFunctionListContext)_localctx).partitions.add(((IdentityOrFunctionListContext)_localctx).identityOrFunction);
				}
				}
				setState(2965);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2966);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentityOrFunctionContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public FunctionCallExpressionContext functionCallExpression() {
			return getRuleContext(FunctionCallExpressionContext.class,0);
		}
		public IdentityOrFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identityOrFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterIdentityOrFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitIdentityOrFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitIdentityOrFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentityOrFunctionContext identityOrFunction() throws RecognitionException {
		IdentityOrFunctionContext _localctx = new IdentityOrFunctionContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_identityOrFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2970);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,357,_ctx) ) {
			case 1:
				{
				setState(2968);
				identifier();
				}
				break;
			case 2:
				{
				setState(2969);
				functionCallExpression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataDescContext extends ParserRuleContext {
		public Token STRING_LITERAL;
		public List<Token> filePaths = new ArrayList<Token>();
		public List<Token> filePath = new ArrayList<Token>();
		public MultipartIdentifierContext tableName;
		public IdentifierListContext partition;
		public Token comma;
		public Token separator;
		public IdentifierOrStringLiteralContext format;
		public IdentifierListContext columns;
		public ColFromPathContext columnsFromPath;
		public ColMappingListContext columnMapping;
		public PreFilterClauseContext preFilter;
		public WhereClauseContext where;
		public DeleteOnClauseContext deleteOn;
		public SequenceColClauseContext sequenceColumn;
		public TerminalNode DATA() { return getToken(PLParser.DATA, 0); }
		public TerminalNode INFILE() { return getToken(PLParser.INFILE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public TerminalNode INTO() { return getToken(PLParser.INTO, 0); }
		public List<TerminalNode> TABLE() { return getTokens(PLParser.TABLE); }
		public TerminalNode TABLE(int i) {
			return getToken(PLParser.TABLE, i);
		}
		public List<TerminalNode> STRING_LITERAL() { return getTokens(PLParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(PLParser.STRING_LITERAL, i);
		}
		public List<MultipartIdentifierContext> multipartIdentifier() {
			return getRuleContexts(MultipartIdentifierContext.class);
		}
		public MultipartIdentifierContext multipartIdentifier(int i) {
			return getRuleContext(MultipartIdentifierContext.class,i);
		}
		public MergeTypeContext mergeType() {
			return getRuleContext(MergeTypeContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public TerminalNode PARTITION() { return getToken(PLParser.PARTITION, 0); }
		public TerminalNode COLUMNS() { return getToken(PLParser.COLUMNS, 0); }
		public List<TerminalNode> TERMINATED() { return getTokens(PLParser.TERMINATED); }
		public TerminalNode TERMINATED(int i) {
			return getToken(PLParser.TERMINATED, i);
		}
		public List<TerminalNode> BY() { return getTokens(PLParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(PLParser.BY, i);
		}
		public TerminalNode LINES() { return getToken(PLParser.LINES, 0); }
		public TerminalNode FORMAT() { return getToken(PLParser.FORMAT, 0); }
		public TerminalNode AS() { return getToken(PLParser.AS, 0); }
		public PropertyClauseContext propertyClause() {
			return getRuleContext(PropertyClauseContext.class,0);
		}
		public List<IdentifierListContext> identifierList() {
			return getRuleContexts(IdentifierListContext.class);
		}
		public IdentifierListContext identifierList(int i) {
			return getRuleContext(IdentifierListContext.class,i);
		}
		public IdentifierOrStringLiteralContext identifierOrStringLiteral() {
			return getRuleContext(IdentifierOrStringLiteralContext.class,0);
		}
		public ColFromPathContext colFromPath() {
			return getRuleContext(ColFromPathContext.class,0);
		}
		public ColMappingListContext colMappingList() {
			return getRuleContext(ColMappingListContext.class,0);
		}
		public PreFilterClauseContext preFilterClause() {
			return getRuleContext(PreFilterClauseContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public DeleteOnClauseContext deleteOnClause() {
			return getRuleContext(DeleteOnClauseContext.class,0);
		}
		public SequenceColClauseContext sequenceColClause() {
			return getRuleContext(SequenceColClauseContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PLParser.WITH, 0); }
		public TerminalNode FROM() { return getToken(PLParser.FROM, 0); }
		public DataDescContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataDesc; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterDataDesc(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitDataDesc(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitDataDesc(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataDescContext dataDesc() throws RecognitionException {
		DataDescContext _localctx = new DataDescContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_dataDesc);
		int _la;
		try {
			setState(3067);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,380,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2976);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==APPEND || _la==DELETE || _la==MERGE || _la==WITH) {
					{
					setState(2973);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WITH) {
						{
						setState(2972);
						match(WITH);
						}
					}

					setState(2975);
					mergeType();
					}
				}

				setState(2978);
				match(DATA);
				setState(2979);
				match(INFILE);
				setState(2980);
				match(LEFT_PAREN);
				setState(2981);
				((DataDescContext)_localctx).STRING_LITERAL = match(STRING_LITERAL);
				((DataDescContext)_localctx).filePaths.add(((DataDescContext)_localctx).STRING_LITERAL);
				setState(2986);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2982);
					match(COMMA);
					setState(2983);
					((DataDescContext)_localctx).STRING_LITERAL = match(STRING_LITERAL);
					((DataDescContext)_localctx).filePath.add(((DataDescContext)_localctx).STRING_LITERAL);
					}
					}
					setState(2988);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2989);
				match(RIGHT_PAREN);
				setState(2990);
				match(INTO);
				setState(2991);
				match(TABLE);
				setState(2992);
				((DataDescContext)_localctx).tableName = multipartIdentifier();
				setState(2995);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(2993);
					match(PARTITION);
					setState(2994);
					((DataDescContext)_localctx).partition = identifierList();
					}
				}

				setState(3001);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,362,_ctx) ) {
				case 1:
					{
					setState(2997);
					match(COLUMNS);
					setState(2998);
					match(TERMINATED);
					setState(2999);
					match(BY);
					setState(3000);
					((DataDescContext)_localctx).comma = match(STRING_LITERAL);
					}
					break;
				}
				setState(3007);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINES) {
					{
					setState(3003);
					match(LINES);
					setState(3004);
					match(TERMINATED);
					setState(3005);
					match(BY);
					setState(3006);
					((DataDescContext)_localctx).separator = match(STRING_LITERAL);
					}
				}

				setState(3012);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FORMAT) {
					{
					setState(3009);
					match(FORMAT);
					setState(3010);
					match(AS);
					setState(3011);
					((DataDescContext)_localctx).format = identifierOrStringLiteral();
					}
				}

				setState(3015);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(3014);
					((DataDescContext)_localctx).columns = identifierList();
					}
				}

				setState(3018);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMNS) {
					{
					setState(3017);
					((DataDescContext)_localctx).columnsFromPath = colFromPath();
					}
				}

				setState(3021);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SET) {
					{
					setState(3020);
					((DataDescContext)_localctx).columnMapping = colMappingList();
					}
				}

				setState(3024);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRECEDING) {
					{
					setState(3023);
					((DataDescContext)_localctx).preFilter = preFilterClause();
					}
				}

				setState(3027);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(3026);
					((DataDescContext)_localctx).where = whereClause();
					}
				}

				setState(3030);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DELETE) {
					{
					setState(3029);
					((DataDescContext)_localctx).deleteOn = deleteOnClause();
					}
				}

				setState(3033);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(3032);
					((DataDescContext)_localctx).sequenceColumn = sequenceColClause();
					}
				}

				setState(3036);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROPERTIES) {
					{
					setState(3035);
					propertyClause();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3042);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==APPEND || _la==DELETE || _la==MERGE || _la==WITH) {
					{
					setState(3039);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WITH) {
						{
						setState(3038);
						match(WITH);
						}
					}

					setState(3041);
					mergeType();
					}
				}

				setState(3044);
				match(DATA);
				setState(3045);
				match(FROM);
				setState(3046);
				match(TABLE);
				setState(3047);
				((DataDescContext)_localctx).tableName = multipartIdentifier();
				setState(3048);
				match(INTO);
				setState(3049);
				match(TABLE);
				setState(3050);
				((DataDescContext)_localctx).tableName = multipartIdentifier();
				setState(3053);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(3051);
					match(PARTITION);
					setState(3052);
					((DataDescContext)_localctx).partition = identifierList();
					}
				}

				setState(3056);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SET) {
					{
					setState(3055);
					((DataDescContext)_localctx).columnMapping = colMappingList();
					}
				}

				setState(3059);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(3058);
					((DataDescContext)_localctx).where = whereClause();
					}
				}

				setState(3062);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DELETE) {
					{
					setState(3061);
					((DataDescContext)_localctx).deleteOn = deleteOnClause();
					}
				}

				setState(3065);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROPERTIES) {
					{
					setState(3064);
					propertyClause();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BuildModeContext extends ParserRuleContext {
		public TerminalNode BUILD() { return getToken(PLParser.BUILD, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PLParser.IMMEDIATE, 0); }
		public TerminalNode DEFERRED() { return getToken(PLParser.DEFERRED, 0); }
		public BuildModeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_buildMode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterBuildMode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitBuildMode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitBuildMode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BuildModeContext buildMode() throws RecognitionException {
		BuildModeContext _localctx = new BuildModeContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_buildMode);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3069);
			match(BUILD);
			setState(3070);
			_la = _input.LA(1);
			if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RefreshTriggerContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PLParser.ON, 0); }
		public TerminalNode MANUAL() { return getToken(PLParser.MANUAL, 0); }
		public TerminalNode SCHEDULE() { return getToken(PLParser.SCHEDULE, 0); }
		public RefreshScheduleContext refreshSchedule() {
			return getRuleContext(RefreshScheduleContext.class,0);
		}
		public RefreshTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_refreshTrigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterRefreshTrigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitRefreshTrigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitRefreshTrigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RefreshTriggerContext refreshTrigger() throws RecognitionException {
		RefreshTriggerContext _localctx = new RefreshTriggerContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_refreshTrigger);
		try {
			setState(3077);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,381,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3072);
				match(ON);
				setState(3073);
				match(MANUAL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3074);
				match(ON);
				setState(3075);
				match(SCHEDULE);
				setState(3076);
				refreshSchedule();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RefreshScheduleContext extends ParserRuleContext {
		public IdentifierContext refreshUnit;
		public TerminalNode EVERY() { return getToken(PLParser.EVERY, 0); }
		public TerminalNode INTEGER_VALUE() { return getToken(PLParser.INTEGER_VALUE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode STARTS() { return getToken(PLParser.STARTS, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(PLParser.STRING_LITERAL, 0); }
		public RefreshScheduleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_refreshSchedule; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterRefreshSchedule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitRefreshSchedule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitRefreshSchedule(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RefreshScheduleContext refreshSchedule() throws RecognitionException {
		RefreshScheduleContext _localctx = new RefreshScheduleContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_refreshSchedule);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3079);
			match(EVERY);
			setState(3080);
			match(INTEGER_VALUE);
			setState(3081);
			((RefreshScheduleContext)_localctx).refreshUnit = identifier();
			setState(3084);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,382,_ctx) ) {
			case 1:
				{
				setState(3082);
				match(STARTS);
				setState(3083);
				match(STRING_LITERAL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RefreshMethodContext extends ParserRuleContext {
		public TerminalNode COMPLETE() { return getToken(PLParser.COMPLETE, 0); }
		public TerminalNode AUTO() { return getToken(PLParser.AUTO, 0); }
		public RefreshMethodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_refreshMethod; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterRefreshMethod(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitRefreshMethod(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitRefreshMethod(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RefreshMethodContext refreshMethod() throws RecognitionException {
		RefreshMethodContext _localctx = new RefreshMethodContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_refreshMethod);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3086);
			_la = _input.LA(1);
			if ( !(_la==AUTO || _la==COMPLETE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierOrStringLiteralContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(PLParser.STRING_LITERAL, 0); }
		public IdentifierOrStringLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifierOrStringLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterIdentifierOrStringLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitIdentifierOrStringLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitIdentifierOrStringLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierOrStringLiteralContext identifierOrStringLiteral() throws RecognitionException {
		IdentifierOrStringLiteralContext _localctx = new IdentifierOrStringLiteralContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_identifierOrStringLiteral);
		try {
			setState(3090);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT_BRACE:
			case RIGHT_BRACE:
			case ADDDATE:
			case AFTER:
			case AGG_STATE:
			case AGGREGATE:
			case ALIAS:
			case ANALYZED:
			case ARRAY:
			case ARRAY_RANGE:
			case AT:
			case AUTHORS:
			case AUTO_INCREMENT:
			case BACKENDS:
			case BACKUP:
			case BEGIN:
			case BELONG:
			case BIN:
			case BITAND:
			case BITMAP:
			case BITMAP_UNION:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BOOLEAN:
			case BRIEF:
			case BROKER:
			case BUCKETS:
			case BUILD:
			case BUILTIN:
			case BULK:
			case CACHED:
			case CALL:
			case CATALOG:
			case CATALOGS:
			case CHAIN:
			case CHAR:
			case CHARSET:
			case CHECK:
			case CLUSTER:
			case CLUSTERS:
			case COLLATION:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPACT:
			case COMPLETE:
			case CONFIG:
			case CONNECTION:
			case CONNECTION_ID:
			case CONSISTENT:
			case CONSTRAINTS:
			case CONVERT:
			case COPY:
			case COUNT:
			case CREATION:
			case CRON:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DATA:
			case DATE:
			case DATE_ADD:
			case DATE_CEIL:
			case DATE_DIFF:
			case DATE_FLOOR:
			case DATE_SUB:
			case DATEADD:
			case DATEDIFF:
			case DATETIME:
			case DATETIMEV2:
			case DATEV2:
			case DATETIMEV1:
			case DATEV1:
			case DAY:
			case DAYS_ADD:
			case DAYS_SUB:
			case DECIMAL:
			case DECIMALV2:
			case DECIMALV3:
			case DEFERRED:
			case DEMAND:
			case DIAGNOSE:
			case DISTINCTPC:
			case DISTINCTPCSA:
			case DO:
			case DORIS_INTERNAL_TABLE_ID:
			case DUAL:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTKEY:
			case ENCRYPTKEYS:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERRORS:
			case EVENTS:
			case EVERY:
			case EXCLUDE:
			case EXPIRED:
			case EXTERNAL:
			case FAILED_LOGIN_ATTEMPTS:
			case FAST:
			case FEATURE:
			case FIELDS:
			case FILE:
			case FILTER:
			case FIRST:
			case FORMAT:
			case FREE:
			case FRONTENDS:
			case FUNCTION:
			case GENERIC:
			case GLOBAL:
			case GRAPH:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HDFS:
			case HELP:
			case HISTOGRAM:
			case HLL_UNION:
			case HOSTNAME:
			case HOUR:
			case HUB:
			case IDENTIFIED:
			case IGNORE:
			case IMMEDIATE:
			case INCREMENTAL:
			case INDEXES:
			case INVERTED:
			case IPV4:
			case IPV6:
			case IS_NOT_NULL_PRED:
			case IS_NULL_PRED:
			case ISNULL:
			case ISOLATION:
			case JOB:
			case JOBS:
			case JSON:
			case JSONB:
			case LABEL:
			case LAST:
			case LDAP:
			case LDAP_ADMIN_PASSWORD:
			case LESS:
			case LEVEL:
			case LINES:
			case LINK:
			case LOCAL:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case LOCATION:
			case LOCK:
			case LOGICAL:
			case MANUAL:
			case MAP:
			case MATCH_ALL:
			case MATCH_ANY:
			case MATCH_ELEMENT_EQ:
			case MATCH_ELEMENT_GE:
			case MATCH_ELEMENT_GT:
			case MATCH_ELEMENT_LE:
			case MATCH_ELEMENT_LT:
			case MATCH_PHRASE:
			case MATCH_PHRASE_EDGE:
			case MATCH_PHRASE_PREFIX:
			case MATCH_REGEXP:
			case MATERIALIZED:
			case MAX:
			case MEMO:
			case MERGE:
			case MIGRATE:
			case MIGRATIONS:
			case MIN:
			case MINUTE:
			case MODIFY:
			case MONTH:
			case MTMV:
			case NAME:
			case NAMES:
			case NEGATIVE:
			case NEVER:
			case NEXT:
			case NGRAM_BF:
			case NO:
			case NON_NULLABLE:
			case NULLS:
			case OF:
			case OFFSET:
			case ONLY:
			case OPEN:
			case OPTIMIZED:
			case PARAMETER:
			case PARSED:
			case PARTITIONS:
			case PASSWORD:
			case PASSWORD_EXPIRE:
			case PASSWORD_HISTORY:
			case PASSWORD_LOCK_TIME:
			case PASSWORD_REUSE:
			case PATH:
			case PAUSE:
			case PERCENT:
			case PERIOD:
			case PERMISSIVE:
			case PHYSICAL:
			case PLAN:
			case PROCESS:
			case PLUGIN:
			case PLUGINS:
			case POLICY:
			case PROC:
			case PROCESSLIST:
			case PROFILE:
			case PROPERTIES:
			case PROPERTY:
			case QUANTILE_STATE:
			case QUANTILE_UNION:
			case QUERY:
			case QUOTA:
			case RANDOM:
			case RECOVER:
			case RECYCLE:
			case REFRESH:
			case REPEATABLE:
			case REPLACE:
			case REPLACE_IF_NOT_NULL:
			case REPOSITORIES:
			case REPOSITORY:
			case RESOURCE:
			case RESOURCES:
			case RESTORE:
			case RESTRICTIVE:
			case RESUME:
			case RETURNS:
			case REWRITTEN:
			case RLIKE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case S3:
			case SAMPLE:
			case SCHEDULE:
			case SCHEDULER:
			case SCHEMA:
			case SECOND:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION:
			case SHAPE:
			case SKEW:
			case SNAPSHOT:
			case SONAME:
			case SPLIT:
			case START:
			case STARTS:
			case STATS:
			case STATUS:
			case STOP:
			case STORAGE:
			case STREAM:
			case STREAMING:
			case STRING:
			case STRUCT:
			case SUBDATE:
			case SUM:
			case TABLES:
			case TASK:
			case TASKS:
			case TEMPORARY:
			case TEXT:
			case THAN:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TRANSACTION:
			case TREE:
			case TRIGGERS:
			case TRUNCATE:
			case TYPE:
			case TYPES:
			case UNCOMMITTED:
			case UNLOCK:
			case USER:
			case VALUE:
			case VARCHAR:
			case VARIABLES:
			case VARIANT:
			case VERBOSE:
			case VERSION:
			case VIEW:
			case WARNINGS:
			case WEEK:
			case WORK:
			case YEAR:
			case IDENTIFIER:
			case BACKQUOTED_IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(3088);
				identifier();
				}
				break;
			case STRING_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3089);
				match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierOrTextContext extends ParserRuleContext {
		public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
			return getRuleContext(ErrorCapturingIdentifierContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(PLParser.STRING_LITERAL, 0); }
		public TerminalNode LEADING_STRING() { return getToken(PLParser.LEADING_STRING, 0); }
		public IdentifierOrTextContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifierOrText; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterIdentifierOrText(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitIdentifierOrText(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitIdentifierOrText(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierOrTextContext identifierOrText() throws RecognitionException {
		IdentifierOrTextContext _localctx = new IdentifierOrTextContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_identifierOrText);
		try {
			setState(3095);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT_BRACE:
			case RIGHT_BRACE:
			case ADDDATE:
			case AFTER:
			case AGG_STATE:
			case AGGREGATE:
			case ALIAS:
			case ANALYZED:
			case ARRAY:
			case ARRAY_RANGE:
			case AT:
			case AUTHORS:
			case AUTO_INCREMENT:
			case BACKENDS:
			case BACKUP:
			case BEGIN:
			case BELONG:
			case BIN:
			case BITAND:
			case BITMAP:
			case BITMAP_UNION:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BOOLEAN:
			case BRIEF:
			case BROKER:
			case BUCKETS:
			case BUILD:
			case BUILTIN:
			case BULK:
			case CACHED:
			case CALL:
			case CATALOG:
			case CATALOGS:
			case CHAIN:
			case CHAR:
			case CHARSET:
			case CHECK:
			case CLUSTER:
			case CLUSTERS:
			case COLLATION:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPACT:
			case COMPLETE:
			case CONFIG:
			case CONNECTION:
			case CONNECTION_ID:
			case CONSISTENT:
			case CONSTRAINTS:
			case CONVERT:
			case COPY:
			case COUNT:
			case CREATION:
			case CRON:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DATA:
			case DATE:
			case DATE_ADD:
			case DATE_CEIL:
			case DATE_DIFF:
			case DATE_FLOOR:
			case DATE_SUB:
			case DATEADD:
			case DATEDIFF:
			case DATETIME:
			case DATETIMEV2:
			case DATEV2:
			case DATETIMEV1:
			case DATEV1:
			case DAY:
			case DAYS_ADD:
			case DAYS_SUB:
			case DECIMAL:
			case DECIMALV2:
			case DECIMALV3:
			case DEFERRED:
			case DEMAND:
			case DIAGNOSE:
			case DISTINCTPC:
			case DISTINCTPCSA:
			case DO:
			case DORIS_INTERNAL_TABLE_ID:
			case DUAL:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTKEY:
			case ENCRYPTKEYS:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERRORS:
			case EVENTS:
			case EVERY:
			case EXCLUDE:
			case EXPIRED:
			case EXTERNAL:
			case FAILED_LOGIN_ATTEMPTS:
			case FAST:
			case FEATURE:
			case FIELDS:
			case FILE:
			case FILTER:
			case FIRST:
			case FORMAT:
			case FREE:
			case FRONTENDS:
			case FUNCTION:
			case GENERIC:
			case GLOBAL:
			case GRAPH:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HDFS:
			case HELP:
			case HISTOGRAM:
			case HLL_UNION:
			case HOSTNAME:
			case HOUR:
			case HUB:
			case IDENTIFIED:
			case IGNORE:
			case IMMEDIATE:
			case INCREMENTAL:
			case INDEXES:
			case INVERTED:
			case IPV4:
			case IPV6:
			case IS_NOT_NULL_PRED:
			case IS_NULL_PRED:
			case ISNULL:
			case ISOLATION:
			case JOB:
			case JOBS:
			case JSON:
			case JSONB:
			case LABEL:
			case LAST:
			case LDAP:
			case LDAP_ADMIN_PASSWORD:
			case LESS:
			case LEVEL:
			case LINES:
			case LINK:
			case LOCAL:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case LOCATION:
			case LOCK:
			case LOGICAL:
			case MANUAL:
			case MAP:
			case MATCH_ALL:
			case MATCH_ANY:
			case MATCH_ELEMENT_EQ:
			case MATCH_ELEMENT_GE:
			case MATCH_ELEMENT_GT:
			case MATCH_ELEMENT_LE:
			case MATCH_ELEMENT_LT:
			case MATCH_PHRASE:
			case MATCH_PHRASE_EDGE:
			case MATCH_PHRASE_PREFIX:
			case MATCH_REGEXP:
			case MATERIALIZED:
			case MAX:
			case MEMO:
			case MERGE:
			case MIGRATE:
			case MIGRATIONS:
			case MIN:
			case MINUTE:
			case MODIFY:
			case MONTH:
			case MTMV:
			case NAME:
			case NAMES:
			case NEGATIVE:
			case NEVER:
			case NEXT:
			case NGRAM_BF:
			case NO:
			case NON_NULLABLE:
			case NULLS:
			case OF:
			case OFFSET:
			case ONLY:
			case OPEN:
			case OPTIMIZED:
			case PARAMETER:
			case PARSED:
			case PARTITIONS:
			case PASSWORD:
			case PASSWORD_EXPIRE:
			case PASSWORD_HISTORY:
			case PASSWORD_LOCK_TIME:
			case PASSWORD_REUSE:
			case PATH:
			case PAUSE:
			case PERCENT:
			case PERIOD:
			case PERMISSIVE:
			case PHYSICAL:
			case PLAN:
			case PROCESS:
			case PLUGIN:
			case PLUGINS:
			case POLICY:
			case PROC:
			case PROCESSLIST:
			case PROFILE:
			case PROPERTIES:
			case PROPERTY:
			case QUANTILE_STATE:
			case QUANTILE_UNION:
			case QUERY:
			case QUOTA:
			case RANDOM:
			case RECOVER:
			case RECYCLE:
			case REFRESH:
			case REPEATABLE:
			case REPLACE:
			case REPLACE_IF_NOT_NULL:
			case REPOSITORIES:
			case REPOSITORY:
			case RESOURCE:
			case RESOURCES:
			case RESTORE:
			case RESTRICTIVE:
			case RESUME:
			case RETURNS:
			case REWRITTEN:
			case RLIKE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case S3:
			case SAMPLE:
			case SCHEDULE:
			case SCHEDULER:
			case SCHEMA:
			case SECOND:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION:
			case SHAPE:
			case SKEW:
			case SNAPSHOT:
			case SONAME:
			case SPLIT:
			case START:
			case STARTS:
			case STATS:
			case STATUS:
			case STOP:
			case STORAGE:
			case STREAM:
			case STREAMING:
			case STRING:
			case STRUCT:
			case SUBDATE:
			case SUM:
			case TABLES:
			case TASK:
			case TASKS:
			case TEMPORARY:
			case TEXT:
			case THAN:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TRANSACTION:
			case TREE:
			case TRIGGERS:
			case TRUNCATE:
			case TYPE:
			case TYPES:
			case UNCOMMITTED:
			case UNLOCK:
			case USER:
			case VALUE:
			case VARCHAR:
			case VARIABLES:
			case VARIANT:
			case VERBOSE:
			case VERSION:
			case VIEW:
			case WARNINGS:
			case WEEK:
			case WORK:
			case YEAR:
			case IDENTIFIER:
			case BACKQUOTED_IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(3092);
				errorCapturingIdentifier();
				}
				break;
			case STRING_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3093);
				match(STRING_LITERAL);
				}
				break;
			case LEADING_STRING:
				enterOuterAlt(_localctx, 3);
				{
				setState(3094);
				match(LEADING_STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserIdentifyContext extends ParserRuleContext {
		public IdentifierOrTextContext user;
		public IdentifierOrTextContext host;
		public List<IdentifierOrTextContext> identifierOrText() {
			return getRuleContexts(IdentifierOrTextContext.class);
		}
		public IdentifierOrTextContext identifierOrText(int i) {
			return getRuleContext(IdentifierOrTextContext.class,i);
		}
		public TerminalNode ATSIGN() { return getToken(PLParser.ATSIGN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public UserIdentifyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userIdentify; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterUserIdentify(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitUserIdentify(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitUserIdentify(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserIdentifyContext userIdentify() throws RecognitionException {
		UserIdentifyContext _localctx = new UserIdentifyContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_userIdentify);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3097);
			((UserIdentifyContext)_localctx).user = identifierOrText();
			setState(3106);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ATSIGN) {
				{
				setState(3098);
				match(ATSIGN);
				setState(3104);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LEFT_BRACE:
				case RIGHT_BRACE:
				case ADDDATE:
				case AFTER:
				case AGG_STATE:
				case AGGREGATE:
				case ALIAS:
				case ANALYZED:
				case ARRAY:
				case ARRAY_RANGE:
				case AT:
				case AUTHORS:
				case AUTO_INCREMENT:
				case BACKENDS:
				case BACKUP:
				case BEGIN:
				case BELONG:
				case BIN:
				case BITAND:
				case BITMAP:
				case BITMAP_UNION:
				case BITOR:
				case BITXOR:
				case BLOB:
				case BOOLEAN:
				case BRIEF:
				case BROKER:
				case BUCKETS:
				case BUILD:
				case BUILTIN:
				case BULK:
				case CACHED:
				case CALL:
				case CATALOG:
				case CATALOGS:
				case CHAIN:
				case CHAR:
				case CHARSET:
				case CHECK:
				case CLUSTER:
				case CLUSTERS:
				case COLLATION:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPACT:
				case COMPLETE:
				case CONFIG:
				case CONNECTION:
				case CONNECTION_ID:
				case CONSISTENT:
				case CONSTRAINTS:
				case CONVERT:
				case COPY:
				case COUNT:
				case CREATION:
				case CRON:
				case CURRENT_CATALOG:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DATA:
				case DATE:
				case DATE_ADD:
				case DATE_CEIL:
				case DATE_DIFF:
				case DATE_FLOOR:
				case DATE_SUB:
				case DATEADD:
				case DATEDIFF:
				case DATETIME:
				case DATETIMEV2:
				case DATEV2:
				case DATETIMEV1:
				case DATEV1:
				case DAY:
				case DAYS_ADD:
				case DAYS_SUB:
				case DECIMAL:
				case DECIMALV2:
				case DECIMALV3:
				case DEFERRED:
				case DEMAND:
				case DIAGNOSE:
				case DISTINCTPC:
				case DISTINCTPCSA:
				case DO:
				case DORIS_INTERNAL_TABLE_ID:
				case DUAL:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTKEY:
				case ENCRYPTKEYS:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERRORS:
				case EVENTS:
				case EVERY:
				case EXCLUDE:
				case EXPIRED:
				case EXTERNAL:
				case FAILED_LOGIN_ATTEMPTS:
				case FAST:
				case FEATURE:
				case FIELDS:
				case FILE:
				case FILTER:
				case FIRST:
				case FORMAT:
				case FREE:
				case FRONTENDS:
				case FUNCTION:
				case GENERIC:
				case GLOBAL:
				case GRAPH:
				case GROUPING:
				case GROUPS:
				case HASH:
				case HDFS:
				case HELP:
				case HISTOGRAM:
				case HLL_UNION:
				case HOSTNAME:
				case HOUR:
				case HUB:
				case IDENTIFIED:
				case IGNORE:
				case IMMEDIATE:
				case INCREMENTAL:
				case INDEXES:
				case INVERTED:
				case IPV4:
				case IPV6:
				case IS_NOT_NULL_PRED:
				case IS_NULL_PRED:
				case ISNULL:
				case ISOLATION:
				case JOB:
				case JOBS:
				case JSON:
				case JSONB:
				case LABEL:
				case LAST:
				case LDAP:
				case LDAP_ADMIN_PASSWORD:
				case LESS:
				case LEVEL:
				case LINES:
				case LINK:
				case LOCAL:
				case LOCALTIME:
				case LOCALTIMESTAMP:
				case LOCATION:
				case LOCK:
				case LOGICAL:
				case MANUAL:
				case MAP:
				case MATCH_ALL:
				case MATCH_ANY:
				case MATCH_ELEMENT_EQ:
				case MATCH_ELEMENT_GE:
				case MATCH_ELEMENT_GT:
				case MATCH_ELEMENT_LE:
				case MATCH_ELEMENT_LT:
				case MATCH_PHRASE:
				case MATCH_PHRASE_EDGE:
				case MATCH_PHRASE_PREFIX:
				case MATCH_REGEXP:
				case MATERIALIZED:
				case MAX:
				case MEMO:
				case MERGE:
				case MIGRATE:
				case MIGRATIONS:
				case MIN:
				case MINUTE:
				case MODIFY:
				case MONTH:
				case MTMV:
				case NAME:
				case NAMES:
				case NEGATIVE:
				case NEVER:
				case NEXT:
				case NGRAM_BF:
				case NO:
				case NON_NULLABLE:
				case NULLS:
				case OF:
				case OFFSET:
				case ONLY:
				case OPEN:
				case OPTIMIZED:
				case PARAMETER:
				case PARSED:
				case PARTITIONS:
				case PASSWORD:
				case PASSWORD_EXPIRE:
				case PASSWORD_HISTORY:
				case PASSWORD_LOCK_TIME:
				case PASSWORD_REUSE:
				case PATH:
				case PAUSE:
				case PERCENT:
				case PERIOD:
				case PERMISSIVE:
				case PHYSICAL:
				case PLAN:
				case PROCESS:
				case PLUGIN:
				case PLUGINS:
				case POLICY:
				case PROC:
				case PROCESSLIST:
				case PROFILE:
				case PROPERTIES:
				case PROPERTY:
				case QUANTILE_STATE:
				case QUANTILE_UNION:
				case QUERY:
				case QUOTA:
				case RANDOM:
				case RECOVER:
				case RECYCLE:
				case REFRESH:
				case REPEATABLE:
				case REPLACE:
				case REPLACE_IF_NOT_NULL:
				case REPOSITORIES:
				case REPOSITORY:
				case RESOURCE:
				case RESOURCES:
				case RESTORE:
				case RESTRICTIVE:
				case RESUME:
				case RETURNS:
				case REWRITTEN:
				case RLIKE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case S3:
				case SAMPLE:
				case SCHEDULE:
				case SCHEDULER:
				case SCHEMA:
				case SECOND:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION:
				case SHAPE:
				case SKEW:
				case SNAPSHOT:
				case SONAME:
				case SPLIT:
				case START:
				case STARTS:
				case STATS:
				case STATUS:
				case STOP:
				case STORAGE:
				case STREAM:
				case STREAMING:
				case STRING:
				case STRUCT:
				case SUBDATE:
				case SUM:
				case TABLES:
				case TASK:
				case TASKS:
				case TEMPORARY:
				case TEXT:
				case THAN:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TRANSACTION:
				case TREE:
				case TRIGGERS:
				case TRUNCATE:
				case TYPE:
				case TYPES:
				case UNCOMMITTED:
				case UNLOCK:
				case USER:
				case VALUE:
				case VARCHAR:
				case VARIABLES:
				case VARIANT:
				case VERBOSE:
				case VERSION:
				case VIEW:
				case WARNINGS:
				case WEEK:
				case WORK:
				case YEAR:
				case STRING_LITERAL:
				case LEADING_STRING:
				case IDENTIFIER:
				case BACKQUOTED_IDENTIFIER:
					{
					setState(3099);
					((UserIdentifyContext)_localctx).host = identifierOrText();
					}
					break;
				case LEFT_PAREN:
					{
					setState(3100);
					match(LEFT_PAREN);
					setState(3101);
					((UserIdentifyContext)_localctx).host = identifierOrText();
					setState(3102);
					match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExplainContext extends ParserRuleContext {
		public Token level;
		public TerminalNode EXPLAIN() { return getToken(PLParser.EXPLAIN, 0); }
		public TerminalNode DESC() { return getToken(PLParser.DESC, 0); }
		public TerminalNode DESCRIBE() { return getToken(PLParser.DESCRIBE, 0); }
		public TerminalNode PROCESS() { return getToken(PLParser.PROCESS, 0); }
		public PlanTypeContext planType() {
			return getRuleContext(PlanTypeContext.class,0);
		}
		public TerminalNode VERBOSE() { return getToken(PLParser.VERBOSE, 0); }
		public TerminalNode TREE() { return getToken(PLParser.TREE, 0); }
		public TerminalNode GRAPH() { return getToken(PLParser.GRAPH, 0); }
		public TerminalNode PLAN() { return getToken(PLParser.PLAN, 0); }
		public ExplainContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterExplain(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitExplain(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitExplain(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExplainContext explain() throws RecognitionException {
		ExplainContext _localctx = new ExplainContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_explain);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3114);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EXPLAIN:
				{
				setState(3108);
				match(EXPLAIN);
				setState(3110);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL || _la==ANALYZED || ((((_la - 443)) & ~0x3f) == 0 && ((1L << (_la - 443)) & ((1L << (LOGICAL - 443)) | (1L << (MEMO - 443)) | (1L << (OPTIMIZED - 443)) | (1L << (PARSED - 443)))) != 0) || _la==PHYSICAL || _la==REWRITTEN || _la==SHAPE) {
					{
					setState(3109);
					planType();
					}
				}

				}
				break;
			case DESC:
				{
				setState(3112);
				match(DESC);
				}
				break;
			case DESCRIBE:
				{
				setState(3113);
				match(DESCRIBE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3117);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GRAPH || _la==PLAN || _la==TREE || _la==VERBOSE) {
				{
				setState(3116);
				((ExplainContext)_localctx).level = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==GRAPH || _la==PLAN || _la==TREE || _la==VERBOSE) ) {
					((ExplainContext)_localctx).level = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3120);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PROCESS) {
				{
				setState(3119);
				match(PROCESS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PlanTypeContext extends ParserRuleContext {
		public TerminalNode PARSED() { return getToken(PLParser.PARSED, 0); }
		public TerminalNode ANALYZED() { return getToken(PLParser.ANALYZED, 0); }
		public TerminalNode REWRITTEN() { return getToken(PLParser.REWRITTEN, 0); }
		public TerminalNode LOGICAL() { return getToken(PLParser.LOGICAL, 0); }
		public TerminalNode OPTIMIZED() { return getToken(PLParser.OPTIMIZED, 0); }
		public TerminalNode PHYSICAL() { return getToken(PLParser.PHYSICAL, 0); }
		public TerminalNode SHAPE() { return getToken(PLParser.SHAPE, 0); }
		public TerminalNode MEMO() { return getToken(PLParser.MEMO, 0); }
		public TerminalNode ALL() { return getToken(PLParser.ALL, 0); }
		public PlanTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_planType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterPlanType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitPlanType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitPlanType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PlanTypeContext planType() throws RecognitionException {
		PlanTypeContext _localctx = new PlanTypeContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_planType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3122);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==ANALYZED || ((((_la - 443)) & ~0x3f) == 0 && ((1L << (_la - 443)) & ((1L << (LOGICAL - 443)) | (1L << (MEMO - 443)) | (1L << (OPTIMIZED - 443)) | (1L << (PARSED - 443)))) != 0) || _la==PHYSICAL || _la==REWRITTEN || _la==SHAPE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MergeTypeContext extends ParserRuleContext {
		public TerminalNode APPEND() { return getToken(PLParser.APPEND, 0); }
		public TerminalNode DELETE() { return getToken(PLParser.DELETE, 0); }
		public TerminalNode MERGE() { return getToken(PLParser.MERGE, 0); }
		public MergeTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mergeType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterMergeType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitMergeType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitMergeType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MergeTypeContext mergeType() throws RecognitionException {
		MergeTypeContext _localctx = new MergeTypeContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_mergeType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3124);
			_la = _input.LA(1);
			if ( !(_la==APPEND || _la==DELETE || _la==MERGE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PreFilterClauseContext extends ParserRuleContext {
		public TerminalNode PRECEDING() { return getToken(PLParser.PRECEDING, 0); }
		public TerminalNode FILTER() { return getToken(PLParser.FILTER, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public PreFilterClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preFilterClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterPreFilterClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitPreFilterClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitPreFilterClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PreFilterClauseContext preFilterClause() throws RecognitionException {
		PreFilterClauseContext _localctx = new PreFilterClauseContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_preFilterClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3126);
			match(PRECEDING);
			setState(3127);
			match(FILTER);
			setState(3128);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeleteOnClauseContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(PLParser.DELETE, 0); }
		public TerminalNode ON() { return getToken(PLParser.ON, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public DeleteOnClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deleteOnClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterDeleteOnClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitDeleteOnClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitDeleteOnClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeleteOnClauseContext deleteOnClause() throws RecognitionException {
		DeleteOnClauseContext _localctx = new DeleteOnClauseContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_deleteOnClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3130);
			match(DELETE);
			setState(3131);
			match(ON);
			setState(3132);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SequenceColClauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(PLParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(PLParser.BY, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SequenceColClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequenceColClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterSequenceColClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitSequenceColClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitSequenceColClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SequenceColClauseContext sequenceColClause() throws RecognitionException {
		SequenceColClauseContext _localctx = new SequenceColClauseContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_sequenceColClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3134);
			match(ORDER);
			setState(3135);
			match(BY);
			setState(3136);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColFromPathContext extends ParserRuleContext {
		public TerminalNode COLUMNS() { return getToken(PLParser.COLUMNS, 0); }
		public TerminalNode FROM() { return getToken(PLParser.FROM, 0); }
		public TerminalNode PATH() { return getToken(PLParser.PATH, 0); }
		public TerminalNode AS() { return getToken(PLParser.AS, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public ColFromPathContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colFromPath; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterColFromPath(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitColFromPath(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitColFromPath(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColFromPathContext colFromPath() throws RecognitionException {
		ColFromPathContext _localctx = new ColFromPathContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_colFromPath);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3138);
			match(COLUMNS);
			setState(3139);
			match(FROM);
			setState(3140);
			match(PATH);
			setState(3141);
			match(AS);
			setState(3142);
			identifierList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColMappingListContext extends ParserRuleContext {
		public MappingExprContext mappingExpr;
		public List<MappingExprContext> mappingSet = new ArrayList<MappingExprContext>();
		public TerminalNode SET() { return getToken(PLParser.SET, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public List<MappingExprContext> mappingExpr() {
			return getRuleContexts(MappingExprContext.class);
		}
		public MappingExprContext mappingExpr(int i) {
			return getRuleContext(MappingExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public ColMappingListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colMappingList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterColMappingList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitColMappingList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitColMappingList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColMappingListContext colMappingList() throws RecognitionException {
		ColMappingListContext _localctx = new ColMappingListContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_colMappingList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3144);
			match(SET);
			setState(3145);
			match(LEFT_PAREN);
			setState(3146);
			((ColMappingListContext)_localctx).mappingExpr = mappingExpr();
			((ColMappingListContext)_localctx).mappingSet.add(((ColMappingListContext)_localctx).mappingExpr);
			setState(3151);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3147);
				match(COMMA);
				setState(3148);
				((ColMappingListContext)_localctx).mappingExpr = mappingExpr();
				((ColMappingListContext)_localctx).mappingSet.add(((ColMappingListContext)_localctx).mappingExpr);
				}
				}
				setState(3153);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3154);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MappingExprContext extends ParserRuleContext {
		public IdentifierContext mappingCol;
		public TerminalNode EQ() { return getToken(PLParser.EQ, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public MappingExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mappingExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterMappingExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitMappingExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitMappingExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MappingExprContext mappingExpr() throws RecognitionException {
		MappingExprContext _localctx = new MappingExprContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_mappingExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3156);
			((MappingExprContext)_localctx).mappingCol = identifier();
			setState(3157);
			match(EQ);
			setState(3158);
			expression();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WithRemoteStorageSystemContext extends ParserRuleContext {
		public PropertyItemListContext brokerProperties;
		public IdentifierOrTextContext brokerName;
		public ResourceDescContext resourceDesc() {
			return getRuleContext(ResourceDescContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PLParser.WITH, 0); }
		public TerminalNode S3() { return getToken(PLParser.S3, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public PropertyItemListContext propertyItemList() {
			return getRuleContext(PropertyItemListContext.class,0);
		}
		public TerminalNode HDFS() { return getToken(PLParser.HDFS, 0); }
		public TerminalNode LOCAL() { return getToken(PLParser.LOCAL, 0); }
		public TerminalNode BROKER() { return getToken(PLParser.BROKER, 0); }
		public IdentifierOrTextContext identifierOrText() {
			return getRuleContext(IdentifierOrTextContext.class,0);
		}
		public WithRemoteStorageSystemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withRemoteStorageSystem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterWithRemoteStorageSystem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitWithRemoteStorageSystem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitWithRemoteStorageSystem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithRemoteStorageSystemContext withRemoteStorageSystem() throws RecognitionException {
		WithRemoteStorageSystemContext _localctx = new WithRemoteStorageSystemContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_withRemoteStorageSystem);
		try {
			setState(3188);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,393,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3160);
				resourceDesc();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3161);
				match(WITH);
				setState(3162);
				match(S3);
				setState(3163);
				match(LEFT_PAREN);
				setState(3164);
				((WithRemoteStorageSystemContext)_localctx).brokerProperties = propertyItemList();
				setState(3165);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3167);
				match(WITH);
				setState(3168);
				match(HDFS);
				setState(3169);
				match(LEFT_PAREN);
				setState(3170);
				((WithRemoteStorageSystemContext)_localctx).brokerProperties = propertyItemList();
				setState(3171);
				match(RIGHT_PAREN);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3173);
				match(WITH);
				setState(3174);
				match(LOCAL);
				setState(3175);
				match(LEFT_PAREN);
				setState(3176);
				((WithRemoteStorageSystemContext)_localctx).brokerProperties = propertyItemList();
				setState(3177);
				match(RIGHT_PAREN);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3179);
				match(WITH);
				setState(3180);
				match(BROKER);
				setState(3181);
				((WithRemoteStorageSystemContext)_localctx).brokerName = identifierOrText();
				setState(3186);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,392,_ctx) ) {
				case 1:
					{
					setState(3182);
					match(LEFT_PAREN);
					setState(3183);
					((WithRemoteStorageSystemContext)_localctx).brokerProperties = propertyItemList();
					setState(3184);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResourceDescContext extends ParserRuleContext {
		public IdentifierOrTextContext resourceName;
		public TerminalNode WITH() { return getToken(PLParser.WITH, 0); }
		public TerminalNode RESOURCE() { return getToken(PLParser.RESOURCE, 0); }
		public IdentifierOrTextContext identifierOrText() {
			return getRuleContext(IdentifierOrTextContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public PropertyItemListContext propertyItemList() {
			return getRuleContext(PropertyItemListContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public ResourceDescContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resourceDesc; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterResourceDesc(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitResourceDesc(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitResourceDesc(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResourceDescContext resourceDesc() throws RecognitionException {
		ResourceDescContext _localctx = new ResourceDescContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_resourceDesc);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3190);
			match(WITH);
			setState(3191);
			match(RESOURCE);
			setState(3192);
			((ResourceDescContext)_localctx).resourceName = identifierOrText();
			setState(3197);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,394,_ctx) ) {
			case 1:
				{
				setState(3193);
				match(LEFT_PAREN);
				setState(3194);
				propertyItemList();
				setState(3195);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MysqlDataDescContext extends ParserRuleContext {
		public Token filePath;
		public MultipartIdentifierContext tableName;
		public IdentifierListContext partition;
		public Token comma;
		public Token separator;
		public IdentifierListContext columns;
		public TerminalNode DATA() { return getToken(PLParser.DATA, 0); }
		public TerminalNode INFILE() { return getToken(PLParser.INFILE, 0); }
		public TerminalNode INTO() { return getToken(PLParser.INTO, 0); }
		public TerminalNode TABLE() { return getToken(PLParser.TABLE, 0); }
		public List<TerminalNode> STRING_LITERAL() { return getTokens(PLParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(PLParser.STRING_LITERAL, i);
		}
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(PLParser.LOCAL, 0); }
		public BooleanValueContext booleanValue() {
			return getRuleContext(BooleanValueContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(PLParser.PARTITION, 0); }
		public TerminalNode COLUMNS() { return getToken(PLParser.COLUMNS, 0); }
		public List<TerminalNode> TERMINATED() { return getTokens(PLParser.TERMINATED); }
		public TerminalNode TERMINATED(int i) {
			return getToken(PLParser.TERMINATED, i);
		}
		public List<TerminalNode> BY() { return getTokens(PLParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(PLParser.BY, i);
		}
		public TerminalNode LINES() { return getToken(PLParser.LINES, 0); }
		public SkipLinesContext skipLines() {
			return getRuleContext(SkipLinesContext.class,0);
		}
		public ColMappingListContext colMappingList() {
			return getRuleContext(ColMappingListContext.class,0);
		}
		public PropertyClauseContext propertyClause() {
			return getRuleContext(PropertyClauseContext.class,0);
		}
		public List<IdentifierListContext> identifierList() {
			return getRuleContexts(IdentifierListContext.class);
		}
		public IdentifierListContext identifierList(int i) {
			return getRuleContext(IdentifierListContext.class,i);
		}
		public MysqlDataDescContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mysqlDataDesc; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterMysqlDataDesc(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitMysqlDataDesc(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitMysqlDataDesc(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MysqlDataDescContext mysqlDataDesc() throws RecognitionException {
		MysqlDataDescContext _localctx = new MysqlDataDescContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_mysqlDataDesc);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3199);
			match(DATA);
			setState(3202);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL) {
				{
				setState(3200);
				match(LOCAL);
				setState(3201);
				booleanValue();
				}
			}

			setState(3204);
			match(INFILE);
			setState(3205);
			((MysqlDataDescContext)_localctx).filePath = match(STRING_LITERAL);
			setState(3206);
			match(INTO);
			setState(3207);
			match(TABLE);
			setState(3208);
			((MysqlDataDescContext)_localctx).tableName = multipartIdentifier();
			setState(3211);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,396,_ctx) ) {
			case 1:
				{
				setState(3209);
				match(PARTITION);
				setState(3210);
				((MysqlDataDescContext)_localctx).partition = identifierList();
				}
				break;
			}
			setState(3217);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,397,_ctx) ) {
			case 1:
				{
				setState(3213);
				match(COLUMNS);
				setState(3214);
				match(TERMINATED);
				setState(3215);
				match(BY);
				setState(3216);
				((MysqlDataDescContext)_localctx).comma = match(STRING_LITERAL);
				}
				break;
			}
			setState(3223);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,398,_ctx) ) {
			case 1:
				{
				setState(3219);
				match(LINES);
				setState(3220);
				match(TERMINATED);
				setState(3221);
				match(BY);
				setState(3222);
				((MysqlDataDescContext)_localctx).separator = match(STRING_LITERAL);
				}
				break;
			}
			setState(3226);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,399,_ctx) ) {
			case 1:
				{
				setState(3225);
				skipLines();
				}
				break;
			}
			setState(3229);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,400,_ctx) ) {
			case 1:
				{
				setState(3228);
				((MysqlDataDescContext)_localctx).columns = identifierList();
				}
				break;
			}
			setState(3232);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,401,_ctx) ) {
			case 1:
				{
				setState(3231);
				colMappingList();
				}
				break;
			}
			setState(3235);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,402,_ctx) ) {
			case 1:
				{
				setState(3234);
				propertyClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SkipLinesContext extends ParserRuleContext {
		public Token lines;
		public TerminalNode IGNORE() { return getToken(PLParser.IGNORE, 0); }
		public TerminalNode LINES() { return getToken(PLParser.LINES, 0); }
		public TerminalNode INTEGER_VALUE() { return getToken(PLParser.INTEGER_VALUE, 0); }
		public TerminalNode ROWS() { return getToken(PLParser.ROWS, 0); }
		public SkipLinesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_skipLines; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterSkipLines(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitSkipLines(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitSkipLines(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SkipLinesContext skipLines() throws RecognitionException {
		SkipLinesContext _localctx = new SkipLinesContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_skipLines);
		try {
			setState(3243);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,403,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3237);
				match(IGNORE);
				setState(3238);
				((SkipLinesContext)_localctx).lines = match(INTEGER_VALUE);
				setState(3239);
				match(LINES);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3240);
				match(IGNORE);
				setState(3241);
				((SkipLinesContext)_localctx).lines = match(INTEGER_VALUE);
				setState(3242);
				match(ROWS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OutFileClauseContext extends ParserRuleContext {
		public ConstantContext filePath;
		public IdentifierContext format;
		public TerminalNode INTO() { return getToken(PLParser.INTO, 0); }
		public TerminalNode OUTFILE() { return getToken(PLParser.OUTFILE, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public TerminalNode FORMAT() { return getToken(PLParser.FORMAT, 0); }
		public TerminalNode AS() { return getToken(PLParser.AS, 0); }
		public PropertyClauseContext propertyClause() {
			return getRuleContext(PropertyClauseContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public OutFileClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outFileClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterOutFileClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitOutFileClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitOutFileClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OutFileClauseContext outFileClause() throws RecognitionException {
		OutFileClauseContext _localctx = new OutFileClauseContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_outFileClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3245);
			match(INTO);
			setState(3246);
			match(OUTFILE);
			setState(3247);
			((OutFileClauseContext)_localctx).filePath = constant();
			setState(3251);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,404,_ctx) ) {
			case 1:
				{
				setState(3248);
				match(FORMAT);
				setState(3249);
				match(AS);
				setState(3250);
				((OutFileClauseContext)_localctx).format = identifier();
				}
				break;
			}
			setState(3254);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,405,_ctx) ) {
			case 1:
				{
				setState(3253);
				propertyClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryContext extends ParserRuleContext {
		public QueryTermContext queryTerm() {
			return getRuleContext(QueryTermContext.class,0);
		}
		public QueryOrganizationContext queryOrganization() {
			return getRuleContext(QueryOrganizationContext.class,0);
		}
		public CteContext cte() {
			return getRuleContext(CteContext.class,0);
		}
		public QueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterQuery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitQuery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitQuery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryContext query() throws RecognitionException {
		QueryContext _localctx = new QueryContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_query);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3257);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(3256);
				cte();
				}
			}

			setState(3259);
			queryTerm(0);
			setState(3260);
			queryOrganization();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryTermContext extends ParserRuleContext {
		public QueryTermContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryTerm; }
	 
		public QueryTermContext() { }
		public void copyFrom(QueryTermContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class QueryTermDefaultContext extends QueryTermContext {
		public QueryPrimaryContext queryPrimary() {
			return getRuleContext(QueryPrimaryContext.class,0);
		}
		public QueryTermDefaultContext(QueryTermContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterQueryTermDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitQueryTermDefault(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitQueryTermDefault(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetOperationContext extends QueryTermContext {
		public QueryTermContext left;
		public Token operator;
		public QueryTermContext right;
		public List<QueryTermContext> queryTerm() {
			return getRuleContexts(QueryTermContext.class);
		}
		public QueryTermContext queryTerm(int i) {
			return getRuleContext(QueryTermContext.class,i);
		}
		public TerminalNode UNION() { return getToken(PLParser.UNION, 0); }
		public TerminalNode EXCEPT() { return getToken(PLParser.EXCEPT, 0); }
		public TerminalNode MINUS() { return getToken(PLParser.MINUS, 0); }
		public TerminalNode INTERSECT() { return getToken(PLParser.INTERSECT, 0); }
		public SetQuantifierContext setQuantifier() {
			return getRuleContext(SetQuantifierContext.class,0);
		}
		public SetOperationContext(QueryTermContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterSetOperation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitSetOperation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitSetOperation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryTermContext queryTerm() throws RecognitionException {
		return queryTerm(0);
	}

	private QueryTermContext queryTerm(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		QueryTermContext _localctx = new QueryTermContext(_ctx, _parentState);
		QueryTermContext _prevctx = _localctx;
		int _startState = 336;
		enterRecursionRule(_localctx, 336, RULE_queryTerm, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new QueryTermDefaultContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			setState(3263);
			queryPrimary();
			}
			_ctx.stop = _input.LT(-1);
			setState(3273);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,408,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SetOperationContext(new QueryTermContext(_parentctx, _parentState));
					((SetOperationContext)_localctx).left = _prevctx;
					pushNewRecursionContext(_localctx, _startState, RULE_queryTerm);
					setState(3265);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3266);
					((SetOperationContext)_localctx).operator = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==EXCEPT || _la==INTERSECT || _la==MINUS || _la==UNION) ) {
						((SetOperationContext)_localctx).operator = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(3268);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALL || _la==DISTINCT) {
						{
						setState(3267);
						setQuantifier();
						}
					}

					setState(3270);
					((SetOperationContext)_localctx).right = queryTerm(2);
					}
					} 
				}
				setState(3275);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,408,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class SetQuantifierContext extends ParserRuleContext {
		public TerminalNode DISTINCT() { return getToken(PLParser.DISTINCT, 0); }
		public TerminalNode ALL() { return getToken(PLParser.ALL, 0); }
		public SetQuantifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setQuantifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterSetQuantifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitSetQuantifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitSetQuantifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetQuantifierContext setQuantifier() throws RecognitionException {
		SetQuantifierContext _localctx = new SetQuantifierContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_setQuantifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3276);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==DISTINCT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryPrimaryContext extends ParserRuleContext {
		public QueryPrimaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryPrimary; }
	 
		public QueryPrimaryContext() { }
		public void copyFrom(QueryPrimaryContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SubqueryContext extends QueryPrimaryContext {
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public SubqueryContext(QueryPrimaryContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterSubquery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitSubquery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitSubquery(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ValuesTableContext extends QueryPrimaryContext {
		public InlineTableContext inlineTable() {
			return getRuleContext(InlineTableContext.class,0);
		}
		public ValuesTableContext(QueryPrimaryContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterValuesTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitValuesTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitValuesTable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class QueryPrimaryDefaultContext extends QueryPrimaryContext {
		public QuerySpecificationContext querySpecification() {
			return getRuleContext(QuerySpecificationContext.class,0);
		}
		public QueryPrimaryDefaultContext(QueryPrimaryContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterQueryPrimaryDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitQueryPrimaryDefault(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitQueryPrimaryDefault(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryPrimaryContext queryPrimary() throws RecognitionException {
		QueryPrimaryContext _localctx = new QueryPrimaryContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_queryPrimary);
		try {
			setState(3284);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				_localctx = new QueryPrimaryDefaultContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3278);
				querySpecification();
				}
				break;
			case LEFT_PAREN:
				_localctx = new SubqueryContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3279);
				match(LEFT_PAREN);
				setState(3280);
				query();
				setState(3281);
				match(RIGHT_PAREN);
				}
				break;
			case VALUES:
				_localctx = new ValuesTableContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3283);
				inlineTable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QuerySpecificationContext extends ParserRuleContext {
		public QuerySpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_querySpecification; }
	 
		public QuerySpecificationContext() { }
		public void copyFrom(QuerySpecificationContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class RegularQuerySpecificationContext extends QuerySpecificationContext {
		public SelectClauseContext selectClause() {
			return getRuleContext(SelectClauseContext.class,0);
		}
		public QueryOrganizationContext queryOrganization() {
			return getRuleContext(QueryOrganizationContext.class,0);
		}
		public IntoClauseContext intoClause() {
			return getRuleContext(IntoClauseContext.class,0);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public AggClauseContext aggClause() {
			return getRuleContext(AggClauseContext.class,0);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public RegularQuerySpecificationContext(QuerySpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterRegularQuerySpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitRegularQuerySpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitRegularQuerySpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QuerySpecificationContext querySpecification() throws RecognitionException {
		QuerySpecificationContext _localctx = new QuerySpecificationContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_querySpecification);
		try {
			_localctx = new RegularQuerySpecificationContext(_localctx);
			enterOuterAlt(_localctx, 1);
			{
			setState(3286);
			selectClause();
			setState(3288);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,410,_ctx) ) {
			case 1:
				{
				setState(3287);
				intoClause();
				}
				break;
			}
			setState(3291);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,411,_ctx) ) {
			case 1:
				{
				setState(3290);
				fromClause();
				}
				break;
			}
			setState(3294);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,412,_ctx) ) {
			case 1:
				{
				setState(3293);
				whereClause();
				}
				break;
			}
			setState(3297);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,413,_ctx) ) {
			case 1:
				{
				setState(3296);
				aggClause();
				}
				break;
			}
			setState(3300);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,414,_ctx) ) {
			case 1:
				{
				setState(3299);
				havingClause();
				}
				break;
			}
			setState(3302);
			if (!(doris_legacy_SQL_syntax)) throw new FailedPredicateException(this, "doris_legacy_SQL_syntax");
			setState(3303);
			queryOrganization();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CteContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PLParser.WITH, 0); }
		public List<AliasQueryContext> aliasQuery() {
			return getRuleContexts(AliasQueryContext.class);
		}
		public AliasQueryContext aliasQuery(int i) {
			return getRuleContext(AliasQueryContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public CteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cte; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterCte(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitCte(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitCte(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CteContext cte() throws RecognitionException {
		CteContext _localctx = new CteContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_cte);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3305);
			match(WITH);
			setState(3306);
			aliasQuery();
			setState(3311);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3307);
				match(COMMA);
				setState(3308);
				aliasQuery();
				}
				}
				setState(3313);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AliasQueryContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode AS() { return getToken(PLParser.AS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public ColumnAliasesContext columnAliases() {
			return getRuleContext(ColumnAliasesContext.class,0);
		}
		public AliasQueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aliasQuery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterAliasQuery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitAliasQuery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitAliasQuery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AliasQueryContext aliasQuery() throws RecognitionException {
		AliasQueryContext _localctx = new AliasQueryContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_aliasQuery);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3314);
			identifier();
			setState(3316);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(3315);
				columnAliases();
				}
			}

			setState(3318);
			match(AS);
			setState(3319);
			match(LEFT_PAREN);
			setState(3320);
			query();
			setState(3321);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnAliasesContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public ColumnAliasesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnAliases; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterColumnAliases(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitColumnAliases(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitColumnAliases(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnAliasesContext columnAliases() throws RecognitionException {
		ColumnAliasesContext _localctx = new ColumnAliasesContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_columnAliases);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3323);
			match(LEFT_PAREN);
			setState(3324);
			identifier();
			setState(3329);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3325);
				match(COMMA);
				setState(3326);
				identifier();
				}
				}
				setState(3331);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3332);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectClauseContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(PLParser.SELECT, 0); }
		public SelectColumnClauseContext selectColumnClause() {
			return getRuleContext(SelectColumnClauseContext.class,0);
		}
		public SelectHintContext selectHint() {
			return getRuleContext(SelectHintContext.class,0);
		}
		public TerminalNode DISTINCT() { return getToken(PLParser.DISTINCT, 0); }
		public SelectClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterSelectClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitSelectClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitSelectClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectClauseContext selectClause() throws RecognitionException {
		SelectClauseContext _localctx = new SelectClauseContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_selectClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3334);
			match(SELECT);
			setState(3336);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HINT_START) {
				{
				setState(3335);
				selectHint();
				}
			}

			setState(3339);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISTINCT) {
				{
				setState(3338);
				match(DISTINCT);
				}
			}

			setState(3341);
			selectColumnClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectColumnClauseContext extends ParserRuleContext {
		public NamedExpressionSeqContext namedExpressionSeq() {
			return getRuleContext(NamedExpressionSeqContext.class,0);
		}
		public TerminalNode ASTERISK() { return getToken(PLParser.ASTERISK, 0); }
		public TerminalNode EXCEPT() { return getToken(PLParser.EXCEPT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public SelectColumnClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectColumnClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterSelectColumnClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitSelectColumnClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitSelectColumnClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectColumnClauseContext selectColumnClause() throws RecognitionException {
		SelectColumnClauseContext _localctx = new SelectColumnClauseContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_selectColumnClause);
		try {
			setState(3350);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,420,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3343);
				namedExpressionSeq();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3344);
				match(ASTERISK);
				setState(3345);
				match(EXCEPT);
				setState(3346);
				match(LEFT_PAREN);
				setState(3347);
				namedExpressionSeq();
				setState(3348);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhereClauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(PLParser.WHERE, 0); }
		public BooleanExpressionContext booleanExpression() {
			return getRuleContext(BooleanExpressionContext.class,0);
		}
		public WhereClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whereClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterWhereClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitWhereClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitWhereClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhereClauseContext whereClause() throws RecognitionException {
		WhereClauseContext _localctx = new WhereClauseContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_whereClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3352);
			match(WHERE);
			setState(3353);
			booleanExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromClauseContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(PLParser.FROM, 0); }
		public RelationsContext relations() {
			return getRuleContext(RelationsContext.class,0);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterFromClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitFromClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitFromClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromClauseContext fromClause() throws RecognitionException {
		FromClauseContext _localctx = new FromClauseContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_fromClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3355);
			match(FROM);
			setState(3356);
			relations();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntoClauseContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(PLParser.INTO, 0); }
		public List<TableRowContext> tableRow() {
			return getRuleContexts(TableRowContext.class);
		}
		public TableRowContext tableRow(int i) {
			return getRuleContext(TableRowContext.class,i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public BulkCollectClauseContext bulkCollectClause() {
			return getRuleContext(BulkCollectClauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public IntoClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intoClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterIntoClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitIntoClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitIntoClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntoClauseContext intoClause() throws RecognitionException {
		IntoClauseContext _localctx = new IntoClauseContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_intoClause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3359);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BULK) {
				{
				setState(3358);
				bulkCollectClause();
				}
			}

			setState(3361);
			match(INTO);
			setState(3364);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,422,_ctx) ) {
			case 1:
				{
				setState(3362);
				tableRow();
				}
				break;
			case 2:
				{
				setState(3363);
				identifier();
				}
				break;
			}
			setState(3373);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,424,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3366);
					match(COMMA);
					setState(3369);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,423,_ctx) ) {
					case 1:
						{
						setState(3367);
						tableRow();
						}
						break;
					case 2:
						{
						setState(3368);
						identifier();
						}
						break;
					}
					}
					} 
				}
				setState(3375);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,424,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BulkCollectClauseContext extends ParserRuleContext {
		public TerminalNode BULK() { return getToken(PLParser.BULK, 0); }
		public TerminalNode COLLECT() { return getToken(PLParser.COLLECT, 0); }
		public BulkCollectClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bulkCollectClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterBulkCollectClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitBulkCollectClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitBulkCollectClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BulkCollectClauseContext bulkCollectClause() throws RecognitionException {
		BulkCollectClauseContext _localctx = new BulkCollectClauseContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_bulkCollectClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3376);
			match(BULK);
			setState(3377);
			match(COLLECT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableRowContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public TerminalNode INTEGER_VALUE() { return getToken(PLParser.INTEGER_VALUE, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public TableRowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableRow; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterTableRow(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitTableRow(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitTableRow(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableRowContext tableRow() throws RecognitionException {
		TableRowContext _localctx = new TableRowContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_tableRow);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3379);
			identifier();
			setState(3380);
			match(LEFT_PAREN);
			setState(3381);
			match(INTEGER_VALUE);
			setState(3382);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RelationsContext extends ParserRuleContext {
		public List<RelationContext> relation() {
			return getRuleContexts(RelationContext.class);
		}
		public RelationContext relation(int i) {
			return getRuleContext(RelationContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public RelationsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relations; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterRelations(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitRelations(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitRelations(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RelationsContext relations() throws RecognitionException {
		RelationsContext _localctx = new RelationsContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_relations);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3384);
			relation();
			setState(3389);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,425,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3385);
					match(COMMA);
					setState(3386);
					relation();
					}
					} 
				}
				setState(3391);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,425,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RelationContext extends ParserRuleContext {
		public RelationPrimaryContext relationPrimary() {
			return getRuleContext(RelationPrimaryContext.class,0);
		}
		public List<JoinRelationContext> joinRelation() {
			return getRuleContexts(JoinRelationContext.class);
		}
		public JoinRelationContext joinRelation(int i) {
			return getRuleContext(JoinRelationContext.class,i);
		}
		public RelationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterRelation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitRelation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitRelation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RelationContext relation() throws RecognitionException {
		RelationContext _localctx = new RelationContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_relation);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3392);
			relationPrimary();
			setState(3396);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,426,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3393);
					joinRelation();
					}
					} 
				}
				setState(3398);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,426,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinRelationContext extends ParserRuleContext {
		public RelationPrimaryContext right;
		public TerminalNode JOIN() { return getToken(PLParser.JOIN, 0); }
		public RelationPrimaryContext relationPrimary() {
			return getRuleContext(RelationPrimaryContext.class,0);
		}
		public JoinTypeContext joinType() {
			return getRuleContext(JoinTypeContext.class,0);
		}
		public DistributeTypeContext distributeType() {
			return getRuleContext(DistributeTypeContext.class,0);
		}
		public JoinCriteriaContext joinCriteria() {
			return getRuleContext(JoinCriteriaContext.class,0);
		}
		public JoinRelationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinRelation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterJoinRelation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitJoinRelation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitJoinRelation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinRelationContext joinRelation() throws RecognitionException {
		JoinRelationContext _localctx = new JoinRelationContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_joinRelation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3399);
			joinType();
			}
			setState(3400);
			match(JOIN);
			setState(3402);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_BRACKET || _la==HINT_START) {
				{
				setState(3401);
				distributeType();
				}
			}

			setState(3404);
			((JoinRelationContext)_localctx).right = relationPrimary();
			setState(3406);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,428,_ctx) ) {
			case 1:
				{
				setState(3405);
				joinCriteria();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DistributeTypeContext extends ParserRuleContext {
		public DistributeTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_distributeType; }
	 
		public DistributeTypeContext() { }
		public void copyFrom(DistributeTypeContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class CommentDistributeTypeContext extends DistributeTypeContext {
		public TerminalNode HINT_START() { return getToken(PLParser.HINT_START, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode HINT_END() { return getToken(PLParser.HINT_END, 0); }
		public CommentDistributeTypeContext(DistributeTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterCommentDistributeType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitCommentDistributeType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitCommentDistributeType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BracketDistributeTypeContext extends DistributeTypeContext {
		public TerminalNode LEFT_BRACKET() { return getToken(PLParser.LEFT_BRACKET, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode RIGHT_BRACKET() { return getToken(PLParser.RIGHT_BRACKET, 0); }
		public BracketDistributeTypeContext(DistributeTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterBracketDistributeType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitBracketDistributeType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitBracketDistributeType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DistributeTypeContext distributeType() throws RecognitionException {
		DistributeTypeContext _localctx = new DistributeTypeContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_distributeType);
		try {
			setState(3416);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT_BRACKET:
				_localctx = new BracketDistributeTypeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3408);
				match(LEFT_BRACKET);
				setState(3409);
				identifier();
				setState(3410);
				match(RIGHT_BRACKET);
				}
				break;
			case HINT_START:
				_localctx = new CommentDistributeTypeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3412);
				match(HINT_START);
				setState(3413);
				identifier();
				setState(3414);
				match(HINT_END);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RelationHintContext extends ParserRuleContext {
		public RelationHintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relationHint; }
	 
		public RelationHintContext() { }
		public void copyFrom(RelationHintContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class BracketRelationHintContext extends RelationHintContext {
		public TerminalNode LEFT_BRACKET() { return getToken(PLParser.LEFT_BRACKET, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode RIGHT_BRACKET() { return getToken(PLParser.RIGHT_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public BracketRelationHintContext(RelationHintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterBracketRelationHint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitBracketRelationHint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitBracketRelationHint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CommentRelationHintContext extends RelationHintContext {
		public TerminalNode HINT_START() { return getToken(PLParser.HINT_START, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode HINT_END() { return getToken(PLParser.HINT_END, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public CommentRelationHintContext(RelationHintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterCommentRelationHint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitCommentRelationHint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitCommentRelationHint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RelationHintContext relationHint() throws RecognitionException {
		RelationHintContext _localctx = new RelationHintContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_relationHint);
		int _la;
		try {
			setState(3440);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT_BRACKET:
				_localctx = new BracketRelationHintContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3418);
				match(LEFT_BRACKET);
				setState(3419);
				identifier();
				setState(3424);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3420);
					match(COMMA);
					setState(3421);
					identifier();
					}
					}
					setState(3426);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3427);
				match(RIGHT_BRACKET);
				}
				break;
			case HINT_START:
				_localctx = new CommentRelationHintContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3429);
				match(HINT_START);
				setState(3430);
				identifier();
				setState(3435);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3431);
					match(COMMA);
					setState(3432);
					identifier();
					}
					}
					setState(3437);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3438);
				match(HINT_END);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggClauseContext extends ParserRuleContext {
		public TerminalNode GROUP() { return getToken(PLParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(PLParser.BY, 0); }
		public GroupingElementContext groupingElement() {
			return getRuleContext(GroupingElementContext.class,0);
		}
		public AggClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterAggClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitAggClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitAggClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggClauseContext aggClause() throws RecognitionException {
		AggClauseContext _localctx = new AggClauseContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_aggClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3442);
			match(GROUP);
			setState(3443);
			match(BY);
			setState(3444);
			groupingElement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupingElementContext extends ParserRuleContext {
		public TerminalNode ROLLUP() { return getToken(PLParser.ROLLUP, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public TerminalNode CUBE() { return getToken(PLParser.CUBE, 0); }
		public TerminalNode GROUPING() { return getToken(PLParser.GROUPING, 0); }
		public TerminalNode SETS() { return getToken(PLParser.SETS, 0); }
		public List<GroupingSetContext> groupingSet() {
			return getRuleContexts(GroupingSetContext.class);
		}
		public GroupingSetContext groupingSet(int i) {
			return getRuleContext(GroupingSetContext.class,i);
		}
		public GroupingElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupingElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterGroupingElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitGroupingElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitGroupingElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupingElementContext groupingElement() throws RecognitionException {
		GroupingElementContext _localctx = new GroupingElementContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_groupingElement);
		int _la;
		try {
			int _alt;
			setState(3493);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,439,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3446);
				match(ROLLUP);
				setState(3447);
				match(LEFT_PAREN);
				setState(3456);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 182)) & ~0x3f) == 0 && ((1L << (_la - 182)) & ((1L << (LEFT_PAREN - 182)) | (1L << (LEFT_BRACKET - 182)) | (1L << (LEFT_BRACE - 182)) | (1L << (RIGHT_BRACE - 182)) | (1L << (ADD - 182)) | (1L << (ADDDATE - 182)) | (1L << (AFTER - 182)) | (1L << (AGG_STATE - 182)) | (1L << (AGGREGATE - 182)) | (1L << (ALIAS - 182)) | (1L << (ANALYZED - 182)) | (1L << (ARRAY - 182)) | (1L << (ARRAY_RANGE - 182)) | (1L << (AT - 182)) | (1L << (AUTHORS - 182)) | (1L << (AUTO_INCREMENT - 182)) | (1L << (BACKENDS - 182)) | (1L << (BACKUP - 182)) | (1L << (BEGIN - 182)) | (1L << (BELONG - 182)) | (1L << (BIN - 182)) | (1L << (BINARY - 182)) | (1L << (BITAND - 182)) | (1L << (BITMAP - 182)) | (1L << (BITMAP_UNION - 182)) | (1L << (BITOR - 182)) | (1L << (BITXOR - 182)) | (1L << (BLOB - 182)) | (1L << (BOOLEAN - 182)) | (1L << (BRIEF - 182)) | (1L << (BROKER - 182)) | (1L << (BUCKETS - 182)) | (1L << (BUILD - 182)) | (1L << (BUILTIN - 182)) | (1L << (BULK - 182)) | (1L << (CACHED - 182)) | (1L << (CALL - 182)) | (1L << (CASE - 182)) | (1L << (CAST - 182)) | (1L << (CATALOG - 182)) | (1L << (CATALOGS - 182)) | (1L << (CHAIN - 182)))) != 0) || ((((_la - 246)) & ~0x3f) == 0 && ((1L << (_la - 246)) & ((1L << (CHAR - 246)) | (1L << (CHARSET - 246)) | (1L << (CHECK - 246)) | (1L << (CLUSTER - 246)) | (1L << (CLUSTERS - 246)) | (1L << (COLLATION - 246)) | (1L << (COLLECT - 246)) | (1L << (COLUMNS - 246)) | (1L << (COMMENT - 246)) | (1L << (COMMIT - 246)) | (1L << (COMMITTED - 246)) | (1L << (COMPACT - 246)) | (1L << (COMPLETE - 246)) | (1L << (CONFIG - 246)) | (1L << (CONNECTION - 246)) | (1L << (CONNECTION_ID - 246)) | (1L << (CONSISTENT - 246)) | (1L << (CONSTRAINTS - 246)) | (1L << (CONVERT - 246)) | (1L << (COPY - 246)) | (1L << (COUNT - 246)) | (1L << (CREATION - 246)) | (1L << (CRON - 246)) | (1L << (CURRENT_CATALOG - 246)) | (1L << (CURRENT_DATE - 246)) | (1L << (CURRENT_TIME - 246)) | (1L << (CURRENT_TIMESTAMP - 246)) | (1L << (CURRENT_USER - 246)) | (1L << (DATA - 246)) | (1L << (DATABASE - 246)) | (1L << (DATE - 246)) | (1L << (DATE_ADD - 246)) | (1L << (DATE_CEIL - 246)) | (1L << (DATE_DIFF - 246)) | (1L << (DATE_FLOOR - 246)) | (1L << (DATE_SUB - 246)) | (1L << (DATEADD - 246)) | (1L << (DATEDIFF - 246)) | (1L << (DATETIME - 246)) | (1L << (DATETIMEV2 - 246)) | (1L << (DATEV2 - 246)) | (1L << (DATETIMEV1 - 246)) | (1L << (DATEV1 - 246)) | (1L << (DAY - 246)) | (1L << (DAYS_ADD - 246)) | (1L << (DAYS_SUB - 246)) | (1L << (DECIMAL - 246)) | (1L << (DECIMALV2 - 246)) | (1L << (DECIMALV3 - 246)) | (1L << (DEFERRED - 246)) | (1L << (DEMAND - 246)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (DIAGNOSE - 311)) | (1L << (DISTINCTPC - 311)) | (1L << (DISTINCTPCSA - 311)) | (1L << (DO - 311)) | (1L << (DORIS_INTERNAL_TABLE_ID - 311)) | (1L << (DUAL - 311)) | (1L << (DYNAMIC - 311)) | (1L << (ENABLE - 311)) | (1L << (ENCRYPTKEY - 311)) | (1L << (ENCRYPTKEYS - 311)) | (1L << (END - 311)) | (1L << (ENDS - 311)) | (1L << (ENGINE - 311)) | (1L << (ENGINES - 311)) | (1L << (ERRORS - 311)) | (1L << (EVENTS - 311)) | (1L << (EVERY - 311)) | (1L << (EXCLUDE - 311)) | (1L << (EXISTS - 311)) | (1L << (EXPIRED - 311)) | (1L << (EXTERNAL - 311)) | (1L << (EXTRACT - 311)) | (1L << (FAILED_LOGIN_ATTEMPTS - 311)) | (1L << (FALSE - 311)) | (1L << (FAST - 311)) | (1L << (FEATURE - 311)) | (1L << (FIELDS - 311)) | (1L << (FILE - 311)) | (1L << (FILTER - 311)) | (1L << (FIRST - 311)) | (1L << (FORMAT - 311)) | (1L << (FREE - 311)) | (1L << (FRONTENDS - 311)) | (1L << (FUNCTION - 311)) | (1L << (GENERIC - 311)) | (1L << (GLOBAL - 311)))) != 0) || ((((_la - 375)) & ~0x3f) == 0 && ((1L << (_la - 375)) & ((1L << (GRAPH - 375)) | (1L << (GROUPING - 375)) | (1L << (GROUPS - 375)) | (1L << (HASH - 375)) | (1L << (HDFS - 375)) | (1L << (HELP - 375)) | (1L << (HISTOGRAM - 375)) | (1L << (HLL_UNION - 375)) | (1L << (HOSTNAME - 375)) | (1L << (HOUR - 375)) | (1L << (HUB - 375)) | (1L << (IDENTIFIED - 375)) | (1L << (IF - 375)) | (1L << (IGNORE - 375)) | (1L << (IMMEDIATE - 375)) | (1L << (INCREMENTAL - 375)) | (1L << (INDEXES - 375)) | (1L << (INTERVAL - 375)) | (1L << (INVERTED - 375)) | (1L << (IPV4 - 375)) | (1L << (IPV6 - 375)) | (1L << (IS_NOT_NULL_PRED - 375)) | (1L << (IS_NULL_PRED - 375)) | (1L << (ISNULL - 375)) | (1L << (ISOLATION - 375)) | (1L << (JOB - 375)) | (1L << (JOBS - 375)) | (1L << (JSON - 375)) | (1L << (JSONB - 375)) | (1L << (KEY - 375)) | (1L << (LABEL - 375)) | (1L << (LAST - 375)) | (1L << (LDAP - 375)) | (1L << (LDAP_ADMIN_PASSWORD - 375)) | (1L << (LEFT - 375)) | (1L << (LESS - 375)) | (1L << (LEVEL - 375)) | (1L << (LIKE - 375)) | (1L << (LINES - 375)) | (1L << (LINK - 375)) | (1L << (LOCAL - 375)))) != 0) || ((((_la - 439)) & ~0x3f) == 0 && ((1L << (_la - 439)) & ((1L << (LOCALTIME - 439)) | (1L << (LOCALTIMESTAMP - 439)) | (1L << (LOCATION - 439)) | (1L << (LOCK - 439)) | (1L << (LOGICAL - 439)) | (1L << (MANUAL - 439)) | (1L << (MAP - 439)) | (1L << (MATCH_ALL - 439)) | (1L << (MATCH_ANY - 439)) | (1L << (MATCH_ELEMENT_EQ - 439)) | (1L << (MATCH_ELEMENT_GE - 439)) | (1L << (MATCH_ELEMENT_GT - 439)) | (1L << (MATCH_ELEMENT_LE - 439)) | (1L << (MATCH_ELEMENT_LT - 439)) | (1L << (MATCH_PHRASE - 439)) | (1L << (MATCH_PHRASE_EDGE - 439)) | (1L << (MATCH_PHRASE_PREFIX - 439)) | (1L << (MATCH_REGEXP - 439)) | (1L << (MATERIALIZED - 439)) | (1L << (MAX - 439)) | (1L << (MEMO - 439)) | (1L << (MERGE - 439)) | (1L << (MIGRATE - 439)) | (1L << (MIGRATIONS - 439)) | (1L << (MIN - 439)) | (1L << (MINUTE - 439)) | (1L << (MODIFY - 439)) | (1L << (MONTH - 439)) | (1L << (MTMV - 439)) | (1L << (NAME - 439)) | (1L << (NAMES - 439)) | (1L << (NEGATIVE - 439)) | (1L << (NEVER - 439)) | (1L << (NEXT - 439)) | (1L << (NGRAM_BF - 439)) | (1L << (NO - 439)) | (1L << (NON_NULLABLE - 439)) | (1L << (NOT - 439)) | (1L << (NULL - 439)) | (1L << (NULLS - 439)) | (1L << (OF - 439)) | (1L << (OFFSET - 439)) | (1L << (ONLY - 439)) | (1L << (OPEN - 439)) | (1L << (OPTIMIZED - 439)) | (1L << (PARAMETER - 439)) | (1L << (PARSED - 439)) | (1L << (PARTITIONS - 439)) | (1L << (PASSWORD - 439)) | (1L << (PASSWORD_EXPIRE - 439)))) != 0) || ((((_la - 503)) & ~0x3f) == 0 && ((1L << (_la - 503)) & ((1L << (PASSWORD_HISTORY - 503)) | (1L << (PASSWORD_LOCK_TIME - 503)) | (1L << (PASSWORD_REUSE - 503)) | (1L << (PATH - 503)) | (1L << (PAUSE - 503)) | (1L << (PERCENT - 503)) | (1L << (PERIOD - 503)) | (1L << (PERMISSIVE - 503)) | (1L << (PHYSICAL - 503)) | (1L << (PLAN - 503)) | (1L << (PROCESS - 503)) | (1L << (PLUGIN - 503)) | (1L << (PLUGINS - 503)) | (1L << (POLICY - 503)) | (1L << (PROC - 503)) | (1L << (PROCESSLIST - 503)) | (1L << (PROFILE - 503)) | (1L << (PROPERTIES - 503)) | (1L << (PROPERTY - 503)) | (1L << (QUANTILE_STATE - 503)) | (1L << (QUANTILE_UNION - 503)) | (1L << (QUERY - 503)) | (1L << (QUOTA - 503)) | (1L << (RANDOM - 503)) | (1L << (RECOVER - 503)) | (1L << (RECYCLE - 503)) | (1L << (REFRESH - 503)) | (1L << (REGEXP - 503)) | (1L << (REPEATABLE - 503)) | (1L << (REPLACE - 503)) | (1L << (REPLACE_IF_NOT_NULL - 503)) | (1L << (REPOSITORIES - 503)) | (1L << (REPOSITORY - 503)) | (1L << (RESOURCE - 503)) | (1L << (RESOURCES - 503)) | (1L << (RESTORE - 503)) | (1L << (RESTRICTIVE - 503)) | (1L << (RESUME - 503)) | (1L << (RETURNS - 503)) | (1L << (REWRITTEN - 503)) | (1L << (RIGHT - 503)) | (1L << (RLIKE - 503)) | (1L << (ROLLBACK - 503)) | (1L << (ROLLUP - 503)) | (1L << (ROUTINE - 503)) | (1L << (S3 - 503)))) != 0) || ((((_la - 567)) & ~0x3f) == 0 && ((1L << (_la - 567)) & ((1L << (SAMPLE - 567)) | (1L << (SCHEDULE - 567)) | (1L << (SCHEDULER - 567)) | (1L << (SCHEMA - 567)) | (1L << (SECOND - 567)) | (1L << (SEQUENCE - 567)) | (1L << (SERIALIZABLE - 567)) | (1L << (SESSION - 567)) | (1L << (SHAPE - 567)) | (1L << (SKEW - 567)) | (1L << (SNAPSHOT - 567)) | (1L << (SONAME - 567)) | (1L << (SPLIT - 567)) | (1L << (START - 567)) | (1L << (STARTS - 567)) | (1L << (STATS - 567)) | (1L << (STATUS - 567)) | (1L << (STOP - 567)) | (1L << (STORAGE - 567)) | (1L << (STREAM - 567)) | (1L << (STREAMING - 567)) | (1L << (STRING - 567)) | (1L << (STRUCT - 567)) | (1L << (SUBDATE - 567)) | (1L << (SUM - 567)) | (1L << (TABLES - 567)) | (1L << (TASK - 567)) | (1L << (TASKS - 567)) | (1L << (TEMPORARY - 567)) | (1L << (TEXT - 567)) | (1L << (THAN - 567)) | (1L << (TIME - 567)) | (1L << (TIMESTAMP - 567)) | (1L << (TIMESTAMPADD - 567)) | (1L << (TIMESTAMPDIFF - 567)) | (1L << (TRANSACTION - 567)) | (1L << (TREE - 567)) | (1L << (TRIGGERS - 567)) | (1L << (TRIM - 567)) | (1L << (TRUE - 567)) | (1L << (TRUNCATE - 567)) | (1L << (TYPE - 567)))) != 0) || ((((_la - 632)) & ~0x3f) == 0 && ((1L << (_la - 632)) & ((1L << (TYPES - 632)) | (1L << (UNCOMMITTED - 632)) | (1L << (UNLOCK - 632)) | (1L << (USER - 632)) | (1L << (VALUE - 632)) | (1L << (VARCHAR - 632)) | (1L << (VARIABLES - 632)) | (1L << (VARIANT - 632)) | (1L << (VERBOSE - 632)) | (1L << (VERSION - 632)) | (1L << (VIEW - 632)) | (1L << (WARNINGS - 632)) | (1L << (WEEK - 632)) | (1L << (WORK - 632)) | (1L << (YEAR - 632)) | (1L << (PLUS - 632)) | (1L << (SUBTRACT - 632)) | (1L << (ASTERISK - 632)) | (1L << (TILDE - 632)) | (1L << (LOGICALNOT - 632)) | (1L << (ATSIGN - 632)) | (1L << (DOUBLEATSIGN - 632)) | (1L << (STRING_LITERAL - 632)) | (1L << (INTEGER_VALUE - 632)) | (1L << (EXPONENT_VALUE - 632)) | (1L << (DECIMAL_VALUE - 632)))) != 0) || _la==IDENTIFIER || _la==BACKQUOTED_IDENTIFIER) {
					{
					setState(3448);
					expression();
					setState(3453);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3449);
						match(COMMA);
						setState(3450);
						expression();
						}
						}
						setState(3455);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(3458);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3459);
				match(CUBE);
				setState(3460);
				match(LEFT_PAREN);
				setState(3469);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 182)) & ~0x3f) == 0 && ((1L << (_la - 182)) & ((1L << (LEFT_PAREN - 182)) | (1L << (LEFT_BRACKET - 182)) | (1L << (LEFT_BRACE - 182)) | (1L << (RIGHT_BRACE - 182)) | (1L << (ADD - 182)) | (1L << (ADDDATE - 182)) | (1L << (AFTER - 182)) | (1L << (AGG_STATE - 182)) | (1L << (AGGREGATE - 182)) | (1L << (ALIAS - 182)) | (1L << (ANALYZED - 182)) | (1L << (ARRAY - 182)) | (1L << (ARRAY_RANGE - 182)) | (1L << (AT - 182)) | (1L << (AUTHORS - 182)) | (1L << (AUTO_INCREMENT - 182)) | (1L << (BACKENDS - 182)) | (1L << (BACKUP - 182)) | (1L << (BEGIN - 182)) | (1L << (BELONG - 182)) | (1L << (BIN - 182)) | (1L << (BINARY - 182)) | (1L << (BITAND - 182)) | (1L << (BITMAP - 182)) | (1L << (BITMAP_UNION - 182)) | (1L << (BITOR - 182)) | (1L << (BITXOR - 182)) | (1L << (BLOB - 182)) | (1L << (BOOLEAN - 182)) | (1L << (BRIEF - 182)) | (1L << (BROKER - 182)) | (1L << (BUCKETS - 182)) | (1L << (BUILD - 182)) | (1L << (BUILTIN - 182)) | (1L << (BULK - 182)) | (1L << (CACHED - 182)) | (1L << (CALL - 182)) | (1L << (CASE - 182)) | (1L << (CAST - 182)) | (1L << (CATALOG - 182)) | (1L << (CATALOGS - 182)) | (1L << (CHAIN - 182)))) != 0) || ((((_la - 246)) & ~0x3f) == 0 && ((1L << (_la - 246)) & ((1L << (CHAR - 246)) | (1L << (CHARSET - 246)) | (1L << (CHECK - 246)) | (1L << (CLUSTER - 246)) | (1L << (CLUSTERS - 246)) | (1L << (COLLATION - 246)) | (1L << (COLLECT - 246)) | (1L << (COLUMNS - 246)) | (1L << (COMMENT - 246)) | (1L << (COMMIT - 246)) | (1L << (COMMITTED - 246)) | (1L << (COMPACT - 246)) | (1L << (COMPLETE - 246)) | (1L << (CONFIG - 246)) | (1L << (CONNECTION - 246)) | (1L << (CONNECTION_ID - 246)) | (1L << (CONSISTENT - 246)) | (1L << (CONSTRAINTS - 246)) | (1L << (CONVERT - 246)) | (1L << (COPY - 246)) | (1L << (COUNT - 246)) | (1L << (CREATION - 246)) | (1L << (CRON - 246)) | (1L << (CURRENT_CATALOG - 246)) | (1L << (CURRENT_DATE - 246)) | (1L << (CURRENT_TIME - 246)) | (1L << (CURRENT_TIMESTAMP - 246)) | (1L << (CURRENT_USER - 246)) | (1L << (DATA - 246)) | (1L << (DATABASE - 246)) | (1L << (DATE - 246)) | (1L << (DATE_ADD - 246)) | (1L << (DATE_CEIL - 246)) | (1L << (DATE_DIFF - 246)) | (1L << (DATE_FLOOR - 246)) | (1L << (DATE_SUB - 246)) | (1L << (DATEADD - 246)) | (1L << (DATEDIFF - 246)) | (1L << (DATETIME - 246)) | (1L << (DATETIMEV2 - 246)) | (1L << (DATEV2 - 246)) | (1L << (DATETIMEV1 - 246)) | (1L << (DATEV1 - 246)) | (1L << (DAY - 246)) | (1L << (DAYS_ADD - 246)) | (1L << (DAYS_SUB - 246)) | (1L << (DECIMAL - 246)) | (1L << (DECIMALV2 - 246)) | (1L << (DECIMALV3 - 246)) | (1L << (DEFERRED - 246)) | (1L << (DEMAND - 246)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (DIAGNOSE - 311)) | (1L << (DISTINCTPC - 311)) | (1L << (DISTINCTPCSA - 311)) | (1L << (DO - 311)) | (1L << (DORIS_INTERNAL_TABLE_ID - 311)) | (1L << (DUAL - 311)) | (1L << (DYNAMIC - 311)) | (1L << (ENABLE - 311)) | (1L << (ENCRYPTKEY - 311)) | (1L << (ENCRYPTKEYS - 311)) | (1L << (END - 311)) | (1L << (ENDS - 311)) | (1L << (ENGINE - 311)) | (1L << (ENGINES - 311)) | (1L << (ERRORS - 311)) | (1L << (EVENTS - 311)) | (1L << (EVERY - 311)) | (1L << (EXCLUDE - 311)) | (1L << (EXISTS - 311)) | (1L << (EXPIRED - 311)) | (1L << (EXTERNAL - 311)) | (1L << (EXTRACT - 311)) | (1L << (FAILED_LOGIN_ATTEMPTS - 311)) | (1L << (FALSE - 311)) | (1L << (FAST - 311)) | (1L << (FEATURE - 311)) | (1L << (FIELDS - 311)) | (1L << (FILE - 311)) | (1L << (FILTER - 311)) | (1L << (FIRST - 311)) | (1L << (FORMAT - 311)) | (1L << (FREE - 311)) | (1L << (FRONTENDS - 311)) | (1L << (FUNCTION - 311)) | (1L << (GENERIC - 311)) | (1L << (GLOBAL - 311)))) != 0) || ((((_la - 375)) & ~0x3f) == 0 && ((1L << (_la - 375)) & ((1L << (GRAPH - 375)) | (1L << (GROUPING - 375)) | (1L << (GROUPS - 375)) | (1L << (HASH - 375)) | (1L << (HDFS - 375)) | (1L << (HELP - 375)) | (1L << (HISTOGRAM - 375)) | (1L << (HLL_UNION - 375)) | (1L << (HOSTNAME - 375)) | (1L << (HOUR - 375)) | (1L << (HUB - 375)) | (1L << (IDENTIFIED - 375)) | (1L << (IF - 375)) | (1L << (IGNORE - 375)) | (1L << (IMMEDIATE - 375)) | (1L << (INCREMENTAL - 375)) | (1L << (INDEXES - 375)) | (1L << (INTERVAL - 375)) | (1L << (INVERTED - 375)) | (1L << (IPV4 - 375)) | (1L << (IPV6 - 375)) | (1L << (IS_NOT_NULL_PRED - 375)) | (1L << (IS_NULL_PRED - 375)) | (1L << (ISNULL - 375)) | (1L << (ISOLATION - 375)) | (1L << (JOB - 375)) | (1L << (JOBS - 375)) | (1L << (JSON - 375)) | (1L << (JSONB - 375)) | (1L << (KEY - 375)) | (1L << (LABEL - 375)) | (1L << (LAST - 375)) | (1L << (LDAP - 375)) | (1L << (LDAP_ADMIN_PASSWORD - 375)) | (1L << (LEFT - 375)) | (1L << (LESS - 375)) | (1L << (LEVEL - 375)) | (1L << (LIKE - 375)) | (1L << (LINES - 375)) | (1L << (LINK - 375)) | (1L << (LOCAL - 375)))) != 0) || ((((_la - 439)) & ~0x3f) == 0 && ((1L << (_la - 439)) & ((1L << (LOCALTIME - 439)) | (1L << (LOCALTIMESTAMP - 439)) | (1L << (LOCATION - 439)) | (1L << (LOCK - 439)) | (1L << (LOGICAL - 439)) | (1L << (MANUAL - 439)) | (1L << (MAP - 439)) | (1L << (MATCH_ALL - 439)) | (1L << (MATCH_ANY - 439)) | (1L << (MATCH_ELEMENT_EQ - 439)) | (1L << (MATCH_ELEMENT_GE - 439)) | (1L << (MATCH_ELEMENT_GT - 439)) | (1L << (MATCH_ELEMENT_LE - 439)) | (1L << (MATCH_ELEMENT_LT - 439)) | (1L << (MATCH_PHRASE - 439)) | (1L << (MATCH_PHRASE_EDGE - 439)) | (1L << (MATCH_PHRASE_PREFIX - 439)) | (1L << (MATCH_REGEXP - 439)) | (1L << (MATERIALIZED - 439)) | (1L << (MAX - 439)) | (1L << (MEMO - 439)) | (1L << (MERGE - 439)) | (1L << (MIGRATE - 439)) | (1L << (MIGRATIONS - 439)) | (1L << (MIN - 439)) | (1L << (MINUTE - 439)) | (1L << (MODIFY - 439)) | (1L << (MONTH - 439)) | (1L << (MTMV - 439)) | (1L << (NAME - 439)) | (1L << (NAMES - 439)) | (1L << (NEGATIVE - 439)) | (1L << (NEVER - 439)) | (1L << (NEXT - 439)) | (1L << (NGRAM_BF - 439)) | (1L << (NO - 439)) | (1L << (NON_NULLABLE - 439)) | (1L << (NOT - 439)) | (1L << (NULL - 439)) | (1L << (NULLS - 439)) | (1L << (OF - 439)) | (1L << (OFFSET - 439)) | (1L << (ONLY - 439)) | (1L << (OPEN - 439)) | (1L << (OPTIMIZED - 439)) | (1L << (PARAMETER - 439)) | (1L << (PARSED - 439)) | (1L << (PARTITIONS - 439)) | (1L << (PASSWORD - 439)) | (1L << (PASSWORD_EXPIRE - 439)))) != 0) || ((((_la - 503)) & ~0x3f) == 0 && ((1L << (_la - 503)) & ((1L << (PASSWORD_HISTORY - 503)) | (1L << (PASSWORD_LOCK_TIME - 503)) | (1L << (PASSWORD_REUSE - 503)) | (1L << (PATH - 503)) | (1L << (PAUSE - 503)) | (1L << (PERCENT - 503)) | (1L << (PERIOD - 503)) | (1L << (PERMISSIVE - 503)) | (1L << (PHYSICAL - 503)) | (1L << (PLAN - 503)) | (1L << (PROCESS - 503)) | (1L << (PLUGIN - 503)) | (1L << (PLUGINS - 503)) | (1L << (POLICY - 503)) | (1L << (PROC - 503)) | (1L << (PROCESSLIST - 503)) | (1L << (PROFILE - 503)) | (1L << (PROPERTIES - 503)) | (1L << (PROPERTY - 503)) | (1L << (QUANTILE_STATE - 503)) | (1L << (QUANTILE_UNION - 503)) | (1L << (QUERY - 503)) | (1L << (QUOTA - 503)) | (1L << (RANDOM - 503)) | (1L << (RECOVER - 503)) | (1L << (RECYCLE - 503)) | (1L << (REFRESH - 503)) | (1L << (REGEXP - 503)) | (1L << (REPEATABLE - 503)) | (1L << (REPLACE - 503)) | (1L << (REPLACE_IF_NOT_NULL - 503)) | (1L << (REPOSITORIES - 503)) | (1L << (REPOSITORY - 503)) | (1L << (RESOURCE - 503)) | (1L << (RESOURCES - 503)) | (1L << (RESTORE - 503)) | (1L << (RESTRICTIVE - 503)) | (1L << (RESUME - 503)) | (1L << (RETURNS - 503)) | (1L << (REWRITTEN - 503)) | (1L << (RIGHT - 503)) | (1L << (RLIKE - 503)) | (1L << (ROLLBACK - 503)) | (1L << (ROLLUP - 503)) | (1L << (ROUTINE - 503)) | (1L << (S3 - 503)))) != 0) || ((((_la - 567)) & ~0x3f) == 0 && ((1L << (_la - 567)) & ((1L << (SAMPLE - 567)) | (1L << (SCHEDULE - 567)) | (1L << (SCHEDULER - 567)) | (1L << (SCHEMA - 567)) | (1L << (SECOND - 567)) | (1L << (SEQUENCE - 567)) | (1L << (SERIALIZABLE - 567)) | (1L << (SESSION - 567)) | (1L << (SHAPE - 567)) | (1L << (SKEW - 567)) | (1L << (SNAPSHOT - 567)) | (1L << (SONAME - 567)) | (1L << (SPLIT - 567)) | (1L << (START - 567)) | (1L << (STARTS - 567)) | (1L << (STATS - 567)) | (1L << (STATUS - 567)) | (1L << (STOP - 567)) | (1L << (STORAGE - 567)) | (1L << (STREAM - 567)) | (1L << (STREAMING - 567)) | (1L << (STRING - 567)) | (1L << (STRUCT - 567)) | (1L << (SUBDATE - 567)) | (1L << (SUM - 567)) | (1L << (TABLES - 567)) | (1L << (TASK - 567)) | (1L << (TASKS - 567)) | (1L << (TEMPORARY - 567)) | (1L << (TEXT - 567)) | (1L << (THAN - 567)) | (1L << (TIME - 567)) | (1L << (TIMESTAMP - 567)) | (1L << (TIMESTAMPADD - 567)) | (1L << (TIMESTAMPDIFF - 567)) | (1L << (TRANSACTION - 567)) | (1L << (TREE - 567)) | (1L << (TRIGGERS - 567)) | (1L << (TRIM - 567)) | (1L << (TRUE - 567)) | (1L << (TRUNCATE - 567)) | (1L << (TYPE - 567)))) != 0) || ((((_la - 632)) & ~0x3f) == 0 && ((1L << (_la - 632)) & ((1L << (TYPES - 632)) | (1L << (UNCOMMITTED - 632)) | (1L << (UNLOCK - 632)) | (1L << (USER - 632)) | (1L << (VALUE - 632)) | (1L << (VARCHAR - 632)) | (1L << (VARIABLES - 632)) | (1L << (VARIANT - 632)) | (1L << (VERBOSE - 632)) | (1L << (VERSION - 632)) | (1L << (VIEW - 632)) | (1L << (WARNINGS - 632)) | (1L << (WEEK - 632)) | (1L << (WORK - 632)) | (1L << (YEAR - 632)) | (1L << (PLUS - 632)) | (1L << (SUBTRACT - 632)) | (1L << (ASTERISK - 632)) | (1L << (TILDE - 632)) | (1L << (LOGICALNOT - 632)) | (1L << (ATSIGN - 632)) | (1L << (DOUBLEATSIGN - 632)) | (1L << (STRING_LITERAL - 632)) | (1L << (INTEGER_VALUE - 632)) | (1L << (EXPONENT_VALUE - 632)) | (1L << (DECIMAL_VALUE - 632)))) != 0) || _la==IDENTIFIER || _la==BACKQUOTED_IDENTIFIER) {
					{
					setState(3461);
					expression();
					setState(3466);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3462);
						match(COMMA);
						setState(3463);
						expression();
						}
						}
						setState(3468);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(3471);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3472);
				match(GROUPING);
				setState(3473);
				match(SETS);
				setState(3474);
				match(LEFT_PAREN);
				setState(3475);
				groupingSet();
				setState(3480);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3476);
					match(COMMA);
					setState(3477);
					groupingSet();
					}
					}
					setState(3482);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3483);
				match(RIGHT_PAREN);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3485);
				expression();
				setState(3490);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,438,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3486);
						match(COMMA);
						setState(3487);
						expression();
						}
						} 
					}
					setState(3492);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,438,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupingSetContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public GroupingSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupingSet; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterGroupingSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitGroupingSet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitGroupingSet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupingSetContext groupingSet() throws RecognitionException {
		GroupingSetContext _localctx = new GroupingSetContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_groupingSet);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3495);
			match(LEFT_PAREN);
			setState(3504);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 182)) & ~0x3f) == 0 && ((1L << (_la - 182)) & ((1L << (LEFT_PAREN - 182)) | (1L << (LEFT_BRACKET - 182)) | (1L << (LEFT_BRACE - 182)) | (1L << (RIGHT_BRACE - 182)) | (1L << (ADD - 182)) | (1L << (ADDDATE - 182)) | (1L << (AFTER - 182)) | (1L << (AGG_STATE - 182)) | (1L << (AGGREGATE - 182)) | (1L << (ALIAS - 182)) | (1L << (ANALYZED - 182)) | (1L << (ARRAY - 182)) | (1L << (ARRAY_RANGE - 182)) | (1L << (AT - 182)) | (1L << (AUTHORS - 182)) | (1L << (AUTO_INCREMENT - 182)) | (1L << (BACKENDS - 182)) | (1L << (BACKUP - 182)) | (1L << (BEGIN - 182)) | (1L << (BELONG - 182)) | (1L << (BIN - 182)) | (1L << (BINARY - 182)) | (1L << (BITAND - 182)) | (1L << (BITMAP - 182)) | (1L << (BITMAP_UNION - 182)) | (1L << (BITOR - 182)) | (1L << (BITXOR - 182)) | (1L << (BLOB - 182)) | (1L << (BOOLEAN - 182)) | (1L << (BRIEF - 182)) | (1L << (BROKER - 182)) | (1L << (BUCKETS - 182)) | (1L << (BUILD - 182)) | (1L << (BUILTIN - 182)) | (1L << (BULK - 182)) | (1L << (CACHED - 182)) | (1L << (CALL - 182)) | (1L << (CASE - 182)) | (1L << (CAST - 182)) | (1L << (CATALOG - 182)) | (1L << (CATALOGS - 182)) | (1L << (CHAIN - 182)))) != 0) || ((((_la - 246)) & ~0x3f) == 0 && ((1L << (_la - 246)) & ((1L << (CHAR - 246)) | (1L << (CHARSET - 246)) | (1L << (CHECK - 246)) | (1L << (CLUSTER - 246)) | (1L << (CLUSTERS - 246)) | (1L << (COLLATION - 246)) | (1L << (COLLECT - 246)) | (1L << (COLUMNS - 246)) | (1L << (COMMENT - 246)) | (1L << (COMMIT - 246)) | (1L << (COMMITTED - 246)) | (1L << (COMPACT - 246)) | (1L << (COMPLETE - 246)) | (1L << (CONFIG - 246)) | (1L << (CONNECTION - 246)) | (1L << (CONNECTION_ID - 246)) | (1L << (CONSISTENT - 246)) | (1L << (CONSTRAINTS - 246)) | (1L << (CONVERT - 246)) | (1L << (COPY - 246)) | (1L << (COUNT - 246)) | (1L << (CREATION - 246)) | (1L << (CRON - 246)) | (1L << (CURRENT_CATALOG - 246)) | (1L << (CURRENT_DATE - 246)) | (1L << (CURRENT_TIME - 246)) | (1L << (CURRENT_TIMESTAMP - 246)) | (1L << (CURRENT_USER - 246)) | (1L << (DATA - 246)) | (1L << (DATABASE - 246)) | (1L << (DATE - 246)) | (1L << (DATE_ADD - 246)) | (1L << (DATE_CEIL - 246)) | (1L << (DATE_DIFF - 246)) | (1L << (DATE_FLOOR - 246)) | (1L << (DATE_SUB - 246)) | (1L << (DATEADD - 246)) | (1L << (DATEDIFF - 246)) | (1L << (DATETIME - 246)) | (1L << (DATETIMEV2 - 246)) | (1L << (DATEV2 - 246)) | (1L << (DATETIMEV1 - 246)) | (1L << (DATEV1 - 246)) | (1L << (DAY - 246)) | (1L << (DAYS_ADD - 246)) | (1L << (DAYS_SUB - 246)) | (1L << (DECIMAL - 246)) | (1L << (DECIMALV2 - 246)) | (1L << (DECIMALV3 - 246)) | (1L << (DEFERRED - 246)) | (1L << (DEMAND - 246)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (DIAGNOSE - 311)) | (1L << (DISTINCTPC - 311)) | (1L << (DISTINCTPCSA - 311)) | (1L << (DO - 311)) | (1L << (DORIS_INTERNAL_TABLE_ID - 311)) | (1L << (DUAL - 311)) | (1L << (DYNAMIC - 311)) | (1L << (ENABLE - 311)) | (1L << (ENCRYPTKEY - 311)) | (1L << (ENCRYPTKEYS - 311)) | (1L << (END - 311)) | (1L << (ENDS - 311)) | (1L << (ENGINE - 311)) | (1L << (ENGINES - 311)) | (1L << (ERRORS - 311)) | (1L << (EVENTS - 311)) | (1L << (EVERY - 311)) | (1L << (EXCLUDE - 311)) | (1L << (EXISTS - 311)) | (1L << (EXPIRED - 311)) | (1L << (EXTERNAL - 311)) | (1L << (EXTRACT - 311)) | (1L << (FAILED_LOGIN_ATTEMPTS - 311)) | (1L << (FALSE - 311)) | (1L << (FAST - 311)) | (1L << (FEATURE - 311)) | (1L << (FIELDS - 311)) | (1L << (FILE - 311)) | (1L << (FILTER - 311)) | (1L << (FIRST - 311)) | (1L << (FORMAT - 311)) | (1L << (FREE - 311)) | (1L << (FRONTENDS - 311)) | (1L << (FUNCTION - 311)) | (1L << (GENERIC - 311)) | (1L << (GLOBAL - 311)))) != 0) || ((((_la - 375)) & ~0x3f) == 0 && ((1L << (_la - 375)) & ((1L << (GRAPH - 375)) | (1L << (GROUPING - 375)) | (1L << (GROUPS - 375)) | (1L << (HASH - 375)) | (1L << (HDFS - 375)) | (1L << (HELP - 375)) | (1L << (HISTOGRAM - 375)) | (1L << (HLL_UNION - 375)) | (1L << (HOSTNAME - 375)) | (1L << (HOUR - 375)) | (1L << (HUB - 375)) | (1L << (IDENTIFIED - 375)) | (1L << (IF - 375)) | (1L << (IGNORE - 375)) | (1L << (IMMEDIATE - 375)) | (1L << (INCREMENTAL - 375)) | (1L << (INDEXES - 375)) | (1L << (INTERVAL - 375)) | (1L << (INVERTED - 375)) | (1L << (IPV4 - 375)) | (1L << (IPV6 - 375)) | (1L << (IS_NOT_NULL_PRED - 375)) | (1L << (IS_NULL_PRED - 375)) | (1L << (ISNULL - 375)) | (1L << (ISOLATION - 375)) | (1L << (JOB - 375)) | (1L << (JOBS - 375)) | (1L << (JSON - 375)) | (1L << (JSONB - 375)) | (1L << (KEY - 375)) | (1L << (LABEL - 375)) | (1L << (LAST - 375)) | (1L << (LDAP - 375)) | (1L << (LDAP_ADMIN_PASSWORD - 375)) | (1L << (LEFT - 375)) | (1L << (LESS - 375)) | (1L << (LEVEL - 375)) | (1L << (LIKE - 375)) | (1L << (LINES - 375)) | (1L << (LINK - 375)) | (1L << (LOCAL - 375)))) != 0) || ((((_la - 439)) & ~0x3f) == 0 && ((1L << (_la - 439)) & ((1L << (LOCALTIME - 439)) | (1L << (LOCALTIMESTAMP - 439)) | (1L << (LOCATION - 439)) | (1L << (LOCK - 439)) | (1L << (LOGICAL - 439)) | (1L << (MANUAL - 439)) | (1L << (MAP - 439)) | (1L << (MATCH_ALL - 439)) | (1L << (MATCH_ANY - 439)) | (1L << (MATCH_ELEMENT_EQ - 439)) | (1L << (MATCH_ELEMENT_GE - 439)) | (1L << (MATCH_ELEMENT_GT - 439)) | (1L << (MATCH_ELEMENT_LE - 439)) | (1L << (MATCH_ELEMENT_LT - 439)) | (1L << (MATCH_PHRASE - 439)) | (1L << (MATCH_PHRASE_EDGE - 439)) | (1L << (MATCH_PHRASE_PREFIX - 439)) | (1L << (MATCH_REGEXP - 439)) | (1L << (MATERIALIZED - 439)) | (1L << (MAX - 439)) | (1L << (MEMO - 439)) | (1L << (MERGE - 439)) | (1L << (MIGRATE - 439)) | (1L << (MIGRATIONS - 439)) | (1L << (MIN - 439)) | (1L << (MINUTE - 439)) | (1L << (MODIFY - 439)) | (1L << (MONTH - 439)) | (1L << (MTMV - 439)) | (1L << (NAME - 439)) | (1L << (NAMES - 439)) | (1L << (NEGATIVE - 439)) | (1L << (NEVER - 439)) | (1L << (NEXT - 439)) | (1L << (NGRAM_BF - 439)) | (1L << (NO - 439)) | (1L << (NON_NULLABLE - 439)) | (1L << (NOT - 439)) | (1L << (NULL - 439)) | (1L << (NULLS - 439)) | (1L << (OF - 439)) | (1L << (OFFSET - 439)) | (1L << (ONLY - 439)) | (1L << (OPEN - 439)) | (1L << (OPTIMIZED - 439)) | (1L << (PARAMETER - 439)) | (1L << (PARSED - 439)) | (1L << (PARTITIONS - 439)) | (1L << (PASSWORD - 439)) | (1L << (PASSWORD_EXPIRE - 439)))) != 0) || ((((_la - 503)) & ~0x3f) == 0 && ((1L << (_la - 503)) & ((1L << (PASSWORD_HISTORY - 503)) | (1L << (PASSWORD_LOCK_TIME - 503)) | (1L << (PASSWORD_REUSE - 503)) | (1L << (PATH - 503)) | (1L << (PAUSE - 503)) | (1L << (PERCENT - 503)) | (1L << (PERIOD - 503)) | (1L << (PERMISSIVE - 503)) | (1L << (PHYSICAL - 503)) | (1L << (PLAN - 503)) | (1L << (PROCESS - 503)) | (1L << (PLUGIN - 503)) | (1L << (PLUGINS - 503)) | (1L << (POLICY - 503)) | (1L << (PROC - 503)) | (1L << (PROCESSLIST - 503)) | (1L << (PROFILE - 503)) | (1L << (PROPERTIES - 503)) | (1L << (PROPERTY - 503)) | (1L << (QUANTILE_STATE - 503)) | (1L << (QUANTILE_UNION - 503)) | (1L << (QUERY - 503)) | (1L << (QUOTA - 503)) | (1L << (RANDOM - 503)) | (1L << (RECOVER - 503)) | (1L << (RECYCLE - 503)) | (1L << (REFRESH - 503)) | (1L << (REGEXP - 503)) | (1L << (REPEATABLE - 503)) | (1L << (REPLACE - 503)) | (1L << (REPLACE_IF_NOT_NULL - 503)) | (1L << (REPOSITORIES - 503)) | (1L << (REPOSITORY - 503)) | (1L << (RESOURCE - 503)) | (1L << (RESOURCES - 503)) | (1L << (RESTORE - 503)) | (1L << (RESTRICTIVE - 503)) | (1L << (RESUME - 503)) | (1L << (RETURNS - 503)) | (1L << (REWRITTEN - 503)) | (1L << (RIGHT - 503)) | (1L << (RLIKE - 503)) | (1L << (ROLLBACK - 503)) | (1L << (ROLLUP - 503)) | (1L << (ROUTINE - 503)) | (1L << (S3 - 503)))) != 0) || ((((_la - 567)) & ~0x3f) == 0 && ((1L << (_la - 567)) & ((1L << (SAMPLE - 567)) | (1L << (SCHEDULE - 567)) | (1L << (SCHEDULER - 567)) | (1L << (SCHEMA - 567)) | (1L << (SECOND - 567)) | (1L << (SEQUENCE - 567)) | (1L << (SERIALIZABLE - 567)) | (1L << (SESSION - 567)) | (1L << (SHAPE - 567)) | (1L << (SKEW - 567)) | (1L << (SNAPSHOT - 567)) | (1L << (SONAME - 567)) | (1L << (SPLIT - 567)) | (1L << (START - 567)) | (1L << (STARTS - 567)) | (1L << (STATS - 567)) | (1L << (STATUS - 567)) | (1L << (STOP - 567)) | (1L << (STORAGE - 567)) | (1L << (STREAM - 567)) | (1L << (STREAMING - 567)) | (1L << (STRING - 567)) | (1L << (STRUCT - 567)) | (1L << (SUBDATE - 567)) | (1L << (SUM - 567)) | (1L << (TABLES - 567)) | (1L << (TASK - 567)) | (1L << (TASKS - 567)) | (1L << (TEMPORARY - 567)) | (1L << (TEXT - 567)) | (1L << (THAN - 567)) | (1L << (TIME - 567)) | (1L << (TIMESTAMP - 567)) | (1L << (TIMESTAMPADD - 567)) | (1L << (TIMESTAMPDIFF - 567)) | (1L << (TRANSACTION - 567)) | (1L << (TREE - 567)) | (1L << (TRIGGERS - 567)) | (1L << (TRIM - 567)) | (1L << (TRUE - 567)) | (1L << (TRUNCATE - 567)) | (1L << (TYPE - 567)))) != 0) || ((((_la - 632)) & ~0x3f) == 0 && ((1L << (_la - 632)) & ((1L << (TYPES - 632)) | (1L << (UNCOMMITTED - 632)) | (1L << (UNLOCK - 632)) | (1L << (USER - 632)) | (1L << (VALUE - 632)) | (1L << (VARCHAR - 632)) | (1L << (VARIABLES - 632)) | (1L << (VARIANT - 632)) | (1L << (VERBOSE - 632)) | (1L << (VERSION - 632)) | (1L << (VIEW - 632)) | (1L << (WARNINGS - 632)) | (1L << (WEEK - 632)) | (1L << (WORK - 632)) | (1L << (YEAR - 632)) | (1L << (PLUS - 632)) | (1L << (SUBTRACT - 632)) | (1L << (ASTERISK - 632)) | (1L << (TILDE - 632)) | (1L << (LOGICALNOT - 632)) | (1L << (ATSIGN - 632)) | (1L << (DOUBLEATSIGN - 632)) | (1L << (STRING_LITERAL - 632)) | (1L << (INTEGER_VALUE - 632)) | (1L << (EXPONENT_VALUE - 632)) | (1L << (DECIMAL_VALUE - 632)))) != 0) || _la==IDENTIFIER || _la==BACKQUOTED_IDENTIFIER) {
				{
				setState(3496);
				expression();
				setState(3501);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3497);
					match(COMMA);
					setState(3498);
					expression();
					}
					}
					setState(3503);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(3506);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HavingClauseContext extends ParserRuleContext {
		public TerminalNode HAVING() { return getToken(PLParser.HAVING, 0); }
		public BooleanExpressionContext booleanExpression() {
			return getRuleContext(BooleanExpressionContext.class,0);
		}
		public HavingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_havingClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterHavingClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitHavingClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitHavingClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HavingClauseContext havingClause() throws RecognitionException {
		HavingClauseContext _localctx = new HavingClauseContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_havingClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3508);
			match(HAVING);
			setState(3509);
			booleanExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectHintContext extends ParserRuleContext {
		public HintStatementContext hintStatement;
		public List<HintStatementContext> hintStatements = new ArrayList<HintStatementContext>();
		public TerminalNode HINT_START() { return getToken(PLParser.HINT_START, 0); }
		public TerminalNode HINT_END() { return getToken(PLParser.HINT_END, 0); }
		public List<HintStatementContext> hintStatement() {
			return getRuleContexts(HintStatementContext.class);
		}
		public HintStatementContext hintStatement(int i) {
			return getRuleContext(HintStatementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public SelectHintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectHint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterSelectHint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitSelectHint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitSelectHint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectHintContext selectHint() throws RecognitionException {
		SelectHintContext _localctx = new SelectHintContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_selectHint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3511);
			match(HINT_START);
			setState(3512);
			((SelectHintContext)_localctx).hintStatement = hintStatement();
			((SelectHintContext)_localctx).hintStatements.add(((SelectHintContext)_localctx).hintStatement);
			setState(3519);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & ((1L << (COMMA - 184)) | (1L << (LEFT_BRACE - 184)) | (1L << (RIGHT_BRACE - 184)) | (1L << (ADDDATE - 184)) | (1L << (AFTER - 184)) | (1L << (AGG_STATE - 184)) | (1L << (AGGREGATE - 184)) | (1L << (ALIAS - 184)) | (1L << (ANALYZED - 184)) | (1L << (ARRAY - 184)) | (1L << (ARRAY_RANGE - 184)) | (1L << (AT - 184)) | (1L << (AUTHORS - 184)) | (1L << (AUTO_INCREMENT - 184)) | (1L << (BACKENDS - 184)) | (1L << (BACKUP - 184)) | (1L << (BEGIN - 184)) | (1L << (BELONG - 184)) | (1L << (BIN - 184)) | (1L << (BITAND - 184)) | (1L << (BITMAP - 184)) | (1L << (BITMAP_UNION - 184)) | (1L << (BITOR - 184)) | (1L << (BITXOR - 184)) | (1L << (BLOB - 184)) | (1L << (BOOLEAN - 184)) | (1L << (BRIEF - 184)) | (1L << (BROKER - 184)) | (1L << (BUCKETS - 184)) | (1L << (BUILD - 184)) | (1L << (BUILTIN - 184)) | (1L << (BULK - 184)) | (1L << (CACHED - 184)) | (1L << (CALL - 184)) | (1L << (CATALOG - 184)) | (1L << (CATALOGS - 184)) | (1L << (CHAIN - 184)) | (1L << (CHAR - 184)) | (1L << (CHARSET - 184)))) != 0) || ((((_la - 248)) & ~0x3f) == 0 && ((1L << (_la - 248)) & ((1L << (CHECK - 248)) | (1L << (CLUSTER - 248)) | (1L << (CLUSTERS - 248)) | (1L << (COLLATION - 248)) | (1L << (COLLECT - 248)) | (1L << (COLUMNS - 248)) | (1L << (COMMENT - 248)) | (1L << (COMMIT - 248)) | (1L << (COMMITTED - 248)) | (1L << (COMPACT - 248)) | (1L << (COMPLETE - 248)) | (1L << (CONFIG - 248)) | (1L << (CONNECTION - 248)) | (1L << (CONNECTION_ID - 248)) | (1L << (CONSISTENT - 248)) | (1L << (CONSTRAINTS - 248)) | (1L << (CONVERT - 248)) | (1L << (COPY - 248)) | (1L << (COUNT - 248)) | (1L << (CREATION - 248)) | (1L << (CRON - 248)) | (1L << (CURRENT_CATALOG - 248)) | (1L << (CURRENT_DATE - 248)) | (1L << (CURRENT_TIME - 248)) | (1L << (CURRENT_TIMESTAMP - 248)) | (1L << (CURRENT_USER - 248)) | (1L << (DATA - 248)) | (1L << (DATE - 248)) | (1L << (DATE_ADD - 248)) | (1L << (DATE_CEIL - 248)) | (1L << (DATE_DIFF - 248)) | (1L << (DATE_FLOOR - 248)) | (1L << (DATE_SUB - 248)) | (1L << (DATEADD - 248)) | (1L << (DATEDIFF - 248)) | (1L << (DATETIME - 248)) | (1L << (DATETIMEV2 - 248)) | (1L << (DATEV2 - 248)) | (1L << (DATETIMEV1 - 248)) | (1L << (DATEV1 - 248)) | (1L << (DAY - 248)) | (1L << (DAYS_ADD - 248)) | (1L << (DAYS_SUB - 248)) | (1L << (DECIMAL - 248)) | (1L << (DECIMALV2 - 248)) | (1L << (DECIMALV3 - 248)) | (1L << (DEFERRED - 248)) | (1L << (DEMAND - 248)) | (1L << (DIAGNOSE - 248)))) != 0) || ((((_la - 314)) & ~0x3f) == 0 && ((1L << (_la - 314)) & ((1L << (DISTINCTPC - 314)) | (1L << (DISTINCTPCSA - 314)) | (1L << (DO - 314)) | (1L << (DORIS_INTERNAL_TABLE_ID - 314)) | (1L << (DUAL - 314)) | (1L << (DYNAMIC - 314)) | (1L << (ENABLE - 314)) | (1L << (ENCRYPTKEY - 314)) | (1L << (ENCRYPTKEYS - 314)) | (1L << (END - 314)) | (1L << (ENDS - 314)) | (1L << (ENGINE - 314)) | (1L << (ENGINES - 314)) | (1L << (ERRORS - 314)) | (1L << (EVENTS - 314)) | (1L << (EVERY - 314)) | (1L << (EXCLUDE - 314)) | (1L << (EXPIRED - 314)) | (1L << (EXTERNAL - 314)) | (1L << (FAILED_LOGIN_ATTEMPTS - 314)) | (1L << (FAST - 314)) | (1L << (FEATURE - 314)) | (1L << (FIELDS - 314)) | (1L << (FILE - 314)) | (1L << (FILTER - 314)) | (1L << (FIRST - 314)) | (1L << (FORMAT - 314)) | (1L << (FREE - 314)) | (1L << (FRONTENDS - 314)) | (1L << (FUNCTION - 314)) | (1L << (GENERIC - 314)) | (1L << (GLOBAL - 314)) | (1L << (GRAPH - 314)) | (1L << (GROUPING - 314)))) != 0) || ((((_la - 378)) & ~0x3f) == 0 && ((1L << (_la - 378)) & ((1L << (GROUPS - 378)) | (1L << (HASH - 378)) | (1L << (HDFS - 378)) | (1L << (HELP - 378)) | (1L << (HISTOGRAM - 378)) | (1L << (HLL_UNION - 378)) | (1L << (HOSTNAME - 378)) | (1L << (HOUR - 378)) | (1L << (HUB - 378)) | (1L << (IDENTIFIED - 378)) | (1L << (IGNORE - 378)) | (1L << (IMMEDIATE - 378)) | (1L << (INCREMENTAL - 378)) | (1L << (INDEXES - 378)) | (1L << (INVERTED - 378)) | (1L << (IPV4 - 378)) | (1L << (IPV6 - 378)) | (1L << (IS_NOT_NULL_PRED - 378)) | (1L << (IS_NULL_PRED - 378)) | (1L << (ISNULL - 378)) | (1L << (ISOLATION - 378)) | (1L << (JOB - 378)) | (1L << (JOBS - 378)) | (1L << (JSON - 378)) | (1L << (JSONB - 378)) | (1L << (LABEL - 378)) | (1L << (LAST - 378)) | (1L << (LDAP - 378)) | (1L << (LDAP_ADMIN_PASSWORD - 378)) | (1L << (LESS - 378)) | (1L << (LEVEL - 378)) | (1L << (LINES - 378)) | (1L << (LINK - 378)) | (1L << (LOCAL - 378)) | (1L << (LOCALTIME - 378)) | (1L << (LOCALTIMESTAMP - 378)) | (1L << (LOCATION - 378)))) != 0) || ((((_la - 442)) & ~0x3f) == 0 && ((1L << (_la - 442)) & ((1L << (LOCK - 442)) | (1L << (LOGICAL - 442)) | (1L << (MANUAL - 442)) | (1L << (MAP - 442)) | (1L << (MATCH_ALL - 442)) | (1L << (MATCH_ANY - 442)) | (1L << (MATCH_ELEMENT_EQ - 442)) | (1L << (MATCH_ELEMENT_GE - 442)) | (1L << (MATCH_ELEMENT_GT - 442)) | (1L << (MATCH_ELEMENT_LE - 442)) | (1L << (MATCH_ELEMENT_LT - 442)) | (1L << (MATCH_PHRASE - 442)) | (1L << (MATCH_PHRASE_EDGE - 442)) | (1L << (MATCH_PHRASE_PREFIX - 442)) | (1L << (MATCH_REGEXP - 442)) | (1L << (MATERIALIZED - 442)) | (1L << (MAX - 442)) | (1L << (MEMO - 442)) | (1L << (MERGE - 442)) | (1L << (MIGRATE - 442)) | (1L << (MIGRATIONS - 442)) | (1L << (MIN - 442)) | (1L << (MINUTE - 442)) | (1L << (MODIFY - 442)) | (1L << (MONTH - 442)) | (1L << (MTMV - 442)) | (1L << (NAME - 442)) | (1L << (NAMES - 442)) | (1L << (NEGATIVE - 442)) | (1L << (NEVER - 442)) | (1L << (NEXT - 442)) | (1L << (NGRAM_BF - 442)) | (1L << (NO - 442)) | (1L << (NON_NULLABLE - 442)) | (1L << (NULLS - 442)) | (1L << (OF - 442)) | (1L << (OFFSET - 442)) | (1L << (ONLY - 442)) | (1L << (OPEN - 442)) | (1L << (OPTIMIZED - 442)) | (1L << (PARAMETER - 442)) | (1L << (PARSED - 442)) | (1L << (PARTITIONS - 442)) | (1L << (PASSWORD - 442)) | (1L << (PASSWORD_EXPIRE - 442)) | (1L << (PASSWORD_HISTORY - 442)) | (1L << (PASSWORD_LOCK_TIME - 442)) | (1L << (PASSWORD_REUSE - 442)))) != 0) || ((((_la - 506)) & ~0x3f) == 0 && ((1L << (_la - 506)) & ((1L << (PATH - 506)) | (1L << (PAUSE - 506)) | (1L << (PERCENT - 506)) | (1L << (PERIOD - 506)) | (1L << (PERMISSIVE - 506)) | (1L << (PHYSICAL - 506)) | (1L << (PLAN - 506)) | (1L << (PROCESS - 506)) | (1L << (PLUGIN - 506)) | (1L << (PLUGINS - 506)) | (1L << (POLICY - 506)) | (1L << (PROC - 506)) | (1L << (PROCESSLIST - 506)) | (1L << (PROFILE - 506)) | (1L << (PROPERTIES - 506)) | (1L << (PROPERTY - 506)) | (1L << (QUANTILE_STATE - 506)) | (1L << (QUANTILE_UNION - 506)) | (1L << (QUERY - 506)) | (1L << (QUOTA - 506)) | (1L << (RANDOM - 506)) | (1L << (RECOVER - 506)) | (1L << (RECYCLE - 506)) | (1L << (REFRESH - 506)) | (1L << (REPEATABLE - 506)) | (1L << (REPLACE - 506)) | (1L << (REPLACE_IF_NOT_NULL - 506)) | (1L << (REPOSITORIES - 506)) | (1L << (REPOSITORY - 506)) | (1L << (RESOURCE - 506)) | (1L << (RESOURCES - 506)) | (1L << (RESTORE - 506)) | (1L << (RESTRICTIVE - 506)) | (1L << (RESUME - 506)) | (1L << (RETURNS - 506)) | (1L << (REWRITTEN - 506)) | (1L << (RLIKE - 506)) | (1L << (ROLLBACK - 506)) | (1L << (ROLLUP - 506)) | (1L << (ROUTINE - 506)) | (1L << (S3 - 506)) | (1L << (SAMPLE - 506)) | (1L << (SCHEDULE - 506)) | (1L << (SCHEDULER - 506)))) != 0) || ((((_la - 570)) & ~0x3f) == 0 && ((1L << (_la - 570)) & ((1L << (SCHEMA - 570)) | (1L << (SECOND - 570)) | (1L << (SEQUENCE - 570)) | (1L << (SERIALIZABLE - 570)) | (1L << (SESSION - 570)) | (1L << (SHAPE - 570)) | (1L << (SKEW - 570)) | (1L << (SNAPSHOT - 570)) | (1L << (SONAME - 570)) | (1L << (SPLIT - 570)) | (1L << (START - 570)) | (1L << (STARTS - 570)) | (1L << (STATS - 570)) | (1L << (STATUS - 570)) | (1L << (STOP - 570)) | (1L << (STORAGE - 570)) | (1L << (STREAM - 570)) | (1L << (STREAMING - 570)) | (1L << (STRING - 570)) | (1L << (STRUCT - 570)) | (1L << (SUBDATE - 570)) | (1L << (SUM - 570)) | (1L << (TABLES - 570)) | (1L << (TASK - 570)) | (1L << (TASKS - 570)) | (1L << (TEMPORARY - 570)) | (1L << (TEXT - 570)) | (1L << (THAN - 570)) | (1L << (TIME - 570)) | (1L << (TIMESTAMP - 570)) | (1L << (TIMESTAMPADD - 570)) | (1L << (TIMESTAMPDIFF - 570)) | (1L << (TRANSACTION - 570)) | (1L << (TREE - 570)) | (1L << (TRIGGERS - 570)) | (1L << (TRUNCATE - 570)) | (1L << (TYPE - 570)) | (1L << (TYPES - 570)))) != 0) || ((((_la - 634)) & ~0x3f) == 0 && ((1L << (_la - 634)) & ((1L << (UNCOMMITTED - 634)) | (1L << (UNLOCK - 634)) | (1L << (USER - 634)) | (1L << (VALUE - 634)) | (1L << (VARCHAR - 634)) | (1L << (VARIABLES - 634)) | (1L << (VARIANT - 634)) | (1L << (VERBOSE - 634)) | (1L << (VERSION - 634)) | (1L << (VIEW - 634)) | (1L << (WARNINGS - 634)) | (1L << (WEEK - 634)) | (1L << (WORK - 634)) | (1L << (YEAR - 634)) | (1L << (IDENTIFIER - 634)) | (1L << (BACKQUOTED_IDENTIFIER - 634)))) != 0)) {
				{
				{
				setState(3514);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3513);
					match(COMMA);
					}
				}

				setState(3516);
				((SelectHintContext)_localctx).hintStatement = hintStatement();
				((SelectHintContext)_localctx).hintStatements.add(((SelectHintContext)_localctx).hintStatement);
				}
				}
				setState(3521);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3522);
			match(HINT_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HintStatementContext extends ParserRuleContext {
		public IdentifierContext hintName;
		public HintAssignmentContext hintAssignment;
		public List<HintAssignmentContext> parameters = new ArrayList<HintAssignmentContext>();
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public List<HintAssignmentContext> hintAssignment() {
			return getRuleContexts(HintAssignmentContext.class);
		}
		public HintAssignmentContext hintAssignment(int i) {
			return getRuleContext(HintAssignmentContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public HintStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hintStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterHintStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitHintStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitHintStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HintStatementContext hintStatement() throws RecognitionException {
		HintStatementContext _localctx = new HintStatementContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_hintStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3524);
			((HintStatementContext)_localctx).hintName = identifier();
			setState(3538);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(3525);
				match(LEFT_PAREN);
				setState(3526);
				((HintStatementContext)_localctx).hintAssignment = hintAssignment();
				((HintStatementContext)_localctx).parameters.add(((HintStatementContext)_localctx).hintAssignment);
				setState(3533);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & ((1L << (COMMA - 184)) | (1L << (LEFT_BRACE - 184)) | (1L << (RIGHT_BRACE - 184)) | (1L << (ADDDATE - 184)) | (1L << (AFTER - 184)) | (1L << (AGG_STATE - 184)) | (1L << (AGGREGATE - 184)) | (1L << (ALIAS - 184)) | (1L << (ANALYZED - 184)) | (1L << (ARRAY - 184)) | (1L << (ARRAY_RANGE - 184)) | (1L << (AT - 184)) | (1L << (AUTHORS - 184)) | (1L << (AUTO_INCREMENT - 184)) | (1L << (BACKENDS - 184)) | (1L << (BACKUP - 184)) | (1L << (BEGIN - 184)) | (1L << (BELONG - 184)) | (1L << (BIN - 184)) | (1L << (BITAND - 184)) | (1L << (BITMAP - 184)) | (1L << (BITMAP_UNION - 184)) | (1L << (BITOR - 184)) | (1L << (BITXOR - 184)) | (1L << (BLOB - 184)) | (1L << (BOOLEAN - 184)) | (1L << (BRIEF - 184)) | (1L << (BROKER - 184)) | (1L << (BUCKETS - 184)) | (1L << (BUILD - 184)) | (1L << (BUILTIN - 184)) | (1L << (BULK - 184)) | (1L << (CACHED - 184)) | (1L << (CALL - 184)) | (1L << (CATALOG - 184)) | (1L << (CATALOGS - 184)) | (1L << (CHAIN - 184)) | (1L << (CHAR - 184)) | (1L << (CHARSET - 184)))) != 0) || ((((_la - 248)) & ~0x3f) == 0 && ((1L << (_la - 248)) & ((1L << (CHECK - 248)) | (1L << (CLUSTER - 248)) | (1L << (CLUSTERS - 248)) | (1L << (COLLATION - 248)) | (1L << (COLLECT - 248)) | (1L << (COLUMNS - 248)) | (1L << (COMMENT - 248)) | (1L << (COMMIT - 248)) | (1L << (COMMITTED - 248)) | (1L << (COMPACT - 248)) | (1L << (COMPLETE - 248)) | (1L << (CONFIG - 248)) | (1L << (CONNECTION - 248)) | (1L << (CONNECTION_ID - 248)) | (1L << (CONSISTENT - 248)) | (1L << (CONSTRAINTS - 248)) | (1L << (CONVERT - 248)) | (1L << (COPY - 248)) | (1L << (COUNT - 248)) | (1L << (CREATION - 248)) | (1L << (CRON - 248)) | (1L << (CURRENT_CATALOG - 248)) | (1L << (CURRENT_DATE - 248)) | (1L << (CURRENT_TIME - 248)) | (1L << (CURRENT_TIMESTAMP - 248)) | (1L << (CURRENT_USER - 248)) | (1L << (DATA - 248)) | (1L << (DATE - 248)) | (1L << (DATE_ADD - 248)) | (1L << (DATE_CEIL - 248)) | (1L << (DATE_DIFF - 248)) | (1L << (DATE_FLOOR - 248)) | (1L << (DATE_SUB - 248)) | (1L << (DATEADD - 248)) | (1L << (DATEDIFF - 248)) | (1L << (DATETIME - 248)) | (1L << (DATETIMEV2 - 248)) | (1L << (DATEV2 - 248)) | (1L << (DATETIMEV1 - 248)) | (1L << (DATEV1 - 248)) | (1L << (DAY - 248)) | (1L << (DAYS_ADD - 248)) | (1L << (DAYS_SUB - 248)) | (1L << (DECIMAL - 248)) | (1L << (DECIMALV2 - 248)) | (1L << (DECIMALV3 - 248)) | (1L << (DEFERRED - 248)) | (1L << (DEMAND - 248)) | (1L << (DIAGNOSE - 248)))) != 0) || ((((_la - 314)) & ~0x3f) == 0 && ((1L << (_la - 314)) & ((1L << (DISTINCTPC - 314)) | (1L << (DISTINCTPCSA - 314)) | (1L << (DO - 314)) | (1L << (DORIS_INTERNAL_TABLE_ID - 314)) | (1L << (DUAL - 314)) | (1L << (DYNAMIC - 314)) | (1L << (ENABLE - 314)) | (1L << (ENCRYPTKEY - 314)) | (1L << (ENCRYPTKEYS - 314)) | (1L << (END - 314)) | (1L << (ENDS - 314)) | (1L << (ENGINE - 314)) | (1L << (ENGINES - 314)) | (1L << (ERRORS - 314)) | (1L << (EVENTS - 314)) | (1L << (EVERY - 314)) | (1L << (EXCLUDE - 314)) | (1L << (EXPIRED - 314)) | (1L << (EXTERNAL - 314)) | (1L << (FAILED_LOGIN_ATTEMPTS - 314)) | (1L << (FAST - 314)) | (1L << (FEATURE - 314)) | (1L << (FIELDS - 314)) | (1L << (FILE - 314)) | (1L << (FILTER - 314)) | (1L << (FIRST - 314)) | (1L << (FORMAT - 314)) | (1L << (FREE - 314)) | (1L << (FRONTENDS - 314)) | (1L << (FUNCTION - 314)) | (1L << (GENERIC - 314)) | (1L << (GLOBAL - 314)) | (1L << (GRAPH - 314)) | (1L << (GROUPING - 314)))) != 0) || ((((_la - 378)) & ~0x3f) == 0 && ((1L << (_la - 378)) & ((1L << (GROUPS - 378)) | (1L << (HASH - 378)) | (1L << (HDFS - 378)) | (1L << (HELP - 378)) | (1L << (HISTOGRAM - 378)) | (1L << (HLL_UNION - 378)) | (1L << (HOSTNAME - 378)) | (1L << (HOUR - 378)) | (1L << (HUB - 378)) | (1L << (IDENTIFIED - 378)) | (1L << (IGNORE - 378)) | (1L << (IMMEDIATE - 378)) | (1L << (INCREMENTAL - 378)) | (1L << (INDEXES - 378)) | (1L << (INVERTED - 378)) | (1L << (IPV4 - 378)) | (1L << (IPV6 - 378)) | (1L << (IS_NOT_NULL_PRED - 378)) | (1L << (IS_NULL_PRED - 378)) | (1L << (ISNULL - 378)) | (1L << (ISOLATION - 378)) | (1L << (JOB - 378)) | (1L << (JOBS - 378)) | (1L << (JSON - 378)) | (1L << (JSONB - 378)) | (1L << (LABEL - 378)) | (1L << (LAST - 378)) | (1L << (LDAP - 378)) | (1L << (LDAP_ADMIN_PASSWORD - 378)) | (1L << (LESS - 378)) | (1L << (LEVEL - 378)) | (1L << (LINES - 378)) | (1L << (LINK - 378)) | (1L << (LOCAL - 378)) | (1L << (LOCALTIME - 378)) | (1L << (LOCALTIMESTAMP - 378)) | (1L << (LOCATION - 378)))) != 0) || ((((_la - 442)) & ~0x3f) == 0 && ((1L << (_la - 442)) & ((1L << (LOCK - 442)) | (1L << (LOGICAL - 442)) | (1L << (MANUAL - 442)) | (1L << (MAP - 442)) | (1L << (MATCH_ALL - 442)) | (1L << (MATCH_ANY - 442)) | (1L << (MATCH_ELEMENT_EQ - 442)) | (1L << (MATCH_ELEMENT_GE - 442)) | (1L << (MATCH_ELEMENT_GT - 442)) | (1L << (MATCH_ELEMENT_LE - 442)) | (1L << (MATCH_ELEMENT_LT - 442)) | (1L << (MATCH_PHRASE - 442)) | (1L << (MATCH_PHRASE_EDGE - 442)) | (1L << (MATCH_PHRASE_PREFIX - 442)) | (1L << (MATCH_REGEXP - 442)) | (1L << (MATERIALIZED - 442)) | (1L << (MAX - 442)) | (1L << (MEMO - 442)) | (1L << (MERGE - 442)) | (1L << (MIGRATE - 442)) | (1L << (MIGRATIONS - 442)) | (1L << (MIN - 442)) | (1L << (MINUTE - 442)) | (1L << (MODIFY - 442)) | (1L << (MONTH - 442)) | (1L << (MTMV - 442)) | (1L << (NAME - 442)) | (1L << (NAMES - 442)) | (1L << (NEGATIVE - 442)) | (1L << (NEVER - 442)) | (1L << (NEXT - 442)) | (1L << (NGRAM_BF - 442)) | (1L << (NO - 442)) | (1L << (NON_NULLABLE - 442)) | (1L << (NULLS - 442)) | (1L << (OF - 442)) | (1L << (OFFSET - 442)) | (1L << (ONLY - 442)) | (1L << (OPEN - 442)) | (1L << (OPTIMIZED - 442)) | (1L << (PARAMETER - 442)) | (1L << (PARSED - 442)) | (1L << (PARTITIONS - 442)) | (1L << (PASSWORD - 442)) | (1L << (PASSWORD_EXPIRE - 442)) | (1L << (PASSWORD_HISTORY - 442)) | (1L << (PASSWORD_LOCK_TIME - 442)) | (1L << (PASSWORD_REUSE - 442)))) != 0) || ((((_la - 506)) & ~0x3f) == 0 && ((1L << (_la - 506)) & ((1L << (PATH - 506)) | (1L << (PAUSE - 506)) | (1L << (PERCENT - 506)) | (1L << (PERIOD - 506)) | (1L << (PERMISSIVE - 506)) | (1L << (PHYSICAL - 506)) | (1L << (PLAN - 506)) | (1L << (PROCESS - 506)) | (1L << (PLUGIN - 506)) | (1L << (PLUGINS - 506)) | (1L << (POLICY - 506)) | (1L << (PROC - 506)) | (1L << (PROCESSLIST - 506)) | (1L << (PROFILE - 506)) | (1L << (PROPERTIES - 506)) | (1L << (PROPERTY - 506)) | (1L << (QUANTILE_STATE - 506)) | (1L << (QUANTILE_UNION - 506)) | (1L << (QUERY - 506)) | (1L << (QUOTA - 506)) | (1L << (RANDOM - 506)) | (1L << (RECOVER - 506)) | (1L << (RECYCLE - 506)) | (1L << (REFRESH - 506)) | (1L << (REPEATABLE - 506)) | (1L << (REPLACE - 506)) | (1L << (REPLACE_IF_NOT_NULL - 506)) | (1L << (REPOSITORIES - 506)) | (1L << (REPOSITORY - 506)) | (1L << (RESOURCE - 506)) | (1L << (RESOURCES - 506)) | (1L << (RESTORE - 506)) | (1L << (RESTRICTIVE - 506)) | (1L << (RESUME - 506)) | (1L << (RETURNS - 506)) | (1L << (REWRITTEN - 506)) | (1L << (RLIKE - 506)) | (1L << (ROLLBACK - 506)) | (1L << (ROLLUP - 506)) | (1L << (ROUTINE - 506)) | (1L << (S3 - 506)) | (1L << (SAMPLE - 506)) | (1L << (SCHEDULE - 506)) | (1L << (SCHEDULER - 506)))) != 0) || ((((_la - 570)) & ~0x3f) == 0 && ((1L << (_la - 570)) & ((1L << (SCHEMA - 570)) | (1L << (SECOND - 570)) | (1L << (SEQUENCE - 570)) | (1L << (SERIALIZABLE - 570)) | (1L << (SESSION - 570)) | (1L << (SHAPE - 570)) | (1L << (SKEW - 570)) | (1L << (SNAPSHOT - 570)) | (1L << (SONAME - 570)) | (1L << (SPLIT - 570)) | (1L << (START - 570)) | (1L << (STARTS - 570)) | (1L << (STATS - 570)) | (1L << (STATUS - 570)) | (1L << (STOP - 570)) | (1L << (STORAGE - 570)) | (1L << (STREAM - 570)) | (1L << (STREAMING - 570)) | (1L << (STRING - 570)) | (1L << (STRUCT - 570)) | (1L << (SUBDATE - 570)) | (1L << (SUM - 570)) | (1L << (TABLES - 570)) | (1L << (TASK - 570)) | (1L << (TASKS - 570)) | (1L << (TEMPORARY - 570)) | (1L << (TEXT - 570)) | (1L << (THAN - 570)) | (1L << (TIME - 570)) | (1L << (TIMESTAMP - 570)) | (1L << (TIMESTAMPADD - 570)) | (1L << (TIMESTAMPDIFF - 570)) | (1L << (TRANSACTION - 570)) | (1L << (TREE - 570)) | (1L << (TRIGGERS - 570)) | (1L << (TRUNCATE - 570)) | (1L << (TYPE - 570)) | (1L << (TYPES - 570)))) != 0) || ((((_la - 634)) & ~0x3f) == 0 && ((1L << (_la - 634)) & ((1L << (UNCOMMITTED - 634)) | (1L << (UNLOCK - 634)) | (1L << (USER - 634)) | (1L << (VALUE - 634)) | (1L << (VARCHAR - 634)) | (1L << (VARIABLES - 634)) | (1L << (VARIANT - 634)) | (1L << (VERBOSE - 634)) | (1L << (VERSION - 634)) | (1L << (VIEW - 634)) | (1L << (WARNINGS - 634)) | (1L << (WEEK - 634)) | (1L << (WORK - 634)) | (1L << (YEAR - 634)) | (1L << (STRING_LITERAL - 634)) | (1L << (LEADING_STRING - 634)) | (1L << (IDENTIFIER - 634)) | (1L << (BACKQUOTED_IDENTIFIER - 634)))) != 0)) {
					{
					{
					setState(3528);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3527);
						match(COMMA);
						}
					}

					setState(3530);
					((HintStatementContext)_localctx).hintAssignment = hintAssignment();
					((HintStatementContext)_localctx).parameters.add(((HintStatementContext)_localctx).hintAssignment);
					}
					}
					setState(3535);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3536);
				match(RIGHT_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HintAssignmentContext extends ParserRuleContext {
		public IdentifierOrTextContext key;
		public ConstantContext constantValue;
		public IdentifierContext identifierValue;
		public IdentifierOrTextContext identifierOrText() {
			return getRuleContext(IdentifierOrTextContext.class,0);
		}
		public TerminalNode EQ() { return getToken(PLParser.EQ, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public HintAssignmentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hintAssignment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterHintAssignment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitHintAssignment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitHintAssignment(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HintAssignmentContext hintAssignment() throws RecognitionException {
		HintAssignmentContext _localctx = new HintAssignmentContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_hintAssignment);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3540);
			((HintAssignmentContext)_localctx).key = identifierOrText();
			setState(3546);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQ) {
				{
				setState(3541);
				match(EQ);
				setState(3544);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,447,_ctx) ) {
				case 1:
					{
					setState(3542);
					((HintAssignmentContext)_localctx).constantValue = constant();
					}
					break;
				case 2:
					{
					setState(3543);
					((HintAssignmentContext)_localctx).identifierValue = identifier();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateAssignmentContext extends ParserRuleContext {
		public MultipartIdentifierContext col;
		public TerminalNode EQ() { return getToken(PLParser.EQ, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PLParser.DEFAULT, 0); }
		public UpdateAssignmentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateAssignment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterUpdateAssignment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitUpdateAssignment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitUpdateAssignment(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdateAssignmentContext updateAssignment() throws RecognitionException {
		UpdateAssignmentContext _localctx = new UpdateAssignmentContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_updateAssignment);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3548);
			((UpdateAssignmentContext)_localctx).col = multipartIdentifier();
			setState(3549);
			match(EQ);
			setState(3552);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT_PAREN:
			case LEFT_BRACKET:
			case LEFT_BRACE:
			case RIGHT_BRACE:
			case ADD:
			case ADDDATE:
			case AFTER:
			case AGG_STATE:
			case AGGREGATE:
			case ALIAS:
			case ANALYZED:
			case ARRAY:
			case ARRAY_RANGE:
			case AT:
			case AUTHORS:
			case AUTO_INCREMENT:
			case BACKENDS:
			case BACKUP:
			case BEGIN:
			case BELONG:
			case BIN:
			case BINARY:
			case BITAND:
			case BITMAP:
			case BITMAP_UNION:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BOOLEAN:
			case BRIEF:
			case BROKER:
			case BUCKETS:
			case BUILD:
			case BUILTIN:
			case BULK:
			case CACHED:
			case CALL:
			case CASE:
			case CAST:
			case CATALOG:
			case CATALOGS:
			case CHAIN:
			case CHAR:
			case CHARSET:
			case CHECK:
			case CLUSTER:
			case CLUSTERS:
			case COLLATION:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPACT:
			case COMPLETE:
			case CONFIG:
			case CONNECTION:
			case CONNECTION_ID:
			case CONSISTENT:
			case CONSTRAINTS:
			case CONVERT:
			case COPY:
			case COUNT:
			case CREATION:
			case CRON:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DATA:
			case DATABASE:
			case DATE:
			case DATE_ADD:
			case DATE_CEIL:
			case DATE_DIFF:
			case DATE_FLOOR:
			case DATE_SUB:
			case DATEADD:
			case DATEDIFF:
			case DATETIME:
			case DATETIMEV2:
			case DATEV2:
			case DATETIMEV1:
			case DATEV1:
			case DAY:
			case DAYS_ADD:
			case DAYS_SUB:
			case DECIMAL:
			case DECIMALV2:
			case DECIMALV3:
			case DEFERRED:
			case DEMAND:
			case DIAGNOSE:
			case DISTINCTPC:
			case DISTINCTPCSA:
			case DO:
			case DORIS_INTERNAL_TABLE_ID:
			case DUAL:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTKEY:
			case ENCRYPTKEYS:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERRORS:
			case EVENTS:
			case EVERY:
			case EXCLUDE:
			case EXISTS:
			case EXPIRED:
			case EXTERNAL:
			case EXTRACT:
			case FAILED_LOGIN_ATTEMPTS:
			case FALSE:
			case FAST:
			case FEATURE:
			case FIELDS:
			case FILE:
			case FILTER:
			case FIRST:
			case FORMAT:
			case FREE:
			case FRONTENDS:
			case FUNCTION:
			case GENERIC:
			case GLOBAL:
			case GRAPH:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HDFS:
			case HELP:
			case HISTOGRAM:
			case HLL_UNION:
			case HOSTNAME:
			case HOUR:
			case HUB:
			case IDENTIFIED:
			case IF:
			case IGNORE:
			case IMMEDIATE:
			case INCREMENTAL:
			case INDEXES:
			case INTERVAL:
			case INVERTED:
			case IPV4:
			case IPV6:
			case IS_NOT_NULL_PRED:
			case IS_NULL_PRED:
			case ISNULL:
			case ISOLATION:
			case JOB:
			case JOBS:
			case JSON:
			case JSONB:
			case KEY:
			case LABEL:
			case LAST:
			case LDAP:
			case LDAP_ADMIN_PASSWORD:
			case LEFT:
			case LESS:
			case LEVEL:
			case LIKE:
			case LINES:
			case LINK:
			case LOCAL:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case LOCATION:
			case LOCK:
			case LOGICAL:
			case MANUAL:
			case MAP:
			case MATCH_ALL:
			case MATCH_ANY:
			case MATCH_ELEMENT_EQ:
			case MATCH_ELEMENT_GE:
			case MATCH_ELEMENT_GT:
			case MATCH_ELEMENT_LE:
			case MATCH_ELEMENT_LT:
			case MATCH_PHRASE:
			case MATCH_PHRASE_EDGE:
			case MATCH_PHRASE_PREFIX:
			case MATCH_REGEXP:
			case MATERIALIZED:
			case MAX:
			case MEMO:
			case MERGE:
			case MIGRATE:
			case MIGRATIONS:
			case MIN:
			case MINUTE:
			case MODIFY:
			case MONTH:
			case MTMV:
			case NAME:
			case NAMES:
			case NEGATIVE:
			case NEVER:
			case NEXT:
			case NGRAM_BF:
			case NO:
			case NON_NULLABLE:
			case NOT:
			case NULL:
			case NULLS:
			case OF:
			case OFFSET:
			case ONLY:
			case OPEN:
			case OPTIMIZED:
			case PARAMETER:
			case PARSED:
			case PARTITIONS:
			case PASSWORD:
			case PASSWORD_EXPIRE:
			case PASSWORD_HISTORY:
			case PASSWORD_LOCK_TIME:
			case PASSWORD_REUSE:
			case PATH:
			case PAUSE:
			case PERCENT:
			case PERIOD:
			case PERMISSIVE:
			case PHYSICAL:
			case PLAN:
			case PROCESS:
			case PLUGIN:
			case PLUGINS:
			case POLICY:
			case PROC:
			case PROCESSLIST:
			case PROFILE:
			case PROPERTIES:
			case PROPERTY:
			case QUANTILE_STATE:
			case QUANTILE_UNION:
			case QUERY:
			case QUOTA:
			case RANDOM:
			case RECOVER:
			case RECYCLE:
			case REFRESH:
			case REGEXP:
			case REPEATABLE:
			case REPLACE:
			case REPLACE_IF_NOT_NULL:
			case REPOSITORIES:
			case REPOSITORY:
			case RESOURCE:
			case RESOURCES:
			case RESTORE:
			case RESTRICTIVE:
			case RESUME:
			case RETURNS:
			case REWRITTEN:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case S3:
			case SAMPLE:
			case SCHEDULE:
			case SCHEDULER:
			case SCHEMA:
			case SECOND:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION:
			case SHAPE:
			case SKEW:
			case SNAPSHOT:
			case SONAME:
			case SPLIT:
			case START:
			case STARTS:
			case STATS:
			case STATUS:
			case STOP:
			case STORAGE:
			case STREAM:
			case STREAMING:
			case STRING:
			case STRUCT:
			case SUBDATE:
			case SUM:
			case TABLES:
			case TASK:
			case TASKS:
			case TEMPORARY:
			case TEXT:
			case THAN:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TRANSACTION:
			case TREE:
			case TRIGGERS:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case TYPES:
			case UNCOMMITTED:
			case UNLOCK:
			case USER:
			case VALUE:
			case VARCHAR:
			case VARIABLES:
			case VARIANT:
			case VERBOSE:
			case VERSION:
			case VIEW:
			case WARNINGS:
			case WEEK:
			case WORK:
			case YEAR:
			case PLUS:
			case SUBTRACT:
			case ASTERISK:
			case TILDE:
			case LOGICALNOT:
			case ATSIGN:
			case DOUBLEATSIGN:
			case STRING_LITERAL:
			case INTEGER_VALUE:
			case EXPONENT_VALUE:
			case DECIMAL_VALUE:
			case IDENTIFIER:
			case BACKQUOTED_IDENTIFIER:
				{
				setState(3550);
				expression();
				}
				break;
			case DEFAULT:
				{
				setState(3551);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateAssignmentSeqContext extends ParserRuleContext {
		public UpdateAssignmentContext updateAssignment;
		public List<UpdateAssignmentContext> assignments = new ArrayList<UpdateAssignmentContext>();
		public List<UpdateAssignmentContext> updateAssignment() {
			return getRuleContexts(UpdateAssignmentContext.class);
		}
		public UpdateAssignmentContext updateAssignment(int i) {
			return getRuleContext(UpdateAssignmentContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public UpdateAssignmentSeqContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateAssignmentSeq; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterUpdateAssignmentSeq(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitUpdateAssignmentSeq(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitUpdateAssignmentSeq(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdateAssignmentSeqContext updateAssignmentSeq() throws RecognitionException {
		UpdateAssignmentSeqContext _localctx = new UpdateAssignmentSeqContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_updateAssignmentSeq);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3554);
			((UpdateAssignmentSeqContext)_localctx).updateAssignment = updateAssignment();
			((UpdateAssignmentSeqContext)_localctx).assignments.add(((UpdateAssignmentSeqContext)_localctx).updateAssignment);
			setState(3559);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,450,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3555);
					match(COMMA);
					setState(3556);
					((UpdateAssignmentSeqContext)_localctx).updateAssignment = updateAssignment();
					((UpdateAssignmentSeqContext)_localctx).assignments.add(((UpdateAssignmentSeqContext)_localctx).updateAssignment);
					}
					} 
				}
				setState(3561);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,450,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LateralViewContext extends ParserRuleContext {
		public IdentifierContext functionName;
		public IdentifierContext tableName;
		public IdentifierContext identifier;
		public List<IdentifierContext> columnNames = new ArrayList<IdentifierContext>();
		public TerminalNode LATERAL() { return getToken(PLParser.LATERAL, 0); }
		public TerminalNode VIEW() { return getToken(PLParser.VIEW, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public TerminalNode AS() { return getToken(PLParser.AS, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public LateralViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lateralView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterLateralView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitLateralView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitLateralView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LateralViewContext lateralView() throws RecognitionException {
		LateralViewContext _localctx = new LateralViewContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_lateralView);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3562);
			match(LATERAL);
			setState(3563);
			match(VIEW);
			setState(3564);
			((LateralViewContext)_localctx).functionName = identifier();
			setState(3565);
			match(LEFT_PAREN);
			setState(3574);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 182)) & ~0x3f) == 0 && ((1L << (_la - 182)) & ((1L << (LEFT_PAREN - 182)) | (1L << (LEFT_BRACKET - 182)) | (1L << (LEFT_BRACE - 182)) | (1L << (RIGHT_BRACE - 182)) | (1L << (ADD - 182)) | (1L << (ADDDATE - 182)) | (1L << (AFTER - 182)) | (1L << (AGG_STATE - 182)) | (1L << (AGGREGATE - 182)) | (1L << (ALIAS - 182)) | (1L << (ANALYZED - 182)) | (1L << (ARRAY - 182)) | (1L << (ARRAY_RANGE - 182)) | (1L << (AT - 182)) | (1L << (AUTHORS - 182)) | (1L << (AUTO_INCREMENT - 182)) | (1L << (BACKENDS - 182)) | (1L << (BACKUP - 182)) | (1L << (BEGIN - 182)) | (1L << (BELONG - 182)) | (1L << (BIN - 182)) | (1L << (BINARY - 182)) | (1L << (BITAND - 182)) | (1L << (BITMAP - 182)) | (1L << (BITMAP_UNION - 182)) | (1L << (BITOR - 182)) | (1L << (BITXOR - 182)) | (1L << (BLOB - 182)) | (1L << (BOOLEAN - 182)) | (1L << (BRIEF - 182)) | (1L << (BROKER - 182)) | (1L << (BUCKETS - 182)) | (1L << (BUILD - 182)) | (1L << (BUILTIN - 182)) | (1L << (BULK - 182)) | (1L << (CACHED - 182)) | (1L << (CALL - 182)) | (1L << (CASE - 182)) | (1L << (CAST - 182)) | (1L << (CATALOG - 182)) | (1L << (CATALOGS - 182)) | (1L << (CHAIN - 182)))) != 0) || ((((_la - 246)) & ~0x3f) == 0 && ((1L << (_la - 246)) & ((1L << (CHAR - 246)) | (1L << (CHARSET - 246)) | (1L << (CHECK - 246)) | (1L << (CLUSTER - 246)) | (1L << (CLUSTERS - 246)) | (1L << (COLLATION - 246)) | (1L << (COLLECT - 246)) | (1L << (COLUMNS - 246)) | (1L << (COMMENT - 246)) | (1L << (COMMIT - 246)) | (1L << (COMMITTED - 246)) | (1L << (COMPACT - 246)) | (1L << (COMPLETE - 246)) | (1L << (CONFIG - 246)) | (1L << (CONNECTION - 246)) | (1L << (CONNECTION_ID - 246)) | (1L << (CONSISTENT - 246)) | (1L << (CONSTRAINTS - 246)) | (1L << (CONVERT - 246)) | (1L << (COPY - 246)) | (1L << (COUNT - 246)) | (1L << (CREATION - 246)) | (1L << (CRON - 246)) | (1L << (CURRENT_CATALOG - 246)) | (1L << (CURRENT_DATE - 246)) | (1L << (CURRENT_TIME - 246)) | (1L << (CURRENT_TIMESTAMP - 246)) | (1L << (CURRENT_USER - 246)) | (1L << (DATA - 246)) | (1L << (DATABASE - 246)) | (1L << (DATE - 246)) | (1L << (DATE_ADD - 246)) | (1L << (DATE_CEIL - 246)) | (1L << (DATE_DIFF - 246)) | (1L << (DATE_FLOOR - 246)) | (1L << (DATE_SUB - 246)) | (1L << (DATEADD - 246)) | (1L << (DATEDIFF - 246)) | (1L << (DATETIME - 246)) | (1L << (DATETIMEV2 - 246)) | (1L << (DATEV2 - 246)) | (1L << (DATETIMEV1 - 246)) | (1L << (DATEV1 - 246)) | (1L << (DAY - 246)) | (1L << (DAYS_ADD - 246)) | (1L << (DAYS_SUB - 246)) | (1L << (DECIMAL - 246)) | (1L << (DECIMALV2 - 246)) | (1L << (DECIMALV3 - 246)) | (1L << (DEFERRED - 246)) | (1L << (DEMAND - 246)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (DIAGNOSE - 311)) | (1L << (DISTINCTPC - 311)) | (1L << (DISTINCTPCSA - 311)) | (1L << (DO - 311)) | (1L << (DORIS_INTERNAL_TABLE_ID - 311)) | (1L << (DUAL - 311)) | (1L << (DYNAMIC - 311)) | (1L << (ENABLE - 311)) | (1L << (ENCRYPTKEY - 311)) | (1L << (ENCRYPTKEYS - 311)) | (1L << (END - 311)) | (1L << (ENDS - 311)) | (1L << (ENGINE - 311)) | (1L << (ENGINES - 311)) | (1L << (ERRORS - 311)) | (1L << (EVENTS - 311)) | (1L << (EVERY - 311)) | (1L << (EXCLUDE - 311)) | (1L << (EXISTS - 311)) | (1L << (EXPIRED - 311)) | (1L << (EXTERNAL - 311)) | (1L << (EXTRACT - 311)) | (1L << (FAILED_LOGIN_ATTEMPTS - 311)) | (1L << (FALSE - 311)) | (1L << (FAST - 311)) | (1L << (FEATURE - 311)) | (1L << (FIELDS - 311)) | (1L << (FILE - 311)) | (1L << (FILTER - 311)) | (1L << (FIRST - 311)) | (1L << (FORMAT - 311)) | (1L << (FREE - 311)) | (1L << (FRONTENDS - 311)) | (1L << (FUNCTION - 311)) | (1L << (GENERIC - 311)) | (1L << (GLOBAL - 311)))) != 0) || ((((_la - 375)) & ~0x3f) == 0 && ((1L << (_la - 375)) & ((1L << (GRAPH - 375)) | (1L << (GROUPING - 375)) | (1L << (GROUPS - 375)) | (1L << (HASH - 375)) | (1L << (HDFS - 375)) | (1L << (HELP - 375)) | (1L << (HISTOGRAM - 375)) | (1L << (HLL_UNION - 375)) | (1L << (HOSTNAME - 375)) | (1L << (HOUR - 375)) | (1L << (HUB - 375)) | (1L << (IDENTIFIED - 375)) | (1L << (IF - 375)) | (1L << (IGNORE - 375)) | (1L << (IMMEDIATE - 375)) | (1L << (INCREMENTAL - 375)) | (1L << (INDEXES - 375)) | (1L << (INTERVAL - 375)) | (1L << (INVERTED - 375)) | (1L << (IPV4 - 375)) | (1L << (IPV6 - 375)) | (1L << (IS_NOT_NULL_PRED - 375)) | (1L << (IS_NULL_PRED - 375)) | (1L << (ISNULL - 375)) | (1L << (ISOLATION - 375)) | (1L << (JOB - 375)) | (1L << (JOBS - 375)) | (1L << (JSON - 375)) | (1L << (JSONB - 375)) | (1L << (KEY - 375)) | (1L << (LABEL - 375)) | (1L << (LAST - 375)) | (1L << (LDAP - 375)) | (1L << (LDAP_ADMIN_PASSWORD - 375)) | (1L << (LEFT - 375)) | (1L << (LESS - 375)) | (1L << (LEVEL - 375)) | (1L << (LIKE - 375)) | (1L << (LINES - 375)) | (1L << (LINK - 375)) | (1L << (LOCAL - 375)))) != 0) || ((((_la - 439)) & ~0x3f) == 0 && ((1L << (_la - 439)) & ((1L << (LOCALTIME - 439)) | (1L << (LOCALTIMESTAMP - 439)) | (1L << (LOCATION - 439)) | (1L << (LOCK - 439)) | (1L << (LOGICAL - 439)) | (1L << (MANUAL - 439)) | (1L << (MAP - 439)) | (1L << (MATCH_ALL - 439)) | (1L << (MATCH_ANY - 439)) | (1L << (MATCH_ELEMENT_EQ - 439)) | (1L << (MATCH_ELEMENT_GE - 439)) | (1L << (MATCH_ELEMENT_GT - 439)) | (1L << (MATCH_ELEMENT_LE - 439)) | (1L << (MATCH_ELEMENT_LT - 439)) | (1L << (MATCH_PHRASE - 439)) | (1L << (MATCH_PHRASE_EDGE - 439)) | (1L << (MATCH_PHRASE_PREFIX - 439)) | (1L << (MATCH_REGEXP - 439)) | (1L << (MATERIALIZED - 439)) | (1L << (MAX - 439)) | (1L << (MEMO - 439)) | (1L << (MERGE - 439)) | (1L << (MIGRATE - 439)) | (1L << (MIGRATIONS - 439)) | (1L << (MIN - 439)) | (1L << (MINUTE - 439)) | (1L << (MODIFY - 439)) | (1L << (MONTH - 439)) | (1L << (MTMV - 439)) | (1L << (NAME - 439)) | (1L << (NAMES - 439)) | (1L << (NEGATIVE - 439)) | (1L << (NEVER - 439)) | (1L << (NEXT - 439)) | (1L << (NGRAM_BF - 439)) | (1L << (NO - 439)) | (1L << (NON_NULLABLE - 439)) | (1L << (NOT - 439)) | (1L << (NULL - 439)) | (1L << (NULLS - 439)) | (1L << (OF - 439)) | (1L << (OFFSET - 439)) | (1L << (ONLY - 439)) | (1L << (OPEN - 439)) | (1L << (OPTIMIZED - 439)) | (1L << (PARAMETER - 439)) | (1L << (PARSED - 439)) | (1L << (PARTITIONS - 439)) | (1L << (PASSWORD - 439)) | (1L << (PASSWORD_EXPIRE - 439)))) != 0) || ((((_la - 503)) & ~0x3f) == 0 && ((1L << (_la - 503)) & ((1L << (PASSWORD_HISTORY - 503)) | (1L << (PASSWORD_LOCK_TIME - 503)) | (1L << (PASSWORD_REUSE - 503)) | (1L << (PATH - 503)) | (1L << (PAUSE - 503)) | (1L << (PERCENT - 503)) | (1L << (PERIOD - 503)) | (1L << (PERMISSIVE - 503)) | (1L << (PHYSICAL - 503)) | (1L << (PLAN - 503)) | (1L << (PROCESS - 503)) | (1L << (PLUGIN - 503)) | (1L << (PLUGINS - 503)) | (1L << (POLICY - 503)) | (1L << (PROC - 503)) | (1L << (PROCESSLIST - 503)) | (1L << (PROFILE - 503)) | (1L << (PROPERTIES - 503)) | (1L << (PROPERTY - 503)) | (1L << (QUANTILE_STATE - 503)) | (1L << (QUANTILE_UNION - 503)) | (1L << (QUERY - 503)) | (1L << (QUOTA - 503)) | (1L << (RANDOM - 503)) | (1L << (RECOVER - 503)) | (1L << (RECYCLE - 503)) | (1L << (REFRESH - 503)) | (1L << (REGEXP - 503)) | (1L << (REPEATABLE - 503)) | (1L << (REPLACE - 503)) | (1L << (REPLACE_IF_NOT_NULL - 503)) | (1L << (REPOSITORIES - 503)) | (1L << (REPOSITORY - 503)) | (1L << (RESOURCE - 503)) | (1L << (RESOURCES - 503)) | (1L << (RESTORE - 503)) | (1L << (RESTRICTIVE - 503)) | (1L << (RESUME - 503)) | (1L << (RETURNS - 503)) | (1L << (REWRITTEN - 503)) | (1L << (RIGHT - 503)) | (1L << (RLIKE - 503)) | (1L << (ROLLBACK - 503)) | (1L << (ROLLUP - 503)) | (1L << (ROUTINE - 503)) | (1L << (S3 - 503)))) != 0) || ((((_la - 567)) & ~0x3f) == 0 && ((1L << (_la - 567)) & ((1L << (SAMPLE - 567)) | (1L << (SCHEDULE - 567)) | (1L << (SCHEDULER - 567)) | (1L << (SCHEMA - 567)) | (1L << (SECOND - 567)) | (1L << (SEQUENCE - 567)) | (1L << (SERIALIZABLE - 567)) | (1L << (SESSION - 567)) | (1L << (SHAPE - 567)) | (1L << (SKEW - 567)) | (1L << (SNAPSHOT - 567)) | (1L << (SONAME - 567)) | (1L << (SPLIT - 567)) | (1L << (START - 567)) | (1L << (STARTS - 567)) | (1L << (STATS - 567)) | (1L << (STATUS - 567)) | (1L << (STOP - 567)) | (1L << (STORAGE - 567)) | (1L << (STREAM - 567)) | (1L << (STREAMING - 567)) | (1L << (STRING - 567)) | (1L << (STRUCT - 567)) | (1L << (SUBDATE - 567)) | (1L << (SUM - 567)) | (1L << (TABLES - 567)) | (1L << (TASK - 567)) | (1L << (TASKS - 567)) | (1L << (TEMPORARY - 567)) | (1L << (TEXT - 567)) | (1L << (THAN - 567)) | (1L << (TIME - 567)) | (1L << (TIMESTAMP - 567)) | (1L << (TIMESTAMPADD - 567)) | (1L << (TIMESTAMPDIFF - 567)) | (1L << (TRANSACTION - 567)) | (1L << (TREE - 567)) | (1L << (TRIGGERS - 567)) | (1L << (TRIM - 567)) | (1L << (TRUE - 567)) | (1L << (TRUNCATE - 567)) | (1L << (TYPE - 567)))) != 0) || ((((_la - 632)) & ~0x3f) == 0 && ((1L << (_la - 632)) & ((1L << (TYPES - 632)) | (1L << (UNCOMMITTED - 632)) | (1L << (UNLOCK - 632)) | (1L << (USER - 632)) | (1L << (VALUE - 632)) | (1L << (VARCHAR - 632)) | (1L << (VARIABLES - 632)) | (1L << (VARIANT - 632)) | (1L << (VERBOSE - 632)) | (1L << (VERSION - 632)) | (1L << (VIEW - 632)) | (1L << (WARNINGS - 632)) | (1L << (WEEK - 632)) | (1L << (WORK - 632)) | (1L << (YEAR - 632)) | (1L << (PLUS - 632)) | (1L << (SUBTRACT - 632)) | (1L << (ASTERISK - 632)) | (1L << (TILDE - 632)) | (1L << (LOGICALNOT - 632)) | (1L << (ATSIGN - 632)) | (1L << (DOUBLEATSIGN - 632)) | (1L << (STRING_LITERAL - 632)) | (1L << (INTEGER_VALUE - 632)) | (1L << (EXPONENT_VALUE - 632)) | (1L << (DECIMAL_VALUE - 632)))) != 0) || _la==IDENTIFIER || _la==BACKQUOTED_IDENTIFIER) {
				{
				setState(3566);
				expression();
				setState(3571);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3567);
					match(COMMA);
					setState(3568);
					expression();
					}
					}
					setState(3573);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(3576);
			match(RIGHT_PAREN);
			setState(3577);
			((LateralViewContext)_localctx).tableName = identifier();
			setState(3578);
			match(AS);
			setState(3579);
			((LateralViewContext)_localctx).identifier = identifier();
			((LateralViewContext)_localctx).columnNames.add(((LateralViewContext)_localctx).identifier);
			setState(3584);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,453,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3580);
					match(COMMA);
					setState(3581);
					((LateralViewContext)_localctx).identifier = identifier();
					((LateralViewContext)_localctx).columnNames.add(((LateralViewContext)_localctx).identifier);
					}
					} 
				}
				setState(3586);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,453,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryOrganizationContext extends ParserRuleContext {
		public SortClauseContext sortClause() {
			return getRuleContext(SortClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public QueryOrganizationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryOrganization; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterQueryOrganization(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitQueryOrganization(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitQueryOrganization(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryOrganizationContext queryOrganization() throws RecognitionException {
		QueryOrganizationContext _localctx = new QueryOrganizationContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_queryOrganization);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3588);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,454,_ctx) ) {
			case 1:
				{
				setState(3587);
				sortClause();
				}
				break;
			}
			setState(3591);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,455,_ctx) ) {
			case 1:
				{
				setState(3590);
				limitClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SortClauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(PLParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(PLParser.BY, 0); }
		public List<SortItemContext> sortItem() {
			return getRuleContexts(SortItemContext.class);
		}
		public SortItemContext sortItem(int i) {
			return getRuleContext(SortItemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public SortClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sortClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterSortClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitSortClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitSortClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SortClauseContext sortClause() throws RecognitionException {
		SortClauseContext _localctx = new SortClauseContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_sortClause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3593);
			match(ORDER);
			setState(3594);
			match(BY);
			setState(3595);
			sortItem();
			setState(3600);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,456,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3596);
					match(COMMA);
					setState(3597);
					sortItem();
					}
					} 
				}
				setState(3602);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,456,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SortItemContext extends ParserRuleContext {
		public Token ordering;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NULLS() { return getToken(PLParser.NULLS, 0); }
		public TerminalNode FIRST() { return getToken(PLParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(PLParser.LAST, 0); }
		public TerminalNode ASC() { return getToken(PLParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(PLParser.DESC, 0); }
		public SortItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sortItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterSortItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitSortItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitSortItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SortItemContext sortItem() throws RecognitionException {
		SortItemContext _localctx = new SortItemContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_sortItem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3603);
			expression();
			setState(3605);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,457,_ctx) ) {
			case 1:
				{
				setState(3604);
				((SortItemContext)_localctx).ordering = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					((SortItemContext)_localctx).ordering = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(3609);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,458,_ctx) ) {
			case 1:
				{
				setState(3607);
				match(NULLS);
				setState(3608);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LimitClauseContext extends ParserRuleContext {
		public Token limit;
		public Token offset;
		public TerminalNode LIMIT() { return getToken(PLParser.LIMIT, 0); }
		public List<TerminalNode> INTEGER_VALUE() { return getTokens(PLParser.INTEGER_VALUE); }
		public TerminalNode INTEGER_VALUE(int i) {
			return getToken(PLParser.INTEGER_VALUE, i);
		}
		public TerminalNode OFFSET() { return getToken(PLParser.OFFSET, 0); }
		public TerminalNode COMMA() { return getToken(PLParser.COMMA, 0); }
		public LimitClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterLimitClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitLimitClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitLimitClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LimitClauseContext limitClause() throws RecognitionException {
		LimitClauseContext _localctx = new LimitClauseContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_limitClause);
		try {
			setState(3621);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,459,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(3611);
				match(LIMIT);
				setState(3612);
				((LimitClauseContext)_localctx).limit = match(INTEGER_VALUE);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(3613);
				match(LIMIT);
				setState(3614);
				((LimitClauseContext)_localctx).limit = match(INTEGER_VALUE);
				setState(3615);
				match(OFFSET);
				setState(3616);
				((LimitClauseContext)_localctx).offset = match(INTEGER_VALUE);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(3617);
				match(LIMIT);
				setState(3618);
				((LimitClauseContext)_localctx).offset = match(INTEGER_VALUE);
				setState(3619);
				match(COMMA);
				setState(3620);
				((LimitClauseContext)_localctx).limit = match(INTEGER_VALUE);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionClauseContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(PLParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(PLParser.BY, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public PartitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterPartitionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitPartitionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitPartitionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionClauseContext partitionClause() throws RecognitionException {
		PartitionClauseContext _localctx = new PartitionClauseContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_partitionClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3623);
			match(PARTITION);
			setState(3624);
			match(BY);
			setState(3625);
			expression();
			setState(3630);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3626);
				match(COMMA);
				setState(3627);
				expression();
				}
				}
				setState(3632);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinTypeContext extends ParserRuleContext {
		public TerminalNode INNER() { return getToken(PLParser.INNER, 0); }
		public TerminalNode CROSS() { return getToken(PLParser.CROSS, 0); }
		public TerminalNode LEFT() { return getToken(PLParser.LEFT, 0); }
		public TerminalNode OUTER() { return getToken(PLParser.OUTER, 0); }
		public TerminalNode RIGHT() { return getToken(PLParser.RIGHT, 0); }
		public TerminalNode FULL() { return getToken(PLParser.FULL, 0); }
		public TerminalNode SEMI() { return getToken(PLParser.SEMI, 0); }
		public TerminalNode ANTI() { return getToken(PLParser.ANTI, 0); }
		public JoinTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterJoinType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitJoinType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitJoinType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinTypeContext joinType() throws RecognitionException {
		JoinTypeContext _localctx = new JoinTypeContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_joinType);
		int _la;
		try {
			setState(3657);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,465,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3634);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INNER) {
					{
					setState(3633);
					match(INNER);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3636);
				match(CROSS);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3637);
				match(LEFT);
				setState(3639);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(3638);
					match(OUTER);
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3641);
				match(RIGHT);
				setState(3643);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(3642);
					match(OUTER);
					}
				}

				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3645);
				match(FULL);
				setState(3647);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(3646);
					match(OUTER);
					}
				}

				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3649);
				match(LEFT);
				setState(3650);
				match(SEMI);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3651);
				match(RIGHT);
				setState(3652);
				match(SEMI);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3653);
				match(LEFT);
				setState(3654);
				match(ANTI);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3655);
				match(RIGHT);
				setState(3656);
				match(ANTI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinCriteriaContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PLParser.ON, 0); }
		public BooleanExpressionContext booleanExpression() {
			return getRuleContext(BooleanExpressionContext.class,0);
		}
		public TerminalNode USING() { return getToken(PLParser.USING, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public JoinCriteriaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinCriteria; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterJoinCriteria(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitJoinCriteria(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitJoinCriteria(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinCriteriaContext joinCriteria() throws RecognitionException {
		JoinCriteriaContext _localctx = new JoinCriteriaContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_joinCriteria);
		try {
			setState(3663);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ON:
				enterOuterAlt(_localctx, 1);
				{
				setState(3659);
				match(ON);
				setState(3660);
				booleanExpression(0);
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 2);
				{
				setState(3661);
				match(USING);
				setState(3662);
				identifierList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierListContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public IdentifierSeqContext identifierSeq() {
			return getRuleContext(IdentifierSeqContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public IdentifierListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifierList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterIdentifierList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitIdentifierList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitIdentifierList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierListContext identifierList() throws RecognitionException {
		IdentifierListContext _localctx = new IdentifierListContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_identifierList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3665);
			match(LEFT_PAREN);
			setState(3666);
			identifierSeq();
			setState(3667);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierSeqContext extends ParserRuleContext {
		public ErrorCapturingIdentifierContext errorCapturingIdentifier;
		public List<ErrorCapturingIdentifierContext> ident = new ArrayList<ErrorCapturingIdentifierContext>();
		public List<ErrorCapturingIdentifierContext> errorCapturingIdentifier() {
			return getRuleContexts(ErrorCapturingIdentifierContext.class);
		}
		public ErrorCapturingIdentifierContext errorCapturingIdentifier(int i) {
			return getRuleContext(ErrorCapturingIdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public IdentifierSeqContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifierSeq; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterIdentifierSeq(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitIdentifierSeq(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitIdentifierSeq(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierSeqContext identifierSeq() throws RecognitionException {
		IdentifierSeqContext _localctx = new IdentifierSeqContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_identifierSeq);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3669);
			((IdentifierSeqContext)_localctx).errorCapturingIdentifier = errorCapturingIdentifier();
			((IdentifierSeqContext)_localctx).ident.add(((IdentifierSeqContext)_localctx).errorCapturingIdentifier);
			setState(3674);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3670);
				match(COMMA);
				setState(3671);
				((IdentifierSeqContext)_localctx).errorCapturingIdentifier = errorCapturingIdentifier();
				((IdentifierSeqContext)_localctx).ident.add(((IdentifierSeqContext)_localctx).errorCapturingIdentifier);
				}
				}
				setState(3676);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptScanParamsContext extends ParserRuleContext {
		public IdentifierContext funcName;
		public PropertyItemListContext properties;
		public TerminalNode ATSIGN() { return getToken(PLParser.ATSIGN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public PropertyItemListContext propertyItemList() {
			return getRuleContext(PropertyItemListContext.class,0);
		}
		public OptScanParamsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optScanParams; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterOptScanParams(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitOptScanParams(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitOptScanParams(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptScanParamsContext optScanParams() throws RecognitionException {
		OptScanParamsContext _localctx = new OptScanParamsContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_optScanParams);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3677);
			match(ATSIGN);
			setState(3678);
			((OptScanParamsContext)_localctx).funcName = identifier();
			setState(3679);
			match(LEFT_PAREN);
			setState(3681);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 186)) & ~0x3f) == 0 && ((1L << (_la - 186)) & ((1L << (LEFT_BRACKET - 186)) | (1L << (LEFT_BRACE - 186)) | (1L << (RIGHT_BRACE - 186)) | (1L << (ADDDATE - 186)) | (1L << (AFTER - 186)) | (1L << (AGG_STATE - 186)) | (1L << (AGGREGATE - 186)) | (1L << (ALIAS - 186)) | (1L << (ANALYZED - 186)) | (1L << (ARRAY - 186)) | (1L << (ARRAY_RANGE - 186)) | (1L << (AT - 186)) | (1L << (AUTHORS - 186)) | (1L << (AUTO_INCREMENT - 186)) | (1L << (BACKENDS - 186)) | (1L << (BACKUP - 186)) | (1L << (BEGIN - 186)) | (1L << (BELONG - 186)) | (1L << (BIN - 186)) | (1L << (BINARY - 186)) | (1L << (BITAND - 186)) | (1L << (BITMAP - 186)) | (1L << (BITMAP_UNION - 186)) | (1L << (BITOR - 186)) | (1L << (BITXOR - 186)) | (1L << (BLOB - 186)) | (1L << (BOOLEAN - 186)) | (1L << (BRIEF - 186)) | (1L << (BROKER - 186)) | (1L << (BUCKETS - 186)) | (1L << (BUILD - 186)) | (1L << (BUILTIN - 186)) | (1L << (BULK - 186)) | (1L << (CACHED - 186)) | (1L << (CALL - 186)) | (1L << (CATALOG - 186)) | (1L << (CATALOGS - 186)) | (1L << (CHAIN - 186)) | (1L << (CHAR - 186)) | (1L << (CHARSET - 186)) | (1L << (CHECK - 186)))) != 0) || ((((_la - 250)) & ~0x3f) == 0 && ((1L << (_la - 250)) & ((1L << (CLUSTER - 250)) | (1L << (CLUSTERS - 250)) | (1L << (COLLATION - 250)) | (1L << (COLLECT - 250)) | (1L << (COLUMNS - 250)) | (1L << (COMMENT - 250)) | (1L << (COMMIT - 250)) | (1L << (COMMITTED - 250)) | (1L << (COMPACT - 250)) | (1L << (COMPLETE - 250)) | (1L << (CONFIG - 250)) | (1L << (CONNECTION - 250)) | (1L << (CONNECTION_ID - 250)) | (1L << (CONSISTENT - 250)) | (1L << (CONSTRAINTS - 250)) | (1L << (CONVERT - 250)) | (1L << (COPY - 250)) | (1L << (COUNT - 250)) | (1L << (CREATION - 250)) | (1L << (CRON - 250)) | (1L << (CURRENT_CATALOG - 250)) | (1L << (CURRENT_DATE - 250)) | (1L << (CURRENT_TIME - 250)) | (1L << (CURRENT_TIMESTAMP - 250)) | (1L << (CURRENT_USER - 250)) | (1L << (DATA - 250)) | (1L << (DATE - 250)) | (1L << (DATE_ADD - 250)) | (1L << (DATE_CEIL - 250)) | (1L << (DATE_DIFF - 250)) | (1L << (DATE_FLOOR - 250)) | (1L << (DATE_SUB - 250)) | (1L << (DATEADD - 250)) | (1L << (DATEDIFF - 250)) | (1L << (DATETIME - 250)) | (1L << (DATETIMEV2 - 250)) | (1L << (DATEV2 - 250)) | (1L << (DATETIMEV1 - 250)) | (1L << (DATEV1 - 250)) | (1L << (DAY - 250)) | (1L << (DAYS_ADD - 250)) | (1L << (DAYS_SUB - 250)) | (1L << (DECIMAL - 250)) | (1L << (DECIMALV2 - 250)) | (1L << (DECIMALV3 - 250)) | (1L << (DEFERRED - 250)) | (1L << (DEMAND - 250)) | (1L << (DIAGNOSE - 250)))) != 0) || ((((_la - 314)) & ~0x3f) == 0 && ((1L << (_la - 314)) & ((1L << (DISTINCTPC - 314)) | (1L << (DISTINCTPCSA - 314)) | (1L << (DO - 314)) | (1L << (DORIS_INTERNAL_TABLE_ID - 314)) | (1L << (DUAL - 314)) | (1L << (DYNAMIC - 314)) | (1L << (ENABLE - 314)) | (1L << (ENCRYPTKEY - 314)) | (1L << (ENCRYPTKEYS - 314)) | (1L << (END - 314)) | (1L << (ENDS - 314)) | (1L << (ENGINE - 314)) | (1L << (ENGINES - 314)) | (1L << (ERRORS - 314)) | (1L << (EVENTS - 314)) | (1L << (EVERY - 314)) | (1L << (EXCLUDE - 314)) | (1L << (EXPIRED - 314)) | (1L << (EXTERNAL - 314)) | (1L << (FAILED_LOGIN_ATTEMPTS - 314)) | (1L << (FALSE - 314)) | (1L << (FAST - 314)) | (1L << (FEATURE - 314)) | (1L << (FIELDS - 314)) | (1L << (FILE - 314)) | (1L << (FILTER - 314)) | (1L << (FIRST - 314)) | (1L << (FORMAT - 314)) | (1L << (FREE - 314)) | (1L << (FRONTENDS - 314)) | (1L << (FUNCTION - 314)) | (1L << (GENERIC - 314)) | (1L << (GLOBAL - 314)) | (1L << (GRAPH - 314)) | (1L << (GROUPING - 314)))) != 0) || ((((_la - 378)) & ~0x3f) == 0 && ((1L << (_la - 378)) & ((1L << (GROUPS - 378)) | (1L << (HASH - 378)) | (1L << (HDFS - 378)) | (1L << (HELP - 378)) | (1L << (HISTOGRAM - 378)) | (1L << (HLL_UNION - 378)) | (1L << (HOSTNAME - 378)) | (1L << (HOUR - 378)) | (1L << (HUB - 378)) | (1L << (IDENTIFIED - 378)) | (1L << (IGNORE - 378)) | (1L << (IMMEDIATE - 378)) | (1L << (INCREMENTAL - 378)) | (1L << (INDEXES - 378)) | (1L << (INVERTED - 378)) | (1L << (IPV4 - 378)) | (1L << (IPV6 - 378)) | (1L << (IS_NOT_NULL_PRED - 378)) | (1L << (IS_NULL_PRED - 378)) | (1L << (ISNULL - 378)) | (1L << (ISOLATION - 378)) | (1L << (JOB - 378)) | (1L << (JOBS - 378)) | (1L << (JSON - 378)) | (1L << (JSONB - 378)) | (1L << (LABEL - 378)) | (1L << (LAST - 378)) | (1L << (LDAP - 378)) | (1L << (LDAP_ADMIN_PASSWORD - 378)) | (1L << (LESS - 378)) | (1L << (LEVEL - 378)) | (1L << (LINES - 378)) | (1L << (LINK - 378)) | (1L << (LOCAL - 378)) | (1L << (LOCALTIME - 378)) | (1L << (LOCALTIMESTAMP - 378)) | (1L << (LOCATION - 378)))) != 0) || ((((_la - 442)) & ~0x3f) == 0 && ((1L << (_la - 442)) & ((1L << (LOCK - 442)) | (1L << (LOGICAL - 442)) | (1L << (MANUAL - 442)) | (1L << (MAP - 442)) | (1L << (MATCH_ALL - 442)) | (1L << (MATCH_ANY - 442)) | (1L << (MATCH_ELEMENT_EQ - 442)) | (1L << (MATCH_ELEMENT_GE - 442)) | (1L << (MATCH_ELEMENT_GT - 442)) | (1L << (MATCH_ELEMENT_LE - 442)) | (1L << (MATCH_ELEMENT_LT - 442)) | (1L << (MATCH_PHRASE - 442)) | (1L << (MATCH_PHRASE_EDGE - 442)) | (1L << (MATCH_PHRASE_PREFIX - 442)) | (1L << (MATCH_REGEXP - 442)) | (1L << (MATERIALIZED - 442)) | (1L << (MAX - 442)) | (1L << (MEMO - 442)) | (1L << (MERGE - 442)) | (1L << (MIGRATE - 442)) | (1L << (MIGRATIONS - 442)) | (1L << (MIN - 442)) | (1L << (MINUTE - 442)) | (1L << (MODIFY - 442)) | (1L << (MONTH - 442)) | (1L << (MTMV - 442)) | (1L << (NAME - 442)) | (1L << (NAMES - 442)) | (1L << (NEGATIVE - 442)) | (1L << (NEVER - 442)) | (1L << (NEXT - 442)) | (1L << (NGRAM_BF - 442)) | (1L << (NO - 442)) | (1L << (NON_NULLABLE - 442)) | (1L << (NULL - 442)) | (1L << (NULLS - 442)) | (1L << (OF - 442)) | (1L << (OFFSET - 442)) | (1L << (ONLY - 442)) | (1L << (OPEN - 442)) | (1L << (OPTIMIZED - 442)) | (1L << (PARAMETER - 442)) | (1L << (PARSED - 442)) | (1L << (PARTITIONS - 442)) | (1L << (PASSWORD - 442)) | (1L << (PASSWORD_EXPIRE - 442)) | (1L << (PASSWORD_HISTORY - 442)) | (1L << (PASSWORD_LOCK_TIME - 442)) | (1L << (PASSWORD_REUSE - 442)))) != 0) || ((((_la - 506)) & ~0x3f) == 0 && ((1L << (_la - 506)) & ((1L << (PATH - 506)) | (1L << (PAUSE - 506)) | (1L << (PERCENT - 506)) | (1L << (PERIOD - 506)) | (1L << (PERMISSIVE - 506)) | (1L << (PHYSICAL - 506)) | (1L << (PLAN - 506)) | (1L << (PROCESS - 506)) | (1L << (PLUGIN - 506)) | (1L << (PLUGINS - 506)) | (1L << (POLICY - 506)) | (1L << (PROC - 506)) | (1L << (PROCESSLIST - 506)) | (1L << (PROFILE - 506)) | (1L << (PROPERTIES - 506)) | (1L << (PROPERTY - 506)) | (1L << (QUANTILE_STATE - 506)) | (1L << (QUANTILE_UNION - 506)) | (1L << (QUERY - 506)) | (1L << (QUOTA - 506)) | (1L << (RANDOM - 506)) | (1L << (RECOVER - 506)) | (1L << (RECYCLE - 506)) | (1L << (REFRESH - 506)) | (1L << (REPEATABLE - 506)) | (1L << (REPLACE - 506)) | (1L << (REPLACE_IF_NOT_NULL - 506)) | (1L << (REPOSITORIES - 506)) | (1L << (REPOSITORY - 506)) | (1L << (RESOURCE - 506)) | (1L << (RESOURCES - 506)) | (1L << (RESTORE - 506)) | (1L << (RESTRICTIVE - 506)) | (1L << (RESUME - 506)) | (1L << (RETURNS - 506)) | (1L << (REWRITTEN - 506)) | (1L << (RLIKE - 506)) | (1L << (ROLLBACK - 506)) | (1L << (ROLLUP - 506)) | (1L << (ROUTINE - 506)) | (1L << (S3 - 506)) | (1L << (SAMPLE - 506)) | (1L << (SCHEDULE - 506)) | (1L << (SCHEDULER - 506)))) != 0) || ((((_la - 570)) & ~0x3f) == 0 && ((1L << (_la - 570)) & ((1L << (SCHEMA - 570)) | (1L << (SECOND - 570)) | (1L << (SEQUENCE - 570)) | (1L << (SERIALIZABLE - 570)) | (1L << (SESSION - 570)) | (1L << (SHAPE - 570)) | (1L << (SKEW - 570)) | (1L << (SNAPSHOT - 570)) | (1L << (SONAME - 570)) | (1L << (SPLIT - 570)) | (1L << (START - 570)) | (1L << (STARTS - 570)) | (1L << (STATS - 570)) | (1L << (STATUS - 570)) | (1L << (STOP - 570)) | (1L << (STORAGE - 570)) | (1L << (STREAM - 570)) | (1L << (STREAMING - 570)) | (1L << (STRING - 570)) | (1L << (STRUCT - 570)) | (1L << (SUBDATE - 570)) | (1L << (SUM - 570)) | (1L << (TABLES - 570)) | (1L << (TASK - 570)) | (1L << (TASKS - 570)) | (1L << (TEMPORARY - 570)) | (1L << (TEXT - 570)) | (1L << (THAN - 570)) | (1L << (TIME - 570)) | (1L << (TIMESTAMP - 570)) | (1L << (TIMESTAMPADD - 570)) | (1L << (TIMESTAMPDIFF - 570)) | (1L << (TRANSACTION - 570)) | (1L << (TREE - 570)) | (1L << (TRIGGERS - 570)) | (1L << (TRUE - 570)) | (1L << (TRUNCATE - 570)) | (1L << (TYPE - 570)) | (1L << (TYPES - 570)))) != 0) || ((((_la - 634)) & ~0x3f) == 0 && ((1L << (_la - 634)) & ((1L << (UNCOMMITTED - 634)) | (1L << (UNLOCK - 634)) | (1L << (USER - 634)) | (1L << (VALUE - 634)) | (1L << (VARCHAR - 634)) | (1L << (VARIABLES - 634)) | (1L << (VARIANT - 634)) | (1L << (VERBOSE - 634)) | (1L << (VERSION - 634)) | (1L << (VIEW - 634)) | (1L << (WARNINGS - 634)) | (1L << (WEEK - 634)) | (1L << (WORK - 634)) | (1L << (YEAR - 634)) | (1L << (SUBTRACT - 634)) | (1L << (STRING_LITERAL - 634)) | (1L << (INTEGER_VALUE - 634)) | (1L << (EXPONENT_VALUE - 634)) | (1L << (DECIMAL_VALUE - 634)) | (1L << (IDENTIFIER - 634)) | (1L << (BACKQUOTED_IDENTIFIER - 634)))) != 0)) {
				{
				setState(3680);
				((OptScanParamsContext)_localctx).properties = propertyItemList();
				}
			}

			setState(3683);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RelationPrimaryContext extends ParserRuleContext {
		public RelationPrimaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relationPrimary; }
	 
		public RelationPrimaryContext() { }
		public void copyFrom(RelationPrimaryContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class TableValuedFunctionContext extends RelationPrimaryContext {
		public IdentifierContext tvfName;
		public PropertyItemListContext properties;
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public PropertyItemListContext propertyItemList() {
			return getRuleContext(PropertyItemListContext.class,0);
		}
		public TableValuedFunctionContext(RelationPrimaryContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterTableValuedFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitTableValuedFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitTableValuedFunction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RelationListContext extends RelationPrimaryContext {
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public RelationsContext relations() {
			return getRuleContext(RelationsContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public RelationListContext(RelationPrimaryContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterRelationList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitRelationList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitRelationList(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AliasedQueryContext extends RelationPrimaryContext {
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public List<LateralViewContext> lateralView() {
			return getRuleContexts(LateralViewContext.class);
		}
		public LateralViewContext lateralView(int i) {
			return getRuleContext(LateralViewContext.class,i);
		}
		public AliasedQueryContext(RelationPrimaryContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterAliasedQuery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitAliasedQuery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitAliasedQuery(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableNameContext extends RelationPrimaryContext {
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public OptScanParamsContext optScanParams() {
			return getRuleContext(OptScanParamsContext.class,0);
		}
		public MaterializedViewNameContext materializedViewName() {
			return getRuleContext(MaterializedViewNameContext.class,0);
		}
		public SpecifiedPartitionContext specifiedPartition() {
			return getRuleContext(SpecifiedPartitionContext.class,0);
		}
		public TabletListContext tabletList() {
			return getRuleContext(TabletListContext.class,0);
		}
		public SampleContext sample() {
			return getRuleContext(SampleContext.class,0);
		}
		public RelationHintContext relationHint() {
			return getRuleContext(RelationHintContext.class,0);
		}
		public List<LateralViewContext> lateralView() {
			return getRuleContexts(LateralViewContext.class);
		}
		public LateralViewContext lateralView(int i) {
			return getRuleContext(LateralViewContext.class,i);
		}
		public TableNameContext(RelationPrimaryContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RelationPrimaryContext relationPrimary() throws RecognitionException {
		RelationPrimaryContext _localctx = new RelationPrimaryContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_relationPrimary);
		int _la;
		try {
			int _alt;
			setState(3733);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,478,_ctx) ) {
			case 1:
				_localctx = new TableNameContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3685);
				multipartIdentifier();
				setState(3687);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,469,_ctx) ) {
				case 1:
					{
					setState(3686);
					optScanParams();
					}
					break;
				}
				setState(3690);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,470,_ctx) ) {
				case 1:
					{
					setState(3689);
					materializedViewName();
					}
					break;
				}
				setState(3693);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,471,_ctx) ) {
				case 1:
					{
					setState(3692);
					specifiedPartition();
					}
					break;
				}
				setState(3696);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,472,_ctx) ) {
				case 1:
					{
					setState(3695);
					tabletList();
					}
					break;
				}
				setState(3698);
				tableAlias();
				setState(3700);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,473,_ctx) ) {
				case 1:
					{
					setState(3699);
					sample();
					}
					break;
				}
				setState(3703);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,474,_ctx) ) {
				case 1:
					{
					setState(3702);
					relationHint();
					}
					break;
				}
				setState(3708);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,475,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3705);
						lateralView();
						}
						} 
					}
					setState(3710);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,475,_ctx);
				}
				}
				break;
			case 2:
				_localctx = new AliasedQueryContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3711);
				match(LEFT_PAREN);
				setState(3712);
				query();
				setState(3713);
				match(RIGHT_PAREN);
				setState(3714);
				tableAlias();
				setState(3718);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,476,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3715);
						lateralView();
						}
						} 
					}
					setState(3720);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,476,_ctx);
				}
				}
				break;
			case 3:
				_localctx = new TableValuedFunctionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3721);
				((TableValuedFunctionContext)_localctx).tvfName = identifier();
				setState(3722);
				match(LEFT_PAREN);
				setState(3724);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 186)) & ~0x3f) == 0 && ((1L << (_la - 186)) & ((1L << (LEFT_BRACKET - 186)) | (1L << (LEFT_BRACE - 186)) | (1L << (RIGHT_BRACE - 186)) | (1L << (ADDDATE - 186)) | (1L << (AFTER - 186)) | (1L << (AGG_STATE - 186)) | (1L << (AGGREGATE - 186)) | (1L << (ALIAS - 186)) | (1L << (ANALYZED - 186)) | (1L << (ARRAY - 186)) | (1L << (ARRAY_RANGE - 186)) | (1L << (AT - 186)) | (1L << (AUTHORS - 186)) | (1L << (AUTO_INCREMENT - 186)) | (1L << (BACKENDS - 186)) | (1L << (BACKUP - 186)) | (1L << (BEGIN - 186)) | (1L << (BELONG - 186)) | (1L << (BIN - 186)) | (1L << (BINARY - 186)) | (1L << (BITAND - 186)) | (1L << (BITMAP - 186)) | (1L << (BITMAP_UNION - 186)) | (1L << (BITOR - 186)) | (1L << (BITXOR - 186)) | (1L << (BLOB - 186)) | (1L << (BOOLEAN - 186)) | (1L << (BRIEF - 186)) | (1L << (BROKER - 186)) | (1L << (BUCKETS - 186)) | (1L << (BUILD - 186)) | (1L << (BUILTIN - 186)) | (1L << (BULK - 186)) | (1L << (CACHED - 186)) | (1L << (CALL - 186)) | (1L << (CATALOG - 186)) | (1L << (CATALOGS - 186)) | (1L << (CHAIN - 186)) | (1L << (CHAR - 186)) | (1L << (CHARSET - 186)) | (1L << (CHECK - 186)))) != 0) || ((((_la - 250)) & ~0x3f) == 0 && ((1L << (_la - 250)) & ((1L << (CLUSTER - 250)) | (1L << (CLUSTERS - 250)) | (1L << (COLLATION - 250)) | (1L << (COLLECT - 250)) | (1L << (COLUMNS - 250)) | (1L << (COMMENT - 250)) | (1L << (COMMIT - 250)) | (1L << (COMMITTED - 250)) | (1L << (COMPACT - 250)) | (1L << (COMPLETE - 250)) | (1L << (CONFIG - 250)) | (1L << (CONNECTION - 250)) | (1L << (CONNECTION_ID - 250)) | (1L << (CONSISTENT - 250)) | (1L << (CONSTRAINTS - 250)) | (1L << (CONVERT - 250)) | (1L << (COPY - 250)) | (1L << (COUNT - 250)) | (1L << (CREATION - 250)) | (1L << (CRON - 250)) | (1L << (CURRENT_CATALOG - 250)) | (1L << (CURRENT_DATE - 250)) | (1L << (CURRENT_TIME - 250)) | (1L << (CURRENT_TIMESTAMP - 250)) | (1L << (CURRENT_USER - 250)) | (1L << (DATA - 250)) | (1L << (DATE - 250)) | (1L << (DATE_ADD - 250)) | (1L << (DATE_CEIL - 250)) | (1L << (DATE_DIFF - 250)) | (1L << (DATE_FLOOR - 250)) | (1L << (DATE_SUB - 250)) | (1L << (DATEADD - 250)) | (1L << (DATEDIFF - 250)) | (1L << (DATETIME - 250)) | (1L << (DATETIMEV2 - 250)) | (1L << (DATEV2 - 250)) | (1L << (DATETIMEV1 - 250)) | (1L << (DATEV1 - 250)) | (1L << (DAY - 250)) | (1L << (DAYS_ADD - 250)) | (1L << (DAYS_SUB - 250)) | (1L << (DECIMAL - 250)) | (1L << (DECIMALV2 - 250)) | (1L << (DECIMALV3 - 250)) | (1L << (DEFERRED - 250)) | (1L << (DEMAND - 250)) | (1L << (DIAGNOSE - 250)))) != 0) || ((((_la - 314)) & ~0x3f) == 0 && ((1L << (_la - 314)) & ((1L << (DISTINCTPC - 314)) | (1L << (DISTINCTPCSA - 314)) | (1L << (DO - 314)) | (1L << (DORIS_INTERNAL_TABLE_ID - 314)) | (1L << (DUAL - 314)) | (1L << (DYNAMIC - 314)) | (1L << (ENABLE - 314)) | (1L << (ENCRYPTKEY - 314)) | (1L << (ENCRYPTKEYS - 314)) | (1L << (END - 314)) | (1L << (ENDS - 314)) | (1L << (ENGINE - 314)) | (1L << (ENGINES - 314)) | (1L << (ERRORS - 314)) | (1L << (EVENTS - 314)) | (1L << (EVERY - 314)) | (1L << (EXCLUDE - 314)) | (1L << (EXPIRED - 314)) | (1L << (EXTERNAL - 314)) | (1L << (FAILED_LOGIN_ATTEMPTS - 314)) | (1L << (FALSE - 314)) | (1L << (FAST - 314)) | (1L << (FEATURE - 314)) | (1L << (FIELDS - 314)) | (1L << (FILE - 314)) | (1L << (FILTER - 314)) | (1L << (FIRST - 314)) | (1L << (FORMAT - 314)) | (1L << (FREE - 314)) | (1L << (FRONTENDS - 314)) | (1L << (FUNCTION - 314)) | (1L << (GENERIC - 314)) | (1L << (GLOBAL - 314)) | (1L << (GRAPH - 314)) | (1L << (GROUPING - 314)))) != 0) || ((((_la - 378)) & ~0x3f) == 0 && ((1L << (_la - 378)) & ((1L << (GROUPS - 378)) | (1L << (HASH - 378)) | (1L << (HDFS - 378)) | (1L << (HELP - 378)) | (1L << (HISTOGRAM - 378)) | (1L << (HLL_UNION - 378)) | (1L << (HOSTNAME - 378)) | (1L << (HOUR - 378)) | (1L << (HUB - 378)) | (1L << (IDENTIFIED - 378)) | (1L << (IGNORE - 378)) | (1L << (IMMEDIATE - 378)) | (1L << (INCREMENTAL - 378)) | (1L << (INDEXES - 378)) | (1L << (INVERTED - 378)) | (1L << (IPV4 - 378)) | (1L << (IPV6 - 378)) | (1L << (IS_NOT_NULL_PRED - 378)) | (1L << (IS_NULL_PRED - 378)) | (1L << (ISNULL - 378)) | (1L << (ISOLATION - 378)) | (1L << (JOB - 378)) | (1L << (JOBS - 378)) | (1L << (JSON - 378)) | (1L << (JSONB - 378)) | (1L << (LABEL - 378)) | (1L << (LAST - 378)) | (1L << (LDAP - 378)) | (1L << (LDAP_ADMIN_PASSWORD - 378)) | (1L << (LESS - 378)) | (1L << (LEVEL - 378)) | (1L << (LINES - 378)) | (1L << (LINK - 378)) | (1L << (LOCAL - 378)) | (1L << (LOCALTIME - 378)) | (1L << (LOCALTIMESTAMP - 378)) | (1L << (LOCATION - 378)))) != 0) || ((((_la - 442)) & ~0x3f) == 0 && ((1L << (_la - 442)) & ((1L << (LOCK - 442)) | (1L << (LOGICAL - 442)) | (1L << (MANUAL - 442)) | (1L << (MAP - 442)) | (1L << (MATCH_ALL - 442)) | (1L << (MATCH_ANY - 442)) | (1L << (MATCH_ELEMENT_EQ - 442)) | (1L << (MATCH_ELEMENT_GE - 442)) | (1L << (MATCH_ELEMENT_GT - 442)) | (1L << (MATCH_ELEMENT_LE - 442)) | (1L << (MATCH_ELEMENT_LT - 442)) | (1L << (MATCH_PHRASE - 442)) | (1L << (MATCH_PHRASE_EDGE - 442)) | (1L << (MATCH_PHRASE_PREFIX - 442)) | (1L << (MATCH_REGEXP - 442)) | (1L << (MATERIALIZED - 442)) | (1L << (MAX - 442)) | (1L << (MEMO - 442)) | (1L << (MERGE - 442)) | (1L << (MIGRATE - 442)) | (1L << (MIGRATIONS - 442)) | (1L << (MIN - 442)) | (1L << (MINUTE - 442)) | (1L << (MODIFY - 442)) | (1L << (MONTH - 442)) | (1L << (MTMV - 442)) | (1L << (NAME - 442)) | (1L << (NAMES - 442)) | (1L << (NEGATIVE - 442)) | (1L << (NEVER - 442)) | (1L << (NEXT - 442)) | (1L << (NGRAM_BF - 442)) | (1L << (NO - 442)) | (1L << (NON_NULLABLE - 442)) | (1L << (NULL - 442)) | (1L << (NULLS - 442)) | (1L << (OF - 442)) | (1L << (OFFSET - 442)) | (1L << (ONLY - 442)) | (1L << (OPEN - 442)) | (1L << (OPTIMIZED - 442)) | (1L << (PARAMETER - 442)) | (1L << (PARSED - 442)) | (1L << (PARTITIONS - 442)) | (1L << (PASSWORD - 442)) | (1L << (PASSWORD_EXPIRE - 442)) | (1L << (PASSWORD_HISTORY - 442)) | (1L << (PASSWORD_LOCK_TIME - 442)) | (1L << (PASSWORD_REUSE - 442)))) != 0) || ((((_la - 506)) & ~0x3f) == 0 && ((1L << (_la - 506)) & ((1L << (PATH - 506)) | (1L << (PAUSE - 506)) | (1L << (PERCENT - 506)) | (1L << (PERIOD - 506)) | (1L << (PERMISSIVE - 506)) | (1L << (PHYSICAL - 506)) | (1L << (PLAN - 506)) | (1L << (PROCESS - 506)) | (1L << (PLUGIN - 506)) | (1L << (PLUGINS - 506)) | (1L << (POLICY - 506)) | (1L << (PROC - 506)) | (1L << (PROCESSLIST - 506)) | (1L << (PROFILE - 506)) | (1L << (PROPERTIES - 506)) | (1L << (PROPERTY - 506)) | (1L << (QUANTILE_STATE - 506)) | (1L << (QUANTILE_UNION - 506)) | (1L << (QUERY - 506)) | (1L << (QUOTA - 506)) | (1L << (RANDOM - 506)) | (1L << (RECOVER - 506)) | (1L << (RECYCLE - 506)) | (1L << (REFRESH - 506)) | (1L << (REPEATABLE - 506)) | (1L << (REPLACE - 506)) | (1L << (REPLACE_IF_NOT_NULL - 506)) | (1L << (REPOSITORIES - 506)) | (1L << (REPOSITORY - 506)) | (1L << (RESOURCE - 506)) | (1L << (RESOURCES - 506)) | (1L << (RESTORE - 506)) | (1L << (RESTRICTIVE - 506)) | (1L << (RESUME - 506)) | (1L << (RETURNS - 506)) | (1L << (REWRITTEN - 506)) | (1L << (RLIKE - 506)) | (1L << (ROLLBACK - 506)) | (1L << (ROLLUP - 506)) | (1L << (ROUTINE - 506)) | (1L << (S3 - 506)) | (1L << (SAMPLE - 506)) | (1L << (SCHEDULE - 506)) | (1L << (SCHEDULER - 506)))) != 0) || ((((_la - 570)) & ~0x3f) == 0 && ((1L << (_la - 570)) & ((1L << (SCHEMA - 570)) | (1L << (SECOND - 570)) | (1L << (SEQUENCE - 570)) | (1L << (SERIALIZABLE - 570)) | (1L << (SESSION - 570)) | (1L << (SHAPE - 570)) | (1L << (SKEW - 570)) | (1L << (SNAPSHOT - 570)) | (1L << (SONAME - 570)) | (1L << (SPLIT - 570)) | (1L << (START - 570)) | (1L << (STARTS - 570)) | (1L << (STATS - 570)) | (1L << (STATUS - 570)) | (1L << (STOP - 570)) | (1L << (STORAGE - 570)) | (1L << (STREAM - 570)) | (1L << (STREAMING - 570)) | (1L << (STRING - 570)) | (1L << (STRUCT - 570)) | (1L << (SUBDATE - 570)) | (1L << (SUM - 570)) | (1L << (TABLES - 570)) | (1L << (TASK - 570)) | (1L << (TASKS - 570)) | (1L << (TEMPORARY - 570)) | (1L << (TEXT - 570)) | (1L << (THAN - 570)) | (1L << (TIME - 570)) | (1L << (TIMESTAMP - 570)) | (1L << (TIMESTAMPADD - 570)) | (1L << (TIMESTAMPDIFF - 570)) | (1L << (TRANSACTION - 570)) | (1L << (TREE - 570)) | (1L << (TRIGGERS - 570)) | (1L << (TRUE - 570)) | (1L << (TRUNCATE - 570)) | (1L << (TYPE - 570)) | (1L << (TYPES - 570)))) != 0) || ((((_la - 634)) & ~0x3f) == 0 && ((1L << (_la - 634)) & ((1L << (UNCOMMITTED - 634)) | (1L << (UNLOCK - 634)) | (1L << (USER - 634)) | (1L << (VALUE - 634)) | (1L << (VARCHAR - 634)) | (1L << (VARIABLES - 634)) | (1L << (VARIANT - 634)) | (1L << (VERBOSE - 634)) | (1L << (VERSION - 634)) | (1L << (VIEW - 634)) | (1L << (WARNINGS - 634)) | (1L << (WEEK - 634)) | (1L << (WORK - 634)) | (1L << (YEAR - 634)) | (1L << (SUBTRACT - 634)) | (1L << (STRING_LITERAL - 634)) | (1L << (INTEGER_VALUE - 634)) | (1L << (EXPONENT_VALUE - 634)) | (1L << (DECIMAL_VALUE - 634)) | (1L << (IDENTIFIER - 634)) | (1L << (BACKQUOTED_IDENTIFIER - 634)))) != 0)) {
					{
					setState(3723);
					((TableValuedFunctionContext)_localctx).properties = propertyItemList();
					}
				}

				setState(3726);
				match(RIGHT_PAREN);
				setState(3727);
				tableAlias();
				}
				break;
			case 4:
				_localctx = new RelationListContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3729);
				match(LEFT_PAREN);
				setState(3730);
				relations();
				setState(3731);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MaterializedViewNameContext extends ParserRuleContext {
		public IdentifierContext indexName;
		public TerminalNode INDEX() { return getToken(PLParser.INDEX, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public MaterializedViewNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_materializedViewName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterMaterializedViewName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitMaterializedViewName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitMaterializedViewName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MaterializedViewNameContext materializedViewName() throws RecognitionException {
		MaterializedViewNameContext _localctx = new MaterializedViewNameContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_materializedViewName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3735);
			match(INDEX);
			setState(3736);
			((MaterializedViewNameContext)_localctx).indexName = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PropertyClauseContext extends ParserRuleContext {
		public PropertyItemListContext fileProperties;
		public TerminalNode PROPERTIES() { return getToken(PLParser.PROPERTIES, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public PropertyItemListContext propertyItemList() {
			return getRuleContext(PropertyItemListContext.class,0);
		}
		public PropertyClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_propertyClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterPropertyClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitPropertyClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitPropertyClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PropertyClauseContext propertyClause() throws RecognitionException {
		PropertyClauseContext _localctx = new PropertyClauseContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_propertyClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3738);
			match(PROPERTIES);
			setState(3739);
			match(LEFT_PAREN);
			setState(3740);
			((PropertyClauseContext)_localctx).fileProperties = propertyItemList();
			setState(3741);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PropertyItemListContext extends ParserRuleContext {
		public PropertyItemContext propertyItem;
		public List<PropertyItemContext> properties = new ArrayList<PropertyItemContext>();
		public List<PropertyItemContext> propertyItem() {
			return getRuleContexts(PropertyItemContext.class);
		}
		public PropertyItemContext propertyItem(int i) {
			return getRuleContext(PropertyItemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public PropertyItemListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_propertyItemList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterPropertyItemList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitPropertyItemList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitPropertyItemList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PropertyItemListContext propertyItemList() throws RecognitionException {
		PropertyItemListContext _localctx = new PropertyItemListContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_propertyItemList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3743);
			((PropertyItemListContext)_localctx).propertyItem = propertyItem();
			((PropertyItemListContext)_localctx).properties.add(((PropertyItemListContext)_localctx).propertyItem);
			setState(3748);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,479,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3744);
					match(COMMA);
					setState(3745);
					((PropertyItemListContext)_localctx).propertyItem = propertyItem();
					((PropertyItemListContext)_localctx).properties.add(((PropertyItemListContext)_localctx).propertyItem);
					}
					} 
				}
				setState(3750);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,479,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PropertyItemContext extends ParserRuleContext {
		public PropertyKeyContext key;
		public PropertyValueContext value;
		public TerminalNode EQ() { return getToken(PLParser.EQ, 0); }
		public PropertyKeyContext propertyKey() {
			return getRuleContext(PropertyKeyContext.class,0);
		}
		public PropertyValueContext propertyValue() {
			return getRuleContext(PropertyValueContext.class,0);
		}
		public PropertyItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_propertyItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterPropertyItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitPropertyItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitPropertyItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PropertyItemContext propertyItem() throws RecognitionException {
		PropertyItemContext _localctx = new PropertyItemContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_propertyItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3751);
			((PropertyItemContext)_localctx).key = propertyKey();
			setState(3752);
			match(EQ);
			setState(3753);
			((PropertyItemContext)_localctx).value = propertyValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PropertyKeyContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public PropertyKeyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_propertyKey; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterPropertyKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitPropertyKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitPropertyKey(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PropertyKeyContext propertyKey() throws RecognitionException {
		PropertyKeyContext _localctx = new PropertyKeyContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_propertyKey);
		try {
			setState(3757);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,480,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3755);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3756);
				constant();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PropertyValueContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public PropertyValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_propertyValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterPropertyValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitPropertyValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitPropertyValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PropertyValueContext propertyValue() throws RecognitionException {
		PropertyValueContext _localctx = new PropertyValueContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_propertyValue);
		try {
			setState(3761);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,481,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3759);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3760);
				constant();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableAliasContext extends ParserRuleContext {
		public StrictIdentifierContext strictIdentifier() {
			return getRuleContext(StrictIdentifierContext.class,0);
		}
		public TerminalNode AS() { return getToken(PLParser.AS, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public TableAliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableAlias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterTableAlias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitTableAlias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitTableAlias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableAliasContext tableAlias() throws RecognitionException {
		TableAliasContext _localctx = new TableAliasContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_tableAlias);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3770);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,484,_ctx) ) {
			case 1:
				{
				setState(3764);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3763);
					match(AS);
					}
				}

				setState(3766);
				strictIdentifier();
				setState(3768);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,483,_ctx) ) {
				case 1:
					{
					setState(3767);
					identifierList();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultipartIdentifierContext extends ParserRuleContext {
		public ErrorCapturingIdentifierContext errorCapturingIdentifier;
		public List<ErrorCapturingIdentifierContext> parts = new ArrayList<ErrorCapturingIdentifierContext>();
		public List<ErrorCapturingIdentifierContext> errorCapturingIdentifier() {
			return getRuleContexts(ErrorCapturingIdentifierContext.class);
		}
		public ErrorCapturingIdentifierContext errorCapturingIdentifier(int i) {
			return getRuleContext(ErrorCapturingIdentifierContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(PLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(PLParser.DOT, i);
		}
		public MultipartIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multipartIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterMultipartIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitMultipartIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitMultipartIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultipartIdentifierContext multipartIdentifier() throws RecognitionException {
		MultipartIdentifierContext _localctx = new MultipartIdentifierContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_multipartIdentifier);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3772);
			((MultipartIdentifierContext)_localctx).errorCapturingIdentifier = errorCapturingIdentifier();
			((MultipartIdentifierContext)_localctx).parts.add(((MultipartIdentifierContext)_localctx).errorCapturingIdentifier);
			setState(3777);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,485,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3773);
					match(DOT);
					setState(3774);
					((MultipartIdentifierContext)_localctx).errorCapturingIdentifier = errorCapturingIdentifier();
					((MultipartIdentifierContext)_localctx).parts.add(((MultipartIdentifierContext)_localctx).errorCapturingIdentifier);
					}
					} 
				}
				setState(3779);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,485,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleColumnDefsContext extends ParserRuleContext {
		public SimpleColumnDefContext simpleColumnDef;
		public List<SimpleColumnDefContext> cols = new ArrayList<SimpleColumnDefContext>();
		public List<SimpleColumnDefContext> simpleColumnDef() {
			return getRuleContexts(SimpleColumnDefContext.class);
		}
		public SimpleColumnDefContext simpleColumnDef(int i) {
			return getRuleContext(SimpleColumnDefContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public SimpleColumnDefsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleColumnDefs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterSimpleColumnDefs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitSimpleColumnDefs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitSimpleColumnDefs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleColumnDefsContext simpleColumnDefs() throws RecognitionException {
		SimpleColumnDefsContext _localctx = new SimpleColumnDefsContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_simpleColumnDefs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3780);
			((SimpleColumnDefsContext)_localctx).simpleColumnDef = simpleColumnDef();
			((SimpleColumnDefsContext)_localctx).cols.add(((SimpleColumnDefsContext)_localctx).simpleColumnDef);
			setState(3785);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3781);
				match(COMMA);
				setState(3782);
				((SimpleColumnDefsContext)_localctx).simpleColumnDef = simpleColumnDef();
				((SimpleColumnDefsContext)_localctx).cols.add(((SimpleColumnDefsContext)_localctx).simpleColumnDef);
				}
				}
				setState(3787);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleColumnDefContext extends ParserRuleContext {
		public IdentifierContext colName;
		public Token comment;
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode COMMENT() { return getToken(PLParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(PLParser.STRING_LITERAL, 0); }
		public SimpleColumnDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleColumnDef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterSimpleColumnDef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitSimpleColumnDef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitSimpleColumnDef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleColumnDefContext simpleColumnDef() throws RecognitionException {
		SimpleColumnDefContext _localctx = new SimpleColumnDefContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_simpleColumnDef);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3788);
			((SimpleColumnDefContext)_localctx).colName = identifier();
			setState(3791);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(3789);
				match(COMMENT);
				setState(3790);
				((SimpleColumnDefContext)_localctx).comment = match(STRING_LITERAL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnDefsContext extends ParserRuleContext {
		public ColumnDefContext columnDef;
		public List<ColumnDefContext> cols = new ArrayList<ColumnDefContext>();
		public List<ColumnDefContext> columnDef() {
			return getRuleContexts(ColumnDefContext.class);
		}
		public ColumnDefContext columnDef(int i) {
			return getRuleContext(ColumnDefContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public ColumnDefsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDefs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterColumnDefs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitColumnDefs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitColumnDefs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnDefsContext columnDefs() throws RecognitionException {
		ColumnDefsContext _localctx = new ColumnDefsContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_columnDefs);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3793);
			((ColumnDefsContext)_localctx).columnDef = columnDef();
			((ColumnDefsContext)_localctx).cols.add(((ColumnDefsContext)_localctx).columnDef);
			setState(3798);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,488,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3794);
					match(COMMA);
					setState(3795);
					((ColumnDefsContext)_localctx).columnDef = columnDef();
					((ColumnDefsContext)_localctx).cols.add(((ColumnDefsContext)_localctx).columnDef);
					}
					} 
				}
				setState(3800);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,488,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnDefContext extends ParserRuleContext {
		public IdentifierContext colName;
		public DataTypeContext type;
		public AggTypeDefContext aggType;
		public NumberContext autoIncInitValue;
		public Token nullValue;
		public Token stringValue;
		public Token defaultTimestamp;
		public NumberContext defaultValuePrecision;
		public NumberContext onUpdateValuePrecision;
		public Token comment;
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode KEY() { return getToken(PLParser.KEY, 0); }
		public List<TerminalNode> NULL() { return getTokens(PLParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(PLParser.NULL, i);
		}
		public TerminalNode AUTO_INCREMENT() { return getToken(PLParser.AUTO_INCREMENT, 0); }
		public TerminalNode DEFAULT() { return getToken(PLParser.DEFAULT, 0); }
		public TerminalNode ON() { return getToken(PLParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(PLParser.UPDATE, 0); }
		public List<TerminalNode> CURRENT_TIMESTAMP() { return getTokens(PLParser.CURRENT_TIMESTAMP); }
		public TerminalNode CURRENT_TIMESTAMP(int i) {
			return getToken(PLParser.CURRENT_TIMESTAMP, i);
		}
		public TerminalNode COMMENT() { return getToken(PLParser.COMMENT, 0); }
		public AggTypeDefContext aggTypeDef() {
			return getRuleContext(AggTypeDefContext.class,0);
		}
		public List<TerminalNode> STRING_LITERAL() { return getTokens(PLParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(PLParser.STRING_LITERAL, i);
		}
		public TerminalNode INTEGER_VALUE() { return getToken(PLParser.INTEGER_VALUE, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(PLParser.CURRENT_DATE, 0); }
		public TerminalNode NOT() { return getToken(PLParser.NOT, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PLParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PLParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PLParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PLParser.RIGHT_PAREN, i);
		}
		public List<NumberContext> number() {
			return getRuleContexts(NumberContext.class);
		}
		public NumberContext number(int i) {
			return getRuleContext(NumberContext.class,i);
		}
		public ColumnDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterColumnDef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitColumnDef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitColumnDef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnDefContext columnDef() throws RecognitionException {
		ColumnDefContext _localctx = new ColumnDefContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_columnDef);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3801);
			((ColumnDefContext)_localctx).colName = identifier();
			setState(3802);
			((ColumnDefContext)_localctx).type = dataType();
			setState(3804);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KEY) {
				{
				setState(3803);
				match(KEY);
				}
			}

			setState(3807);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BITMAP_UNION || _la==GENERIC || _la==HLL_UNION || _la==MAX || _la==MIN || ((((_la - 527)) & ~0x3f) == 0 && ((1L << (_la - 527)) & ((1L << (QUANTILE_UNION - 527)) | (1L << (REPLACE - 527)) | (1L << (REPLACE_IF_NOT_NULL - 527)))) != 0) || _la==SUM) {
				{
				setState(3806);
				((ColumnDefContext)_localctx).aggType = aggTypeDef();
				}
			}

			setState(3813);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT || _la==NULL) {
				{
				setState(3810);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(3809);
					match(NOT);
					}
				}

				setState(3812);
				match(NULL);
				}
			}

			setState(3822);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTO_INCREMENT) {
				{
				setState(3815);
				match(AUTO_INCREMENT);
				setState(3820);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(3816);
					match(LEFT_PAREN);
					setState(3817);
					((ColumnDefContext)_localctx).autoIncInitValue = number();
					setState(3818);
					match(RIGHT_PAREN);
					}
				}

				}
			}

			setState(3838);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(3824);
				match(DEFAULT);
				setState(3836);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NULL:
					{
					setState(3825);
					((ColumnDefContext)_localctx).nullValue = match(NULL);
					}
					break;
				case INTEGER_VALUE:
					{
					setState(3826);
					match(INTEGER_VALUE);
					}
					break;
				case STRING_LITERAL:
					{
					setState(3827);
					((ColumnDefContext)_localctx).stringValue = match(STRING_LITERAL);
					}
					break;
				case CURRENT_DATE:
					{
					setState(3828);
					match(CURRENT_DATE);
					}
					break;
				case CURRENT_TIMESTAMP:
					{
					setState(3829);
					((ColumnDefContext)_localctx).defaultTimestamp = match(CURRENT_TIMESTAMP);
					setState(3834);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==LEFT_PAREN) {
						{
						setState(3830);
						match(LEFT_PAREN);
						setState(3831);
						((ColumnDefContext)_localctx).defaultValuePrecision = number();
						setState(3832);
						match(RIGHT_PAREN);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(3849);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(3840);
				match(ON);
				setState(3841);
				match(UPDATE);
				setState(3842);
				match(CURRENT_TIMESTAMP);
				setState(3847);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(3843);
					match(LEFT_PAREN);
					setState(3844);
					((ColumnDefContext)_localctx).onUpdateValuePrecision = number();
					setState(3845);
					match(RIGHT_PAREN);
					}
				}

				}
			}

			setState(3853);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(3851);
				match(COMMENT);
				setState(3852);
				((ColumnDefContext)_localctx).comment = match(STRING_LITERAL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexDefsContext extends ParserRuleContext {
		public IndexDefContext indexDef;
		public List<IndexDefContext> indexes = new ArrayList<IndexDefContext>();
		public List<IndexDefContext> indexDef() {
			return getRuleContexts(IndexDefContext.class);
		}
		public IndexDefContext indexDef(int i) {
			return getRuleContext(IndexDefContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public IndexDefsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexDefs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterIndexDefs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitIndexDefs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitIndexDefs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexDefsContext indexDefs() throws RecognitionException {
		IndexDefsContext _localctx = new IndexDefsContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_indexDefs);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3855);
			((IndexDefsContext)_localctx).indexDef = indexDef();
			((IndexDefsContext)_localctx).indexes.add(((IndexDefsContext)_localctx).indexDef);
			setState(3860);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,501,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3856);
					match(COMMA);
					setState(3857);
					((IndexDefsContext)_localctx).indexDef = indexDef();
					((IndexDefsContext)_localctx).indexes.add(((IndexDefsContext)_localctx).indexDef);
					}
					} 
				}
				setState(3862);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,501,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexDefContext extends ParserRuleContext {
		public IdentifierContext indexName;
		public IdentifierListContext cols;
		public Token indexType;
		public PropertyItemListContext properties;
		public Token comment;
		public TerminalNode INDEX() { return getToken(PLParser.INDEX, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public TerminalNode USING() { return getToken(PLParser.USING, 0); }
		public TerminalNode PROPERTIES() { return getToken(PLParser.PROPERTIES, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public TerminalNode COMMENT() { return getToken(PLParser.COMMENT, 0); }
		public PropertyItemListContext propertyItemList() {
			return getRuleContext(PropertyItemListContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(PLParser.STRING_LITERAL, 0); }
		public TerminalNode BITMAP() { return getToken(PLParser.BITMAP, 0); }
		public TerminalNode INVERTED() { return getToken(PLParser.INVERTED, 0); }
		public TerminalNode NGRAM_BF() { return getToken(PLParser.NGRAM_BF, 0); }
		public IndexDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexDef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterIndexDef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitIndexDef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitIndexDef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexDefContext indexDef() throws RecognitionException {
		IndexDefContext _localctx = new IndexDefContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_indexDef);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3863);
			match(INDEX);
			setState(3864);
			((IndexDefContext)_localctx).indexName = identifier();
			setState(3865);
			((IndexDefContext)_localctx).cols = identifierList();
			setState(3868);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(3866);
				match(USING);
				setState(3867);
				((IndexDefContext)_localctx).indexType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BITMAP || _la==INVERTED || _la==NGRAM_BF) ) {
					((IndexDefContext)_localctx).indexType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3875);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PROPERTIES) {
				{
				setState(3870);
				match(PROPERTIES);
				setState(3871);
				match(LEFT_PAREN);
				setState(3872);
				((IndexDefContext)_localctx).properties = propertyItemList();
				setState(3873);
				match(RIGHT_PAREN);
				}
			}

			setState(3879);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(3877);
				match(COMMENT);
				setState(3878);
				((IndexDefContext)_localctx).comment = match(STRING_LITERAL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionsDefContext extends ParserRuleContext {
		public PartitionDefContext partitionDef;
		public List<PartitionDefContext> partitions = new ArrayList<PartitionDefContext>();
		public List<PartitionDefContext> partitionDef() {
			return getRuleContexts(PartitionDefContext.class);
		}
		public PartitionDefContext partitionDef(int i) {
			return getRuleContext(PartitionDefContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public PartitionsDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionsDef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterPartitionsDef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitPartitionsDef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitPartitionsDef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionsDefContext partitionsDef() throws RecognitionException {
		PartitionsDefContext _localctx = new PartitionsDefContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_partitionsDef);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3881);
			((PartitionsDefContext)_localctx).partitionDef = partitionDef();
			((PartitionsDefContext)_localctx).partitions.add(((PartitionsDefContext)_localctx).partitionDef);
			setState(3886);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3882);
				match(COMMA);
				setState(3883);
				((PartitionsDefContext)_localctx).partitionDef = partitionDef();
				((PartitionsDefContext)_localctx).partitions.add(((PartitionsDefContext)_localctx).partitionDef);
				}
				}
				setState(3888);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefContext extends ParserRuleContext {
		public PropertyItemListContext partitionProperties;
		public LessThanPartitionDefContext lessThanPartitionDef() {
			return getRuleContext(LessThanPartitionDefContext.class,0);
		}
		public FixedPartitionDefContext fixedPartitionDef() {
			return getRuleContext(FixedPartitionDefContext.class,0);
		}
		public StepPartitionDefContext stepPartitionDef() {
			return getRuleContext(StepPartitionDefContext.class,0);
		}
		public InPartitionDefContext inPartitionDef() {
			return getRuleContext(InPartitionDefContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public PropertyItemListContext propertyItemList() {
			return getRuleContext(PropertyItemListContext.class,0);
		}
		public PartitionDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterPartitionDef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitPartitionDef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitPartitionDef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionDefContext partitionDef() throws RecognitionException {
		PartitionDefContext _localctx = new PartitionDefContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_partitionDef);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3893);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,506,_ctx) ) {
			case 1:
				{
				setState(3889);
				lessThanPartitionDef();
				}
				break;
			case 2:
				{
				setState(3890);
				fixedPartitionDef();
				}
				break;
			case 3:
				{
				setState(3891);
				stepPartitionDef();
				}
				break;
			case 4:
				{
				setState(3892);
				inPartitionDef();
				}
				break;
			}
			setState(3899);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(3895);
				match(LEFT_PAREN);
				setState(3896);
				((PartitionDefContext)_localctx).partitionProperties = propertyItemList();
				setState(3897);
				match(RIGHT_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LessThanPartitionDefContext extends ParserRuleContext {
		public IdentifierContext partitionName;
		public TerminalNode PARTITION() { return getToken(PLParser.PARTITION, 0); }
		public TerminalNode VALUES() { return getToken(PLParser.VALUES, 0); }
		public TerminalNode LESS() { return getToken(PLParser.LESS, 0); }
		public TerminalNode THAN() { return getToken(PLParser.THAN, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode MAXVALUE() { return getToken(PLParser.MAXVALUE, 0); }
		public ConstantSeqContext constantSeq() {
			return getRuleContext(ConstantSeqContext.class,0);
		}
		public TerminalNode IF() { return getToken(PLParser.IF, 0); }
		public TerminalNode NOT() { return getToken(PLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PLParser.EXISTS, 0); }
		public LessThanPartitionDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lessThanPartitionDef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterLessThanPartitionDef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitLessThanPartitionDef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitLessThanPartitionDef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LessThanPartitionDefContext lessThanPartitionDef() throws RecognitionException {
		LessThanPartitionDefContext _localctx = new LessThanPartitionDefContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_lessThanPartitionDef);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3901);
			match(PARTITION);
			setState(3905);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3902);
				match(IF);
				setState(3903);
				match(NOT);
				setState(3904);
				match(EXISTS);
				}
			}

			setState(3907);
			((LessThanPartitionDefContext)_localctx).partitionName = identifier();
			setState(3908);
			match(VALUES);
			setState(3909);
			match(LESS);
			setState(3910);
			match(THAN);
			setState(3913);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAXVALUE:
				{
				setState(3911);
				match(MAXVALUE);
				}
				break;
			case LEFT_PAREN:
				{
				setState(3912);
				constantSeq();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FixedPartitionDefContext extends ParserRuleContext {
		public IdentifierContext partitionName;
		public ConstantSeqContext lower;
		public ConstantSeqContext upper;
		public TerminalNode PARTITION() { return getToken(PLParser.PARTITION, 0); }
		public TerminalNode VALUES() { return getToken(PLParser.VALUES, 0); }
		public TerminalNode LEFT_BRACKET() { return getToken(PLParser.LEFT_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(PLParser.COMMA, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<ConstantSeqContext> constantSeq() {
			return getRuleContexts(ConstantSeqContext.class);
		}
		public ConstantSeqContext constantSeq(int i) {
			return getRuleContext(ConstantSeqContext.class,i);
		}
		public TerminalNode IF() { return getToken(PLParser.IF, 0); }
		public TerminalNode NOT() { return getToken(PLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PLParser.EXISTS, 0); }
		public FixedPartitionDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fixedPartitionDef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterFixedPartitionDef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitFixedPartitionDef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitFixedPartitionDef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FixedPartitionDefContext fixedPartitionDef() throws RecognitionException {
		FixedPartitionDefContext _localctx = new FixedPartitionDefContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_fixedPartitionDef);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3915);
			match(PARTITION);
			setState(3919);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3916);
				match(IF);
				setState(3917);
				match(NOT);
				setState(3918);
				match(EXISTS);
				}
			}

			setState(3921);
			((FixedPartitionDefContext)_localctx).partitionName = identifier();
			setState(3922);
			match(VALUES);
			setState(3923);
			match(LEFT_BRACKET);
			setState(3924);
			((FixedPartitionDefContext)_localctx).lower = constantSeq();
			setState(3925);
			match(COMMA);
			setState(3926);
			((FixedPartitionDefContext)_localctx).upper = constantSeq();
			setState(3927);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StepPartitionDefContext extends ParserRuleContext {
		public ConstantSeqContext from;
		public ConstantSeqContext to;
		public Token unitsAmount;
		public DatetimeUnitContext unit;
		public TerminalNode FROM() { return getToken(PLParser.FROM, 0); }
		public TerminalNode TO() { return getToken(PLParser.TO, 0); }
		public TerminalNode INTERVAL() { return getToken(PLParser.INTERVAL, 0); }
		public List<ConstantSeqContext> constantSeq() {
			return getRuleContexts(ConstantSeqContext.class);
		}
		public ConstantSeqContext constantSeq(int i) {
			return getRuleContext(ConstantSeqContext.class,i);
		}
		public TerminalNode INTEGER_VALUE() { return getToken(PLParser.INTEGER_VALUE, 0); }
		public DatetimeUnitContext datetimeUnit() {
			return getRuleContext(DatetimeUnitContext.class,0);
		}
		public StepPartitionDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stepPartitionDef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterStepPartitionDef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitStepPartitionDef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitStepPartitionDef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StepPartitionDefContext stepPartitionDef() throws RecognitionException {
		StepPartitionDefContext _localctx = new StepPartitionDefContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_stepPartitionDef);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3929);
			match(FROM);
			setState(3930);
			((StepPartitionDefContext)_localctx).from = constantSeq();
			setState(3931);
			match(TO);
			setState(3932);
			((StepPartitionDefContext)_localctx).to = constantSeq();
			setState(3933);
			match(INTERVAL);
			setState(3934);
			((StepPartitionDefContext)_localctx).unitsAmount = match(INTEGER_VALUE);
			setState(3936);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DAY || _la==HOUR || _la==MINUTE || _la==MONTH || _la==SECOND || _la==WEEK || _la==YEAR) {
				{
				setState(3935);
				((StepPartitionDefContext)_localctx).unit = datetimeUnit();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InPartitionDefContext extends ParserRuleContext {
		public IdentifierContext partitionName;
		public ConstantSeqContext constantSeq;
		public List<ConstantSeqContext> constantSeqs = new ArrayList<ConstantSeqContext>();
		public ConstantSeqContext constants;
		public TerminalNode PARTITION() { return getToken(PLParser.PARTITION, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(PLParser.IF, 0); }
		public TerminalNode NOT() { return getToken(PLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PLParser.EXISTS, 0); }
		public TerminalNode VALUES() { return getToken(PLParser.VALUES, 0); }
		public TerminalNode IN() { return getToken(PLParser.IN, 0); }
		public List<ConstantSeqContext> constantSeq() {
			return getRuleContexts(ConstantSeqContext.class);
		}
		public ConstantSeqContext constantSeq(int i) {
			return getRuleContext(ConstantSeqContext.class,i);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public InPartitionDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inPartitionDef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterInPartitionDef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitInPartitionDef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitInPartitionDef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InPartitionDefContext inPartitionDef() throws RecognitionException {
		InPartitionDefContext _localctx = new InPartitionDefContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_inPartitionDef);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3938);
			match(PARTITION);
			setState(3942);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3939);
				match(IF);
				setState(3940);
				match(NOT);
				setState(3941);
				match(EXISTS);
				}
			}

			setState(3944);
			((InPartitionDefContext)_localctx).partitionName = identifier();
			setState(3961);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VALUES) {
				{
				setState(3945);
				match(VALUES);
				setState(3946);
				match(IN);
				setState(3959);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,514,_ctx) ) {
				case 1:
					{
					{
					setState(3947);
					match(LEFT_PAREN);
					setState(3948);
					((InPartitionDefContext)_localctx).constantSeq = constantSeq();
					((InPartitionDefContext)_localctx).constantSeqs.add(((InPartitionDefContext)_localctx).constantSeq);
					setState(3953);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3949);
						match(COMMA);
						setState(3950);
						((InPartitionDefContext)_localctx).constantSeq = constantSeq();
						((InPartitionDefContext)_localctx).constantSeqs.add(((InPartitionDefContext)_localctx).constantSeq);
						}
						}
						setState(3955);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(3956);
					match(RIGHT_PAREN);
					}
					}
					break;
				case 2:
					{
					setState(3958);
					((InPartitionDefContext)_localctx).constants = constantSeq();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantSeqContext extends ParserRuleContext {
		public PartitionValueDefContext partitionValueDef;
		public List<PartitionValueDefContext> values = new ArrayList<PartitionValueDefContext>();
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public List<PartitionValueDefContext> partitionValueDef() {
			return getRuleContexts(PartitionValueDefContext.class);
		}
		public PartitionValueDefContext partitionValueDef(int i) {
			return getRuleContext(PartitionValueDefContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public ConstantSeqContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constantSeq; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterConstantSeq(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitConstantSeq(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitConstantSeq(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstantSeqContext constantSeq() throws RecognitionException {
		ConstantSeqContext _localctx = new ConstantSeqContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_constantSeq);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3963);
			match(LEFT_PAREN);
			setState(3964);
			((ConstantSeqContext)_localctx).partitionValueDef = partitionValueDef();
			((ConstantSeqContext)_localctx).values.add(((ConstantSeqContext)_localctx).partitionValueDef);
			setState(3969);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3965);
				match(COMMA);
				setState(3966);
				((ConstantSeqContext)_localctx).partitionValueDef = partitionValueDef();
				((ConstantSeqContext)_localctx).values.add(((ConstantSeqContext)_localctx).partitionValueDef);
				}
				}
				setState(3971);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3972);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionValueDefContext extends ParserRuleContext {
		public TerminalNode INTEGER_VALUE() { return getToken(PLParser.INTEGER_VALUE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(PLParser.STRING_LITERAL, 0); }
		public TerminalNode MAXVALUE() { return getToken(PLParser.MAXVALUE, 0); }
		public TerminalNode NULL() { return getToken(PLParser.NULL, 0); }
		public PartitionValueDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionValueDef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterPartitionValueDef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitPartitionValueDef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitPartitionValueDef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionValueDefContext partitionValueDef() throws RecognitionException {
		PartitionValueDefContext _localctx = new PartitionValueDefContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_partitionValueDef);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3974);
			_la = _input.LA(1);
			if ( !(_la==MAXVALUE || _la==NULL || _la==STRING_LITERAL || _la==INTEGER_VALUE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RollupDefsContext extends ParserRuleContext {
		public RollupDefContext rollupDef;
		public List<RollupDefContext> rollups = new ArrayList<RollupDefContext>();
		public List<RollupDefContext> rollupDef() {
			return getRuleContexts(RollupDefContext.class);
		}
		public RollupDefContext rollupDef(int i) {
			return getRuleContext(RollupDefContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public RollupDefsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollupDefs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterRollupDefs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitRollupDefs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitRollupDefs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RollupDefsContext rollupDefs() throws RecognitionException {
		RollupDefsContext _localctx = new RollupDefsContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_rollupDefs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3976);
			((RollupDefsContext)_localctx).rollupDef = rollupDef();
			((RollupDefsContext)_localctx).rollups.add(((RollupDefsContext)_localctx).rollupDef);
			setState(3981);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3977);
				match(COMMA);
				setState(3978);
				((RollupDefsContext)_localctx).rollupDef = rollupDef();
				((RollupDefsContext)_localctx).rollups.add(((RollupDefsContext)_localctx).rollupDef);
				}
				}
				setState(3983);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RollupDefContext extends ParserRuleContext {
		public IdentifierContext rollupName;
		public IdentifierListContext rollupCols;
		public IdentifierListContext dupKeys;
		public PropertyClauseContext properties;
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<IdentifierListContext> identifierList() {
			return getRuleContexts(IdentifierListContext.class);
		}
		public IdentifierListContext identifierList(int i) {
			return getRuleContext(IdentifierListContext.class,i);
		}
		public TerminalNode DUPLICATE() { return getToken(PLParser.DUPLICATE, 0); }
		public TerminalNode KEY() { return getToken(PLParser.KEY, 0); }
		public PropertyClauseContext propertyClause() {
			return getRuleContext(PropertyClauseContext.class,0);
		}
		public RollupDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollupDef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterRollupDef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitRollupDef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitRollupDef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RollupDefContext rollupDef() throws RecognitionException {
		RollupDefContext _localctx = new RollupDefContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_rollupDef);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3984);
			((RollupDefContext)_localctx).rollupName = identifier();
			setState(3985);
			((RollupDefContext)_localctx).rollupCols = identifierList();
			setState(3989);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DUPLICATE) {
				{
				setState(3986);
				match(DUPLICATE);
				setState(3987);
				match(KEY);
				setState(3988);
				((RollupDefContext)_localctx).dupKeys = identifierList();
				}
			}

			setState(3992);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PROPERTIES) {
				{
				setState(3991);
				((RollupDefContext)_localctx).properties = propertyClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggTypeDefContext extends ParserRuleContext {
		public TerminalNode MAX() { return getToken(PLParser.MAX, 0); }
		public TerminalNode MIN() { return getToken(PLParser.MIN, 0); }
		public TerminalNode SUM() { return getToken(PLParser.SUM, 0); }
		public TerminalNode REPLACE() { return getToken(PLParser.REPLACE, 0); }
		public TerminalNode REPLACE_IF_NOT_NULL() { return getToken(PLParser.REPLACE_IF_NOT_NULL, 0); }
		public TerminalNode HLL_UNION() { return getToken(PLParser.HLL_UNION, 0); }
		public TerminalNode BITMAP_UNION() { return getToken(PLParser.BITMAP_UNION, 0); }
		public TerminalNode QUANTILE_UNION() { return getToken(PLParser.QUANTILE_UNION, 0); }
		public TerminalNode GENERIC() { return getToken(PLParser.GENERIC, 0); }
		public AggTypeDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggTypeDef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterAggTypeDef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitAggTypeDef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitAggTypeDef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggTypeDefContext aggTypeDef() throws RecognitionException {
		AggTypeDefContext _localctx = new AggTypeDefContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_aggTypeDef);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3994);
			_la = _input.LA(1);
			if ( !(_la==BITMAP_UNION || _la==GENERIC || _la==HLL_UNION || _la==MAX || _la==MIN || ((((_la - 527)) & ~0x3f) == 0 && ((1L << (_la - 527)) & ((1L << (QUANTILE_UNION - 527)) | (1L << (REPLACE - 527)) | (1L << (REPLACE_IF_NOT_NULL - 527)))) != 0) || _la==SUM) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TabletListContext extends ParserRuleContext {
		public Token INTEGER_VALUE;
		public List<Token> tabletIdList = new ArrayList<Token>();
		public TerminalNode TABLET() { return getToken(PLParser.TABLET, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> INTEGER_VALUE() { return getTokens(PLParser.INTEGER_VALUE); }
		public TerminalNode INTEGER_VALUE(int i) {
			return getToken(PLParser.INTEGER_VALUE, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public TabletListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tabletList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterTabletList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitTabletList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitTabletList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TabletListContext tabletList() throws RecognitionException {
		TabletListContext _localctx = new TabletListContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_tabletList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3996);
			match(TABLET);
			setState(3997);
			match(LEFT_PAREN);
			setState(3998);
			((TabletListContext)_localctx).INTEGER_VALUE = match(INTEGER_VALUE);
			((TabletListContext)_localctx).tabletIdList.add(((TabletListContext)_localctx).INTEGER_VALUE);
			setState(4003);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3999);
				match(COMMA);
				setState(4000);
				((TabletListContext)_localctx).INTEGER_VALUE = match(INTEGER_VALUE);
				((TabletListContext)_localctx).tabletIdList.add(((TabletListContext)_localctx).INTEGER_VALUE);
				}
				}
				setState(4005);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4006);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InlineTableContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(PLParser.VALUES, 0); }
		public List<RowConstructorContext> rowConstructor() {
			return getRuleContexts(RowConstructorContext.class);
		}
		public RowConstructorContext rowConstructor(int i) {
			return getRuleContext(RowConstructorContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public InlineTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inlineTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterInlineTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitInlineTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitInlineTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InlineTableContext inlineTable() throws RecognitionException {
		InlineTableContext _localctx = new InlineTableContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_inlineTable);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4008);
			match(VALUES);
			setState(4009);
			rowConstructor();
			setState(4014);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,521,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4010);
					match(COMMA);
					setState(4011);
					rowConstructor();
					}
					} 
				}
				setState(4016);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,521,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NamedExpressionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public IdentifierOrTextContext identifierOrText() {
			return getRuleContext(IdentifierOrTextContext.class,0);
		}
		public TerminalNode AS() { return getToken(PLParser.AS, 0); }
		public NamedExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_namedExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterNamedExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitNamedExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitNamedExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NamedExpressionContext namedExpression() throws RecognitionException {
		NamedExpressionContext _localctx = new NamedExpressionContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_namedExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4017);
			expression();
			setState(4022);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,523,_ctx) ) {
			case 1:
				{
				setState(4019);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(4018);
					match(AS);
					}
				}

				{
				setState(4021);
				identifierOrText();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NamedExpressionSeqContext extends ParserRuleContext {
		public List<NamedExpressionContext> namedExpression() {
			return getRuleContexts(NamedExpressionContext.class);
		}
		public NamedExpressionContext namedExpression(int i) {
			return getRuleContext(NamedExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public NamedExpressionSeqContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_namedExpressionSeq; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterNamedExpressionSeq(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitNamedExpressionSeq(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitNamedExpressionSeq(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NamedExpressionSeqContext namedExpressionSeq() throws RecognitionException {
		NamedExpressionSeqContext _localctx = new NamedExpressionSeqContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_namedExpressionSeq);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4024);
			namedExpression();
			setState(4029);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,524,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4025);
					match(COMMA);
					setState(4026);
					namedExpression();
					}
					} 
				}
				setState(4031);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,524,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionContext extends ParserRuleContext {
		public BooleanExpressionContext booleanExpression() {
			return getRuleContext(BooleanExpressionContext.class,0);
		}
		public LambdaExpressionContext lambdaExpression() {
			return getRuleContext(LambdaExpressionContext.class,0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionContext expression() throws RecognitionException {
		ExpressionContext _localctx = new ExpressionContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_expression);
		try {
			setState(4034);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,525,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4032);
				booleanExpression(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4033);
				lambdaExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LambdaExpressionContext extends ParserRuleContext {
		public ErrorCapturingIdentifierContext errorCapturingIdentifier;
		public List<ErrorCapturingIdentifierContext> args = new ArrayList<ErrorCapturingIdentifierContext>();
		public BooleanExpressionContext body;
		public TerminalNode ARROW() { return getToken(PLParser.ARROW, 0); }
		public List<ErrorCapturingIdentifierContext> errorCapturingIdentifier() {
			return getRuleContexts(ErrorCapturingIdentifierContext.class);
		}
		public ErrorCapturingIdentifierContext errorCapturingIdentifier(int i) {
			return getRuleContext(ErrorCapturingIdentifierContext.class,i);
		}
		public BooleanExpressionContext booleanExpression() {
			return getRuleContext(BooleanExpressionContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public LambdaExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lambdaExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterLambdaExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitLambdaExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitLambdaExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LambdaExpressionContext lambdaExpression() throws RecognitionException {
		LambdaExpressionContext _localctx = new LambdaExpressionContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_lambdaExpression);
		int _la;
		try {
			setState(4052);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT_BRACE:
			case RIGHT_BRACE:
			case ADDDATE:
			case AFTER:
			case AGG_STATE:
			case AGGREGATE:
			case ALIAS:
			case ANALYZED:
			case ARRAY:
			case ARRAY_RANGE:
			case AT:
			case AUTHORS:
			case AUTO_INCREMENT:
			case BACKENDS:
			case BACKUP:
			case BEGIN:
			case BELONG:
			case BIN:
			case BITAND:
			case BITMAP:
			case BITMAP_UNION:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BOOLEAN:
			case BRIEF:
			case BROKER:
			case BUCKETS:
			case BUILD:
			case BUILTIN:
			case BULK:
			case CACHED:
			case CALL:
			case CATALOG:
			case CATALOGS:
			case CHAIN:
			case CHAR:
			case CHARSET:
			case CHECK:
			case CLUSTER:
			case CLUSTERS:
			case COLLATION:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPACT:
			case COMPLETE:
			case CONFIG:
			case CONNECTION:
			case CONNECTION_ID:
			case CONSISTENT:
			case CONSTRAINTS:
			case CONVERT:
			case COPY:
			case COUNT:
			case CREATION:
			case CRON:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DATA:
			case DATE:
			case DATE_ADD:
			case DATE_CEIL:
			case DATE_DIFF:
			case DATE_FLOOR:
			case DATE_SUB:
			case DATEADD:
			case DATEDIFF:
			case DATETIME:
			case DATETIMEV2:
			case DATEV2:
			case DATETIMEV1:
			case DATEV1:
			case DAY:
			case DAYS_ADD:
			case DAYS_SUB:
			case DECIMAL:
			case DECIMALV2:
			case DECIMALV3:
			case DEFERRED:
			case DEMAND:
			case DIAGNOSE:
			case DISTINCTPC:
			case DISTINCTPCSA:
			case DO:
			case DORIS_INTERNAL_TABLE_ID:
			case DUAL:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTKEY:
			case ENCRYPTKEYS:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERRORS:
			case EVENTS:
			case EVERY:
			case EXCLUDE:
			case EXPIRED:
			case EXTERNAL:
			case FAILED_LOGIN_ATTEMPTS:
			case FAST:
			case FEATURE:
			case FIELDS:
			case FILE:
			case FILTER:
			case FIRST:
			case FORMAT:
			case FREE:
			case FRONTENDS:
			case FUNCTION:
			case GENERIC:
			case GLOBAL:
			case GRAPH:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HDFS:
			case HELP:
			case HISTOGRAM:
			case HLL_UNION:
			case HOSTNAME:
			case HOUR:
			case HUB:
			case IDENTIFIED:
			case IGNORE:
			case IMMEDIATE:
			case INCREMENTAL:
			case INDEXES:
			case INVERTED:
			case IPV4:
			case IPV6:
			case IS_NOT_NULL_PRED:
			case IS_NULL_PRED:
			case ISNULL:
			case ISOLATION:
			case JOB:
			case JOBS:
			case JSON:
			case JSONB:
			case LABEL:
			case LAST:
			case LDAP:
			case LDAP_ADMIN_PASSWORD:
			case LESS:
			case LEVEL:
			case LINES:
			case LINK:
			case LOCAL:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case LOCATION:
			case LOCK:
			case LOGICAL:
			case MANUAL:
			case MAP:
			case MATCH_ALL:
			case MATCH_ANY:
			case MATCH_ELEMENT_EQ:
			case MATCH_ELEMENT_GE:
			case MATCH_ELEMENT_GT:
			case MATCH_ELEMENT_LE:
			case MATCH_ELEMENT_LT:
			case MATCH_PHRASE:
			case MATCH_PHRASE_EDGE:
			case MATCH_PHRASE_PREFIX:
			case MATCH_REGEXP:
			case MATERIALIZED:
			case MAX:
			case MEMO:
			case MERGE:
			case MIGRATE:
			case MIGRATIONS:
			case MIN:
			case MINUTE:
			case MODIFY:
			case MONTH:
			case MTMV:
			case NAME:
			case NAMES:
			case NEGATIVE:
			case NEVER:
			case NEXT:
			case NGRAM_BF:
			case NO:
			case NON_NULLABLE:
			case NULLS:
			case OF:
			case OFFSET:
			case ONLY:
			case OPEN:
			case OPTIMIZED:
			case PARAMETER:
			case PARSED:
			case PARTITIONS:
			case PASSWORD:
			case PASSWORD_EXPIRE:
			case PASSWORD_HISTORY:
			case PASSWORD_LOCK_TIME:
			case PASSWORD_REUSE:
			case PATH:
			case PAUSE:
			case PERCENT:
			case PERIOD:
			case PERMISSIVE:
			case PHYSICAL:
			case PLAN:
			case PROCESS:
			case PLUGIN:
			case PLUGINS:
			case POLICY:
			case PROC:
			case PROCESSLIST:
			case PROFILE:
			case PROPERTIES:
			case PROPERTY:
			case QUANTILE_STATE:
			case QUANTILE_UNION:
			case QUERY:
			case QUOTA:
			case RANDOM:
			case RECOVER:
			case RECYCLE:
			case REFRESH:
			case REPEATABLE:
			case REPLACE:
			case REPLACE_IF_NOT_NULL:
			case REPOSITORIES:
			case REPOSITORY:
			case RESOURCE:
			case RESOURCES:
			case RESTORE:
			case RESTRICTIVE:
			case RESUME:
			case RETURNS:
			case REWRITTEN:
			case RLIKE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case S3:
			case SAMPLE:
			case SCHEDULE:
			case SCHEDULER:
			case SCHEMA:
			case SECOND:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION:
			case SHAPE:
			case SKEW:
			case SNAPSHOT:
			case SONAME:
			case SPLIT:
			case START:
			case STARTS:
			case STATS:
			case STATUS:
			case STOP:
			case STORAGE:
			case STREAM:
			case STREAMING:
			case STRING:
			case STRUCT:
			case SUBDATE:
			case SUM:
			case TABLES:
			case TASK:
			case TASKS:
			case TEMPORARY:
			case TEXT:
			case THAN:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TRANSACTION:
			case TREE:
			case TRIGGERS:
			case TRUNCATE:
			case TYPE:
			case TYPES:
			case UNCOMMITTED:
			case UNLOCK:
			case USER:
			case VALUE:
			case VARCHAR:
			case VARIABLES:
			case VARIANT:
			case VERBOSE:
			case VERSION:
			case VIEW:
			case WARNINGS:
			case WEEK:
			case WORK:
			case YEAR:
			case IDENTIFIER:
			case BACKQUOTED_IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(4036);
				((LambdaExpressionContext)_localctx).errorCapturingIdentifier = errorCapturingIdentifier();
				((LambdaExpressionContext)_localctx).args.add(((LambdaExpressionContext)_localctx).errorCapturingIdentifier);
				setState(4037);
				match(ARROW);
				setState(4038);
				((LambdaExpressionContext)_localctx).body = booleanExpression(0);
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(4040);
				match(LEFT_PAREN);
				setState(4041);
				((LambdaExpressionContext)_localctx).errorCapturingIdentifier = errorCapturingIdentifier();
				((LambdaExpressionContext)_localctx).args.add(((LambdaExpressionContext)_localctx).errorCapturingIdentifier);
				setState(4044); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(4042);
					match(COMMA);
					setState(4043);
					((LambdaExpressionContext)_localctx).errorCapturingIdentifier = errorCapturingIdentifier();
					((LambdaExpressionContext)_localctx).args.add(((LambdaExpressionContext)_localctx).errorCapturingIdentifier);
					}
					}
					setState(4046); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA );
				setState(4048);
				match(RIGHT_PAREN);
				setState(4049);
				match(ARROW);
				setState(4050);
				((LambdaExpressionContext)_localctx).body = booleanExpression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BooleanExpressionContext extends ParserRuleContext {
		public BooleanExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanExpression; }
	 
		public BooleanExpressionContext() { }
		public void copyFrom(BooleanExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ExistContext extends BooleanExpressionContext {
		public TerminalNode EXISTS() { return getToken(PLParser.EXISTS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public ExistContext(BooleanExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterExist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitExist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitExist(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LogicalNotContext extends BooleanExpressionContext {
		public BooleanExpressionContext booleanExpression() {
			return getRuleContext(BooleanExpressionContext.class,0);
		}
		public TerminalNode LOGICALNOT() { return getToken(PLParser.LOGICALNOT, 0); }
		public TerminalNode NOT() { return getToken(PLParser.NOT, 0); }
		public LogicalNotContext(BooleanExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterLogicalNot(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitLogicalNot(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitLogicalNot(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PredicatedContext extends BooleanExpressionContext {
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public PredicatedContext(BooleanExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterPredicated(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitPredicated(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitPredicated(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IsnullContext extends BooleanExpressionContext {
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public TerminalNode ISNULL() { return getToken(PLParser.ISNULL, 0); }
		public TerminalNode IS_NULL_PRED() { return getToken(PLParser.IS_NULL_PRED, 0); }
		public IsnullContext(BooleanExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterIsnull(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitIsnull(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitIsnull(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Is_not_null_predContext extends BooleanExpressionContext {
		public TerminalNode IS_NOT_NULL_PRED() { return getToken(PLParser.IS_NOT_NULL_PRED, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public Is_not_null_predContext(BooleanExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterIs_not_null_pred(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitIs_not_null_pred(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitIs_not_null_pred(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LogicalBinaryContext extends BooleanExpressionContext {
		public BooleanExpressionContext left;
		public Token operator;
		public BooleanExpressionContext right;
		public List<BooleanExpressionContext> booleanExpression() {
			return getRuleContexts(BooleanExpressionContext.class);
		}
		public BooleanExpressionContext booleanExpression(int i) {
			return getRuleContext(BooleanExpressionContext.class,i);
		}
		public TerminalNode AND() { return getToken(PLParser.AND, 0); }
		public TerminalNode LOGICALAND() { return getToken(PLParser.LOGICALAND, 0); }
		public TerminalNode OR() { return getToken(PLParser.OR, 0); }
		public LogicalBinaryContext(BooleanExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterLogicalBinary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitLogicalBinary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitLogicalBinary(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DoublePipesContext extends BooleanExpressionContext {
		public BooleanExpressionContext left;
		public Token operator;
		public BooleanExpressionContext right;
		public List<BooleanExpressionContext> booleanExpression() {
			return getRuleContexts(BooleanExpressionContext.class);
		}
		public BooleanExpressionContext booleanExpression(int i) {
			return getRuleContext(BooleanExpressionContext.class,i);
		}
		public TerminalNode DOUBLEPIPES() { return getToken(PLParser.DOUBLEPIPES, 0); }
		public DoublePipesContext(BooleanExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterDoublePipes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitDoublePipes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitDoublePipes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BooleanExpressionContext booleanExpression() throws RecognitionException {
		return booleanExpression(0);
	}

	private BooleanExpressionContext booleanExpression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		BooleanExpressionContext _localctx = new BooleanExpressionContext(_ctx, _parentState);
		BooleanExpressionContext _prevctx = _localctx;
		int _startState = 478;
		enterRecursionRule(_localctx, 478, RULE_booleanExpression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4076);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,529,_ctx) ) {
			case 1:
				{
				_localctx = new LogicalNotContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(4055);
				_la = _input.LA(1);
				if ( !(_la==NOT || _la==LOGICALNOT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4056);
				booleanExpression(8);
				}
				break;
			case 2:
				{
				_localctx = new ExistContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4057);
				match(EXISTS);
				setState(4058);
				match(LEFT_PAREN);
				setState(4059);
				query();
				setState(4060);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				{
				_localctx = new IsnullContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4062);
				_la = _input.LA(1);
				if ( !(_la==IS_NULL_PRED || _la==ISNULL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4063);
				match(LEFT_PAREN);
				setState(4064);
				valueExpression(0);
				setState(4065);
				match(RIGHT_PAREN);
				}
				break;
			case 4:
				{
				_localctx = new Is_not_null_predContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4067);
				match(IS_NOT_NULL_PRED);
				setState(4068);
				match(LEFT_PAREN);
				setState(4069);
				valueExpression(0);
				setState(4070);
				match(RIGHT_PAREN);
				}
				break;
			case 5:
				{
				_localctx = new PredicatedContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4072);
				valueExpression(0);
				setState(4074);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,528,_ctx) ) {
				case 1:
					{
					setState(4073);
					predicate();
					}
					break;
				}
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(4089);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,531,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(4087);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,530,_ctx) ) {
					case 1:
						{
						_localctx = new LogicalBinaryContext(new BooleanExpressionContext(_parentctx, _parentState));
						((LogicalBinaryContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_booleanExpression);
						setState(4078);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(4079);
						((LogicalBinaryContext)_localctx).operator = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==AND || _la==LOGICALAND) ) {
							((LogicalBinaryContext)_localctx).operator = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(4080);
						((LogicalBinaryContext)_localctx).right = booleanExpression(4);
						}
						break;
					case 2:
						{
						_localctx = new LogicalBinaryContext(new BooleanExpressionContext(_parentctx, _parentState));
						((LogicalBinaryContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_booleanExpression);
						setState(4081);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(4082);
						((LogicalBinaryContext)_localctx).operator = match(OR);
						setState(4083);
						((LogicalBinaryContext)_localctx).right = booleanExpression(3);
						}
						break;
					case 3:
						{
						_localctx = new DoublePipesContext(new BooleanExpressionContext(_parentctx, _parentState));
						((DoublePipesContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_booleanExpression);
						setState(4084);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(4085);
						((DoublePipesContext)_localctx).operator = match(DOUBLEPIPES);
						setState(4086);
						((DoublePipesContext)_localctx).right = booleanExpression(2);
						}
						break;
					}
					} 
				}
				setState(4091);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,531,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class RowConstructorContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public List<RowConstructorItemContext> rowConstructorItem() {
			return getRuleContexts(RowConstructorItemContext.class);
		}
		public RowConstructorItemContext rowConstructorItem(int i) {
			return getRuleContext(RowConstructorItemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public RowConstructorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowConstructor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterRowConstructor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitRowConstructor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitRowConstructor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowConstructorContext rowConstructor() throws RecognitionException {
		RowConstructorContext _localctx = new RowConstructorContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_rowConstructor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4092);
			match(LEFT_PAREN);
			setState(4101);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 182)) & ~0x3f) == 0 && ((1L << (_la - 182)) & ((1L << (LEFT_PAREN - 182)) | (1L << (LEFT_BRACKET - 182)) | (1L << (LEFT_BRACE - 182)) | (1L << (RIGHT_BRACE - 182)) | (1L << (ADD - 182)) | (1L << (ADDDATE - 182)) | (1L << (AFTER - 182)) | (1L << (AGG_STATE - 182)) | (1L << (AGGREGATE - 182)) | (1L << (ALIAS - 182)) | (1L << (ANALYZED - 182)) | (1L << (ARRAY - 182)) | (1L << (ARRAY_RANGE - 182)) | (1L << (AT - 182)) | (1L << (AUTHORS - 182)) | (1L << (AUTO_INCREMENT - 182)) | (1L << (BACKENDS - 182)) | (1L << (BACKUP - 182)) | (1L << (BEGIN - 182)) | (1L << (BELONG - 182)) | (1L << (BIN - 182)) | (1L << (BINARY - 182)) | (1L << (BITAND - 182)) | (1L << (BITMAP - 182)) | (1L << (BITMAP_UNION - 182)) | (1L << (BITOR - 182)) | (1L << (BITXOR - 182)) | (1L << (BLOB - 182)) | (1L << (BOOLEAN - 182)) | (1L << (BRIEF - 182)) | (1L << (BROKER - 182)) | (1L << (BUCKETS - 182)) | (1L << (BUILD - 182)) | (1L << (BUILTIN - 182)) | (1L << (BULK - 182)) | (1L << (CACHED - 182)) | (1L << (CALL - 182)) | (1L << (CASE - 182)) | (1L << (CAST - 182)) | (1L << (CATALOG - 182)) | (1L << (CATALOGS - 182)) | (1L << (CHAIN - 182)))) != 0) || ((((_la - 246)) & ~0x3f) == 0 && ((1L << (_la - 246)) & ((1L << (CHAR - 246)) | (1L << (CHARSET - 246)) | (1L << (CHECK - 246)) | (1L << (CLUSTER - 246)) | (1L << (CLUSTERS - 246)) | (1L << (COLLATION - 246)) | (1L << (COLLECT - 246)) | (1L << (COLUMNS - 246)) | (1L << (COMMENT - 246)) | (1L << (COMMIT - 246)) | (1L << (COMMITTED - 246)) | (1L << (COMPACT - 246)) | (1L << (COMPLETE - 246)) | (1L << (CONFIG - 246)) | (1L << (CONNECTION - 246)) | (1L << (CONNECTION_ID - 246)) | (1L << (CONSISTENT - 246)) | (1L << (CONSTRAINTS - 246)) | (1L << (CONVERT - 246)) | (1L << (COPY - 246)) | (1L << (COUNT - 246)) | (1L << (CREATION - 246)) | (1L << (CRON - 246)) | (1L << (CURRENT_CATALOG - 246)) | (1L << (CURRENT_DATE - 246)) | (1L << (CURRENT_TIME - 246)) | (1L << (CURRENT_TIMESTAMP - 246)) | (1L << (CURRENT_USER - 246)) | (1L << (DATA - 246)) | (1L << (DATABASE - 246)) | (1L << (DATE - 246)) | (1L << (DATE_ADD - 246)) | (1L << (DATE_CEIL - 246)) | (1L << (DATE_DIFF - 246)) | (1L << (DATE_FLOOR - 246)) | (1L << (DATE_SUB - 246)) | (1L << (DATEADD - 246)) | (1L << (DATEDIFF - 246)) | (1L << (DATETIME - 246)) | (1L << (DATETIMEV2 - 246)) | (1L << (DATEV2 - 246)) | (1L << (DATETIMEV1 - 246)) | (1L << (DATEV1 - 246)) | (1L << (DAY - 246)) | (1L << (DAYS_ADD - 246)) | (1L << (DAYS_SUB - 246)) | (1L << (DECIMAL - 246)) | (1L << (DECIMALV2 - 246)) | (1L << (DECIMALV3 - 246)) | (1L << (DEFAULT - 246)) | (1L << (DEFERRED - 246)) | (1L << (DEMAND - 246)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (DIAGNOSE - 311)) | (1L << (DISTINCTPC - 311)) | (1L << (DISTINCTPCSA - 311)) | (1L << (DO - 311)) | (1L << (DORIS_INTERNAL_TABLE_ID - 311)) | (1L << (DUAL - 311)) | (1L << (DYNAMIC - 311)) | (1L << (ENABLE - 311)) | (1L << (ENCRYPTKEY - 311)) | (1L << (ENCRYPTKEYS - 311)) | (1L << (END - 311)) | (1L << (ENDS - 311)) | (1L << (ENGINE - 311)) | (1L << (ENGINES - 311)) | (1L << (ERRORS - 311)) | (1L << (EVENTS - 311)) | (1L << (EVERY - 311)) | (1L << (EXCLUDE - 311)) | (1L << (EXISTS - 311)) | (1L << (EXPIRED - 311)) | (1L << (EXTERNAL - 311)) | (1L << (EXTRACT - 311)) | (1L << (FAILED_LOGIN_ATTEMPTS - 311)) | (1L << (FALSE - 311)) | (1L << (FAST - 311)) | (1L << (FEATURE - 311)) | (1L << (FIELDS - 311)) | (1L << (FILE - 311)) | (1L << (FILTER - 311)) | (1L << (FIRST - 311)) | (1L << (FORMAT - 311)) | (1L << (FREE - 311)) | (1L << (FRONTENDS - 311)) | (1L << (FUNCTION - 311)) | (1L << (GENERIC - 311)) | (1L << (GLOBAL - 311)))) != 0) || ((((_la - 375)) & ~0x3f) == 0 && ((1L << (_la - 375)) & ((1L << (GRAPH - 375)) | (1L << (GROUPING - 375)) | (1L << (GROUPS - 375)) | (1L << (HASH - 375)) | (1L << (HDFS - 375)) | (1L << (HELP - 375)) | (1L << (HISTOGRAM - 375)) | (1L << (HLL_UNION - 375)) | (1L << (HOSTNAME - 375)) | (1L << (HOUR - 375)) | (1L << (HUB - 375)) | (1L << (IDENTIFIED - 375)) | (1L << (IF - 375)) | (1L << (IGNORE - 375)) | (1L << (IMMEDIATE - 375)) | (1L << (INCREMENTAL - 375)) | (1L << (INDEXES - 375)) | (1L << (INTERVAL - 375)) | (1L << (INVERTED - 375)) | (1L << (IPV4 - 375)) | (1L << (IPV6 - 375)) | (1L << (IS_NOT_NULL_PRED - 375)) | (1L << (IS_NULL_PRED - 375)) | (1L << (ISNULL - 375)) | (1L << (ISOLATION - 375)) | (1L << (JOB - 375)) | (1L << (JOBS - 375)) | (1L << (JSON - 375)) | (1L << (JSONB - 375)) | (1L << (KEY - 375)) | (1L << (LABEL - 375)) | (1L << (LAST - 375)) | (1L << (LDAP - 375)) | (1L << (LDAP_ADMIN_PASSWORD - 375)) | (1L << (LEFT - 375)) | (1L << (LESS - 375)) | (1L << (LEVEL - 375)) | (1L << (LIKE - 375)) | (1L << (LINES - 375)) | (1L << (LINK - 375)) | (1L << (LOCAL - 375)))) != 0) || ((((_la - 439)) & ~0x3f) == 0 && ((1L << (_la - 439)) & ((1L << (LOCALTIME - 439)) | (1L << (LOCALTIMESTAMP - 439)) | (1L << (LOCATION - 439)) | (1L << (LOCK - 439)) | (1L << (LOGICAL - 439)) | (1L << (MANUAL - 439)) | (1L << (MAP - 439)) | (1L << (MATCH_ALL - 439)) | (1L << (MATCH_ANY - 439)) | (1L << (MATCH_ELEMENT_EQ - 439)) | (1L << (MATCH_ELEMENT_GE - 439)) | (1L << (MATCH_ELEMENT_GT - 439)) | (1L << (MATCH_ELEMENT_LE - 439)) | (1L << (MATCH_ELEMENT_LT - 439)) | (1L << (MATCH_PHRASE - 439)) | (1L << (MATCH_PHRASE_EDGE - 439)) | (1L << (MATCH_PHRASE_PREFIX - 439)) | (1L << (MATCH_REGEXP - 439)) | (1L << (MATERIALIZED - 439)) | (1L << (MAX - 439)) | (1L << (MEMO - 439)) | (1L << (MERGE - 439)) | (1L << (MIGRATE - 439)) | (1L << (MIGRATIONS - 439)) | (1L << (MIN - 439)) | (1L << (MINUTE - 439)) | (1L << (MODIFY - 439)) | (1L << (MONTH - 439)) | (1L << (MTMV - 439)) | (1L << (NAME - 439)) | (1L << (NAMES - 439)) | (1L << (NEGATIVE - 439)) | (1L << (NEVER - 439)) | (1L << (NEXT - 439)) | (1L << (NGRAM_BF - 439)) | (1L << (NO - 439)) | (1L << (NON_NULLABLE - 439)) | (1L << (NOT - 439)) | (1L << (NULL - 439)) | (1L << (NULLS - 439)) | (1L << (OF - 439)) | (1L << (OFFSET - 439)) | (1L << (ONLY - 439)) | (1L << (OPEN - 439)) | (1L << (OPTIMIZED - 439)) | (1L << (PARAMETER - 439)) | (1L << (PARSED - 439)) | (1L << (PARTITIONS - 439)) | (1L << (PASSWORD - 439)) | (1L << (PASSWORD_EXPIRE - 439)))) != 0) || ((((_la - 503)) & ~0x3f) == 0 && ((1L << (_la - 503)) & ((1L << (PASSWORD_HISTORY - 503)) | (1L << (PASSWORD_LOCK_TIME - 503)) | (1L << (PASSWORD_REUSE - 503)) | (1L << (PATH - 503)) | (1L << (PAUSE - 503)) | (1L << (PERCENT - 503)) | (1L << (PERIOD - 503)) | (1L << (PERMISSIVE - 503)) | (1L << (PHYSICAL - 503)) | (1L << (PLAN - 503)) | (1L << (PROCESS - 503)) | (1L << (PLUGIN - 503)) | (1L << (PLUGINS - 503)) | (1L << (POLICY - 503)) | (1L << (PROC - 503)) | (1L << (PROCESSLIST - 503)) | (1L << (PROFILE - 503)) | (1L << (PROPERTIES - 503)) | (1L << (PROPERTY - 503)) | (1L << (QUANTILE_STATE - 503)) | (1L << (QUANTILE_UNION - 503)) | (1L << (QUERY - 503)) | (1L << (QUOTA - 503)) | (1L << (RANDOM - 503)) | (1L << (RECOVER - 503)) | (1L << (RECYCLE - 503)) | (1L << (REFRESH - 503)) | (1L << (REGEXP - 503)) | (1L << (REPEATABLE - 503)) | (1L << (REPLACE - 503)) | (1L << (REPLACE_IF_NOT_NULL - 503)) | (1L << (REPOSITORIES - 503)) | (1L << (REPOSITORY - 503)) | (1L << (RESOURCE - 503)) | (1L << (RESOURCES - 503)) | (1L << (RESTORE - 503)) | (1L << (RESTRICTIVE - 503)) | (1L << (RESUME - 503)) | (1L << (RETURNS - 503)) | (1L << (REWRITTEN - 503)) | (1L << (RIGHT - 503)) | (1L << (RLIKE - 503)) | (1L << (ROLLBACK - 503)) | (1L << (ROLLUP - 503)) | (1L << (ROUTINE - 503)) | (1L << (S3 - 503)))) != 0) || ((((_la - 567)) & ~0x3f) == 0 && ((1L << (_la - 567)) & ((1L << (SAMPLE - 567)) | (1L << (SCHEDULE - 567)) | (1L << (SCHEDULER - 567)) | (1L << (SCHEMA - 567)) | (1L << (SECOND - 567)) | (1L << (SEQUENCE - 567)) | (1L << (SERIALIZABLE - 567)) | (1L << (SESSION - 567)) | (1L << (SHAPE - 567)) | (1L << (SKEW - 567)) | (1L << (SNAPSHOT - 567)) | (1L << (SONAME - 567)) | (1L << (SPLIT - 567)) | (1L << (START - 567)) | (1L << (STARTS - 567)) | (1L << (STATS - 567)) | (1L << (STATUS - 567)) | (1L << (STOP - 567)) | (1L << (STORAGE - 567)) | (1L << (STREAM - 567)) | (1L << (STREAMING - 567)) | (1L << (STRING - 567)) | (1L << (STRUCT - 567)) | (1L << (SUBDATE - 567)) | (1L << (SUM - 567)) | (1L << (TABLES - 567)) | (1L << (TASK - 567)) | (1L << (TASKS - 567)) | (1L << (TEMPORARY - 567)) | (1L << (TEXT - 567)) | (1L << (THAN - 567)) | (1L << (TIME - 567)) | (1L << (TIMESTAMP - 567)) | (1L << (TIMESTAMPADD - 567)) | (1L << (TIMESTAMPDIFF - 567)) | (1L << (TRANSACTION - 567)) | (1L << (TREE - 567)) | (1L << (TRIGGERS - 567)) | (1L << (TRIM - 567)) | (1L << (TRUE - 567)) | (1L << (TRUNCATE - 567)) | (1L << (TYPE - 567)))) != 0) || ((((_la - 632)) & ~0x3f) == 0 && ((1L << (_la - 632)) & ((1L << (TYPES - 632)) | (1L << (UNCOMMITTED - 632)) | (1L << (UNLOCK - 632)) | (1L << (USER - 632)) | (1L << (VALUE - 632)) | (1L << (VARCHAR - 632)) | (1L << (VARIABLES - 632)) | (1L << (VARIANT - 632)) | (1L << (VERBOSE - 632)) | (1L << (VERSION - 632)) | (1L << (VIEW - 632)) | (1L << (WARNINGS - 632)) | (1L << (WEEK - 632)) | (1L << (WORK - 632)) | (1L << (YEAR - 632)) | (1L << (PLUS - 632)) | (1L << (SUBTRACT - 632)) | (1L << (ASTERISK - 632)) | (1L << (TILDE - 632)) | (1L << (LOGICALNOT - 632)) | (1L << (ATSIGN - 632)) | (1L << (DOUBLEATSIGN - 632)) | (1L << (STRING_LITERAL - 632)) | (1L << (INTEGER_VALUE - 632)) | (1L << (EXPONENT_VALUE - 632)) | (1L << (DECIMAL_VALUE - 632)))) != 0) || _la==IDENTIFIER || _la==BACKQUOTED_IDENTIFIER) {
				{
				setState(4093);
				rowConstructorItem();
				setState(4098);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4094);
					match(COMMA);
					setState(4095);
					rowConstructorItem();
					}
					}
					setState(4100);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(4103);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowConstructorItemContext extends ParserRuleContext {
		public NamedExpressionContext namedExpression() {
			return getRuleContext(NamedExpressionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PLParser.DEFAULT, 0); }
		public RowConstructorItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowConstructorItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterRowConstructorItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitRowConstructorItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitRowConstructorItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowConstructorItemContext rowConstructorItem() throws RecognitionException {
		RowConstructorItemContext _localctx = new RowConstructorItemContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_rowConstructorItem);
		try {
			setState(4107);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT_PAREN:
			case LEFT_BRACKET:
			case LEFT_BRACE:
			case RIGHT_BRACE:
			case ADD:
			case ADDDATE:
			case AFTER:
			case AGG_STATE:
			case AGGREGATE:
			case ALIAS:
			case ANALYZED:
			case ARRAY:
			case ARRAY_RANGE:
			case AT:
			case AUTHORS:
			case AUTO_INCREMENT:
			case BACKENDS:
			case BACKUP:
			case BEGIN:
			case BELONG:
			case BIN:
			case BINARY:
			case BITAND:
			case BITMAP:
			case BITMAP_UNION:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BOOLEAN:
			case BRIEF:
			case BROKER:
			case BUCKETS:
			case BUILD:
			case BUILTIN:
			case BULK:
			case CACHED:
			case CALL:
			case CASE:
			case CAST:
			case CATALOG:
			case CATALOGS:
			case CHAIN:
			case CHAR:
			case CHARSET:
			case CHECK:
			case CLUSTER:
			case CLUSTERS:
			case COLLATION:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPACT:
			case COMPLETE:
			case CONFIG:
			case CONNECTION:
			case CONNECTION_ID:
			case CONSISTENT:
			case CONSTRAINTS:
			case CONVERT:
			case COPY:
			case COUNT:
			case CREATION:
			case CRON:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DATA:
			case DATABASE:
			case DATE:
			case DATE_ADD:
			case DATE_CEIL:
			case DATE_DIFF:
			case DATE_FLOOR:
			case DATE_SUB:
			case DATEADD:
			case DATEDIFF:
			case DATETIME:
			case DATETIMEV2:
			case DATEV2:
			case DATETIMEV1:
			case DATEV1:
			case DAY:
			case DAYS_ADD:
			case DAYS_SUB:
			case DECIMAL:
			case DECIMALV2:
			case DECIMALV3:
			case DEFERRED:
			case DEMAND:
			case DIAGNOSE:
			case DISTINCTPC:
			case DISTINCTPCSA:
			case DO:
			case DORIS_INTERNAL_TABLE_ID:
			case DUAL:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTKEY:
			case ENCRYPTKEYS:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERRORS:
			case EVENTS:
			case EVERY:
			case EXCLUDE:
			case EXISTS:
			case EXPIRED:
			case EXTERNAL:
			case EXTRACT:
			case FAILED_LOGIN_ATTEMPTS:
			case FALSE:
			case FAST:
			case FEATURE:
			case FIELDS:
			case FILE:
			case FILTER:
			case FIRST:
			case FORMAT:
			case FREE:
			case FRONTENDS:
			case FUNCTION:
			case GENERIC:
			case GLOBAL:
			case GRAPH:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HDFS:
			case HELP:
			case HISTOGRAM:
			case HLL_UNION:
			case HOSTNAME:
			case HOUR:
			case HUB:
			case IDENTIFIED:
			case IF:
			case IGNORE:
			case IMMEDIATE:
			case INCREMENTAL:
			case INDEXES:
			case INTERVAL:
			case INVERTED:
			case IPV4:
			case IPV6:
			case IS_NOT_NULL_PRED:
			case IS_NULL_PRED:
			case ISNULL:
			case ISOLATION:
			case JOB:
			case JOBS:
			case JSON:
			case JSONB:
			case KEY:
			case LABEL:
			case LAST:
			case LDAP:
			case LDAP_ADMIN_PASSWORD:
			case LEFT:
			case LESS:
			case LEVEL:
			case LIKE:
			case LINES:
			case LINK:
			case LOCAL:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case LOCATION:
			case LOCK:
			case LOGICAL:
			case MANUAL:
			case MAP:
			case MATCH_ALL:
			case MATCH_ANY:
			case MATCH_ELEMENT_EQ:
			case MATCH_ELEMENT_GE:
			case MATCH_ELEMENT_GT:
			case MATCH_ELEMENT_LE:
			case MATCH_ELEMENT_LT:
			case MATCH_PHRASE:
			case MATCH_PHRASE_EDGE:
			case MATCH_PHRASE_PREFIX:
			case MATCH_REGEXP:
			case MATERIALIZED:
			case MAX:
			case MEMO:
			case MERGE:
			case MIGRATE:
			case MIGRATIONS:
			case MIN:
			case MINUTE:
			case MODIFY:
			case MONTH:
			case MTMV:
			case NAME:
			case NAMES:
			case NEGATIVE:
			case NEVER:
			case NEXT:
			case NGRAM_BF:
			case NO:
			case NON_NULLABLE:
			case NOT:
			case NULL:
			case NULLS:
			case OF:
			case OFFSET:
			case ONLY:
			case OPEN:
			case OPTIMIZED:
			case PARAMETER:
			case PARSED:
			case PARTITIONS:
			case PASSWORD:
			case PASSWORD_EXPIRE:
			case PASSWORD_HISTORY:
			case PASSWORD_LOCK_TIME:
			case PASSWORD_REUSE:
			case PATH:
			case PAUSE:
			case PERCENT:
			case PERIOD:
			case PERMISSIVE:
			case PHYSICAL:
			case PLAN:
			case PROCESS:
			case PLUGIN:
			case PLUGINS:
			case POLICY:
			case PROC:
			case PROCESSLIST:
			case PROFILE:
			case PROPERTIES:
			case PROPERTY:
			case QUANTILE_STATE:
			case QUANTILE_UNION:
			case QUERY:
			case QUOTA:
			case RANDOM:
			case RECOVER:
			case RECYCLE:
			case REFRESH:
			case REGEXP:
			case REPEATABLE:
			case REPLACE:
			case REPLACE_IF_NOT_NULL:
			case REPOSITORIES:
			case REPOSITORY:
			case RESOURCE:
			case RESOURCES:
			case RESTORE:
			case RESTRICTIVE:
			case RESUME:
			case RETURNS:
			case REWRITTEN:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case S3:
			case SAMPLE:
			case SCHEDULE:
			case SCHEDULER:
			case SCHEMA:
			case SECOND:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION:
			case SHAPE:
			case SKEW:
			case SNAPSHOT:
			case SONAME:
			case SPLIT:
			case START:
			case STARTS:
			case STATS:
			case STATUS:
			case STOP:
			case STORAGE:
			case STREAM:
			case STREAMING:
			case STRING:
			case STRUCT:
			case SUBDATE:
			case SUM:
			case TABLES:
			case TASK:
			case TASKS:
			case TEMPORARY:
			case TEXT:
			case THAN:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TRANSACTION:
			case TREE:
			case TRIGGERS:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case TYPES:
			case UNCOMMITTED:
			case UNLOCK:
			case USER:
			case VALUE:
			case VARCHAR:
			case VARIABLES:
			case VARIANT:
			case VERBOSE:
			case VERSION:
			case VIEW:
			case WARNINGS:
			case WEEK:
			case WORK:
			case YEAR:
			case PLUS:
			case SUBTRACT:
			case ASTERISK:
			case TILDE:
			case LOGICALNOT:
			case ATSIGN:
			case DOUBLEATSIGN:
			case STRING_LITERAL:
			case INTEGER_VALUE:
			case EXPONENT_VALUE:
			case DECIMAL_VALUE:
			case IDENTIFIER:
			case BACKQUOTED_IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(4105);
				namedExpression();
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(4106);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PredicateContext extends ParserRuleContext {
		public Token kind;
		public ValueExpressionContext lower;
		public ValueExpressionContext upper;
		public ValueExpressionContext pattern;
		public TerminalNode AND() { return getToken(PLParser.AND, 0); }
		public TerminalNode BETWEEN() { return getToken(PLParser.BETWEEN, 0); }
		public List<ValueExpressionContext> valueExpression() {
			return getRuleContexts(ValueExpressionContext.class);
		}
		public ValueExpressionContext valueExpression(int i) {
			return getRuleContext(ValueExpressionContext.class,i);
		}
		public TerminalNode NOT() { return getToken(PLParser.NOT, 0); }
		public TerminalNode LIKE() { return getToken(PLParser.LIKE, 0); }
		public TerminalNode REGEXP() { return getToken(PLParser.REGEXP, 0); }
		public TerminalNode RLIKE() { return getToken(PLParser.RLIKE, 0); }
		public TerminalNode MATCH() { return getToken(PLParser.MATCH, 0); }
		public TerminalNode MATCH_ANY() { return getToken(PLParser.MATCH_ANY, 0); }
		public TerminalNode MATCH_ALL() { return getToken(PLParser.MATCH_ALL, 0); }
		public TerminalNode MATCH_PHRASE() { return getToken(PLParser.MATCH_PHRASE, 0); }
		public TerminalNode MATCH_PHRASE_PREFIX() { return getToken(PLParser.MATCH_PHRASE_PREFIX, 0); }
		public TerminalNode MATCH_REGEXP() { return getToken(PLParser.MATCH_REGEXP, 0); }
		public TerminalNode MATCH_PHRASE_EDGE() { return getToken(PLParser.MATCH_PHRASE_EDGE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public TerminalNode IN() { return getToken(PLParser.IN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public TerminalNode IS() { return getToken(PLParser.IS, 0); }
		public TerminalNode NULL() { return getToken(PLParser.NULL, 0); }
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PredicateContext predicate() throws RecognitionException {
		PredicateContext _localctx = new PredicateContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_predicate);
		int _la;
		try {
			setState(4155);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,542,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4110);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(4109);
					match(NOT);
					}
				}

				setState(4112);
				((PredicateContext)_localctx).kind = match(BETWEEN);
				setState(4113);
				((PredicateContext)_localctx).lower = valueExpression(0);
				setState(4114);
				match(AND);
				setState(4115);
				((PredicateContext)_localctx).upper = valueExpression(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4118);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(4117);
					match(NOT);
					}
				}

				setState(4120);
				((PredicateContext)_localctx).kind = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LIKE || _la==REGEXP || _la==RLIKE) ) {
					((PredicateContext)_localctx).kind = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4121);
				((PredicateContext)_localctx).pattern = valueExpression(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4123);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(4122);
					match(NOT);
					}
				}

				setState(4125);
				((PredicateContext)_localctx).kind = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (MATCH - 447)) | (1L << (MATCH_ALL - 447)) | (1L << (MATCH_ANY - 447)) | (1L << (MATCH_PHRASE - 447)) | (1L << (MATCH_PHRASE_EDGE - 447)) | (1L << (MATCH_PHRASE_PREFIX - 447)) | (1L << (MATCH_REGEXP - 447)))) != 0)) ) {
					((PredicateContext)_localctx).kind = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4126);
				((PredicateContext)_localctx).pattern = valueExpression(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4128);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(4127);
					match(NOT);
					}
				}

				setState(4130);
				((PredicateContext)_localctx).kind = match(IN);
				setState(4131);
				match(LEFT_PAREN);
				setState(4132);
				query();
				setState(4133);
				match(RIGHT_PAREN);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4136);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(4135);
					match(NOT);
					}
				}

				setState(4138);
				((PredicateContext)_localctx).kind = match(IN);
				setState(4139);
				match(LEFT_PAREN);
				setState(4140);
				expression();
				setState(4145);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4141);
					match(COMMA);
					setState(4142);
					expression();
					}
					}
					setState(4147);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4148);
				match(RIGHT_PAREN);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4150);
				match(IS);
				setState(4152);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(4151);
					match(NOT);
					}
				}

				setState(4154);
				((PredicateContext)_localctx).kind = match(NULL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValueExpressionContext extends ParserRuleContext {
		public ValueExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valueExpression; }
	 
		public ValueExpressionContext() { }
		public void copyFrom(ValueExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ValueExpressionDefaultContext extends ValueExpressionContext {
		public PrimaryExpressionContext primaryExpression() {
			return getRuleContext(PrimaryExpressionContext.class,0);
		}
		public ValueExpressionDefaultContext(ValueExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterValueExpressionDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitValueExpressionDefault(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitValueExpressionDefault(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ComparisonContext extends ValueExpressionContext {
		public ValueExpressionContext left;
		public ValueExpressionContext right;
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public List<ValueExpressionContext> valueExpression() {
			return getRuleContexts(ValueExpressionContext.class);
		}
		public ValueExpressionContext valueExpression(int i) {
			return getRuleContext(ValueExpressionContext.class,i);
		}
		public ComparisonContext(ValueExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterComparison(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitComparison(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitComparison(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BitOperationContext extends ValueExpressionContext {
		public Token operator;
		public ValueExpressionContext left;
		public ValueExpressionContext right;
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public TerminalNode COMMA() { return getToken(PLParser.COMMA, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public List<ValueExpressionContext> valueExpression() {
			return getRuleContexts(ValueExpressionContext.class);
		}
		public ValueExpressionContext valueExpression(int i) {
			return getRuleContext(ValueExpressionContext.class,i);
		}
		public TerminalNode BITAND() { return getToken(PLParser.BITAND, 0); }
		public TerminalNode BITOR() { return getToken(PLParser.BITOR, 0); }
		public TerminalNode BITXOR() { return getToken(PLParser.BITXOR, 0); }
		public BitOperationContext(ValueExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterBitOperation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitBitOperation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitBitOperation(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ArithmeticBinaryContext extends ValueExpressionContext {
		public ValueExpressionContext left;
		public Token operator;
		public ValueExpressionContext right;
		public List<ValueExpressionContext> valueExpression() {
			return getRuleContexts(ValueExpressionContext.class);
		}
		public ValueExpressionContext valueExpression(int i) {
			return getRuleContext(ValueExpressionContext.class,i);
		}
		public TerminalNode ASTERISK() { return getToken(PLParser.ASTERISK, 0); }
		public TerminalNode SLASH() { return getToken(PLParser.SLASH, 0); }
		public TerminalNode MOD() { return getToken(PLParser.MOD, 0); }
		public TerminalNode DIV() { return getToken(PLParser.DIV, 0); }
		public TerminalNode PLUS() { return getToken(PLParser.PLUS, 0); }
		public TerminalNode SUBTRACT() { return getToken(PLParser.SUBTRACT, 0); }
		public TerminalNode HAT() { return getToken(PLParser.HAT, 0); }
		public TerminalNode PIPE() { return getToken(PLParser.PIPE, 0); }
		public TerminalNode AMPERSAND() { return getToken(PLParser.AMPERSAND, 0); }
		public ArithmeticBinaryContext(ValueExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterArithmeticBinary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitArithmeticBinary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitArithmeticBinary(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ArithmeticUnaryContext extends ValueExpressionContext {
		public Token operator;
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public TerminalNode SUBTRACT() { return getToken(PLParser.SUBTRACT, 0); }
		public TerminalNode PLUS() { return getToken(PLParser.PLUS, 0); }
		public TerminalNode TILDE() { return getToken(PLParser.TILDE, 0); }
		public ArithmeticUnaryContext(ValueExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterArithmeticUnary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitArithmeticUnary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitArithmeticUnary(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValueExpressionContext valueExpression() throws RecognitionException {
		return valueExpression(0);
	}

	private ValueExpressionContext valueExpression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ValueExpressionContext _localctx = new ValueExpressionContext(_ctx, _parentState);
		ValueExpressionContext _prevctx = _localctx;
		int _startState = 486;
		enterRecursionRule(_localctx, 486, RULE_valueExpression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4168);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,543,_ctx) ) {
			case 1:
				{
				_localctx = new ValueExpressionDefaultContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(4158);
				primaryExpression(0);
				}
				break;
			case 2:
				{
				_localctx = new ArithmeticUnaryContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4159);
				((ArithmeticUnaryContext)_localctx).operator = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 669)) & ~0x3f) == 0 && ((1L << (_la - 669)) & ((1L << (PLUS - 669)) | (1L << (SUBTRACT - 669)) | (1L << (TILDE - 669)))) != 0)) ) {
					((ArithmeticUnaryContext)_localctx).operator = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4160);
				valueExpression(5);
				}
				break;
			case 3:
				{
				_localctx = new BitOperationContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4161);
				((BitOperationContext)_localctx).operator = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (BITAND - 224)) | (1L << (BITOR - 224)) | (1L << (BITXOR - 224)))) != 0)) ) {
					((BitOperationContext)_localctx).operator = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4162);
				match(LEFT_PAREN);
				setState(4163);
				((BitOperationContext)_localctx).left = valueExpression(0);
				setState(4164);
				match(COMMA);
				setState(4165);
				((BitOperationContext)_localctx).right = valueExpression(0);
				setState(4166);
				match(RIGHT_PAREN);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(4182);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,545,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(4180);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,544,_ctx) ) {
					case 1:
						{
						_localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
						((ArithmeticBinaryContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_valueExpression);
						setState(4170);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(4171);
						((ArithmeticBinaryContext)_localctx).operator = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==DIV || ((((_la - 671)) & ~0x3f) == 0 && ((1L << (_la - 671)) & ((1L << (ASTERISK - 671)) | (1L << (SLASH - 671)) | (1L << (MOD - 671)))) != 0)) ) {
							((ArithmeticBinaryContext)_localctx).operator = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(4172);
						((ArithmeticBinaryContext)_localctx).right = valueExpression(5);
						}
						break;
					case 2:
						{
						_localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
						((ArithmeticBinaryContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_valueExpression);
						setState(4173);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(4174);
						((ArithmeticBinaryContext)_localctx).operator = _input.LT(1);
						_la = _input.LA(1);
						if ( !(((((_la - 669)) & ~0x3f) == 0 && ((1L << (_la - 669)) & ((1L << (PLUS - 669)) | (1L << (SUBTRACT - 669)) | (1L << (AMPERSAND - 669)) | (1L << (PIPE - 669)) | (1L << (HAT - 669)))) != 0)) ) {
							((ArithmeticBinaryContext)_localctx).operator = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(4175);
						((ArithmeticBinaryContext)_localctx).right = valueExpression(4);
						}
						break;
					case 3:
						{
						_localctx = new ComparisonContext(new ValueExpressionContext(_parentctx, _parentState));
						((ComparisonContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_valueExpression);
						setState(4176);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(4177);
						comparisonOperator();
						setState(4178);
						((ComparisonContext)_localctx).right = valueExpression(3);
						}
						break;
					}
					} 
				}
				setState(4184);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,545,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class DatetimeUnitContext extends ParserRuleContext {
		public TerminalNode YEAR() { return getToken(PLParser.YEAR, 0); }
		public TerminalNode MONTH() { return getToken(PLParser.MONTH, 0); }
		public TerminalNode WEEK() { return getToken(PLParser.WEEK, 0); }
		public TerminalNode DAY() { return getToken(PLParser.DAY, 0); }
		public TerminalNode HOUR() { return getToken(PLParser.HOUR, 0); }
		public TerminalNode MINUTE() { return getToken(PLParser.MINUTE, 0); }
		public TerminalNode SECOND() { return getToken(PLParser.SECOND, 0); }
		public DatetimeUnitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetimeUnit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterDatetimeUnit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitDatetimeUnit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitDatetimeUnit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DatetimeUnitContext datetimeUnit() throws RecognitionException {
		DatetimeUnitContext _localctx = new DatetimeUnitContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_datetimeUnit);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4185);
			_la = _input.LA(1);
			if ( !(_la==DAY || _la==HOUR || _la==MINUTE || _la==MONTH || _la==SECOND || _la==WEEK || _la==YEAR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrimaryExpressionContext extends ParserRuleContext {
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_primaryExpression; }
	 
		public PrimaryExpressionContext() { }
		public void copyFrom(PrimaryExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class DateCeilContext extends PrimaryExpressionContext {
		public Token name;
		public ValueExpressionContext timestamp;
		public ValueExpressionContext unitsAmount;
		public DatetimeUnitContext unit;
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public TerminalNode COMMA() { return getToken(PLParser.COMMA, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public TerminalNode DATE_CEIL() { return getToken(PLParser.DATE_CEIL, 0); }
		public List<ValueExpressionContext> valueExpression() {
			return getRuleContexts(ValueExpressionContext.class);
		}
		public ValueExpressionContext valueExpression(int i) {
			return getRuleContext(ValueExpressionContext.class,i);
		}
		public TerminalNode INTERVAL() { return getToken(PLParser.INTERVAL, 0); }
		public DatetimeUnitContext datetimeUnit() {
			return getRuleContext(DatetimeUnitContext.class,0);
		}
		public DateCeilContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterDateCeil(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitDateCeil(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitDateCeil(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DereferenceContext extends PrimaryExpressionContext {
		public PrimaryExpressionContext base;
		public IdentifierContext fieldName;
		public TerminalNode DOT() { return getToken(PLParser.DOT, 0); }
		public PrimaryExpressionContext primaryExpression() {
			return getRuleContext(PrimaryExpressionContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public DereferenceContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterDereference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitDereference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitDereference(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CurrentDateContext extends PrimaryExpressionContext {
		public Token name;
		public TerminalNode CURRENT_DATE() { return getToken(PLParser.CURRENT_DATE, 0); }
		public CurrentDateContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterCurrentDate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitCurrentDate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitCurrentDate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TimestampaddContext extends PrimaryExpressionContext {
		public Token name;
		public DatetimeUnitContext unit;
		public ValueExpressionContext startTimestamp;
		public ValueExpressionContext endTimestamp;
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public DatetimeUnitContext datetimeUnit() {
			return getRuleContext(DatetimeUnitContext.class,0);
		}
		public List<ValueExpressionContext> valueExpression() {
			return getRuleContexts(ValueExpressionContext.class);
		}
		public ValueExpressionContext valueExpression(int i) {
			return getRuleContext(ValueExpressionContext.class,i);
		}
		public TerminalNode TIMESTAMPADD() { return getToken(PLParser.TIMESTAMPADD, 0); }
		public TerminalNode DATEADD() { return getToken(PLParser.DATEADD, 0); }
		public TimestampaddContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterTimestampadd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitTimestampadd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitTimestampadd(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Date_subContext extends PrimaryExpressionContext {
		public Token name;
		public ValueExpressionContext timestamp;
		public ValueExpressionContext unitsAmount;
		public DatetimeUnitContext unit;
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public TerminalNode COMMA() { return getToken(PLParser.COMMA, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public List<ValueExpressionContext> valueExpression() {
			return getRuleContexts(ValueExpressionContext.class);
		}
		public ValueExpressionContext valueExpression(int i) {
			return getRuleContext(ValueExpressionContext.class,i);
		}
		public TerminalNode SUBDATE() { return getToken(PLParser.SUBDATE, 0); }
		public TerminalNode DAYS_SUB() { return getToken(PLParser.DAYS_SUB, 0); }
		public TerminalNode DATE_SUB() { return getToken(PLParser.DATE_SUB, 0); }
		public TerminalNode INTERVAL() { return getToken(PLParser.INTERVAL, 0); }
		public DatetimeUnitContext datetimeUnit() {
			return getRuleContext(DatetimeUnitContext.class,0);
		}
		public Date_subContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterDate_sub(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitDate_sub(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitDate_sub(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CastContext extends PrimaryExpressionContext {
		public Token name;
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode AS() { return getToken(PLParser.AS, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public TerminalNode CAST() { return getToken(PLParser.CAST, 0); }
		public CastContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterCast(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitCast(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitCast(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ParenthesizedExpressionContext extends PrimaryExpressionContext {
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public ParenthesizedExpressionContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterParenthesizedExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitParenthesizedExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitParenthesizedExpression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UserVariableContext extends PrimaryExpressionContext {
		public TerminalNode ATSIGN() { return getToken(PLParser.ATSIGN, 0); }
		public IdentifierOrTextContext identifierOrText() {
			return getRuleContext(IdentifierOrTextContext.class,0);
		}
		public UserVariableContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterUserVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitUserVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitUserVariable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ElementAtContext extends PrimaryExpressionContext {
		public PrimaryExpressionContext value;
		public ValueExpressionContext index;
		public TerminalNode LEFT_BRACKET() { return getToken(PLParser.LEFT_BRACKET, 0); }
		public TerminalNode RIGHT_BRACKET() { return getToken(PLParser.RIGHT_BRACKET, 0); }
		public PrimaryExpressionContext primaryExpression() {
			return getRuleContext(PrimaryExpressionContext.class,0);
		}
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public ElementAtContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterElementAt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitElementAt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitElementAt(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LocalTimestampContext extends PrimaryExpressionContext {
		public Token name;
		public TerminalNode LOCALTIMESTAMP() { return getToken(PLParser.LOCALTIMESTAMP, 0); }
		public LocalTimestampContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterLocalTimestamp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitLocalTimestamp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitLocalTimestamp(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CharFunctionContext extends PrimaryExpressionContext {
		public ExpressionContext expression;
		public List<ExpressionContext> arguments = new ArrayList<ExpressionContext>();
		public IdentifierOrTextContext charSet;
		public TerminalNode CHAR() { return getToken(PLParser.CHAR, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public TerminalNode USING() { return getToken(PLParser.USING, 0); }
		public IdentifierOrTextContext identifierOrText() {
			return getRuleContext(IdentifierOrTextContext.class,0);
		}
		public CharFunctionContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterCharFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitCharFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitCharFunction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IntervalLiteralContext extends PrimaryExpressionContext {
		public IntervalContext interval() {
			return getRuleContext(IntervalContext.class,0);
		}
		public IntervalLiteralContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterIntervalLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitIntervalLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitIntervalLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ArrayRangeContext extends PrimaryExpressionContext {
		public Token name;
		public ValueExpressionContext start;
		public ValueExpressionContext end;
		public ValueExpressionContext unitsAmount;
		public DatetimeUnitContext unit;
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public List<ValueExpressionContext> valueExpression() {
			return getRuleContexts(ValueExpressionContext.class);
		}
		public ValueExpressionContext valueExpression(int i) {
			return getRuleContext(ValueExpressionContext.class,i);
		}
		public TerminalNode ARRAY_RANGE() { return getToken(PLParser.ARRAY_RANGE, 0); }
		public TerminalNode SEQUENCE() { return getToken(PLParser.SEQUENCE, 0); }
		public TerminalNode INTERVAL() { return getToken(PLParser.INTERVAL, 0); }
		public DatetimeUnitContext datetimeUnit() {
			return getRuleContext(DatetimeUnitContext.class,0);
		}
		public ArrayRangeContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterArrayRange(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitArrayRange(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitArrayRange(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleCaseContext extends PrimaryExpressionContext {
		public ExpressionContext value;
		public ExpressionContext elseExpression;
		public TerminalNode CASE() { return getToken(PLParser.CASE, 0); }
		public TerminalNode END() { return getToken(PLParser.END, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<WhenClauseContext> whenClause() {
			return getRuleContexts(WhenClauseContext.class);
		}
		public WhenClauseContext whenClause(int i) {
			return getRuleContext(WhenClauseContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(PLParser.ELSE, 0); }
		public SimpleCaseContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterSimpleCase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitSimpleCase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitSimpleCase(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ColumnReferenceContext extends PrimaryExpressionContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode BINARY() { return getToken(PLParser.BINARY, 0); }
		public ColumnReferenceContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterColumnReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitColumnReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitColumnReference(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StarContext extends PrimaryExpressionContext {
		public TerminalNode ASTERISK() { return getToken(PLParser.ASTERISK, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(PLParser.DOT, 0); }
		public StarContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterStar(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitStar(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitStar(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ConvertTypeContext extends PrimaryExpressionContext {
		public ExpressionContext argument;
		public DataTypeContext type;
		public TerminalNode CONVERT() { return getToken(PLParser.CONVERT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public TerminalNode COMMA() { return getToken(PLParser.COMMA, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public ConvertTypeContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterConvertType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitConvertType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitConvertType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TimestampdiffContext extends PrimaryExpressionContext {
		public Token name;
		public DatetimeUnitContext unit;
		public ValueExpressionContext startTimestamp;
		public ValueExpressionContext endTimestamp;
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public DatetimeUnitContext datetimeUnit() {
			return getRuleContext(DatetimeUnitContext.class,0);
		}
		public List<ValueExpressionContext> valueExpression() {
			return getRuleContexts(ValueExpressionContext.class);
		}
		public ValueExpressionContext valueExpression(int i) {
			return getRuleContext(ValueExpressionContext.class,i);
		}
		public TerminalNode TIMESTAMPDIFF() { return getToken(PLParser.TIMESTAMPDIFF, 0); }
		public TerminalNode DATEDIFF() { return getToken(PLParser.DATEDIFF, 0); }
		public TimestampdiffContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterTimestampdiff(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitTimestampdiff(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitTimestampdiff(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ConvertCharSetContext extends PrimaryExpressionContext {
		public ExpressionContext argument;
		public IdentifierOrTextContext charSet;
		public TerminalNode CONVERT() { return getToken(PLParser.CONVERT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public TerminalNode USING() { return getToken(PLParser.USING, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public IdentifierOrTextContext identifierOrText() {
			return getRuleContext(IdentifierOrTextContext.class,0);
		}
		public ConvertCharSetContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterConvertCharSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitConvertCharSet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitConvertCharSet(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubqueryExpressionContext extends PrimaryExpressionContext {
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public SubqueryExpressionContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterSubqueryExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitSubqueryExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitSubqueryExpression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class EncryptKeyContext extends PrimaryExpressionContext {
		public IdentifierContext dbName;
		public IdentifierContext keyName;
		public TerminalNode KEY() { return getToken(PLParser.KEY, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode DOT() { return getToken(PLParser.DOT, 0); }
		public EncryptKeyContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterEncryptKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitEncryptKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitEncryptKey(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Date_addContext extends PrimaryExpressionContext {
		public Token name;
		public ValueExpressionContext timestamp;
		public ValueExpressionContext unitsAmount;
		public DatetimeUnitContext unit;
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public TerminalNode COMMA() { return getToken(PLParser.COMMA, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public List<ValueExpressionContext> valueExpression() {
			return getRuleContexts(ValueExpressionContext.class);
		}
		public ValueExpressionContext valueExpression(int i) {
			return getRuleContext(ValueExpressionContext.class,i);
		}
		public TerminalNode ADDDATE() { return getToken(PLParser.ADDDATE, 0); }
		public TerminalNode DAYS_ADD() { return getToken(PLParser.DAYS_ADD, 0); }
		public TerminalNode DATE_ADD() { return getToken(PLParser.DATE_ADD, 0); }
		public TerminalNode INTERVAL() { return getToken(PLParser.INTERVAL, 0); }
		public DatetimeUnitContext datetimeUnit() {
			return getRuleContext(DatetimeUnitContext.class,0);
		}
		public Date_addContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterDate_add(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitDate_add(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitDate_add(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CurrentTimeContext extends PrimaryExpressionContext {
		public Token name;
		public TerminalNode CURRENT_TIME() { return getToken(PLParser.CURRENT_TIME, 0); }
		public CurrentTimeContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterCurrentTime(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitCurrentTime(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitCurrentTime(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LocalTimeContext extends PrimaryExpressionContext {
		public Token name;
		public TerminalNode LOCALTIME() { return getToken(PLParser.LOCALTIME, 0); }
		public LocalTimeContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterLocalTime(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitLocalTime(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitLocalTime(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SystemVariableContext extends PrimaryExpressionContext {
		public Token kind;
		public TerminalNode DOUBLEATSIGN() { return getToken(PLParser.DOUBLEATSIGN, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode DOT() { return getToken(PLParser.DOT, 0); }
		public TerminalNode GLOBAL() { return getToken(PLParser.GLOBAL, 0); }
		public TerminalNode SESSION() { return getToken(PLParser.SESSION, 0); }
		public SystemVariableContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterSystemVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitSystemVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitSystemVariable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CollateContext extends PrimaryExpressionContext {
		public PrimaryExpressionContext primaryExpression() {
			return getRuleContext(PrimaryExpressionContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(PLParser.COLLATE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(PLParser.STRING_LITERAL, 0); }
		public TerminalNode DEFAULT() { return getToken(PLParser.DEFAULT, 0); }
		public CollateContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterCollate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitCollate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitCollate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CurrentUserContext extends PrimaryExpressionContext {
		public Token name;
		public TerminalNode CURRENT_USER() { return getToken(PLParser.CURRENT_USER, 0); }
		public CurrentUserContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterCurrentUser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitCurrentUser(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitCurrentUser(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ConstantDefaultContext extends PrimaryExpressionContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public ConstantDefaultContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterConstantDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitConstantDefault(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitConstantDefault(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExtractContext extends PrimaryExpressionContext {
		public IdentifierContext field;
		public ValueExpressionContext source;
		public TerminalNode EXTRACT() { return getToken(PLParser.EXTRACT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public TerminalNode FROM() { return getToken(PLParser.FROM, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public TerminalNode DATE() { return getToken(PLParser.DATE, 0); }
		public TerminalNode TIMESTAMP() { return getToken(PLParser.TIMESTAMP, 0); }
		public ExtractContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterExtract(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitExtract(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitExtract(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CurrentTimestampContext extends PrimaryExpressionContext {
		public Token name;
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(PLParser.CURRENT_TIMESTAMP, 0); }
		public CurrentTimestampContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterCurrentTimestamp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitCurrentTimestamp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitCurrentTimestamp(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FunctionCallContext extends PrimaryExpressionContext {
		public FunctionCallExpressionContext functionCallExpression() {
			return getRuleContext(FunctionCallExpressionContext.class,0);
		}
		public FunctionCallContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ArraySliceContext extends PrimaryExpressionContext {
		public PrimaryExpressionContext value;
		public ValueExpressionContext begin;
		public ValueExpressionContext end;
		public TerminalNode LEFT_BRACKET() { return getToken(PLParser.LEFT_BRACKET, 0); }
		public TerminalNode COLON() { return getToken(PLParser.COLON, 0); }
		public TerminalNode RIGHT_BRACKET() { return getToken(PLParser.RIGHT_BRACKET, 0); }
		public PrimaryExpressionContext primaryExpression() {
			return getRuleContext(PrimaryExpressionContext.class,0);
		}
		public List<ValueExpressionContext> valueExpression() {
			return getRuleContexts(ValueExpressionContext.class);
		}
		public ValueExpressionContext valueExpression(int i) {
			return getRuleContext(ValueExpressionContext.class,i);
		}
		public ArraySliceContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterArraySlice(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitArraySlice(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitArraySlice(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DateFloorContext extends PrimaryExpressionContext {
		public Token name;
		public ValueExpressionContext timestamp;
		public ValueExpressionContext unitsAmount;
		public DatetimeUnitContext unit;
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public TerminalNode COMMA() { return getToken(PLParser.COMMA, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public TerminalNode DATE_FLOOR() { return getToken(PLParser.DATE_FLOOR, 0); }
		public List<ValueExpressionContext> valueExpression() {
			return getRuleContexts(ValueExpressionContext.class);
		}
		public ValueExpressionContext valueExpression(int i) {
			return getRuleContext(ValueExpressionContext.class,i);
		}
		public TerminalNode INTERVAL() { return getToken(PLParser.INTERVAL, 0); }
		public DatetimeUnitContext datetimeUnit() {
			return getRuleContext(DatetimeUnitContext.class,0);
		}
		public DateFloorContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterDateFloor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitDateFloor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitDateFloor(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SearchedCaseContext extends PrimaryExpressionContext {
		public ExpressionContext elseExpression;
		public TerminalNode CASE() { return getToken(PLParser.CASE, 0); }
		public TerminalNode END() { return getToken(PLParser.END, 0); }
		public List<WhenClauseContext> whenClause() {
			return getRuleContexts(WhenClauseContext.class);
		}
		public WhenClauseContext whenClause(int i) {
			return getRuleContext(WhenClauseContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(PLParser.ELSE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public SearchedCaseContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterSearchedCase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitSearchedCase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitSearchedCase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrimaryExpressionContext primaryExpression() throws RecognitionException {
		return primaryExpression(0);
	}

	private PrimaryExpressionContext primaryExpression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, _parentState);
		PrimaryExpressionContext _prevctx = _localctx;
		int _startState = 490;
		enterRecursionRule(_localctx, 490, RULE_primaryExpression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4386);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,561,_ctx) ) {
			case 1:
				{
				_localctx = new TimestampdiffContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(4188);
				((TimestampdiffContext)_localctx).name = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DATEDIFF || _la==TIMESTAMPDIFF) ) {
					((TimestampdiffContext)_localctx).name = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4189);
				match(LEFT_PAREN);
				setState(4190);
				((TimestampdiffContext)_localctx).unit = datetimeUnit();
				setState(4191);
				match(COMMA);
				setState(4192);
				((TimestampdiffContext)_localctx).startTimestamp = valueExpression(0);
				setState(4193);
				match(COMMA);
				setState(4194);
				((TimestampdiffContext)_localctx).endTimestamp = valueExpression(0);
				setState(4195);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				_localctx = new TimestampaddContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4197);
				((TimestampaddContext)_localctx).name = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DATEADD || _la==TIMESTAMPADD) ) {
					((TimestampaddContext)_localctx).name = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4198);
				match(LEFT_PAREN);
				setState(4199);
				((TimestampaddContext)_localctx).unit = datetimeUnit();
				setState(4200);
				match(COMMA);
				setState(4201);
				((TimestampaddContext)_localctx).startTimestamp = valueExpression(0);
				setState(4202);
				match(COMMA);
				setState(4203);
				((TimestampaddContext)_localctx).endTimestamp = valueExpression(0);
				setState(4204);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				{
				_localctx = new Date_addContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4206);
				((Date_addContext)_localctx).name = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ADDDATE || _la==DATE_ADD || _la==DAYS_ADD) ) {
					((Date_addContext)_localctx).name = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4207);
				match(LEFT_PAREN);
				setState(4208);
				((Date_addContext)_localctx).timestamp = valueExpression(0);
				setState(4209);
				match(COMMA);
				setState(4215);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,546,_ctx) ) {
				case 1:
					{
					setState(4210);
					match(INTERVAL);
					setState(4211);
					((Date_addContext)_localctx).unitsAmount = valueExpression(0);
					setState(4212);
					((Date_addContext)_localctx).unit = datetimeUnit();
					}
					break;
				case 2:
					{
					setState(4214);
					((Date_addContext)_localctx).unitsAmount = valueExpression(0);
					}
					break;
				}
				setState(4217);
				match(RIGHT_PAREN);
				}
				break;
			case 4:
				{
				_localctx = new Date_subContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4219);
				((Date_subContext)_localctx).name = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DATE_SUB || _la==DAYS_SUB || _la==SUBDATE) ) {
					((Date_subContext)_localctx).name = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4220);
				match(LEFT_PAREN);
				setState(4221);
				((Date_subContext)_localctx).timestamp = valueExpression(0);
				setState(4222);
				match(COMMA);
				setState(4228);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,547,_ctx) ) {
				case 1:
					{
					setState(4223);
					match(INTERVAL);
					setState(4224);
					((Date_subContext)_localctx).unitsAmount = valueExpression(0);
					setState(4225);
					((Date_subContext)_localctx).unit = datetimeUnit();
					}
					break;
				case 2:
					{
					setState(4227);
					((Date_subContext)_localctx).unitsAmount = valueExpression(0);
					}
					break;
				}
				setState(4230);
				match(RIGHT_PAREN);
				}
				break;
			case 5:
				{
				_localctx = new DateFloorContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4232);
				((DateFloorContext)_localctx).name = match(DATE_FLOOR);
				setState(4233);
				match(LEFT_PAREN);
				setState(4234);
				((DateFloorContext)_localctx).timestamp = valueExpression(0);
				setState(4235);
				match(COMMA);
				setState(4241);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,548,_ctx) ) {
				case 1:
					{
					setState(4236);
					match(INTERVAL);
					setState(4237);
					((DateFloorContext)_localctx).unitsAmount = valueExpression(0);
					setState(4238);
					((DateFloorContext)_localctx).unit = datetimeUnit();
					}
					break;
				case 2:
					{
					setState(4240);
					((DateFloorContext)_localctx).unitsAmount = valueExpression(0);
					}
					break;
				}
				setState(4243);
				match(RIGHT_PAREN);
				}
				break;
			case 6:
				{
				_localctx = new DateCeilContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4245);
				((DateCeilContext)_localctx).name = match(DATE_CEIL);
				setState(4246);
				match(LEFT_PAREN);
				setState(4247);
				((DateCeilContext)_localctx).timestamp = valueExpression(0);
				setState(4248);
				match(COMMA);
				setState(4254);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,549,_ctx) ) {
				case 1:
					{
					setState(4249);
					match(INTERVAL);
					setState(4250);
					((DateCeilContext)_localctx).unitsAmount = valueExpression(0);
					setState(4251);
					((DateCeilContext)_localctx).unit = datetimeUnit();
					}
					break;
				case 2:
					{
					setState(4253);
					((DateCeilContext)_localctx).unitsAmount = valueExpression(0);
					}
					break;
				}
				setState(4256);
				match(RIGHT_PAREN);
				}
				break;
			case 7:
				{
				_localctx = new ArrayRangeContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4258);
				((ArrayRangeContext)_localctx).name = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ARRAY_RANGE || _la==SEQUENCE) ) {
					((ArrayRangeContext)_localctx).name = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4259);
				match(LEFT_PAREN);
				setState(4260);
				((ArrayRangeContext)_localctx).start = valueExpression(0);
				setState(4261);
				match(COMMA);
				setState(4262);
				((ArrayRangeContext)_localctx).end = valueExpression(0);
				setState(4263);
				match(COMMA);
				setState(4269);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,550,_ctx) ) {
				case 1:
					{
					setState(4264);
					match(INTERVAL);
					setState(4265);
					((ArrayRangeContext)_localctx).unitsAmount = valueExpression(0);
					setState(4266);
					((ArrayRangeContext)_localctx).unit = datetimeUnit();
					}
					break;
				case 2:
					{
					setState(4268);
					((ArrayRangeContext)_localctx).unitsAmount = valueExpression(0);
					}
					break;
				}
				setState(4271);
				match(RIGHT_PAREN);
				}
				break;
			case 8:
				{
				_localctx = new CurrentDateContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4273);
				((CurrentDateContext)_localctx).name = match(CURRENT_DATE);
				}
				break;
			case 9:
				{
				_localctx = new CurrentTimeContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4274);
				((CurrentTimeContext)_localctx).name = match(CURRENT_TIME);
				}
				break;
			case 10:
				{
				_localctx = new CurrentTimestampContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4275);
				((CurrentTimestampContext)_localctx).name = match(CURRENT_TIMESTAMP);
				}
				break;
			case 11:
				{
				_localctx = new LocalTimeContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4276);
				((LocalTimeContext)_localctx).name = match(LOCALTIME);
				}
				break;
			case 12:
				{
				_localctx = new LocalTimestampContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4277);
				((LocalTimestampContext)_localctx).name = match(LOCALTIMESTAMP);
				}
				break;
			case 13:
				{
				_localctx = new CurrentUserContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4278);
				((CurrentUserContext)_localctx).name = match(CURRENT_USER);
				}
				break;
			case 14:
				{
				_localctx = new SearchedCaseContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4279);
				match(CASE);
				setState(4281); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(4280);
					whenClause();
					}
					}
					setState(4283); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(4287);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(4285);
					match(ELSE);
					setState(4286);
					((SearchedCaseContext)_localctx).elseExpression = expression();
					}
				}

				setState(4289);
				match(END);
				}
				break;
			case 15:
				{
				_localctx = new SimpleCaseContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4291);
				match(CASE);
				setState(4292);
				((SimpleCaseContext)_localctx).value = expression();
				setState(4294); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(4293);
					whenClause();
					}
					}
					setState(4296); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(4300);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(4298);
					match(ELSE);
					setState(4299);
					((SimpleCaseContext)_localctx).elseExpression = expression();
					}
				}

				setState(4302);
				match(END);
				}
				break;
			case 16:
				{
				_localctx = new CastContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4304);
				((CastContext)_localctx).name = match(CAST);
				setState(4305);
				match(LEFT_PAREN);
				setState(4306);
				expression();
				setState(4307);
				match(AS);
				setState(4308);
				dataType();
				setState(4309);
				match(RIGHT_PAREN);
				}
				break;
			case 17:
				{
				_localctx = new ConstantDefaultContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4311);
				constant();
				}
				break;
			case 18:
				{
				_localctx = new IntervalLiteralContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4312);
				interval();
				}
				break;
			case 19:
				{
				_localctx = new StarContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4313);
				match(ASTERISK);
				}
				break;
			case 20:
				{
				_localctx = new StarContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4314);
				qualifiedName();
				setState(4315);
				match(DOT);
				setState(4316);
				match(ASTERISK);
				}
				break;
			case 21:
				{
				_localctx = new CharFunctionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4318);
				match(CHAR);
				setState(4319);
				match(LEFT_PAREN);
				setState(4320);
				((CharFunctionContext)_localctx).expression = expression();
				((CharFunctionContext)_localctx).arguments.add(((CharFunctionContext)_localctx).expression);
				setState(4325);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4321);
					match(COMMA);
					setState(4322);
					((CharFunctionContext)_localctx).expression = expression();
					((CharFunctionContext)_localctx).arguments.add(((CharFunctionContext)_localctx).expression);
					}
					}
					setState(4327);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4330);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(4328);
					match(USING);
					setState(4329);
					((CharFunctionContext)_localctx).charSet = identifierOrText();
					}
				}

				setState(4332);
				match(RIGHT_PAREN);
				}
				break;
			case 22:
				{
				_localctx = new ConvertCharSetContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4334);
				match(CONVERT);
				setState(4335);
				match(LEFT_PAREN);
				setState(4336);
				((ConvertCharSetContext)_localctx).argument = expression();
				setState(4337);
				match(USING);
				setState(4338);
				((ConvertCharSetContext)_localctx).charSet = identifierOrText();
				setState(4339);
				match(RIGHT_PAREN);
				}
				break;
			case 23:
				{
				_localctx = new ConvertTypeContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4341);
				match(CONVERT);
				setState(4342);
				match(LEFT_PAREN);
				setState(4343);
				((ConvertTypeContext)_localctx).argument = expression();
				setState(4344);
				match(COMMA);
				setState(4345);
				((ConvertTypeContext)_localctx).type = dataType();
				setState(4346);
				match(RIGHT_PAREN);
				}
				break;
			case 24:
				{
				_localctx = new FunctionCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4348);
				functionCallExpression();
				}
				break;
			case 25:
				{
				_localctx = new SubqueryExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4349);
				match(LEFT_PAREN);
				setState(4350);
				query();
				setState(4351);
				match(RIGHT_PAREN);
				}
				break;
			case 26:
				{
				_localctx = new UserVariableContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4353);
				match(ATSIGN);
				setState(4354);
				identifierOrText();
				}
				break;
			case 27:
				{
				_localctx = new SystemVariableContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4355);
				match(DOUBLEATSIGN);
				setState(4358);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,557,_ctx) ) {
				case 1:
					{
					setState(4356);
					((SystemVariableContext)_localctx).kind = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==GLOBAL || _la==SESSION) ) {
						((SystemVariableContext)_localctx).kind = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4357);
					match(DOT);
					}
					break;
				}
				setState(4360);
				identifier();
				}
				break;
			case 28:
				{
				_localctx = new ColumnReferenceContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4362);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BINARY) {
					{
					setState(4361);
					match(BINARY);
					}
				}

				setState(4364);
				identifier();
				}
				break;
			case 29:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4365);
				match(LEFT_PAREN);
				setState(4366);
				expression();
				setState(4367);
				match(RIGHT_PAREN);
				}
				break;
			case 30:
				{
				_localctx = new EncryptKeyContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4369);
				match(KEY);
				setState(4373);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,559,_ctx) ) {
				case 1:
					{
					setState(4370);
					((EncryptKeyContext)_localctx).dbName = identifier();
					setState(4371);
					match(DOT);
					}
					break;
				}
				setState(4375);
				((EncryptKeyContext)_localctx).keyName = identifier();
				}
				break;
			case 31:
				{
				_localctx = new ExtractContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(4376);
				match(EXTRACT);
				setState(4377);
				match(LEFT_PAREN);
				setState(4378);
				((ExtractContext)_localctx).field = identifier();
				setState(4379);
				match(FROM);
				setState(4381);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,560,_ctx) ) {
				case 1:
					{
					setState(4380);
					_la = _input.LA(1);
					if ( !(_la==DATE || _la==TIMESTAMP) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4383);
				((ExtractContext)_localctx).source = valueExpression(0);
				setState(4384);
				match(RIGHT_PAREN);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(4414);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,565,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(4412);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,564,_ctx) ) {
					case 1:
						{
						_localctx = new ElementAtContext(new PrimaryExpressionContext(_parentctx, _parentState));
						((ElementAtContext)_localctx).value = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);
						setState(4388);
						if (!(precpred(_ctx, 11))) throw new FailedPredicateException(this, "precpred(_ctx, 11)");
						setState(4389);
						match(LEFT_BRACKET);
						setState(4390);
						((ElementAtContext)_localctx).index = valueExpression(0);
						setState(4391);
						match(RIGHT_BRACKET);
						}
						break;
					case 2:
						{
						_localctx = new ArraySliceContext(new PrimaryExpressionContext(_parentctx, _parentState));
						((ArraySliceContext)_localctx).value = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);
						setState(4393);
						if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, "precpred(_ctx, 10)");
						setState(4394);
						match(LEFT_BRACKET);
						setState(4395);
						((ArraySliceContext)_localctx).begin = valueExpression(0);
						setState(4396);
						match(COLON);
						setState(4398);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (((((_la - 182)) & ~0x3f) == 0 && ((1L << (_la - 182)) & ((1L << (LEFT_PAREN - 182)) | (1L << (LEFT_BRACKET - 182)) | (1L << (LEFT_BRACE - 182)) | (1L << (RIGHT_BRACE - 182)) | (1L << (ADD - 182)) | (1L << (ADDDATE - 182)) | (1L << (AFTER - 182)) | (1L << (AGG_STATE - 182)) | (1L << (AGGREGATE - 182)) | (1L << (ALIAS - 182)) | (1L << (ANALYZED - 182)) | (1L << (ARRAY - 182)) | (1L << (ARRAY_RANGE - 182)) | (1L << (AT - 182)) | (1L << (AUTHORS - 182)) | (1L << (AUTO_INCREMENT - 182)) | (1L << (BACKENDS - 182)) | (1L << (BACKUP - 182)) | (1L << (BEGIN - 182)) | (1L << (BELONG - 182)) | (1L << (BIN - 182)) | (1L << (BINARY - 182)) | (1L << (BITAND - 182)) | (1L << (BITMAP - 182)) | (1L << (BITMAP_UNION - 182)) | (1L << (BITOR - 182)) | (1L << (BITXOR - 182)) | (1L << (BLOB - 182)) | (1L << (BOOLEAN - 182)) | (1L << (BRIEF - 182)) | (1L << (BROKER - 182)) | (1L << (BUCKETS - 182)) | (1L << (BUILD - 182)) | (1L << (BUILTIN - 182)) | (1L << (BULK - 182)) | (1L << (CACHED - 182)) | (1L << (CALL - 182)) | (1L << (CASE - 182)) | (1L << (CAST - 182)) | (1L << (CATALOG - 182)) | (1L << (CATALOGS - 182)) | (1L << (CHAIN - 182)))) != 0) || ((((_la - 246)) & ~0x3f) == 0 && ((1L << (_la - 246)) & ((1L << (CHAR - 246)) | (1L << (CHARSET - 246)) | (1L << (CHECK - 246)) | (1L << (CLUSTER - 246)) | (1L << (CLUSTERS - 246)) | (1L << (COLLATION - 246)) | (1L << (COLLECT - 246)) | (1L << (COLUMNS - 246)) | (1L << (COMMENT - 246)) | (1L << (COMMIT - 246)) | (1L << (COMMITTED - 246)) | (1L << (COMPACT - 246)) | (1L << (COMPLETE - 246)) | (1L << (CONFIG - 246)) | (1L << (CONNECTION - 246)) | (1L << (CONNECTION_ID - 246)) | (1L << (CONSISTENT - 246)) | (1L << (CONSTRAINTS - 246)) | (1L << (CONVERT - 246)) | (1L << (COPY - 246)) | (1L << (COUNT - 246)) | (1L << (CREATION - 246)) | (1L << (CRON - 246)) | (1L << (CURRENT_CATALOG - 246)) | (1L << (CURRENT_DATE - 246)) | (1L << (CURRENT_TIME - 246)) | (1L << (CURRENT_TIMESTAMP - 246)) | (1L << (CURRENT_USER - 246)) | (1L << (DATA - 246)) | (1L << (DATABASE - 246)) | (1L << (DATE - 246)) | (1L << (DATE_ADD - 246)) | (1L << (DATE_CEIL - 246)) | (1L << (DATE_DIFF - 246)) | (1L << (DATE_FLOOR - 246)) | (1L << (DATE_SUB - 246)) | (1L << (DATEADD - 246)) | (1L << (DATEDIFF - 246)) | (1L << (DATETIME - 246)) | (1L << (DATETIMEV2 - 246)) | (1L << (DATEV2 - 246)) | (1L << (DATETIMEV1 - 246)) | (1L << (DATEV1 - 246)) | (1L << (DAY - 246)) | (1L << (DAYS_ADD - 246)) | (1L << (DAYS_SUB - 246)) | (1L << (DECIMAL - 246)) | (1L << (DECIMALV2 - 246)) | (1L << (DECIMALV3 - 246)) | (1L << (DEFERRED - 246)) | (1L << (DEMAND - 246)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (DIAGNOSE - 311)) | (1L << (DISTINCTPC - 311)) | (1L << (DISTINCTPCSA - 311)) | (1L << (DO - 311)) | (1L << (DORIS_INTERNAL_TABLE_ID - 311)) | (1L << (DUAL - 311)) | (1L << (DYNAMIC - 311)) | (1L << (ENABLE - 311)) | (1L << (ENCRYPTKEY - 311)) | (1L << (ENCRYPTKEYS - 311)) | (1L << (END - 311)) | (1L << (ENDS - 311)) | (1L << (ENGINE - 311)) | (1L << (ENGINES - 311)) | (1L << (ERRORS - 311)) | (1L << (EVENTS - 311)) | (1L << (EVERY - 311)) | (1L << (EXCLUDE - 311)) | (1L << (EXPIRED - 311)) | (1L << (EXTERNAL - 311)) | (1L << (EXTRACT - 311)) | (1L << (FAILED_LOGIN_ATTEMPTS - 311)) | (1L << (FALSE - 311)) | (1L << (FAST - 311)) | (1L << (FEATURE - 311)) | (1L << (FIELDS - 311)) | (1L << (FILE - 311)) | (1L << (FILTER - 311)) | (1L << (FIRST - 311)) | (1L << (FORMAT - 311)) | (1L << (FREE - 311)) | (1L << (FRONTENDS - 311)) | (1L << (FUNCTION - 311)) | (1L << (GENERIC - 311)) | (1L << (GLOBAL - 311)))) != 0) || ((((_la - 375)) & ~0x3f) == 0 && ((1L << (_la - 375)) & ((1L << (GRAPH - 375)) | (1L << (GROUPING - 375)) | (1L << (GROUPS - 375)) | (1L << (HASH - 375)) | (1L << (HDFS - 375)) | (1L << (HELP - 375)) | (1L << (HISTOGRAM - 375)) | (1L << (HLL_UNION - 375)) | (1L << (HOSTNAME - 375)) | (1L << (HOUR - 375)) | (1L << (HUB - 375)) | (1L << (IDENTIFIED - 375)) | (1L << (IF - 375)) | (1L << (IGNORE - 375)) | (1L << (IMMEDIATE - 375)) | (1L << (INCREMENTAL - 375)) | (1L << (INDEXES - 375)) | (1L << (INTERVAL - 375)) | (1L << (INVERTED - 375)) | (1L << (IPV4 - 375)) | (1L << (IPV6 - 375)) | (1L << (IS_NOT_NULL_PRED - 375)) | (1L << (IS_NULL_PRED - 375)) | (1L << (ISNULL - 375)) | (1L << (ISOLATION - 375)) | (1L << (JOB - 375)) | (1L << (JOBS - 375)) | (1L << (JSON - 375)) | (1L << (JSONB - 375)) | (1L << (KEY - 375)) | (1L << (LABEL - 375)) | (1L << (LAST - 375)) | (1L << (LDAP - 375)) | (1L << (LDAP_ADMIN_PASSWORD - 375)) | (1L << (LEFT - 375)) | (1L << (LESS - 375)) | (1L << (LEVEL - 375)) | (1L << (LIKE - 375)) | (1L << (LINES - 375)) | (1L << (LINK - 375)) | (1L << (LOCAL - 375)))) != 0) || ((((_la - 439)) & ~0x3f) == 0 && ((1L << (_la - 439)) & ((1L << (LOCALTIME - 439)) | (1L << (LOCALTIMESTAMP - 439)) | (1L << (LOCATION - 439)) | (1L << (LOCK - 439)) | (1L << (LOGICAL - 439)) | (1L << (MANUAL - 439)) | (1L << (MAP - 439)) | (1L << (MATCH_ALL - 439)) | (1L << (MATCH_ANY - 439)) | (1L << (MATCH_ELEMENT_EQ - 439)) | (1L << (MATCH_ELEMENT_GE - 439)) | (1L << (MATCH_ELEMENT_GT - 439)) | (1L << (MATCH_ELEMENT_LE - 439)) | (1L << (MATCH_ELEMENT_LT - 439)) | (1L << (MATCH_PHRASE - 439)) | (1L << (MATCH_PHRASE_EDGE - 439)) | (1L << (MATCH_PHRASE_PREFIX - 439)) | (1L << (MATCH_REGEXP - 439)) | (1L << (MATERIALIZED - 439)) | (1L << (MAX - 439)) | (1L << (MEMO - 439)) | (1L << (MERGE - 439)) | (1L << (MIGRATE - 439)) | (1L << (MIGRATIONS - 439)) | (1L << (MIN - 439)) | (1L << (MINUTE - 439)) | (1L << (MODIFY - 439)) | (1L << (MONTH - 439)) | (1L << (MTMV - 439)) | (1L << (NAME - 439)) | (1L << (NAMES - 439)) | (1L << (NEGATIVE - 439)) | (1L << (NEVER - 439)) | (1L << (NEXT - 439)) | (1L << (NGRAM_BF - 439)) | (1L << (NO - 439)) | (1L << (NON_NULLABLE - 439)) | (1L << (NULL - 439)) | (1L << (NULLS - 439)) | (1L << (OF - 439)) | (1L << (OFFSET - 439)) | (1L << (ONLY - 439)) | (1L << (OPEN - 439)) | (1L << (OPTIMIZED - 439)) | (1L << (PARAMETER - 439)) | (1L << (PARSED - 439)) | (1L << (PARTITIONS - 439)) | (1L << (PASSWORD - 439)) | (1L << (PASSWORD_EXPIRE - 439)))) != 0) || ((((_la - 503)) & ~0x3f) == 0 && ((1L << (_la - 503)) & ((1L << (PASSWORD_HISTORY - 503)) | (1L << (PASSWORD_LOCK_TIME - 503)) | (1L << (PASSWORD_REUSE - 503)) | (1L << (PATH - 503)) | (1L << (PAUSE - 503)) | (1L << (PERCENT - 503)) | (1L << (PERIOD - 503)) | (1L << (PERMISSIVE - 503)) | (1L << (PHYSICAL - 503)) | (1L << (PLAN - 503)) | (1L << (PROCESS - 503)) | (1L << (PLUGIN - 503)) | (1L << (PLUGINS - 503)) | (1L << (POLICY - 503)) | (1L << (PROC - 503)) | (1L << (PROCESSLIST - 503)) | (1L << (PROFILE - 503)) | (1L << (PROPERTIES - 503)) | (1L << (PROPERTY - 503)) | (1L << (QUANTILE_STATE - 503)) | (1L << (QUANTILE_UNION - 503)) | (1L << (QUERY - 503)) | (1L << (QUOTA - 503)) | (1L << (RANDOM - 503)) | (1L << (RECOVER - 503)) | (1L << (RECYCLE - 503)) | (1L << (REFRESH - 503)) | (1L << (REGEXP - 503)) | (1L << (REPEATABLE - 503)) | (1L << (REPLACE - 503)) | (1L << (REPLACE_IF_NOT_NULL - 503)) | (1L << (REPOSITORIES - 503)) | (1L << (REPOSITORY - 503)) | (1L << (RESOURCE - 503)) | (1L << (RESOURCES - 503)) | (1L << (RESTORE - 503)) | (1L << (RESTRICTIVE - 503)) | (1L << (RESUME - 503)) | (1L << (RETURNS - 503)) | (1L << (REWRITTEN - 503)) | (1L << (RIGHT - 503)) | (1L << (RLIKE - 503)) | (1L << (ROLLBACK - 503)) | (1L << (ROLLUP - 503)) | (1L << (ROUTINE - 503)) | (1L << (S3 - 503)))) != 0) || ((((_la - 567)) & ~0x3f) == 0 && ((1L << (_la - 567)) & ((1L << (SAMPLE - 567)) | (1L << (SCHEDULE - 567)) | (1L << (SCHEDULER - 567)) | (1L << (SCHEMA - 567)) | (1L << (SECOND - 567)) | (1L << (SEQUENCE - 567)) | (1L << (SERIALIZABLE - 567)) | (1L << (SESSION - 567)) | (1L << (SHAPE - 567)) | (1L << (SKEW - 567)) | (1L << (SNAPSHOT - 567)) | (1L << (SONAME - 567)) | (1L << (SPLIT - 567)) | (1L << (START - 567)) | (1L << (STARTS - 567)) | (1L << (STATS - 567)) | (1L << (STATUS - 567)) | (1L << (STOP - 567)) | (1L << (STORAGE - 567)) | (1L << (STREAM - 567)) | (1L << (STREAMING - 567)) | (1L << (STRING - 567)) | (1L << (STRUCT - 567)) | (1L << (SUBDATE - 567)) | (1L << (SUM - 567)) | (1L << (TABLES - 567)) | (1L << (TASK - 567)) | (1L << (TASKS - 567)) | (1L << (TEMPORARY - 567)) | (1L << (TEXT - 567)) | (1L << (THAN - 567)) | (1L << (TIME - 567)) | (1L << (TIMESTAMP - 567)) | (1L << (TIMESTAMPADD - 567)) | (1L << (TIMESTAMPDIFF - 567)) | (1L << (TRANSACTION - 567)) | (1L << (TREE - 567)) | (1L << (TRIGGERS - 567)) | (1L << (TRIM - 567)) | (1L << (TRUE - 567)) | (1L << (TRUNCATE - 567)) | (1L << (TYPE - 567)))) != 0) || ((((_la - 632)) & ~0x3f) == 0 && ((1L << (_la - 632)) & ((1L << (TYPES - 632)) | (1L << (UNCOMMITTED - 632)) | (1L << (UNLOCK - 632)) | (1L << (USER - 632)) | (1L << (VALUE - 632)) | (1L << (VARCHAR - 632)) | (1L << (VARIABLES - 632)) | (1L << (VARIANT - 632)) | (1L << (VERBOSE - 632)) | (1L << (VERSION - 632)) | (1L << (VIEW - 632)) | (1L << (WARNINGS - 632)) | (1L << (WEEK - 632)) | (1L << (WORK - 632)) | (1L << (YEAR - 632)) | (1L << (PLUS - 632)) | (1L << (SUBTRACT - 632)) | (1L << (ASTERISK - 632)) | (1L << (TILDE - 632)) | (1L << (ATSIGN - 632)) | (1L << (DOUBLEATSIGN - 632)) | (1L << (STRING_LITERAL - 632)) | (1L << (INTEGER_VALUE - 632)) | (1L << (EXPONENT_VALUE - 632)) | (1L << (DECIMAL_VALUE - 632)))) != 0) || _la==IDENTIFIER || _la==BACKQUOTED_IDENTIFIER) {
							{
							setState(4397);
							((ArraySliceContext)_localctx).end = valueExpression(0);
							}
						}

						setState(4400);
						match(RIGHT_BRACKET);
						}
						break;
					case 3:
						{
						_localctx = new DereferenceContext(new PrimaryExpressionContext(_parentctx, _parentState));
						((DereferenceContext)_localctx).base = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);
						setState(4402);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(4403);
						match(DOT);
						setState(4404);
						((DereferenceContext)_localctx).fieldName = identifier();
						}
						break;
					case 4:
						{
						_localctx = new CollateContext(new PrimaryExpressionContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);
						setState(4405);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(4406);
						match(COLLATE);
						setState(4410);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case LEFT_BRACE:
						case RIGHT_BRACE:
						case ADDDATE:
						case AFTER:
						case AGG_STATE:
						case AGGREGATE:
						case ALIAS:
						case ANALYZED:
						case ARRAY:
						case ARRAY_RANGE:
						case AT:
						case AUTHORS:
						case AUTO_INCREMENT:
						case BACKENDS:
						case BACKUP:
						case BEGIN:
						case BELONG:
						case BIN:
						case BITAND:
						case BITMAP:
						case BITMAP_UNION:
						case BITOR:
						case BITXOR:
						case BLOB:
						case BOOLEAN:
						case BRIEF:
						case BROKER:
						case BUCKETS:
						case BUILD:
						case BUILTIN:
						case BULK:
						case CACHED:
						case CALL:
						case CATALOG:
						case CATALOGS:
						case CHAIN:
						case CHAR:
						case CHARSET:
						case CHECK:
						case CLUSTER:
						case CLUSTERS:
						case COLLATION:
						case COLLECT:
						case COLUMNS:
						case COMMENT:
						case COMMIT:
						case COMMITTED:
						case COMPACT:
						case COMPLETE:
						case CONFIG:
						case CONNECTION:
						case CONNECTION_ID:
						case CONSISTENT:
						case CONSTRAINTS:
						case CONVERT:
						case COPY:
						case COUNT:
						case CREATION:
						case CRON:
						case CURRENT_CATALOG:
						case CURRENT_DATE:
						case CURRENT_TIME:
						case CURRENT_TIMESTAMP:
						case CURRENT_USER:
						case DATA:
						case DATE:
						case DATE_ADD:
						case DATE_CEIL:
						case DATE_DIFF:
						case DATE_FLOOR:
						case DATE_SUB:
						case DATEADD:
						case DATEDIFF:
						case DATETIME:
						case DATETIMEV2:
						case DATEV2:
						case DATETIMEV1:
						case DATEV1:
						case DAY:
						case DAYS_ADD:
						case DAYS_SUB:
						case DECIMAL:
						case DECIMALV2:
						case DECIMALV3:
						case DEFERRED:
						case DEMAND:
						case DIAGNOSE:
						case DISTINCTPC:
						case DISTINCTPCSA:
						case DO:
						case DORIS_INTERNAL_TABLE_ID:
						case DUAL:
						case DYNAMIC:
						case ENABLE:
						case ENCRYPTKEY:
						case ENCRYPTKEYS:
						case END:
						case ENDS:
						case ENGINE:
						case ENGINES:
						case ERRORS:
						case EVENTS:
						case EVERY:
						case EXCLUDE:
						case EXPIRED:
						case EXTERNAL:
						case FAILED_LOGIN_ATTEMPTS:
						case FAST:
						case FEATURE:
						case FIELDS:
						case FILE:
						case FILTER:
						case FIRST:
						case FORMAT:
						case FREE:
						case FRONTENDS:
						case FUNCTION:
						case GENERIC:
						case GLOBAL:
						case GRAPH:
						case GROUPING:
						case GROUPS:
						case HASH:
						case HDFS:
						case HELP:
						case HISTOGRAM:
						case HLL_UNION:
						case HOSTNAME:
						case HOUR:
						case HUB:
						case IDENTIFIED:
						case IGNORE:
						case IMMEDIATE:
						case INCREMENTAL:
						case INDEXES:
						case INVERTED:
						case IPV4:
						case IPV6:
						case IS_NOT_NULL_PRED:
						case IS_NULL_PRED:
						case ISNULL:
						case ISOLATION:
						case JOB:
						case JOBS:
						case JSON:
						case JSONB:
						case LABEL:
						case LAST:
						case LDAP:
						case LDAP_ADMIN_PASSWORD:
						case LESS:
						case LEVEL:
						case LINES:
						case LINK:
						case LOCAL:
						case LOCALTIME:
						case LOCALTIMESTAMP:
						case LOCATION:
						case LOCK:
						case LOGICAL:
						case MANUAL:
						case MAP:
						case MATCH_ALL:
						case MATCH_ANY:
						case MATCH_ELEMENT_EQ:
						case MATCH_ELEMENT_GE:
						case MATCH_ELEMENT_GT:
						case MATCH_ELEMENT_LE:
						case MATCH_ELEMENT_LT:
						case MATCH_PHRASE:
						case MATCH_PHRASE_EDGE:
						case MATCH_PHRASE_PREFIX:
						case MATCH_REGEXP:
						case MATERIALIZED:
						case MAX:
						case MEMO:
						case MERGE:
						case MIGRATE:
						case MIGRATIONS:
						case MIN:
						case MINUTE:
						case MODIFY:
						case MONTH:
						case MTMV:
						case NAME:
						case NAMES:
						case NEGATIVE:
						case NEVER:
						case NEXT:
						case NGRAM_BF:
						case NO:
						case NON_NULLABLE:
						case NULLS:
						case OF:
						case OFFSET:
						case ONLY:
						case OPEN:
						case OPTIMIZED:
						case PARAMETER:
						case PARSED:
						case PARTITIONS:
						case PASSWORD:
						case PASSWORD_EXPIRE:
						case PASSWORD_HISTORY:
						case PASSWORD_LOCK_TIME:
						case PASSWORD_REUSE:
						case PATH:
						case PAUSE:
						case PERCENT:
						case PERIOD:
						case PERMISSIVE:
						case PHYSICAL:
						case PLAN:
						case PROCESS:
						case PLUGIN:
						case PLUGINS:
						case POLICY:
						case PROC:
						case PROCESSLIST:
						case PROFILE:
						case PROPERTIES:
						case PROPERTY:
						case QUANTILE_STATE:
						case QUANTILE_UNION:
						case QUERY:
						case QUOTA:
						case RANDOM:
						case RECOVER:
						case RECYCLE:
						case REFRESH:
						case REPEATABLE:
						case REPLACE:
						case REPLACE_IF_NOT_NULL:
						case REPOSITORIES:
						case REPOSITORY:
						case RESOURCE:
						case RESOURCES:
						case RESTORE:
						case RESTRICTIVE:
						case RESUME:
						case RETURNS:
						case REWRITTEN:
						case RLIKE:
						case ROLLBACK:
						case ROLLUP:
						case ROUTINE:
						case S3:
						case SAMPLE:
						case SCHEDULE:
						case SCHEDULER:
						case SCHEMA:
						case SECOND:
						case SEQUENCE:
						case SERIALIZABLE:
						case SESSION:
						case SHAPE:
						case SKEW:
						case SNAPSHOT:
						case SONAME:
						case SPLIT:
						case START:
						case STARTS:
						case STATS:
						case STATUS:
						case STOP:
						case STORAGE:
						case STREAM:
						case STREAMING:
						case STRING:
						case STRUCT:
						case SUBDATE:
						case SUM:
						case TABLES:
						case TASK:
						case TASKS:
						case TEMPORARY:
						case TEXT:
						case THAN:
						case TIME:
						case TIMESTAMP:
						case TIMESTAMPADD:
						case TIMESTAMPDIFF:
						case TRANSACTION:
						case TREE:
						case TRIGGERS:
						case TRUNCATE:
						case TYPE:
						case TYPES:
						case UNCOMMITTED:
						case UNLOCK:
						case USER:
						case VALUE:
						case VARCHAR:
						case VARIABLES:
						case VARIANT:
						case VERBOSE:
						case VERSION:
						case VIEW:
						case WARNINGS:
						case WEEK:
						case WORK:
						case YEAR:
						case IDENTIFIER:
						case BACKQUOTED_IDENTIFIER:
							{
							setState(4407);
							identifier();
							}
							break;
						case STRING_LITERAL:
							{
							setState(4408);
							match(STRING_LITERAL);
							}
							break;
						case DEFAULT:
							{
							setState(4409);
							match(DEFAULT);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					}
					} 
				}
				setState(4416);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,565,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class FunctionCallExpressionContext extends ParserRuleContext {
		public ExpressionContext expression;
		public List<ExpressionContext> arguments = new ArrayList<ExpressionContext>();
		public FunctionIdentifierContext functionIdentifier() {
			return getRuleContext(FunctionIdentifierContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public TerminalNode OVER() { return getToken(PLParser.OVER, 0); }
		public WindowSpecContext windowSpec() {
			return getRuleContext(WindowSpecContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public TerminalNode ORDER() { return getToken(PLParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(PLParser.BY, 0); }
		public List<SortItemContext> sortItem() {
			return getRuleContexts(SortItemContext.class);
		}
		public SortItemContext sortItem(int i) {
			return getRuleContext(SortItemContext.class,i);
		}
		public TerminalNode DISTINCT() { return getToken(PLParser.DISTINCT, 0); }
		public TerminalNode ALL() { return getToken(PLParser.ALL, 0); }
		public FunctionCallExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionCallExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterFunctionCallExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitFunctionCallExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitFunctionCallExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionCallExpressionContext functionCallExpression() throws RecognitionException {
		FunctionCallExpressionContext _localctx = new FunctionCallExpressionContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_functionCallExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4417);
			functionIdentifier();
			setState(4418);
			match(LEFT_PAREN);
			setState(4442);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 182)) & ~0x3f) == 0 && ((1L << (_la - 182)) & ((1L << (LEFT_PAREN - 182)) | (1L << (LEFT_BRACKET - 182)) | (1L << (LEFT_BRACE - 182)) | (1L << (RIGHT_BRACE - 182)) | (1L << (ADD - 182)) | (1L << (ADDDATE - 182)) | (1L << (AFTER - 182)) | (1L << (AGG_STATE - 182)) | (1L << (AGGREGATE - 182)) | (1L << (ALIAS - 182)) | (1L << (ALL - 182)) | (1L << (ANALYZED - 182)) | (1L << (ARRAY - 182)) | (1L << (ARRAY_RANGE - 182)) | (1L << (AT - 182)) | (1L << (AUTHORS - 182)) | (1L << (AUTO_INCREMENT - 182)) | (1L << (BACKENDS - 182)) | (1L << (BACKUP - 182)) | (1L << (BEGIN - 182)) | (1L << (BELONG - 182)) | (1L << (BIN - 182)) | (1L << (BINARY - 182)) | (1L << (BITAND - 182)) | (1L << (BITMAP - 182)) | (1L << (BITMAP_UNION - 182)) | (1L << (BITOR - 182)) | (1L << (BITXOR - 182)) | (1L << (BLOB - 182)) | (1L << (BOOLEAN - 182)) | (1L << (BRIEF - 182)) | (1L << (BROKER - 182)) | (1L << (BUCKETS - 182)) | (1L << (BUILD - 182)) | (1L << (BUILTIN - 182)) | (1L << (BULK - 182)) | (1L << (CACHED - 182)) | (1L << (CALL - 182)) | (1L << (CASE - 182)) | (1L << (CAST - 182)) | (1L << (CATALOG - 182)) | (1L << (CATALOGS - 182)) | (1L << (CHAIN - 182)))) != 0) || ((((_la - 246)) & ~0x3f) == 0 && ((1L << (_la - 246)) & ((1L << (CHAR - 246)) | (1L << (CHARSET - 246)) | (1L << (CHECK - 246)) | (1L << (CLUSTER - 246)) | (1L << (CLUSTERS - 246)) | (1L << (COLLATION - 246)) | (1L << (COLLECT - 246)) | (1L << (COLUMNS - 246)) | (1L << (COMMENT - 246)) | (1L << (COMMIT - 246)) | (1L << (COMMITTED - 246)) | (1L << (COMPACT - 246)) | (1L << (COMPLETE - 246)) | (1L << (CONFIG - 246)) | (1L << (CONNECTION - 246)) | (1L << (CONNECTION_ID - 246)) | (1L << (CONSISTENT - 246)) | (1L << (CONSTRAINTS - 246)) | (1L << (CONVERT - 246)) | (1L << (COPY - 246)) | (1L << (COUNT - 246)) | (1L << (CREATION - 246)) | (1L << (CRON - 246)) | (1L << (CURRENT_CATALOG - 246)) | (1L << (CURRENT_DATE - 246)) | (1L << (CURRENT_TIME - 246)) | (1L << (CURRENT_TIMESTAMP - 246)) | (1L << (CURRENT_USER - 246)) | (1L << (DATA - 246)) | (1L << (DATABASE - 246)) | (1L << (DATE - 246)) | (1L << (DATE_ADD - 246)) | (1L << (DATE_CEIL - 246)) | (1L << (DATE_DIFF - 246)) | (1L << (DATE_FLOOR - 246)) | (1L << (DATE_SUB - 246)) | (1L << (DATEADD - 246)) | (1L << (DATEDIFF - 246)) | (1L << (DATETIME - 246)) | (1L << (DATETIMEV2 - 246)) | (1L << (DATEV2 - 246)) | (1L << (DATETIMEV1 - 246)) | (1L << (DATEV1 - 246)) | (1L << (DAY - 246)) | (1L << (DAYS_ADD - 246)) | (1L << (DAYS_SUB - 246)) | (1L << (DECIMAL - 246)) | (1L << (DECIMALV2 - 246)) | (1L << (DECIMALV3 - 246)) | (1L << (DEFERRED - 246)) | (1L << (DEMAND - 246)))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (DIAGNOSE - 311)) | (1L << (DISTINCT - 311)) | (1L << (DISTINCTPC - 311)) | (1L << (DISTINCTPCSA - 311)) | (1L << (DO - 311)) | (1L << (DORIS_INTERNAL_TABLE_ID - 311)) | (1L << (DUAL - 311)) | (1L << (DYNAMIC - 311)) | (1L << (ENABLE - 311)) | (1L << (ENCRYPTKEY - 311)) | (1L << (ENCRYPTKEYS - 311)) | (1L << (END - 311)) | (1L << (ENDS - 311)) | (1L << (ENGINE - 311)) | (1L << (ENGINES - 311)) | (1L << (ERRORS - 311)) | (1L << (EVENTS - 311)) | (1L << (EVERY - 311)) | (1L << (EXCLUDE - 311)) | (1L << (EXISTS - 311)) | (1L << (EXPIRED - 311)) | (1L << (EXTERNAL - 311)) | (1L << (EXTRACT - 311)) | (1L << (FAILED_LOGIN_ATTEMPTS - 311)) | (1L << (FALSE - 311)) | (1L << (FAST - 311)) | (1L << (FEATURE - 311)) | (1L << (FIELDS - 311)) | (1L << (FILE - 311)) | (1L << (FILTER - 311)) | (1L << (FIRST - 311)) | (1L << (FORMAT - 311)) | (1L << (FREE - 311)) | (1L << (FRONTENDS - 311)) | (1L << (FUNCTION - 311)) | (1L << (GENERIC - 311)) | (1L << (GLOBAL - 311)))) != 0) || ((((_la - 375)) & ~0x3f) == 0 && ((1L << (_la - 375)) & ((1L << (GRAPH - 375)) | (1L << (GROUPING - 375)) | (1L << (GROUPS - 375)) | (1L << (HASH - 375)) | (1L << (HDFS - 375)) | (1L << (HELP - 375)) | (1L << (HISTOGRAM - 375)) | (1L << (HLL_UNION - 375)) | (1L << (HOSTNAME - 375)) | (1L << (HOUR - 375)) | (1L << (HUB - 375)) | (1L << (IDENTIFIED - 375)) | (1L << (IF - 375)) | (1L << (IGNORE - 375)) | (1L << (IMMEDIATE - 375)) | (1L << (INCREMENTAL - 375)) | (1L << (INDEXES - 375)) | (1L << (INTERVAL - 375)) | (1L << (INVERTED - 375)) | (1L << (IPV4 - 375)) | (1L << (IPV6 - 375)) | (1L << (IS_NOT_NULL_PRED - 375)) | (1L << (IS_NULL_PRED - 375)) | (1L << (ISNULL - 375)) | (1L << (ISOLATION - 375)) | (1L << (JOB - 375)) | (1L << (JOBS - 375)) | (1L << (JSON - 375)) | (1L << (JSONB - 375)) | (1L << (KEY - 375)) | (1L << (LABEL - 375)) | (1L << (LAST - 375)) | (1L << (LDAP - 375)) | (1L << (LDAP_ADMIN_PASSWORD - 375)) | (1L << (LEFT - 375)) | (1L << (LESS - 375)) | (1L << (LEVEL - 375)) | (1L << (LIKE - 375)) | (1L << (LINES - 375)) | (1L << (LINK - 375)) | (1L << (LOCAL - 375)))) != 0) || ((((_la - 439)) & ~0x3f) == 0 && ((1L << (_la - 439)) & ((1L << (LOCALTIME - 439)) | (1L << (LOCALTIMESTAMP - 439)) | (1L << (LOCATION - 439)) | (1L << (LOCK - 439)) | (1L << (LOGICAL - 439)) | (1L << (MANUAL - 439)) | (1L << (MAP - 439)) | (1L << (MATCH_ALL - 439)) | (1L << (MATCH_ANY - 439)) | (1L << (MATCH_ELEMENT_EQ - 439)) | (1L << (MATCH_ELEMENT_GE - 439)) | (1L << (MATCH_ELEMENT_GT - 439)) | (1L << (MATCH_ELEMENT_LE - 439)) | (1L << (MATCH_ELEMENT_LT - 439)) | (1L << (MATCH_PHRASE - 439)) | (1L << (MATCH_PHRASE_EDGE - 439)) | (1L << (MATCH_PHRASE_PREFIX - 439)) | (1L << (MATCH_REGEXP - 439)) | (1L << (MATERIALIZED - 439)) | (1L << (MAX - 439)) | (1L << (MEMO - 439)) | (1L << (MERGE - 439)) | (1L << (MIGRATE - 439)) | (1L << (MIGRATIONS - 439)) | (1L << (MIN - 439)) | (1L << (MINUTE - 439)) | (1L << (MODIFY - 439)) | (1L << (MONTH - 439)) | (1L << (MTMV - 439)) | (1L << (NAME - 439)) | (1L << (NAMES - 439)) | (1L << (NEGATIVE - 439)) | (1L << (NEVER - 439)) | (1L << (NEXT - 439)) | (1L << (NGRAM_BF - 439)) | (1L << (NO - 439)) | (1L << (NON_NULLABLE - 439)) | (1L << (NOT - 439)) | (1L << (NULL - 439)) | (1L << (NULLS - 439)) | (1L << (OF - 439)) | (1L << (OFFSET - 439)) | (1L << (ONLY - 439)) | (1L << (OPEN - 439)) | (1L << (OPTIMIZED - 439)) | (1L << (PARAMETER - 439)) | (1L << (PARSED - 439)) | (1L << (PARTITIONS - 439)) | (1L << (PASSWORD - 439)) | (1L << (PASSWORD_EXPIRE - 439)))) != 0) || ((((_la - 503)) & ~0x3f) == 0 && ((1L << (_la - 503)) & ((1L << (PASSWORD_HISTORY - 503)) | (1L << (PASSWORD_LOCK_TIME - 503)) | (1L << (PASSWORD_REUSE - 503)) | (1L << (PATH - 503)) | (1L << (PAUSE - 503)) | (1L << (PERCENT - 503)) | (1L << (PERIOD - 503)) | (1L << (PERMISSIVE - 503)) | (1L << (PHYSICAL - 503)) | (1L << (PLAN - 503)) | (1L << (PROCESS - 503)) | (1L << (PLUGIN - 503)) | (1L << (PLUGINS - 503)) | (1L << (POLICY - 503)) | (1L << (PROC - 503)) | (1L << (PROCESSLIST - 503)) | (1L << (PROFILE - 503)) | (1L << (PROPERTIES - 503)) | (1L << (PROPERTY - 503)) | (1L << (QUANTILE_STATE - 503)) | (1L << (QUANTILE_UNION - 503)) | (1L << (QUERY - 503)) | (1L << (QUOTA - 503)) | (1L << (RANDOM - 503)) | (1L << (RECOVER - 503)) | (1L << (RECYCLE - 503)) | (1L << (REFRESH - 503)) | (1L << (REGEXP - 503)) | (1L << (REPEATABLE - 503)) | (1L << (REPLACE - 503)) | (1L << (REPLACE_IF_NOT_NULL - 503)) | (1L << (REPOSITORIES - 503)) | (1L << (REPOSITORY - 503)) | (1L << (RESOURCE - 503)) | (1L << (RESOURCES - 503)) | (1L << (RESTORE - 503)) | (1L << (RESTRICTIVE - 503)) | (1L << (RESUME - 503)) | (1L << (RETURNS - 503)) | (1L << (REWRITTEN - 503)) | (1L << (RIGHT - 503)) | (1L << (RLIKE - 503)) | (1L << (ROLLBACK - 503)) | (1L << (ROLLUP - 503)) | (1L << (ROUTINE - 503)) | (1L << (S3 - 503)))) != 0) || ((((_la - 567)) & ~0x3f) == 0 && ((1L << (_la - 567)) & ((1L << (SAMPLE - 567)) | (1L << (SCHEDULE - 567)) | (1L << (SCHEDULER - 567)) | (1L << (SCHEMA - 567)) | (1L << (SECOND - 567)) | (1L << (SEQUENCE - 567)) | (1L << (SERIALIZABLE - 567)) | (1L << (SESSION - 567)) | (1L << (SHAPE - 567)) | (1L << (SKEW - 567)) | (1L << (SNAPSHOT - 567)) | (1L << (SONAME - 567)) | (1L << (SPLIT - 567)) | (1L << (START - 567)) | (1L << (STARTS - 567)) | (1L << (STATS - 567)) | (1L << (STATUS - 567)) | (1L << (STOP - 567)) | (1L << (STORAGE - 567)) | (1L << (STREAM - 567)) | (1L << (STREAMING - 567)) | (1L << (STRING - 567)) | (1L << (STRUCT - 567)) | (1L << (SUBDATE - 567)) | (1L << (SUM - 567)) | (1L << (TABLES - 567)) | (1L << (TASK - 567)) | (1L << (TASKS - 567)) | (1L << (TEMPORARY - 567)) | (1L << (TEXT - 567)) | (1L << (THAN - 567)) | (1L << (TIME - 567)) | (1L << (TIMESTAMP - 567)) | (1L << (TIMESTAMPADD - 567)) | (1L << (TIMESTAMPDIFF - 567)) | (1L << (TRANSACTION - 567)) | (1L << (TREE - 567)) | (1L << (TRIGGERS - 567)) | (1L << (TRIM - 567)) | (1L << (TRUE - 567)) | (1L << (TRUNCATE - 567)) | (1L << (TYPE - 567)))) != 0) || ((((_la - 632)) & ~0x3f) == 0 && ((1L << (_la - 632)) & ((1L << (TYPES - 632)) | (1L << (UNCOMMITTED - 632)) | (1L << (UNLOCK - 632)) | (1L << (USER - 632)) | (1L << (VALUE - 632)) | (1L << (VARCHAR - 632)) | (1L << (VARIABLES - 632)) | (1L << (VARIANT - 632)) | (1L << (VERBOSE - 632)) | (1L << (VERSION - 632)) | (1L << (VIEW - 632)) | (1L << (WARNINGS - 632)) | (1L << (WEEK - 632)) | (1L << (WORK - 632)) | (1L << (YEAR - 632)) | (1L << (PLUS - 632)) | (1L << (SUBTRACT - 632)) | (1L << (ASTERISK - 632)) | (1L << (TILDE - 632)) | (1L << (LOGICALNOT - 632)) | (1L << (ATSIGN - 632)) | (1L << (DOUBLEATSIGN - 632)) | (1L << (STRING_LITERAL - 632)) | (1L << (INTEGER_VALUE - 632)) | (1L << (EXPONENT_VALUE - 632)) | (1L << (DECIMAL_VALUE - 632)))) != 0) || _la==IDENTIFIER || _la==BACKQUOTED_IDENTIFIER) {
				{
				setState(4420);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					setState(4419);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(4422);
				((FunctionCallExpressionContext)_localctx).expression = expression();
				((FunctionCallExpressionContext)_localctx).arguments.add(((FunctionCallExpressionContext)_localctx).expression);
				setState(4427);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4423);
					match(COMMA);
					setState(4424);
					((FunctionCallExpressionContext)_localctx).expression = expression();
					((FunctionCallExpressionContext)_localctx).arguments.add(((FunctionCallExpressionContext)_localctx).expression);
					}
					}
					setState(4429);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4440);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(4430);
					match(ORDER);
					setState(4431);
					match(BY);
					setState(4432);
					sortItem();
					setState(4437);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(4433);
						match(COMMA);
						setState(4434);
						sortItem();
						}
						}
						setState(4439);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				}
			}

			setState(4444);
			match(RIGHT_PAREN);
			setState(4447);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,571,_ctx) ) {
			case 1:
				{
				setState(4445);
				match(OVER);
				setState(4446);
				windowSpec();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionIdentifierContext extends ParserRuleContext {
		public IdentifierContext dbName;
		public FunctionNameIdentifierContext functionNameIdentifier() {
			return getRuleContext(FunctionNameIdentifierContext.class,0);
		}
		public TerminalNode DOT() { return getToken(PLParser.DOT, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public FunctionIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterFunctionIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitFunctionIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitFunctionIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionIdentifierContext functionIdentifier() throws RecognitionException {
		FunctionIdentifierContext _localctx = new FunctionIdentifierContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_functionIdentifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4452);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,572,_ctx) ) {
			case 1:
				{
				setState(4449);
				((FunctionIdentifierContext)_localctx).dbName = identifier();
				setState(4450);
				match(DOT);
				}
				break;
			}
			setState(4454);
			functionNameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionNameIdentifierContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode ADD() { return getToken(PLParser.ADD, 0); }
		public TerminalNode CONNECTION_ID() { return getToken(PLParser.CONNECTION_ID, 0); }
		public TerminalNode CURRENT_CATALOG() { return getToken(PLParser.CURRENT_CATALOG, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PLParser.CURRENT_USER, 0); }
		public TerminalNode DATABASE() { return getToken(PLParser.DATABASE, 0); }
		public TerminalNode IF() { return getToken(PLParser.IF, 0); }
		public TerminalNode LEFT() { return getToken(PLParser.LEFT, 0); }
		public TerminalNode LIKE() { return getToken(PLParser.LIKE, 0); }
		public TerminalNode PASSWORD() { return getToken(PLParser.PASSWORD, 0); }
		public TerminalNode REGEXP() { return getToken(PLParser.REGEXP, 0); }
		public TerminalNode RIGHT() { return getToken(PLParser.RIGHT, 0); }
		public TerminalNode SCHEMA() { return getToken(PLParser.SCHEMA, 0); }
		public TerminalNode TRIM() { return getToken(PLParser.TRIM, 0); }
		public TerminalNode USER() { return getToken(PLParser.USER, 0); }
		public FunctionNameIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionNameIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterFunctionNameIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitFunctionNameIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitFunctionNameIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionNameIdentifierContext functionNameIdentifier() throws RecognitionException {
		FunctionNameIdentifierContext _localctx = new FunctionNameIdentifierContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_functionNameIdentifier);
		try {
			setState(4471);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,573,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4456);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4457);
				match(ADD);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4458);
				match(CONNECTION_ID);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4459);
				match(CURRENT_CATALOG);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4460);
				match(CURRENT_USER);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4461);
				match(DATABASE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4462);
				match(IF);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4463);
				match(LEFT);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4464);
				match(LIKE);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4465);
				match(PASSWORD);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4466);
				match(REGEXP);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4467);
				match(RIGHT);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4468);
				match(SCHEMA);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(4469);
				match(TRIM);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(4470);
				match(USER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowSpecContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public PartitionClauseContext partitionClause() {
			return getRuleContext(PartitionClauseContext.class,0);
		}
		public SortClauseContext sortClause() {
			return getRuleContext(SortClauseContext.class,0);
		}
		public WindowFrameContext windowFrame() {
			return getRuleContext(WindowFrameContext.class,0);
		}
		public WindowSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterWindowSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitWindowSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitWindowSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowSpecContext windowSpec() throws RecognitionException {
		WindowSpecContext _localctx = new WindowSpecContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_windowSpec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4473);
			match(LEFT_PAREN);
			setState(4475);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(4474);
				partitionClause();
				}
			}

			setState(4478);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(4477);
				sortClause();
				}
			}

			setState(4481);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RANGE || _la==ROWS) {
				{
				setState(4480);
				windowFrame();
				}
			}

			setState(4483);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowFrameContext extends ParserRuleContext {
		public FrameBoundaryContext start;
		public FrameBoundaryContext end;
		public FrameUnitsContext frameUnits() {
			return getRuleContext(FrameUnitsContext.class,0);
		}
		public List<FrameBoundaryContext> frameBoundary() {
			return getRuleContexts(FrameBoundaryContext.class);
		}
		public FrameBoundaryContext frameBoundary(int i) {
			return getRuleContext(FrameBoundaryContext.class,i);
		}
		public TerminalNode BETWEEN() { return getToken(PLParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(PLParser.AND, 0); }
		public WindowFrameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFrame; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterWindowFrame(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitWindowFrame(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitWindowFrame(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowFrameContext windowFrame() throws RecognitionException {
		WindowFrameContext _localctx = new WindowFrameContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_windowFrame);
		try {
			setState(4494);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,577,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4485);
				frameUnits();
				setState(4486);
				((WindowFrameContext)_localctx).start = frameBoundary();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4488);
				frameUnits();
				setState(4489);
				match(BETWEEN);
				setState(4490);
				((WindowFrameContext)_localctx).start = frameBoundary();
				setState(4491);
				match(AND);
				setState(4492);
				((WindowFrameContext)_localctx).end = frameBoundary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameUnitsContext extends ParserRuleContext {
		public TerminalNode ROWS() { return getToken(PLParser.ROWS, 0); }
		public TerminalNode RANGE() { return getToken(PLParser.RANGE, 0); }
		public FrameUnitsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameUnits; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterFrameUnits(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitFrameUnits(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitFrameUnits(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameUnitsContext frameUnits() throws RecognitionException {
		FrameUnitsContext _localctx = new FrameUnitsContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_frameUnits);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4496);
			_la = _input.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameBoundaryContext extends ParserRuleContext {
		public Token boundType;
		public TerminalNode UNBOUNDED() { return getToken(PLParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(PLParser.PRECEDING, 0); }
		public TerminalNode FOLLOWING() { return getToken(PLParser.FOLLOWING, 0); }
		public TerminalNode ROW() { return getToken(PLParser.ROW, 0); }
		public TerminalNode CURRENT() { return getToken(PLParser.CURRENT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public FrameBoundaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameBoundary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterFrameBoundary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitFrameBoundary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitFrameBoundary(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameBoundaryContext frameBoundary() throws RecognitionException {
		FrameBoundaryContext _localctx = new FrameBoundaryContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_frameBoundary);
		int _la;
		try {
			setState(4505);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNBOUNDED:
				enterOuterAlt(_localctx, 1);
				{
				setState(4498);
				match(UNBOUNDED);
				setState(4499);
				((FrameBoundaryContext)_localctx).boundType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
					((FrameBoundaryContext)_localctx).boundType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case CURRENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(4500);
				((FrameBoundaryContext)_localctx).boundType = match(CURRENT);
				setState(4501);
				match(ROW);
				}
				break;
			case LEFT_PAREN:
			case LEFT_BRACKET:
			case LEFT_BRACE:
			case RIGHT_BRACE:
			case ADD:
			case ADDDATE:
			case AFTER:
			case AGG_STATE:
			case AGGREGATE:
			case ALIAS:
			case ANALYZED:
			case ARRAY:
			case ARRAY_RANGE:
			case AT:
			case AUTHORS:
			case AUTO_INCREMENT:
			case BACKENDS:
			case BACKUP:
			case BEGIN:
			case BELONG:
			case BIN:
			case BINARY:
			case BITAND:
			case BITMAP:
			case BITMAP_UNION:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BOOLEAN:
			case BRIEF:
			case BROKER:
			case BUCKETS:
			case BUILD:
			case BUILTIN:
			case BULK:
			case CACHED:
			case CALL:
			case CASE:
			case CAST:
			case CATALOG:
			case CATALOGS:
			case CHAIN:
			case CHAR:
			case CHARSET:
			case CHECK:
			case CLUSTER:
			case CLUSTERS:
			case COLLATION:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPACT:
			case COMPLETE:
			case CONFIG:
			case CONNECTION:
			case CONNECTION_ID:
			case CONSISTENT:
			case CONSTRAINTS:
			case CONVERT:
			case COPY:
			case COUNT:
			case CREATION:
			case CRON:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DATA:
			case DATABASE:
			case DATE:
			case DATE_ADD:
			case DATE_CEIL:
			case DATE_DIFF:
			case DATE_FLOOR:
			case DATE_SUB:
			case DATEADD:
			case DATEDIFF:
			case DATETIME:
			case DATETIMEV2:
			case DATEV2:
			case DATETIMEV1:
			case DATEV1:
			case DAY:
			case DAYS_ADD:
			case DAYS_SUB:
			case DECIMAL:
			case DECIMALV2:
			case DECIMALV3:
			case DEFERRED:
			case DEMAND:
			case DIAGNOSE:
			case DISTINCTPC:
			case DISTINCTPCSA:
			case DO:
			case DORIS_INTERNAL_TABLE_ID:
			case DUAL:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTKEY:
			case ENCRYPTKEYS:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERRORS:
			case EVENTS:
			case EVERY:
			case EXCLUDE:
			case EXISTS:
			case EXPIRED:
			case EXTERNAL:
			case EXTRACT:
			case FAILED_LOGIN_ATTEMPTS:
			case FALSE:
			case FAST:
			case FEATURE:
			case FIELDS:
			case FILE:
			case FILTER:
			case FIRST:
			case FORMAT:
			case FREE:
			case FRONTENDS:
			case FUNCTION:
			case GENERIC:
			case GLOBAL:
			case GRAPH:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HDFS:
			case HELP:
			case HISTOGRAM:
			case HLL_UNION:
			case HOSTNAME:
			case HOUR:
			case HUB:
			case IDENTIFIED:
			case IF:
			case IGNORE:
			case IMMEDIATE:
			case INCREMENTAL:
			case INDEXES:
			case INTERVAL:
			case INVERTED:
			case IPV4:
			case IPV6:
			case IS_NOT_NULL_PRED:
			case IS_NULL_PRED:
			case ISNULL:
			case ISOLATION:
			case JOB:
			case JOBS:
			case JSON:
			case JSONB:
			case KEY:
			case LABEL:
			case LAST:
			case LDAP:
			case LDAP_ADMIN_PASSWORD:
			case LEFT:
			case LESS:
			case LEVEL:
			case LIKE:
			case LINES:
			case LINK:
			case LOCAL:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case LOCATION:
			case LOCK:
			case LOGICAL:
			case MANUAL:
			case MAP:
			case MATCH_ALL:
			case MATCH_ANY:
			case MATCH_ELEMENT_EQ:
			case MATCH_ELEMENT_GE:
			case MATCH_ELEMENT_GT:
			case MATCH_ELEMENT_LE:
			case MATCH_ELEMENT_LT:
			case MATCH_PHRASE:
			case MATCH_PHRASE_EDGE:
			case MATCH_PHRASE_PREFIX:
			case MATCH_REGEXP:
			case MATERIALIZED:
			case MAX:
			case MEMO:
			case MERGE:
			case MIGRATE:
			case MIGRATIONS:
			case MIN:
			case MINUTE:
			case MODIFY:
			case MONTH:
			case MTMV:
			case NAME:
			case NAMES:
			case NEGATIVE:
			case NEVER:
			case NEXT:
			case NGRAM_BF:
			case NO:
			case NON_NULLABLE:
			case NOT:
			case NULL:
			case NULLS:
			case OF:
			case OFFSET:
			case ONLY:
			case OPEN:
			case OPTIMIZED:
			case PARAMETER:
			case PARSED:
			case PARTITIONS:
			case PASSWORD:
			case PASSWORD_EXPIRE:
			case PASSWORD_HISTORY:
			case PASSWORD_LOCK_TIME:
			case PASSWORD_REUSE:
			case PATH:
			case PAUSE:
			case PERCENT:
			case PERIOD:
			case PERMISSIVE:
			case PHYSICAL:
			case PLAN:
			case PROCESS:
			case PLUGIN:
			case PLUGINS:
			case POLICY:
			case PROC:
			case PROCESSLIST:
			case PROFILE:
			case PROPERTIES:
			case PROPERTY:
			case QUANTILE_STATE:
			case QUANTILE_UNION:
			case QUERY:
			case QUOTA:
			case RANDOM:
			case RECOVER:
			case RECYCLE:
			case REFRESH:
			case REGEXP:
			case REPEATABLE:
			case REPLACE:
			case REPLACE_IF_NOT_NULL:
			case REPOSITORIES:
			case REPOSITORY:
			case RESOURCE:
			case RESOURCES:
			case RESTORE:
			case RESTRICTIVE:
			case RESUME:
			case RETURNS:
			case REWRITTEN:
			case RIGHT:
			case RLIKE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case S3:
			case SAMPLE:
			case SCHEDULE:
			case SCHEDULER:
			case SCHEMA:
			case SECOND:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION:
			case SHAPE:
			case SKEW:
			case SNAPSHOT:
			case SONAME:
			case SPLIT:
			case START:
			case STARTS:
			case STATS:
			case STATUS:
			case STOP:
			case STORAGE:
			case STREAM:
			case STREAMING:
			case STRING:
			case STRUCT:
			case SUBDATE:
			case SUM:
			case TABLES:
			case TASK:
			case TASKS:
			case TEMPORARY:
			case TEXT:
			case THAN:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TRANSACTION:
			case TREE:
			case TRIGGERS:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case TYPES:
			case UNCOMMITTED:
			case UNLOCK:
			case USER:
			case VALUE:
			case VARCHAR:
			case VARIABLES:
			case VARIANT:
			case VERBOSE:
			case VERSION:
			case VIEW:
			case WARNINGS:
			case WEEK:
			case WORK:
			case YEAR:
			case PLUS:
			case SUBTRACT:
			case ASTERISK:
			case TILDE:
			case LOGICALNOT:
			case ATSIGN:
			case DOUBLEATSIGN:
			case STRING_LITERAL:
			case INTEGER_VALUE:
			case EXPONENT_VALUE:
			case DECIMAL_VALUE:
			case IDENTIFIER:
			case BACKQUOTED_IDENTIFIER:
				enterOuterAlt(_localctx, 3);
				{
				setState(4502);
				expression();
				setState(4503);
				((FrameBoundaryContext)_localctx).boundType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
					((FrameBoundaryContext)_localctx).boundType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QualifiedNameContext extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(PLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(PLParser.DOT, i);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualifiedName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterQualifiedName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitQualifiedName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitQualifiedName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QualifiedNameContext qualifiedName() throws RecognitionException {
		QualifiedNameContext _localctx = new QualifiedNameContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_qualifiedName);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4507);
			identifier();
			setState(4512);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,579,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4508);
					match(DOT);
					setState(4509);
					identifier();
					}
					} 
				}
				setState(4514);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,579,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SpecifiedPartitionContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(PLParser.PARTITION, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(PLParser.TEMPORARY, 0); }
		public TerminalNode PARTITIONS() { return getToken(PLParser.PARTITIONS, 0); }
		public SpecifiedPartitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_specifiedPartition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterSpecifiedPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitSpecifiedPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitSpecifiedPartition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SpecifiedPartitionContext specifiedPartition() throws RecognitionException {
		SpecifiedPartitionContext _localctx = new SpecifiedPartitionContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_specifiedPartition);
		int _la;
		try {
			setState(4528);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,583,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4516);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(4515);
					match(TEMPORARY);
					}
				}

				setState(4518);
				match(PARTITION);
				setState(4521);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LEFT_BRACE:
				case RIGHT_BRACE:
				case ADDDATE:
				case AFTER:
				case AGG_STATE:
				case AGGREGATE:
				case ALIAS:
				case ANALYZED:
				case ARRAY:
				case ARRAY_RANGE:
				case AT:
				case AUTHORS:
				case AUTO_INCREMENT:
				case BACKENDS:
				case BACKUP:
				case BEGIN:
				case BELONG:
				case BIN:
				case BITAND:
				case BITMAP:
				case BITMAP_UNION:
				case BITOR:
				case BITXOR:
				case BLOB:
				case BOOLEAN:
				case BRIEF:
				case BROKER:
				case BUCKETS:
				case BUILD:
				case BUILTIN:
				case BULK:
				case CACHED:
				case CALL:
				case CATALOG:
				case CATALOGS:
				case CHAIN:
				case CHAR:
				case CHARSET:
				case CHECK:
				case CLUSTER:
				case CLUSTERS:
				case COLLATION:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPACT:
				case COMPLETE:
				case CONFIG:
				case CONNECTION:
				case CONNECTION_ID:
				case CONSISTENT:
				case CONSTRAINTS:
				case CONVERT:
				case COPY:
				case COUNT:
				case CREATION:
				case CRON:
				case CURRENT_CATALOG:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DATA:
				case DATE:
				case DATE_ADD:
				case DATE_CEIL:
				case DATE_DIFF:
				case DATE_FLOOR:
				case DATE_SUB:
				case DATEADD:
				case DATEDIFF:
				case DATETIME:
				case DATETIMEV2:
				case DATEV2:
				case DATETIMEV1:
				case DATEV1:
				case DAY:
				case DAYS_ADD:
				case DAYS_SUB:
				case DECIMAL:
				case DECIMALV2:
				case DECIMALV3:
				case DEFERRED:
				case DEMAND:
				case DIAGNOSE:
				case DISTINCTPC:
				case DISTINCTPCSA:
				case DO:
				case DORIS_INTERNAL_TABLE_ID:
				case DUAL:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTKEY:
				case ENCRYPTKEYS:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERRORS:
				case EVENTS:
				case EVERY:
				case EXCLUDE:
				case EXPIRED:
				case EXTERNAL:
				case FAILED_LOGIN_ATTEMPTS:
				case FAST:
				case FEATURE:
				case FIELDS:
				case FILE:
				case FILTER:
				case FIRST:
				case FORMAT:
				case FREE:
				case FRONTENDS:
				case FUNCTION:
				case GENERIC:
				case GLOBAL:
				case GRAPH:
				case GROUPING:
				case GROUPS:
				case HASH:
				case HDFS:
				case HELP:
				case HISTOGRAM:
				case HLL_UNION:
				case HOSTNAME:
				case HOUR:
				case HUB:
				case IDENTIFIED:
				case IGNORE:
				case IMMEDIATE:
				case INCREMENTAL:
				case INDEXES:
				case INVERTED:
				case IPV4:
				case IPV6:
				case IS_NOT_NULL_PRED:
				case IS_NULL_PRED:
				case ISNULL:
				case ISOLATION:
				case JOB:
				case JOBS:
				case JSON:
				case JSONB:
				case LABEL:
				case LAST:
				case LDAP:
				case LDAP_ADMIN_PASSWORD:
				case LESS:
				case LEVEL:
				case LINES:
				case LINK:
				case LOCAL:
				case LOCALTIME:
				case LOCALTIMESTAMP:
				case LOCATION:
				case LOCK:
				case LOGICAL:
				case MANUAL:
				case MAP:
				case MATCH_ALL:
				case MATCH_ANY:
				case MATCH_ELEMENT_EQ:
				case MATCH_ELEMENT_GE:
				case MATCH_ELEMENT_GT:
				case MATCH_ELEMENT_LE:
				case MATCH_ELEMENT_LT:
				case MATCH_PHRASE:
				case MATCH_PHRASE_EDGE:
				case MATCH_PHRASE_PREFIX:
				case MATCH_REGEXP:
				case MATERIALIZED:
				case MAX:
				case MEMO:
				case MERGE:
				case MIGRATE:
				case MIGRATIONS:
				case MIN:
				case MINUTE:
				case MODIFY:
				case MONTH:
				case MTMV:
				case NAME:
				case NAMES:
				case NEGATIVE:
				case NEVER:
				case NEXT:
				case NGRAM_BF:
				case NO:
				case NON_NULLABLE:
				case NULLS:
				case OF:
				case OFFSET:
				case ONLY:
				case OPEN:
				case OPTIMIZED:
				case PARAMETER:
				case PARSED:
				case PARTITIONS:
				case PASSWORD:
				case PASSWORD_EXPIRE:
				case PASSWORD_HISTORY:
				case PASSWORD_LOCK_TIME:
				case PASSWORD_REUSE:
				case PATH:
				case PAUSE:
				case PERCENT:
				case PERIOD:
				case PERMISSIVE:
				case PHYSICAL:
				case PLAN:
				case PROCESS:
				case PLUGIN:
				case PLUGINS:
				case POLICY:
				case PROC:
				case PROCESSLIST:
				case PROFILE:
				case PROPERTIES:
				case PROPERTY:
				case QUANTILE_STATE:
				case QUANTILE_UNION:
				case QUERY:
				case QUOTA:
				case RANDOM:
				case RECOVER:
				case RECYCLE:
				case REFRESH:
				case REPEATABLE:
				case REPLACE:
				case REPLACE_IF_NOT_NULL:
				case REPOSITORIES:
				case REPOSITORY:
				case RESOURCE:
				case RESOURCES:
				case RESTORE:
				case RESTRICTIVE:
				case RESUME:
				case RETURNS:
				case REWRITTEN:
				case RLIKE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case S3:
				case SAMPLE:
				case SCHEDULE:
				case SCHEDULER:
				case SCHEMA:
				case SECOND:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION:
				case SHAPE:
				case SKEW:
				case SNAPSHOT:
				case SONAME:
				case SPLIT:
				case START:
				case STARTS:
				case STATS:
				case STATUS:
				case STOP:
				case STORAGE:
				case STREAM:
				case STREAMING:
				case STRING:
				case STRUCT:
				case SUBDATE:
				case SUM:
				case TABLES:
				case TASK:
				case TASKS:
				case TEMPORARY:
				case TEXT:
				case THAN:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TRANSACTION:
				case TREE:
				case TRIGGERS:
				case TRUNCATE:
				case TYPE:
				case TYPES:
				case UNCOMMITTED:
				case UNLOCK:
				case USER:
				case VALUE:
				case VARCHAR:
				case VARIABLES:
				case VARIANT:
				case VERBOSE:
				case VERSION:
				case VIEW:
				case WARNINGS:
				case WEEK:
				case WORK:
				case YEAR:
				case IDENTIFIER:
				case BACKQUOTED_IDENTIFIER:
					{
					setState(4519);
					identifier();
					}
					break;
				case LEFT_PAREN:
					{
					setState(4520);
					identifierList();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4524);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(4523);
					match(TEMPORARY);
					}
				}

				setState(4526);
				match(PARTITIONS);
				setState(4527);
				identifierList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantContext extends ParserRuleContext {
		public ConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant; }
	 
		public ConstantContext() { }
		public void copyFrom(ConstantContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class StructLiteralContext extends ConstantContext {
		public ConstantContext constant;
		public List<ConstantContext> items = new ArrayList<ConstantContext>();
		public TerminalNode LEFT_BRACE() { return getToken(PLParser.LEFT_BRACE, 0); }
		public TerminalNode RIGHT_BRACE() { return getToken(PLParser.RIGHT_BRACE, 0); }
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public StructLiteralContext(ConstantContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterStructLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitStructLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitStructLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NullLiteralContext extends ConstantContext {
		public TerminalNode NULL() { return getToken(PLParser.NULL, 0); }
		public NullLiteralContext(ConstantContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterNullLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitNullLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitNullLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StringLiteralContext extends ConstantContext {
		public TerminalNode STRING_LITERAL() { return getToken(PLParser.STRING_LITERAL, 0); }
		public TerminalNode BINARY() { return getToken(PLParser.BINARY, 0); }
		public StringLiteralContext(ConstantContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterStringLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitStringLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitStringLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TypeConstructorContext extends ConstantContext {
		public Token type;
		public TerminalNode STRING_LITERAL() { return getToken(PLParser.STRING_LITERAL, 0); }
		public TerminalNode DATE() { return getToken(PLParser.DATE, 0); }
		public TerminalNode DATEV1() { return getToken(PLParser.DATEV1, 0); }
		public TerminalNode DATEV2() { return getToken(PLParser.DATEV2, 0); }
		public TerminalNode TIMESTAMP() { return getToken(PLParser.TIMESTAMP, 0); }
		public TypeConstructorContext(ConstantContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterTypeConstructor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitTypeConstructor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitTypeConstructor(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ArrayLiteralContext extends ConstantContext {
		public ConstantContext constant;
		public List<ConstantContext> items = new ArrayList<ConstantContext>();
		public TerminalNode LEFT_BRACKET() { return getToken(PLParser.LEFT_BRACKET, 0); }
		public TerminalNode RIGHT_BRACKET() { return getToken(PLParser.RIGHT_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public ArrayLiteralContext(ConstantContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterArrayLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitArrayLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitArrayLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MapLiteralContext extends ConstantContext {
		public ConstantContext constant;
		public List<ConstantContext> items = new ArrayList<ConstantContext>();
		public TerminalNode LEFT_BRACE() { return getToken(PLParser.LEFT_BRACE, 0); }
		public TerminalNode RIGHT_BRACE() { return getToken(PLParser.RIGHT_BRACE, 0); }
		public List<TerminalNode> COLON() { return getTokens(PLParser.COLON); }
		public TerminalNode COLON(int i) {
			return getToken(PLParser.COLON, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public MapLiteralContext(ConstantContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterMapLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitMapLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitMapLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NumericLiteralContext extends ConstantContext {
		public NumberContext number() {
			return getRuleContext(NumberContext.class,0);
		}
		public NumericLiteralContext(ConstantContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterNumericLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitNumericLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitNumericLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BooleanLiteralContext extends ConstantContext {
		public BooleanValueContext booleanValue() {
			return getRuleContext(BooleanValueContext.class,0);
		}
		public BooleanLiteralContext(ConstantContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterBooleanLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitBooleanLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitBooleanLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstantContext constant() throws RecognitionException {
		ConstantContext _localctx = new ConstantContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_constant);
		int _la;
		try {
			setState(4580);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,590,_ctx) ) {
			case 1:
				_localctx = new NullLiteralContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4530);
				match(NULL);
				}
				break;
			case 2:
				_localctx = new TypeConstructorContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4531);
				((TypeConstructorContext)_localctx).type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 285)) & ~0x3f) == 0 && ((1L << (_la - 285)) & ((1L << (DATE - 285)) | (1L << (DATEV2 - 285)) | (1L << (DATEV1 - 285)))) != 0) || _la==TIMESTAMP) ) {
					((TypeConstructorContext)_localctx).type = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4532);
				match(STRING_LITERAL);
				}
				break;
			case 3:
				_localctx = new NumericLiteralContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4533);
				number();
				}
				break;
			case 4:
				_localctx = new BooleanLiteralContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4534);
				booleanValue();
				}
				break;
			case 5:
				_localctx = new StringLiteralContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4536);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BINARY) {
					{
					setState(4535);
					match(BINARY);
					}
				}

				setState(4538);
				match(STRING_LITERAL);
				}
				break;
			case 6:
				_localctx = new ArrayLiteralContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(4539);
				match(LEFT_BRACKET);
				setState(4541);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 186)) & ~0x3f) == 0 && ((1L << (_la - 186)) & ((1L << (LEFT_BRACKET - 186)) | (1L << (LEFT_BRACE - 186)) | (1L << (BINARY - 186)))) != 0) || ((((_la - 285)) & ~0x3f) == 0 && ((1L << (_la - 285)) & ((1L << (DATE - 285)) | (1L << (DATEV2 - 285)) | (1L << (DATEV1 - 285)))) != 0) || _la==FALSE || _la==NULL || ((((_la - 618)) & ~0x3f) == 0 && ((1L << (_la - 618)) & ((1L << (TIMESTAMP - 618)) | (1L << (TRUE - 618)) | (1L << (SUBTRACT - 618)))) != 0) || ((((_la - 687)) & ~0x3f) == 0 && ((1L << (_la - 687)) & ((1L << (STRING_LITERAL - 687)) | (1L << (INTEGER_VALUE - 687)) | (1L << (EXPONENT_VALUE - 687)) | (1L << (DECIMAL_VALUE - 687)))) != 0)) {
					{
					setState(4540);
					((ArrayLiteralContext)_localctx).constant = constant();
					((ArrayLiteralContext)_localctx).items.add(((ArrayLiteralContext)_localctx).constant);
					}
				}

				setState(4547);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4543);
					match(COMMA);
					setState(4544);
					((ArrayLiteralContext)_localctx).constant = constant();
					((ArrayLiteralContext)_localctx).items.add(((ArrayLiteralContext)_localctx).constant);
					}
					}
					setState(4549);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4550);
				match(RIGHT_BRACKET);
				}
				break;
			case 7:
				_localctx = new MapLiteralContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(4551);
				match(LEFT_BRACE);
				setState(4556);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 186)) & ~0x3f) == 0 && ((1L << (_la - 186)) & ((1L << (LEFT_BRACKET - 186)) | (1L << (LEFT_BRACE - 186)) | (1L << (BINARY - 186)))) != 0) || ((((_la - 285)) & ~0x3f) == 0 && ((1L << (_la - 285)) & ((1L << (DATE - 285)) | (1L << (DATEV2 - 285)) | (1L << (DATEV1 - 285)))) != 0) || _la==FALSE || _la==NULL || ((((_la - 618)) & ~0x3f) == 0 && ((1L << (_la - 618)) & ((1L << (TIMESTAMP - 618)) | (1L << (TRUE - 618)) | (1L << (SUBTRACT - 618)))) != 0) || ((((_la - 687)) & ~0x3f) == 0 && ((1L << (_la - 687)) & ((1L << (STRING_LITERAL - 687)) | (1L << (INTEGER_VALUE - 687)) | (1L << (EXPONENT_VALUE - 687)) | (1L << (DECIMAL_VALUE - 687)))) != 0)) {
					{
					setState(4552);
					((MapLiteralContext)_localctx).constant = constant();
					((MapLiteralContext)_localctx).items.add(((MapLiteralContext)_localctx).constant);
					setState(4553);
					match(COLON);
					setState(4554);
					((MapLiteralContext)_localctx).constant = constant();
					((MapLiteralContext)_localctx).items.add(((MapLiteralContext)_localctx).constant);
					}
				}

				setState(4565);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4558);
					match(COMMA);
					setState(4559);
					((MapLiteralContext)_localctx).constant = constant();
					((MapLiteralContext)_localctx).items.add(((MapLiteralContext)_localctx).constant);
					setState(4560);
					match(COLON);
					setState(4561);
					((MapLiteralContext)_localctx).constant = constant();
					((MapLiteralContext)_localctx).items.add(((MapLiteralContext)_localctx).constant);
					}
					}
					setState(4567);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4568);
				match(RIGHT_BRACE);
				}
				break;
			case 8:
				_localctx = new StructLiteralContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(4569);
				match(LEFT_BRACE);
				setState(4570);
				((StructLiteralContext)_localctx).constant = constant();
				((StructLiteralContext)_localctx).items.add(((StructLiteralContext)_localctx).constant);
				setState(4575);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4571);
					match(COMMA);
					setState(4572);
					((StructLiteralContext)_localctx).constant = constant();
					((StructLiteralContext)_localctx).items.add(((StructLiteralContext)_localctx).constant);
					}
					}
					setState(4577);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4578);
				match(RIGHT_BRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ComparisonOperatorContext extends ParserRuleContext {
		public TerminalNode EQ() { return getToken(PLParser.EQ, 0); }
		public TerminalNode NEQ() { return getToken(PLParser.NEQ, 0); }
		public TerminalNode LT() { return getToken(PLParser.LT, 0); }
		public TerminalNode LTE() { return getToken(PLParser.LTE, 0); }
		public TerminalNode GT() { return getToken(PLParser.GT, 0); }
		public TerminalNode GTE() { return getToken(PLParser.GTE, 0); }
		public TerminalNode NSEQ() { return getToken(PLParser.NSEQ, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparisonOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterComparisonOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitComparisonOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitComparisonOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ComparisonOperatorContext comparisonOperator() throws RecognitionException {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_comparisonOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4582);
			_la = _input.LA(1);
			if ( !(((((_la - 662)) & ~0x3f) == 0 && ((1L << (_la - 662)) & ((1L << (EQ - 662)) | (1L << (NSEQ - 662)) | (1L << (NEQ - 662)) | (1L << (LT - 662)) | (1L << (LTE - 662)) | (1L << (GT - 662)) | (1L << (GTE - 662)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BooleanValueContext extends ParserRuleContext {
		public TerminalNode TRUE() { return getToken(PLParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(PLParser.FALSE, 0); }
		public BooleanValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterBooleanValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitBooleanValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitBooleanValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BooleanValueContext booleanValue() throws RecognitionException {
		BooleanValueContext _localctx = new BooleanValueContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_booleanValue);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4584);
			_la = _input.LA(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhenClauseContext extends ParserRuleContext {
		public ExpressionContext condition;
		public ExpressionContext result;
		public TerminalNode WHEN() { return getToken(PLParser.WHEN, 0); }
		public TerminalNode THEN() { return getToken(PLParser.THEN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public WhenClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whenClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterWhenClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitWhenClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitWhenClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhenClauseContext whenClause() throws RecognitionException {
		WhenClauseContext _localctx = new WhenClauseContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_whenClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4586);
			match(WHEN);
			setState(4587);
			((WhenClauseContext)_localctx).condition = expression();
			setState(4588);
			match(THEN);
			setState(4589);
			((WhenClauseContext)_localctx).result = expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalContext extends ParserRuleContext {
		public ExpressionContext value;
		public UnitIdentifierContext unit;
		public TerminalNode INTERVAL() { return getToken(PLParser.INTERVAL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public UnitIdentifierContext unitIdentifier() {
			return getRuleContext(UnitIdentifierContext.class,0);
		}
		public IntervalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterInterval(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitInterval(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitInterval(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalContext interval() throws RecognitionException {
		IntervalContext _localctx = new IntervalContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_interval);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4591);
			match(INTERVAL);
			setState(4592);
			((IntervalContext)_localctx).value = expression();
			setState(4593);
			((IntervalContext)_localctx).unit = unitIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnitIdentifierContext extends ParserRuleContext {
		public TerminalNode YEAR() { return getToken(PLParser.YEAR, 0); }
		public TerminalNode MONTH() { return getToken(PLParser.MONTH, 0); }
		public TerminalNode WEEK() { return getToken(PLParser.WEEK, 0); }
		public TerminalNode DAY() { return getToken(PLParser.DAY, 0); }
		public TerminalNode HOUR() { return getToken(PLParser.HOUR, 0); }
		public TerminalNode MINUTE() { return getToken(PLParser.MINUTE, 0); }
		public TerminalNode SECOND() { return getToken(PLParser.SECOND, 0); }
		public UnitIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unitIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterUnitIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitUnitIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitUnitIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnitIdentifierContext unitIdentifier() throws RecognitionException {
		UnitIdentifierContext _localctx = new UnitIdentifierContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_unitIdentifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4595);
			_la = _input.LA(1);
			if ( !(_la==DAY || _la==HOUR || _la==MINUTE || _la==MONTH || _la==SECOND || _la==WEEK || _la==YEAR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeWithNullableContext extends ParserRuleContext {
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode NULL() { return getToken(PLParser.NULL, 0); }
		public TerminalNode NOT() { return getToken(PLParser.NOT, 0); }
		public DataTypeWithNullableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataTypeWithNullable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterDataTypeWithNullable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitDataTypeWithNullable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitDataTypeWithNullable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeWithNullableContext dataTypeWithNullable() throws RecognitionException {
		DataTypeWithNullableContext _localctx = new DataTypeWithNullableContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_dataTypeWithNullable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4597);
			dataType();
			setState(4602);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT || _la==NULL) {
				{
				setState(4599);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(4598);
					match(NOT);
					}
				}

				setState(4601);
				match(NULL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeContext extends ParserRuleContext {
		public DataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataType; }
	 
		public DataTypeContext() { }
		public void copyFrom(DataTypeContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ComplexDataTypeContext extends DataTypeContext {
		public Token complex;
		public TerminalNode LT() { return getToken(PLParser.LT, 0); }
		public List<DataTypeContext> dataType() {
			return getRuleContexts(DataTypeContext.class);
		}
		public DataTypeContext dataType(int i) {
			return getRuleContext(DataTypeContext.class,i);
		}
		public TerminalNode GT() { return getToken(PLParser.GT, 0); }
		public TerminalNode ARRAY() { return getToken(PLParser.ARRAY, 0); }
		public TerminalNode COMMA() { return getToken(PLParser.COMMA, 0); }
		public TerminalNode MAP() { return getToken(PLParser.MAP, 0); }
		public ComplexColTypeListContext complexColTypeList() {
			return getRuleContext(ComplexColTypeListContext.class,0);
		}
		public TerminalNode STRUCT() { return getToken(PLParser.STRUCT, 0); }
		public ComplexDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterComplexDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitComplexDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitComplexDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AggStateDataTypeContext extends DataTypeContext {
		public DataTypeWithNullableContext dataTypeWithNullable;
		public List<DataTypeWithNullableContext> dataTypes = new ArrayList<DataTypeWithNullableContext>();
		public TerminalNode AGG_STATE() { return getToken(PLParser.AGG_STATE, 0); }
		public TerminalNode LT() { return getToken(PLParser.LT, 0); }
		public FunctionNameIdentifierContext functionNameIdentifier() {
			return getRuleContext(FunctionNameIdentifierContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public TerminalNode GT() { return getToken(PLParser.GT, 0); }
		public List<DataTypeWithNullableContext> dataTypeWithNullable() {
			return getRuleContexts(DataTypeWithNullableContext.class);
		}
		public DataTypeWithNullableContext dataTypeWithNullable(int i) {
			return getRuleContext(DataTypeWithNullableContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public AggStateDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterAggStateDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitAggStateDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitAggStateDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PrimitiveDataTypeContext extends DataTypeContext {
		public PrimitiveColTypeContext primitiveColType() {
			return getRuleContext(PrimitiveColTypeContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> INTEGER_VALUE() { return getTokens(PLParser.INTEGER_VALUE); }
		public TerminalNode INTEGER_VALUE(int i) {
			return getToken(PLParser.INTEGER_VALUE, i);
		}
		public TerminalNode ASTERISK() { return getToken(PLParser.ASTERISK, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public PrimitiveDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterPrimitiveDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitPrimitiveDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitPrimitiveDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeContext dataType() throws RecognitionException {
		DataTypeContext _localctx = new DataTypeContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_dataType);
		int _la;
		try {
			setState(4649);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,596,_ctx) ) {
			case 1:
				_localctx = new ComplexDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4604);
				((ComplexDataTypeContext)_localctx).complex = match(ARRAY);
				setState(4605);
				match(LT);
				setState(4606);
				dataType();
				setState(4607);
				match(GT);
				}
				break;
			case 2:
				_localctx = new ComplexDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4609);
				((ComplexDataTypeContext)_localctx).complex = match(MAP);
				setState(4610);
				match(LT);
				setState(4611);
				dataType();
				setState(4612);
				match(COMMA);
				setState(4613);
				dataType();
				setState(4614);
				match(GT);
				}
				break;
			case 3:
				_localctx = new ComplexDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4616);
				((ComplexDataTypeContext)_localctx).complex = match(STRUCT);
				setState(4617);
				match(LT);
				setState(4618);
				complexColTypeList();
				setState(4619);
				match(GT);
				}
				break;
			case 4:
				_localctx = new AggStateDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4621);
				match(AGG_STATE);
				setState(4622);
				match(LT);
				setState(4623);
				functionNameIdentifier();
				setState(4624);
				match(LEFT_PAREN);
				setState(4625);
				((AggStateDataTypeContext)_localctx).dataTypeWithNullable = dataTypeWithNullable();
				((AggStateDataTypeContext)_localctx).dataTypes.add(((AggStateDataTypeContext)_localctx).dataTypeWithNullable);
				setState(4630);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4626);
					match(COMMA);
					setState(4627);
					((AggStateDataTypeContext)_localctx).dataTypeWithNullable = dataTypeWithNullable();
					((AggStateDataTypeContext)_localctx).dataTypes.add(((AggStateDataTypeContext)_localctx).dataTypeWithNullable);
					}
					}
					setState(4632);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4633);
				match(RIGHT_PAREN);
				setState(4634);
				match(GT);
				}
				break;
			case 5:
				_localctx = new PrimitiveDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4636);
				primitiveColType();
				setState(4647);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(4637);
					match(LEFT_PAREN);
					setState(4638);
					_la = _input.LA(1);
					if ( !(_la==ASTERISK || _la==INTEGER_VALUE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4643);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(4639);
						match(COMMA);
						setState(4640);
						match(INTEGER_VALUE);
						}
						}
						setState(4645);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(4646);
					match(RIGHT_PAREN);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrimitiveColTypeContext extends ParserRuleContext {
		public Token type;
		public TerminalNode TINYINT() { return getToken(PLParser.TINYINT, 0); }
		public TerminalNode SMALLINT() { return getToken(PLParser.SMALLINT, 0); }
		public TerminalNode INT() { return getToken(PLParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(PLParser.INTEGER, 0); }
		public TerminalNode SIGNED() { return getToken(PLParser.SIGNED, 0); }
		public TerminalNode UNSIGNED() { return getToken(PLParser.UNSIGNED, 0); }
		public TerminalNode BIGINT() { return getToken(PLParser.BIGINT, 0); }
		public TerminalNode LARGEINT() { return getToken(PLParser.LARGEINT, 0); }
		public TerminalNode BOOLEAN() { return getToken(PLParser.BOOLEAN, 0); }
		public TerminalNode FLOAT() { return getToken(PLParser.FLOAT, 0); }
		public TerminalNode DOUBLE() { return getToken(PLParser.DOUBLE, 0); }
		public TerminalNode DATE() { return getToken(PLParser.DATE, 0); }
		public TerminalNode DATETIME() { return getToken(PLParser.DATETIME, 0); }
		public TerminalNode TIME() { return getToken(PLParser.TIME, 0); }
		public TerminalNode DATEV2() { return getToken(PLParser.DATEV2, 0); }
		public TerminalNode DATETIMEV2() { return getToken(PLParser.DATETIMEV2, 0); }
		public TerminalNode DATEV1() { return getToken(PLParser.DATEV1, 0); }
		public TerminalNode DATETIMEV1() { return getToken(PLParser.DATETIMEV1, 0); }
		public TerminalNode BITMAP() { return getToken(PLParser.BITMAP, 0); }
		public TerminalNode QUANTILE_STATE() { return getToken(PLParser.QUANTILE_STATE, 0); }
		public TerminalNode HLL() { return getToken(PLParser.HLL, 0); }
		public TerminalNode AGG_STATE() { return getToken(PLParser.AGG_STATE, 0); }
		public TerminalNode STRING() { return getToken(PLParser.STRING, 0); }
		public TerminalNode JSON() { return getToken(PLParser.JSON, 0); }
		public TerminalNode JSONB() { return getToken(PLParser.JSONB, 0); }
		public TerminalNode TEXT() { return getToken(PLParser.TEXT, 0); }
		public TerminalNode VARCHAR() { return getToken(PLParser.VARCHAR, 0); }
		public TerminalNode CHAR() { return getToken(PLParser.CHAR, 0); }
		public TerminalNode DECIMAL() { return getToken(PLParser.DECIMAL, 0); }
		public TerminalNode DECIMALV2() { return getToken(PLParser.DECIMALV2, 0); }
		public TerminalNode DECIMALV3() { return getToken(PLParser.DECIMALV3, 0); }
		public TerminalNode IPV4() { return getToken(PLParser.IPV4, 0); }
		public TerminalNode IPV6() { return getToken(PLParser.IPV6, 0); }
		public TerminalNode VARIANT() { return getToken(PLParser.VARIANT, 0); }
		public TerminalNode ALL() { return getToken(PLParser.ALL, 0); }
		public PrimitiveColTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_primitiveColType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterPrimitiveColType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitPrimitiveColType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitPrimitiveColType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrimitiveColTypeContext primitiveColType() throws RecognitionException {
		PrimitiveColTypeContext _localctx = new PrimitiveColTypeContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_primitiveColType);
		int _la;
		try {
			setState(4687);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT_PAREN:
			case RIGHT_PAREN:
			case COMMA:
			case AUTO_INCREMENT:
			case BITMAP_UNION:
			case COMMENT:
			case DEFAULT:
			case GENERIC:
			case HLL_UNION:
			case KEY:
			case MAX:
			case MIN:
			case NOT:
			case NULL:
			case ON:
			case QUANTILE_UNION:
			case REPLACE:
			case REPLACE_IF_NOT_NULL:
			case SUM:
			case GT:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case TINYINT:
				enterOuterAlt(_localctx, 2);
				{
				setState(4652);
				((PrimitiveColTypeContext)_localctx).type = match(TINYINT);
				}
				break;
			case SMALLINT:
				enterOuterAlt(_localctx, 3);
				{
				setState(4653);
				((PrimitiveColTypeContext)_localctx).type = match(SMALLINT);
				}
				break;
			case INT:
			case INTEGER:
			case SIGNED:
			case UNSIGNED:
				enterOuterAlt(_localctx, 4);
				{
				setState(4655);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SIGNED || _la==UNSIGNED) {
					{
					setState(4654);
					_la = _input.LA(1);
					if ( !(_la==SIGNED || _la==UNSIGNED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(4657);
				((PrimitiveColTypeContext)_localctx).type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INT || _la==INTEGER) ) {
					((PrimitiveColTypeContext)_localctx).type = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case BIGINT:
				enterOuterAlt(_localctx, 5);
				{
				setState(4658);
				((PrimitiveColTypeContext)_localctx).type = match(BIGINT);
				}
				break;
			case LARGEINT:
				enterOuterAlt(_localctx, 6);
				{
				setState(4659);
				((PrimitiveColTypeContext)_localctx).type = match(LARGEINT);
				}
				break;
			case BOOLEAN:
				enterOuterAlt(_localctx, 7);
				{
				setState(4660);
				((PrimitiveColTypeContext)_localctx).type = match(BOOLEAN);
				}
				break;
			case FLOAT:
				enterOuterAlt(_localctx, 8);
				{
				setState(4661);
				((PrimitiveColTypeContext)_localctx).type = match(FLOAT);
				}
				break;
			case DOUBLE:
				enterOuterAlt(_localctx, 9);
				{
				setState(4662);
				((PrimitiveColTypeContext)_localctx).type = match(DOUBLE);
				}
				break;
			case DATE:
				enterOuterAlt(_localctx, 10);
				{
				setState(4663);
				((PrimitiveColTypeContext)_localctx).type = match(DATE);
				}
				break;
			case DATETIME:
				enterOuterAlt(_localctx, 11);
				{
				setState(4664);
				((PrimitiveColTypeContext)_localctx).type = match(DATETIME);
				}
				break;
			case TIME:
				enterOuterAlt(_localctx, 12);
				{
				setState(4665);
				((PrimitiveColTypeContext)_localctx).type = match(TIME);
				}
				break;
			case DATEV2:
				enterOuterAlt(_localctx, 13);
				{
				setState(4666);
				((PrimitiveColTypeContext)_localctx).type = match(DATEV2);
				}
				break;
			case DATETIMEV2:
				enterOuterAlt(_localctx, 14);
				{
				setState(4667);
				((PrimitiveColTypeContext)_localctx).type = match(DATETIMEV2);
				}
				break;
			case DATEV1:
				enterOuterAlt(_localctx, 15);
				{
				setState(4668);
				((PrimitiveColTypeContext)_localctx).type = match(DATEV1);
				}
				break;
			case DATETIMEV1:
				enterOuterAlt(_localctx, 16);
				{
				setState(4669);
				((PrimitiveColTypeContext)_localctx).type = match(DATETIMEV1);
				}
				break;
			case BITMAP:
				enterOuterAlt(_localctx, 17);
				{
				setState(4670);
				((PrimitiveColTypeContext)_localctx).type = match(BITMAP);
				}
				break;
			case QUANTILE_STATE:
				enterOuterAlt(_localctx, 18);
				{
				setState(4671);
				((PrimitiveColTypeContext)_localctx).type = match(QUANTILE_STATE);
				}
				break;
			case HLL:
				enterOuterAlt(_localctx, 19);
				{
				setState(4672);
				((PrimitiveColTypeContext)_localctx).type = match(HLL);
				}
				break;
			case AGG_STATE:
				enterOuterAlt(_localctx, 20);
				{
				setState(4673);
				((PrimitiveColTypeContext)_localctx).type = match(AGG_STATE);
				}
				break;
			case STRING:
				enterOuterAlt(_localctx, 21);
				{
				setState(4674);
				((PrimitiveColTypeContext)_localctx).type = match(STRING);
				}
				break;
			case JSON:
				enterOuterAlt(_localctx, 22);
				{
				setState(4675);
				((PrimitiveColTypeContext)_localctx).type = match(JSON);
				}
				break;
			case JSONB:
				enterOuterAlt(_localctx, 23);
				{
				setState(4676);
				((PrimitiveColTypeContext)_localctx).type = match(JSONB);
				}
				break;
			case TEXT:
				enterOuterAlt(_localctx, 24);
				{
				setState(4677);
				((PrimitiveColTypeContext)_localctx).type = match(TEXT);
				}
				break;
			case VARCHAR:
				enterOuterAlt(_localctx, 25);
				{
				setState(4678);
				((PrimitiveColTypeContext)_localctx).type = match(VARCHAR);
				}
				break;
			case CHAR:
				enterOuterAlt(_localctx, 26);
				{
				setState(4679);
				((PrimitiveColTypeContext)_localctx).type = match(CHAR);
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 27);
				{
				setState(4680);
				((PrimitiveColTypeContext)_localctx).type = match(DECIMAL);
				}
				break;
			case DECIMALV2:
				enterOuterAlt(_localctx, 28);
				{
				setState(4681);
				((PrimitiveColTypeContext)_localctx).type = match(DECIMALV2);
				}
				break;
			case DECIMALV3:
				enterOuterAlt(_localctx, 29);
				{
				setState(4682);
				((PrimitiveColTypeContext)_localctx).type = match(DECIMALV3);
				}
				break;
			case IPV4:
				enterOuterAlt(_localctx, 30);
				{
				setState(4683);
				((PrimitiveColTypeContext)_localctx).type = match(IPV4);
				}
				break;
			case IPV6:
				enterOuterAlt(_localctx, 31);
				{
				setState(4684);
				((PrimitiveColTypeContext)_localctx).type = match(IPV6);
				}
				break;
			case VARIANT:
				enterOuterAlt(_localctx, 32);
				{
				setState(4685);
				((PrimitiveColTypeContext)_localctx).type = match(VARIANT);
				}
				break;
			case ALL:
				enterOuterAlt(_localctx, 33);
				{
				setState(4686);
				((PrimitiveColTypeContext)_localctx).type = match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ComplexColTypeListContext extends ParserRuleContext {
		public List<ComplexColTypeContext> complexColType() {
			return getRuleContexts(ComplexColTypeContext.class);
		}
		public ComplexColTypeContext complexColType(int i) {
			return getRuleContext(ComplexColTypeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLParser.COMMA, i);
		}
		public ComplexColTypeListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_complexColTypeList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterComplexColTypeList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitComplexColTypeList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitComplexColTypeList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ComplexColTypeListContext complexColTypeList() throws RecognitionException {
		ComplexColTypeListContext _localctx = new ComplexColTypeListContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_complexColTypeList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4689);
			complexColType();
			setState(4694);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4690);
				match(COMMA);
				setState(4691);
				complexColType();
				}
				}
				setState(4696);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ComplexColTypeContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode COLON() { return getToken(PLParser.COLON, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public CommentSpecContext commentSpec() {
			return getRuleContext(CommentSpecContext.class,0);
		}
		public ComplexColTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_complexColType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterComplexColType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitComplexColType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitComplexColType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ComplexColTypeContext complexColType() throws RecognitionException {
		ComplexColTypeContext _localctx = new ComplexColTypeContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_complexColType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4697);
			identifier();
			setState(4698);
			match(COLON);
			setState(4699);
			dataType();
			setState(4701);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(4700);
				commentSpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommentSpecContext extends ParserRuleContext {
		public TerminalNode COMMENT() { return getToken(PLParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(PLParser.STRING_LITERAL, 0); }
		public CommentSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commentSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterCommentSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitCommentSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitCommentSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommentSpecContext commentSpec() throws RecognitionException {
		CommentSpecContext _localctx = new CommentSpecContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_commentSpec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4703);
			match(COMMENT);
			setState(4704);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SampleContext extends ParserRuleContext {
		public Token seed;
		public TerminalNode TABLESAMPLE() { return getToken(PLParser.TABLESAMPLE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLParser.RIGHT_PAREN, 0); }
		public SampleMethodContext sampleMethod() {
			return getRuleContext(SampleMethodContext.class,0);
		}
		public TerminalNode REPEATABLE() { return getToken(PLParser.REPEATABLE, 0); }
		public TerminalNode INTEGER_VALUE() { return getToken(PLParser.INTEGER_VALUE, 0); }
		public SampleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sample; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterSample(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitSample(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitSample(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SampleContext sample() throws RecognitionException {
		SampleContext _localctx = new SampleContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_sample);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4706);
			match(TABLESAMPLE);
			setState(4707);
			match(LEFT_PAREN);
			setState(4709);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTEGER_VALUE) {
				{
				setState(4708);
				sampleMethod();
				}
			}

			setState(4711);
			match(RIGHT_PAREN);
			setState(4714);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,602,_ctx) ) {
			case 1:
				{
				setState(4712);
				match(REPEATABLE);
				setState(4713);
				((SampleContext)_localctx).seed = match(INTEGER_VALUE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SampleMethodContext extends ParserRuleContext {
		public SampleMethodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sampleMethod; }
	 
		public SampleMethodContext() { }
		public void copyFrom(SampleMethodContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SampleByRowsContext extends SampleMethodContext {
		public TerminalNode INTEGER_VALUE() { return getToken(PLParser.INTEGER_VALUE, 0); }
		public TerminalNode ROWS() { return getToken(PLParser.ROWS, 0); }
		public SampleByRowsContext(SampleMethodContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterSampleByRows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitSampleByRows(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitSampleByRows(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SampleByPercentileContext extends SampleMethodContext {
		public Token percentage;
		public TerminalNode PERCENT() { return getToken(PLParser.PERCENT, 0); }
		public TerminalNode INTEGER_VALUE() { return getToken(PLParser.INTEGER_VALUE, 0); }
		public SampleByPercentileContext(SampleMethodContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterSampleByPercentile(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitSampleByPercentile(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitSampleByPercentile(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SampleMethodContext sampleMethod() throws RecognitionException {
		SampleMethodContext _localctx = new SampleMethodContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_sampleMethod);
		try {
			setState(4720);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,603,_ctx) ) {
			case 1:
				_localctx = new SampleByPercentileContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4716);
				((SampleByPercentileContext)_localctx).percentage = match(INTEGER_VALUE);
				setState(4717);
				match(PERCENT);
				}
				break;
			case 2:
				_localctx = new SampleByRowsContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4718);
				match(INTEGER_VALUE);
				setState(4719);
				match(ROWS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ErrorCapturingIdentifierContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ErrorCapturingIdentifierExtraContext errorCapturingIdentifierExtra() {
			return getRuleContext(ErrorCapturingIdentifierExtraContext.class,0);
		}
		public ErrorCapturingIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_errorCapturingIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterErrorCapturingIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitErrorCapturingIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitErrorCapturingIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ErrorCapturingIdentifierContext errorCapturingIdentifier() throws RecognitionException {
		ErrorCapturingIdentifierContext _localctx = new ErrorCapturingIdentifierContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_errorCapturingIdentifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4722);
			identifier();
			setState(4723);
			errorCapturingIdentifierExtra();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ErrorCapturingIdentifierExtraContext extends ParserRuleContext {
		public ErrorCapturingIdentifierExtraContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_errorCapturingIdentifierExtra; }
	 
		public ErrorCapturingIdentifierExtraContext() { }
		public void copyFrom(ErrorCapturingIdentifierExtraContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ErrorIdentContext extends ErrorCapturingIdentifierExtraContext {
		public List<TerminalNode> SUBTRACT() { return getTokens(PLParser.SUBTRACT); }
		public TerminalNode SUBTRACT(int i) {
			return getToken(PLParser.SUBTRACT, i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public ErrorIdentContext(ErrorCapturingIdentifierExtraContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterErrorIdent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitErrorIdent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitErrorIdent(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RealIdentContext extends ErrorCapturingIdentifierExtraContext {
		public RealIdentContext(ErrorCapturingIdentifierExtraContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterRealIdent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitRealIdent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitRealIdent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ErrorCapturingIdentifierExtraContext errorCapturingIdentifierExtra() throws RecognitionException {
		ErrorCapturingIdentifierExtraContext _localctx = new ErrorCapturingIdentifierExtraContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_errorCapturingIdentifierExtra);
		try {
			int _alt;
			setState(4732);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,605,_ctx) ) {
			case 1:
				_localctx = new ErrorIdentContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4727); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(4725);
						match(SUBTRACT);
						setState(4726);
						identifier();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(4729); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,604,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				_localctx = new RealIdentContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierContext extends ParserRuleContext {
		public StrictIdentifierContext strictIdentifier() {
			return getRuleContext(StrictIdentifierContext.class,0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierContext identifier() throws RecognitionException {
		IdentifierContext _localctx = new IdentifierContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_identifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4734);
			strictIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StrictIdentifierContext extends ParserRuleContext {
		public StrictIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_strictIdentifier; }
	 
		public StrictIdentifierContext() { }
		public void copyFrom(StrictIdentifierContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class QuotedIdentifierAlternativeContext extends StrictIdentifierContext {
		public QuotedIdentifierContext quotedIdentifier() {
			return getRuleContext(QuotedIdentifierContext.class,0);
		}
		public QuotedIdentifierAlternativeContext(StrictIdentifierContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterQuotedIdentifierAlternative(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitQuotedIdentifierAlternative(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitQuotedIdentifierAlternative(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UnquotedIdentifierContext extends StrictIdentifierContext {
		public TerminalNode IDENTIFIER() { return getToken(PLParser.IDENTIFIER, 0); }
		public NonReservedContext nonReserved() {
			return getRuleContext(NonReservedContext.class,0);
		}
		public UnquotedIdentifierContext(StrictIdentifierContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterUnquotedIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitUnquotedIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitUnquotedIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StrictIdentifierContext strictIdentifier() throws RecognitionException {
		StrictIdentifierContext _localctx = new StrictIdentifierContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_strictIdentifier);
		try {
			setState(4739);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IDENTIFIER:
				_localctx = new UnquotedIdentifierContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4736);
				match(IDENTIFIER);
				}
				break;
			case BACKQUOTED_IDENTIFIER:
				_localctx = new QuotedIdentifierAlternativeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4737);
				quotedIdentifier();
				}
				break;
			case LEFT_BRACE:
			case RIGHT_BRACE:
			case ADDDATE:
			case AFTER:
			case AGG_STATE:
			case AGGREGATE:
			case ALIAS:
			case ANALYZED:
			case ARRAY:
			case ARRAY_RANGE:
			case AT:
			case AUTHORS:
			case AUTO_INCREMENT:
			case BACKENDS:
			case BACKUP:
			case BEGIN:
			case BELONG:
			case BIN:
			case BITAND:
			case BITMAP:
			case BITMAP_UNION:
			case BITOR:
			case BITXOR:
			case BLOB:
			case BOOLEAN:
			case BRIEF:
			case BROKER:
			case BUCKETS:
			case BUILD:
			case BUILTIN:
			case BULK:
			case CACHED:
			case CALL:
			case CATALOG:
			case CATALOGS:
			case CHAIN:
			case CHAR:
			case CHARSET:
			case CHECK:
			case CLUSTER:
			case CLUSTERS:
			case COLLATION:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPACT:
			case COMPLETE:
			case CONFIG:
			case CONNECTION:
			case CONNECTION_ID:
			case CONSISTENT:
			case CONSTRAINTS:
			case CONVERT:
			case COPY:
			case COUNT:
			case CREATION:
			case CRON:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DATA:
			case DATE:
			case DATE_ADD:
			case DATE_CEIL:
			case DATE_DIFF:
			case DATE_FLOOR:
			case DATE_SUB:
			case DATEADD:
			case DATEDIFF:
			case DATETIME:
			case DATETIMEV2:
			case DATEV2:
			case DATETIMEV1:
			case DATEV1:
			case DAY:
			case DAYS_ADD:
			case DAYS_SUB:
			case DECIMAL:
			case DECIMALV2:
			case DECIMALV3:
			case DEFERRED:
			case DEMAND:
			case DIAGNOSE:
			case DISTINCTPC:
			case DISTINCTPCSA:
			case DO:
			case DORIS_INTERNAL_TABLE_ID:
			case DUAL:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTKEY:
			case ENCRYPTKEYS:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERRORS:
			case EVENTS:
			case EVERY:
			case EXCLUDE:
			case EXPIRED:
			case EXTERNAL:
			case FAILED_LOGIN_ATTEMPTS:
			case FAST:
			case FEATURE:
			case FIELDS:
			case FILE:
			case FILTER:
			case FIRST:
			case FORMAT:
			case FREE:
			case FRONTENDS:
			case FUNCTION:
			case GENERIC:
			case GLOBAL:
			case GRAPH:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HDFS:
			case HELP:
			case HISTOGRAM:
			case HLL_UNION:
			case HOSTNAME:
			case HOUR:
			case HUB:
			case IDENTIFIED:
			case IGNORE:
			case IMMEDIATE:
			case INCREMENTAL:
			case INDEXES:
			case INVERTED:
			case IPV4:
			case IPV6:
			case IS_NOT_NULL_PRED:
			case IS_NULL_PRED:
			case ISNULL:
			case ISOLATION:
			case JOB:
			case JOBS:
			case JSON:
			case JSONB:
			case LABEL:
			case LAST:
			case LDAP:
			case LDAP_ADMIN_PASSWORD:
			case LESS:
			case LEVEL:
			case LINES:
			case LINK:
			case LOCAL:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case LOCATION:
			case LOCK:
			case LOGICAL:
			case MANUAL:
			case MAP:
			case MATCH_ALL:
			case MATCH_ANY:
			case MATCH_ELEMENT_EQ:
			case MATCH_ELEMENT_GE:
			case MATCH_ELEMENT_GT:
			case MATCH_ELEMENT_LE:
			case MATCH_ELEMENT_LT:
			case MATCH_PHRASE:
			case MATCH_PHRASE_EDGE:
			case MATCH_PHRASE_PREFIX:
			case MATCH_REGEXP:
			case MATERIALIZED:
			case MAX:
			case MEMO:
			case MERGE:
			case MIGRATE:
			case MIGRATIONS:
			case MIN:
			case MINUTE:
			case MODIFY:
			case MONTH:
			case MTMV:
			case NAME:
			case NAMES:
			case NEGATIVE:
			case NEVER:
			case NEXT:
			case NGRAM_BF:
			case NO:
			case NON_NULLABLE:
			case NULLS:
			case OF:
			case OFFSET:
			case ONLY:
			case OPEN:
			case OPTIMIZED:
			case PARAMETER:
			case PARSED:
			case PARTITIONS:
			case PASSWORD:
			case PASSWORD_EXPIRE:
			case PASSWORD_HISTORY:
			case PASSWORD_LOCK_TIME:
			case PASSWORD_REUSE:
			case PATH:
			case PAUSE:
			case PERCENT:
			case PERIOD:
			case PERMISSIVE:
			case PHYSICAL:
			case PLAN:
			case PROCESS:
			case PLUGIN:
			case PLUGINS:
			case POLICY:
			case PROC:
			case PROCESSLIST:
			case PROFILE:
			case PROPERTIES:
			case PROPERTY:
			case QUANTILE_STATE:
			case QUANTILE_UNION:
			case QUERY:
			case QUOTA:
			case RANDOM:
			case RECOVER:
			case RECYCLE:
			case REFRESH:
			case REPEATABLE:
			case REPLACE:
			case REPLACE_IF_NOT_NULL:
			case REPOSITORIES:
			case REPOSITORY:
			case RESOURCE:
			case RESOURCES:
			case RESTORE:
			case RESTRICTIVE:
			case RESUME:
			case RETURNS:
			case REWRITTEN:
			case RLIKE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case S3:
			case SAMPLE:
			case SCHEDULE:
			case SCHEDULER:
			case SCHEMA:
			case SECOND:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION:
			case SHAPE:
			case SKEW:
			case SNAPSHOT:
			case SONAME:
			case SPLIT:
			case START:
			case STARTS:
			case STATS:
			case STATUS:
			case STOP:
			case STORAGE:
			case STREAM:
			case STREAMING:
			case STRING:
			case STRUCT:
			case SUBDATE:
			case SUM:
			case TABLES:
			case TASK:
			case TASKS:
			case TEMPORARY:
			case TEXT:
			case THAN:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TRANSACTION:
			case TREE:
			case TRIGGERS:
			case TRUNCATE:
			case TYPE:
			case TYPES:
			case UNCOMMITTED:
			case UNLOCK:
			case USER:
			case VALUE:
			case VARCHAR:
			case VARIABLES:
			case VARIANT:
			case VERBOSE:
			case VERSION:
			case VIEW:
			case WARNINGS:
			case WEEK:
			case WORK:
			case YEAR:
				_localctx = new UnquotedIdentifierContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4738);
				nonReserved();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QuotedIdentifierContext extends ParserRuleContext {
		public TerminalNode BACKQUOTED_IDENTIFIER() { return getToken(PLParser.BACKQUOTED_IDENTIFIER, 0); }
		public QuotedIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_quotedIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterQuotedIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitQuotedIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitQuotedIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QuotedIdentifierContext quotedIdentifier() throws RecognitionException {
		QuotedIdentifierContext _localctx = new QuotedIdentifierContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_quotedIdentifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4741);
			match(BACKQUOTED_IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumberContext extends ParserRuleContext {
		public NumberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_number; }
	 
		public NumberContext() { }
		public void copyFrom(NumberContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class DecimalLiteralContext extends NumberContext {
		public TerminalNode EXPONENT_VALUE() { return getToken(PLParser.EXPONENT_VALUE, 0); }
		public TerminalNode DECIMAL_VALUE() { return getToken(PLParser.DECIMAL_VALUE, 0); }
		public TerminalNode SUBTRACT() { return getToken(PLParser.SUBTRACT, 0); }
		public DecimalLiteralContext(NumberContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterDecimalLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitDecimalLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitDecimalLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IntegerLiteralContext extends NumberContext {
		public TerminalNode INTEGER_VALUE() { return getToken(PLParser.INTEGER_VALUE, 0); }
		public TerminalNode SUBTRACT() { return getToken(PLParser.SUBTRACT, 0); }
		public IntegerLiteralContext(NumberContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterIntegerLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitIntegerLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitIntegerLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumberContext number() throws RecognitionException {
		NumberContext _localctx = new NumberContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_number);
		int _la;
		try {
			setState(4751);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,609,_ctx) ) {
			case 1:
				_localctx = new IntegerLiteralContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4744);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SUBTRACT) {
					{
					setState(4743);
					match(SUBTRACT);
					}
				}

				setState(4746);
				match(INTEGER_VALUE);
				}
				break;
			case 2:
				_localctx = new DecimalLiteralContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4748);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SUBTRACT) {
					{
					setState(4747);
					match(SUBTRACT);
					}
				}

				setState(4750);
				_la = _input.LA(1);
				if ( !(_la==EXPONENT_VALUE || _la==DECIMAL_VALUE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NonReservedContext extends ParserRuleContext {
		public TerminalNode ADDDATE() { return getToken(PLParser.ADDDATE, 0); }
		public TerminalNode AFTER() { return getToken(PLParser.AFTER, 0); }
		public TerminalNode AGG_STATE() { return getToken(PLParser.AGG_STATE, 0); }
		public TerminalNode AGGREGATE() { return getToken(PLParser.AGGREGATE, 0); }
		public TerminalNode ALIAS() { return getToken(PLParser.ALIAS, 0); }
		public TerminalNode ANALYZED() { return getToken(PLParser.ANALYZED, 0); }
		public TerminalNode ARRAY() { return getToken(PLParser.ARRAY, 0); }
		public TerminalNode ARRAY_RANGE() { return getToken(PLParser.ARRAY_RANGE, 0); }
		public TerminalNode AT() { return getToken(PLParser.AT, 0); }
		public TerminalNode AUTHORS() { return getToken(PLParser.AUTHORS, 0); }
		public TerminalNode AUTO_INCREMENT() { return getToken(PLParser.AUTO_INCREMENT, 0); }
		public TerminalNode BACKENDS() { return getToken(PLParser.BACKENDS, 0); }
		public TerminalNode BACKUP() { return getToken(PLParser.BACKUP, 0); }
		public TerminalNode BEGIN() { return getToken(PLParser.BEGIN, 0); }
		public TerminalNode BELONG() { return getToken(PLParser.BELONG, 0); }
		public TerminalNode BIN() { return getToken(PLParser.BIN, 0); }
		public TerminalNode BITAND() { return getToken(PLParser.BITAND, 0); }
		public TerminalNode BITMAP() { return getToken(PLParser.BITMAP, 0); }
		public TerminalNode BITMAP_UNION() { return getToken(PLParser.BITMAP_UNION, 0); }
		public TerminalNode BITOR() { return getToken(PLParser.BITOR, 0); }
		public TerminalNode BITXOR() { return getToken(PLParser.BITXOR, 0); }
		public TerminalNode BLOB() { return getToken(PLParser.BLOB, 0); }
		public TerminalNode BOOLEAN() { return getToken(PLParser.BOOLEAN, 0); }
		public TerminalNode BRIEF() { return getToken(PLParser.BRIEF, 0); }
		public TerminalNode BROKER() { return getToken(PLParser.BROKER, 0); }
		public TerminalNode BUCKETS() { return getToken(PLParser.BUCKETS, 0); }
		public TerminalNode BUILD() { return getToken(PLParser.BUILD, 0); }
		public TerminalNode BUILTIN() { return getToken(PLParser.BUILTIN, 0); }
		public TerminalNode BULK() { return getToken(PLParser.BULK, 0); }
		public TerminalNode CACHED() { return getToken(PLParser.CACHED, 0); }
		public TerminalNode CALL() { return getToken(PLParser.CALL, 0); }
		public TerminalNode CATALOG() { return getToken(PLParser.CATALOG, 0); }
		public TerminalNode CATALOGS() { return getToken(PLParser.CATALOGS, 0); }
		public TerminalNode CHAIN() { return getToken(PLParser.CHAIN, 0); }
		public TerminalNode CHAR() { return getToken(PLParser.CHAR, 0); }
		public TerminalNode CHARSET() { return getToken(PLParser.CHARSET, 0); }
		public TerminalNode CHECK() { return getToken(PLParser.CHECK, 0); }
		public TerminalNode CLUSTER() { return getToken(PLParser.CLUSTER, 0); }
		public TerminalNode CLUSTERS() { return getToken(PLParser.CLUSTERS, 0); }
		public TerminalNode COLLATION() { return getToken(PLParser.COLLATION, 0); }
		public TerminalNode COLLECT() { return getToken(PLParser.COLLECT, 0); }
		public TerminalNode COLUMNS() { return getToken(PLParser.COLUMNS, 0); }
		public TerminalNode COMMENT() { return getToken(PLParser.COMMENT, 0); }
		public TerminalNode COMMIT() { return getToken(PLParser.COMMIT, 0); }
		public TerminalNode COMMITTED() { return getToken(PLParser.COMMITTED, 0); }
		public TerminalNode COMPACT() { return getToken(PLParser.COMPACT, 0); }
		public TerminalNode COMPLETE() { return getToken(PLParser.COMPLETE, 0); }
		public TerminalNode CONFIG() { return getToken(PLParser.CONFIG, 0); }
		public TerminalNode CONNECTION() { return getToken(PLParser.CONNECTION, 0); }
		public TerminalNode CONNECTION_ID() { return getToken(PLParser.CONNECTION_ID, 0); }
		public TerminalNode CONSISTENT() { return getToken(PLParser.CONSISTENT, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(PLParser.CONSTRAINTS, 0); }
		public TerminalNode CONVERT() { return getToken(PLParser.CONVERT, 0); }
		public TerminalNode COPY() { return getToken(PLParser.COPY, 0); }
		public TerminalNode COUNT() { return getToken(PLParser.COUNT, 0); }
		public TerminalNode CREATION() { return getToken(PLParser.CREATION, 0); }
		public TerminalNode CRON() { return getToken(PLParser.CRON, 0); }
		public TerminalNode CURRENT_CATALOG() { return getToken(PLParser.CURRENT_CATALOG, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(PLParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(PLParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(PLParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PLParser.CURRENT_USER, 0); }
		public TerminalNode DATA() { return getToken(PLParser.DATA, 0); }
		public TerminalNode DATE() { return getToken(PLParser.DATE, 0); }
		public TerminalNode DATE_ADD() { return getToken(PLParser.DATE_ADD, 0); }
		public TerminalNode DATE_CEIL() { return getToken(PLParser.DATE_CEIL, 0); }
		public TerminalNode DATE_DIFF() { return getToken(PLParser.DATE_DIFF, 0); }
		public TerminalNode DATE_FLOOR() { return getToken(PLParser.DATE_FLOOR, 0); }
		public TerminalNode DATE_SUB() { return getToken(PLParser.DATE_SUB, 0); }
		public TerminalNode DATEADD() { return getToken(PLParser.DATEADD, 0); }
		public TerminalNode DATEDIFF() { return getToken(PLParser.DATEDIFF, 0); }
		public TerminalNode DATETIME() { return getToken(PLParser.DATETIME, 0); }
		public TerminalNode DATETIMEV1() { return getToken(PLParser.DATETIMEV1, 0); }
		public TerminalNode DATETIMEV2() { return getToken(PLParser.DATETIMEV2, 0); }
		public TerminalNode DATEV1() { return getToken(PLParser.DATEV1, 0); }
		public TerminalNode DATEV2() { return getToken(PLParser.DATEV2, 0); }
		public TerminalNode DAY() { return getToken(PLParser.DAY, 0); }
		public TerminalNode DAYS_ADD() { return getToken(PLParser.DAYS_ADD, 0); }
		public TerminalNode DAYS_SUB() { return getToken(PLParser.DAYS_SUB, 0); }
		public TerminalNode DECIMAL() { return getToken(PLParser.DECIMAL, 0); }
		public TerminalNode DECIMALV2() { return getToken(PLParser.DECIMALV2, 0); }
		public TerminalNode DECIMALV3() { return getToken(PLParser.DECIMALV3, 0); }
		public TerminalNode DEFERRED() { return getToken(PLParser.DEFERRED, 0); }
		public TerminalNode DEMAND() { return getToken(PLParser.DEMAND, 0); }
		public TerminalNode DIAGNOSE() { return getToken(PLParser.DIAGNOSE, 0); }
		public TerminalNode DISTINCTPC() { return getToken(PLParser.DISTINCTPC, 0); }
		public TerminalNode DISTINCTPCSA() { return getToken(PLParser.DISTINCTPCSA, 0); }
		public TerminalNode DO() { return getToken(PLParser.DO, 0); }
		public TerminalNode DORIS_INTERNAL_TABLE_ID() { return getToken(PLParser.DORIS_INTERNAL_TABLE_ID, 0); }
		public TerminalNode DUAL() { return getToken(PLParser.DUAL, 0); }
		public TerminalNode DYNAMIC() { return getToken(PLParser.DYNAMIC, 0); }
		public TerminalNode ENABLE() { return getToken(PLParser.ENABLE, 0); }
		public TerminalNode ENCRYPTKEY() { return getToken(PLParser.ENCRYPTKEY, 0); }
		public TerminalNode ENCRYPTKEYS() { return getToken(PLParser.ENCRYPTKEYS, 0); }
		public TerminalNode END() { return getToken(PLParser.END, 0); }
		public TerminalNode ENDS() { return getToken(PLParser.ENDS, 0); }
		public TerminalNode ENGINE() { return getToken(PLParser.ENGINE, 0); }
		public TerminalNode ENGINES() { return getToken(PLParser.ENGINES, 0); }
		public TerminalNode ERRORS() { return getToken(PLParser.ERRORS, 0); }
		public TerminalNode EVENTS() { return getToken(PLParser.EVENTS, 0); }
		public TerminalNode EVERY() { return getToken(PLParser.EVERY, 0); }
		public TerminalNode EXCLUDE() { return getToken(PLParser.EXCLUDE, 0); }
		public TerminalNode EXPIRED() { return getToken(PLParser.EXPIRED, 0); }
		public TerminalNode EXTERNAL() { return getToken(PLParser.EXTERNAL, 0); }
		public TerminalNode FAILED_LOGIN_ATTEMPTS() { return getToken(PLParser.FAILED_LOGIN_ATTEMPTS, 0); }
		public TerminalNode FAST() { return getToken(PLParser.FAST, 0); }
		public TerminalNode FEATURE() { return getToken(PLParser.FEATURE, 0); }
		public TerminalNode FIELDS() { return getToken(PLParser.FIELDS, 0); }
		public TerminalNode FILE() { return getToken(PLParser.FILE, 0); }
		public TerminalNode FILTER() { return getToken(PLParser.FILTER, 0); }
		public TerminalNode FIRST() { return getToken(PLParser.FIRST, 0); }
		public TerminalNode FORMAT() { return getToken(PLParser.FORMAT, 0); }
		public TerminalNode FREE() { return getToken(PLParser.FREE, 0); }
		public TerminalNode FRONTENDS() { return getToken(PLParser.FRONTENDS, 0); }
		public TerminalNode FUNCTION() { return getToken(PLParser.FUNCTION, 0); }
		public TerminalNode GENERIC() { return getToken(PLParser.GENERIC, 0); }
		public TerminalNode GLOBAL() { return getToken(PLParser.GLOBAL, 0); }
		public TerminalNode GRAPH() { return getToken(PLParser.GRAPH, 0); }
		public TerminalNode GROUPING() { return getToken(PLParser.GROUPING, 0); }
		public TerminalNode GROUPS() { return getToken(PLParser.GROUPS, 0); }
		public TerminalNode HASH() { return getToken(PLParser.HASH, 0); }
		public TerminalNode HDFS() { return getToken(PLParser.HDFS, 0); }
		public TerminalNode HELP() { return getToken(PLParser.HELP, 0); }
		public TerminalNode HISTOGRAM() { return getToken(PLParser.HISTOGRAM, 0); }
		public TerminalNode HLL_UNION() { return getToken(PLParser.HLL_UNION, 0); }
		public TerminalNode HOSTNAME() { return getToken(PLParser.HOSTNAME, 0); }
		public TerminalNode HOUR() { return getToken(PLParser.HOUR, 0); }
		public TerminalNode HUB() { return getToken(PLParser.HUB, 0); }
		public TerminalNode IDENTIFIED() { return getToken(PLParser.IDENTIFIED, 0); }
		public TerminalNode IGNORE() { return getToken(PLParser.IGNORE, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PLParser.IMMEDIATE, 0); }
		public TerminalNode INCREMENTAL() { return getToken(PLParser.INCREMENTAL, 0); }
		public TerminalNode INDEXES() { return getToken(PLParser.INDEXES, 0); }
		public TerminalNode INVERTED() { return getToken(PLParser.INVERTED, 0); }
		public TerminalNode IPV4() { return getToken(PLParser.IPV4, 0); }
		public TerminalNode IPV6() { return getToken(PLParser.IPV6, 0); }
		public TerminalNode IS_NOT_NULL_PRED() { return getToken(PLParser.IS_NOT_NULL_PRED, 0); }
		public TerminalNode IS_NULL_PRED() { return getToken(PLParser.IS_NULL_PRED, 0); }
		public TerminalNode ISNULL() { return getToken(PLParser.ISNULL, 0); }
		public TerminalNode ISOLATION() { return getToken(PLParser.ISOLATION, 0); }
		public TerminalNode JOB() { return getToken(PLParser.JOB, 0); }
		public TerminalNode JOBS() { return getToken(PLParser.JOBS, 0); }
		public TerminalNode JSON() { return getToken(PLParser.JSON, 0); }
		public TerminalNode JSONB() { return getToken(PLParser.JSONB, 0); }
		public TerminalNode LABEL() { return getToken(PLParser.LABEL, 0); }
		public TerminalNode LAST() { return getToken(PLParser.LAST, 0); }
		public TerminalNode LDAP() { return getToken(PLParser.LDAP, 0); }
		public TerminalNode LDAP_ADMIN_PASSWORD() { return getToken(PLParser.LDAP_ADMIN_PASSWORD, 0); }
		public TerminalNode LEFT_BRACE() { return getToken(PLParser.LEFT_BRACE, 0); }
		public TerminalNode LESS() { return getToken(PLParser.LESS, 0); }
		public TerminalNode LEVEL() { return getToken(PLParser.LEVEL, 0); }
		public TerminalNode LINES() { return getToken(PLParser.LINES, 0); }
		public TerminalNode LINK() { return getToken(PLParser.LINK, 0); }
		public TerminalNode LOCAL() { return getToken(PLParser.LOCAL, 0); }
		public TerminalNode LOCALTIME() { return getToken(PLParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(PLParser.LOCALTIMESTAMP, 0); }
		public TerminalNode LOCATION() { return getToken(PLParser.LOCATION, 0); }
		public TerminalNode LOCK() { return getToken(PLParser.LOCK, 0); }
		public TerminalNode LOGICAL() { return getToken(PLParser.LOGICAL, 0); }
		public TerminalNode MANUAL() { return getToken(PLParser.MANUAL, 0); }
		public TerminalNode MAP() { return getToken(PLParser.MAP, 0); }
		public TerminalNode MATCH_ALL() { return getToken(PLParser.MATCH_ALL, 0); }
		public TerminalNode MATCH_ANY() { return getToken(PLParser.MATCH_ANY, 0); }
		public TerminalNode MATCH_ELEMENT_EQ() { return getToken(PLParser.MATCH_ELEMENT_EQ, 0); }
		public TerminalNode MATCH_ELEMENT_GE() { return getToken(PLParser.MATCH_ELEMENT_GE, 0); }
		public TerminalNode MATCH_ELEMENT_GT() { return getToken(PLParser.MATCH_ELEMENT_GT, 0); }
		public TerminalNode MATCH_ELEMENT_LE() { return getToken(PLParser.MATCH_ELEMENT_LE, 0); }
		public TerminalNode MATCH_ELEMENT_LT() { return getToken(PLParser.MATCH_ELEMENT_LT, 0); }
		public TerminalNode MATCH_PHRASE() { return getToken(PLParser.MATCH_PHRASE, 0); }
		public TerminalNode MATCH_PHRASE_EDGE() { return getToken(PLParser.MATCH_PHRASE_EDGE, 0); }
		public TerminalNode MATCH_PHRASE_PREFIX() { return getToken(PLParser.MATCH_PHRASE_PREFIX, 0); }
		public TerminalNode MATCH_REGEXP() { return getToken(PLParser.MATCH_REGEXP, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PLParser.MATERIALIZED, 0); }
		public TerminalNode MAX() { return getToken(PLParser.MAX, 0); }
		public TerminalNode MEMO() { return getToken(PLParser.MEMO, 0); }
		public TerminalNode MERGE() { return getToken(PLParser.MERGE, 0); }
		public TerminalNode MIGRATE() { return getToken(PLParser.MIGRATE, 0); }
		public TerminalNode MIGRATIONS() { return getToken(PLParser.MIGRATIONS, 0); }
		public TerminalNode MIN() { return getToken(PLParser.MIN, 0); }
		public TerminalNode MINUTE() { return getToken(PLParser.MINUTE, 0); }
		public TerminalNode MODIFY() { return getToken(PLParser.MODIFY, 0); }
		public TerminalNode MONTH() { return getToken(PLParser.MONTH, 0); }
		public TerminalNode MTMV() { return getToken(PLParser.MTMV, 0); }
		public TerminalNode NAME() { return getToken(PLParser.NAME, 0); }
		public TerminalNode NAMES() { return getToken(PLParser.NAMES, 0); }
		public TerminalNode NEGATIVE() { return getToken(PLParser.NEGATIVE, 0); }
		public TerminalNode NEVER() { return getToken(PLParser.NEVER, 0); }
		public TerminalNode NEXT() { return getToken(PLParser.NEXT, 0); }
		public TerminalNode NGRAM_BF() { return getToken(PLParser.NGRAM_BF, 0); }
		public TerminalNode NO() { return getToken(PLParser.NO, 0); }
		public TerminalNode NON_NULLABLE() { return getToken(PLParser.NON_NULLABLE, 0); }
		public TerminalNode NULLS() { return getToken(PLParser.NULLS, 0); }
		public TerminalNode OF() { return getToken(PLParser.OF, 0); }
		public TerminalNode OFFSET() { return getToken(PLParser.OFFSET, 0); }
		public TerminalNode ONLY() { return getToken(PLParser.ONLY, 0); }
		public TerminalNode OPEN() { return getToken(PLParser.OPEN, 0); }
		public TerminalNode OPTIMIZED() { return getToken(PLParser.OPTIMIZED, 0); }
		public TerminalNode PARAMETER() { return getToken(PLParser.PARAMETER, 0); }
		public TerminalNode PARSED() { return getToken(PLParser.PARSED, 0); }
		public TerminalNode PASSWORD() { return getToken(PLParser.PASSWORD, 0); }
		public TerminalNode PASSWORD_EXPIRE() { return getToken(PLParser.PASSWORD_EXPIRE, 0); }
		public TerminalNode PASSWORD_HISTORY() { return getToken(PLParser.PASSWORD_HISTORY, 0); }
		public TerminalNode PASSWORD_LOCK_TIME() { return getToken(PLParser.PASSWORD_LOCK_TIME, 0); }
		public TerminalNode PASSWORD_REUSE() { return getToken(PLParser.PASSWORD_REUSE, 0); }
		public TerminalNode PARTITIONS() { return getToken(PLParser.PARTITIONS, 0); }
		public TerminalNode PATH() { return getToken(PLParser.PATH, 0); }
		public TerminalNode PAUSE() { return getToken(PLParser.PAUSE, 0); }
		public TerminalNode PERCENT() { return getToken(PLParser.PERCENT, 0); }
		public TerminalNode PERIOD() { return getToken(PLParser.PERIOD, 0); }
		public TerminalNode PERMISSIVE() { return getToken(PLParser.PERMISSIVE, 0); }
		public TerminalNode PHYSICAL() { return getToken(PLParser.PHYSICAL, 0); }
		public TerminalNode PLAN() { return getToken(PLParser.PLAN, 0); }
		public TerminalNode PLUGIN() { return getToken(PLParser.PLUGIN, 0); }
		public TerminalNode PLUGINS() { return getToken(PLParser.PLUGINS, 0); }
		public TerminalNode POLICY() { return getToken(PLParser.POLICY, 0); }
		public TerminalNode PROC() { return getToken(PLParser.PROC, 0); }
		public TerminalNode PROCESS() { return getToken(PLParser.PROCESS, 0); }
		public TerminalNode PROCESSLIST() { return getToken(PLParser.PROCESSLIST, 0); }
		public TerminalNode PROFILE() { return getToken(PLParser.PROFILE, 0); }
		public TerminalNode PROPERTIES() { return getToken(PLParser.PROPERTIES, 0); }
		public TerminalNode PROPERTY() { return getToken(PLParser.PROPERTY, 0); }
		public TerminalNode QUANTILE_STATE() { return getToken(PLParser.QUANTILE_STATE, 0); }
		public TerminalNode QUANTILE_UNION() { return getToken(PLParser.QUANTILE_UNION, 0); }
		public TerminalNode QUERY() { return getToken(PLParser.QUERY, 0); }
		public TerminalNode QUOTA() { return getToken(PLParser.QUOTA, 0); }
		public TerminalNode RANDOM() { return getToken(PLParser.RANDOM, 0); }
		public TerminalNode RECOVER() { return getToken(PLParser.RECOVER, 0); }
		public TerminalNode RECYCLE() { return getToken(PLParser.RECYCLE, 0); }
		public TerminalNode REFRESH() { return getToken(PLParser.REFRESH, 0); }
		public TerminalNode REPEATABLE() { return getToken(PLParser.REPEATABLE, 0); }
		public TerminalNode REPLACE() { return getToken(PLParser.REPLACE, 0); }
		public TerminalNode REPLACE_IF_NOT_NULL() { return getToken(PLParser.REPLACE_IF_NOT_NULL, 0); }
		public TerminalNode REPOSITORIES() { return getToken(PLParser.REPOSITORIES, 0); }
		public TerminalNode REPOSITORY() { return getToken(PLParser.REPOSITORY, 0); }
		public TerminalNode RESOURCE() { return getToken(PLParser.RESOURCE, 0); }
		public TerminalNode RESOURCES() { return getToken(PLParser.RESOURCES, 0); }
		public TerminalNode RESTORE() { return getToken(PLParser.RESTORE, 0); }
		public TerminalNode RESTRICTIVE() { return getToken(PLParser.RESTRICTIVE, 0); }
		public TerminalNode RESUME() { return getToken(PLParser.RESUME, 0); }
		public TerminalNode RETURNS() { return getToken(PLParser.RETURNS, 0); }
		public TerminalNode REWRITTEN() { return getToken(PLParser.REWRITTEN, 0); }
		public TerminalNode RIGHT_BRACE() { return getToken(PLParser.RIGHT_BRACE, 0); }
		public TerminalNode RLIKE() { return getToken(PLParser.RLIKE, 0); }
		public TerminalNode ROLLBACK() { return getToken(PLParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(PLParser.ROLLUP, 0); }
		public TerminalNode ROUTINE() { return getToken(PLParser.ROUTINE, 0); }
		public TerminalNode S3() { return getToken(PLParser.S3, 0); }
		public TerminalNode SAMPLE() { return getToken(PLParser.SAMPLE, 0); }
		public TerminalNode SCHEDULE() { return getToken(PLParser.SCHEDULE, 0); }
		public TerminalNode SCHEDULER() { return getToken(PLParser.SCHEDULER, 0); }
		public TerminalNode SCHEMA() { return getToken(PLParser.SCHEMA, 0); }
		public TerminalNode SECOND() { return getToken(PLParser.SECOND, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(PLParser.SERIALIZABLE, 0); }
		public TerminalNode SEQUENCE() { return getToken(PLParser.SEQUENCE, 0); }
		public TerminalNode SESSION() { return getToken(PLParser.SESSION, 0); }
		public TerminalNode SHAPE() { return getToken(PLParser.SHAPE, 0); }
		public TerminalNode SKEW() { return getToken(PLParser.SKEW, 0); }
		public TerminalNode SNAPSHOT() { return getToken(PLParser.SNAPSHOT, 0); }
		public TerminalNode SONAME() { return getToken(PLParser.SONAME, 0); }
		public TerminalNode SPLIT() { return getToken(PLParser.SPLIT, 0); }
		public TerminalNode START() { return getToken(PLParser.START, 0); }
		public TerminalNode STARTS() { return getToken(PLParser.STARTS, 0); }
		public TerminalNode STATS() { return getToken(PLParser.STATS, 0); }
		public TerminalNode STATUS() { return getToken(PLParser.STATUS, 0); }
		public TerminalNode STOP() { return getToken(PLParser.STOP, 0); }
		public TerminalNode STORAGE() { return getToken(PLParser.STORAGE, 0); }
		public TerminalNode STREAM() { return getToken(PLParser.STREAM, 0); }
		public TerminalNode STREAMING() { return getToken(PLParser.STREAMING, 0); }
		public TerminalNode STRING() { return getToken(PLParser.STRING, 0); }
		public TerminalNode STRUCT() { return getToken(PLParser.STRUCT, 0); }
		public TerminalNode SUBDATE() { return getToken(PLParser.SUBDATE, 0); }
		public TerminalNode SUM() { return getToken(PLParser.SUM, 0); }
		public TerminalNode TABLES() { return getToken(PLParser.TABLES, 0); }
		public TerminalNode TASK() { return getToken(PLParser.TASK, 0); }
		public TerminalNode TASKS() { return getToken(PLParser.TASKS, 0); }
		public TerminalNode TEMPORARY() { return getToken(PLParser.TEMPORARY, 0); }
		public TerminalNode TEXT() { return getToken(PLParser.TEXT, 0); }
		public TerminalNode THAN() { return getToken(PLParser.THAN, 0); }
		public TerminalNode TIME() { return getToken(PLParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(PLParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMPADD() { return getToken(PLParser.TIMESTAMPADD, 0); }
		public TerminalNode TIMESTAMPDIFF() { return getToken(PLParser.TIMESTAMPDIFF, 0); }
		public TerminalNode TRANSACTION() { return getToken(PLParser.TRANSACTION, 0); }
		public TerminalNode TREE() { return getToken(PLParser.TREE, 0); }
		public TerminalNode TRIGGERS() { return getToken(PLParser.TRIGGERS, 0); }
		public TerminalNode TRUNCATE() { return getToken(PLParser.TRUNCATE, 0); }
		public TerminalNode TYPE() { return getToken(PLParser.TYPE, 0); }
		public TerminalNode TYPES() { return getToken(PLParser.TYPES, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(PLParser.UNCOMMITTED, 0); }
		public TerminalNode UNLOCK() { return getToken(PLParser.UNLOCK, 0); }
		public TerminalNode USER() { return getToken(PLParser.USER, 0); }
		public TerminalNode VALUE() { return getToken(PLParser.VALUE, 0); }
		public TerminalNode VARCHAR() { return getToken(PLParser.VARCHAR, 0); }
		public TerminalNode VARIABLES() { return getToken(PLParser.VARIABLES, 0); }
		public TerminalNode VARIANT() { return getToken(PLParser.VARIANT, 0); }
		public TerminalNode VERBOSE() { return getToken(PLParser.VERBOSE, 0); }
		public TerminalNode VERSION() { return getToken(PLParser.VERSION, 0); }
		public TerminalNode VIEW() { return getToken(PLParser.VIEW, 0); }
		public TerminalNode WARNINGS() { return getToken(PLParser.WARNINGS, 0); }
		public TerminalNode WEEK() { return getToken(PLParser.WEEK, 0); }
		public TerminalNode WORK() { return getToken(PLParser.WORK, 0); }
		public TerminalNode YEAR() { return getToken(PLParser.YEAR, 0); }
		public NonReservedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonReserved; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).enterNonReserved(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLParserListener ) ((PLParserListener)listener).exitNonReserved(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLParserVisitor ) return ((PLParserVisitor<? extends T>)visitor).visitNonReserved(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NonReservedContext nonReserved() throws RecognitionException {
		NonReservedContext _localctx = new NonReservedContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_nonReserved);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4753);
			_la = _input.LA(1);
			if ( !(((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & ((1L << (LEFT_BRACE - 188)) | (1L << (RIGHT_BRACE - 188)) | (1L << (ADDDATE - 188)) | (1L << (AFTER - 188)) | (1L << (AGG_STATE - 188)) | (1L << (AGGREGATE - 188)) | (1L << (ALIAS - 188)) | (1L << (ANALYZED - 188)) | (1L << (ARRAY - 188)) | (1L << (ARRAY_RANGE - 188)) | (1L << (AT - 188)) | (1L << (AUTHORS - 188)) | (1L << (AUTO_INCREMENT - 188)) | (1L << (BACKENDS - 188)) | (1L << (BACKUP - 188)) | (1L << (BEGIN - 188)) | (1L << (BELONG - 188)) | (1L << (BIN - 188)) | (1L << (BITAND - 188)) | (1L << (BITMAP - 188)) | (1L << (BITMAP_UNION - 188)) | (1L << (BITOR - 188)) | (1L << (BITXOR - 188)) | (1L << (BLOB - 188)) | (1L << (BOOLEAN - 188)) | (1L << (BRIEF - 188)) | (1L << (BROKER - 188)) | (1L << (BUCKETS - 188)) | (1L << (BUILD - 188)) | (1L << (BUILTIN - 188)) | (1L << (BULK - 188)) | (1L << (CACHED - 188)) | (1L << (CALL - 188)) | (1L << (CATALOG - 188)) | (1L << (CATALOGS - 188)) | (1L << (CHAIN - 188)) | (1L << (CHAR - 188)) | (1L << (CHARSET - 188)) | (1L << (CHECK - 188)) | (1L << (CLUSTER - 188)) | (1L << (CLUSTERS - 188)))) != 0) || ((((_la - 253)) & ~0x3f) == 0 && ((1L << (_la - 253)) & ((1L << (COLLATION - 253)) | (1L << (COLLECT - 253)) | (1L << (COLUMNS - 253)) | (1L << (COMMENT - 253)) | (1L << (COMMIT - 253)) | (1L << (COMMITTED - 253)) | (1L << (COMPACT - 253)) | (1L << (COMPLETE - 253)) | (1L << (CONFIG - 253)) | (1L << (CONNECTION - 253)) | (1L << (CONNECTION_ID - 253)) | (1L << (CONSISTENT - 253)) | (1L << (CONSTRAINTS - 253)) | (1L << (CONVERT - 253)) | (1L << (COPY - 253)) | (1L << (COUNT - 253)) | (1L << (CREATION - 253)) | (1L << (CRON - 253)) | (1L << (CURRENT_CATALOG - 253)) | (1L << (CURRENT_DATE - 253)) | (1L << (CURRENT_TIME - 253)) | (1L << (CURRENT_TIMESTAMP - 253)) | (1L << (CURRENT_USER - 253)) | (1L << (DATA - 253)) | (1L << (DATE - 253)) | (1L << (DATE_ADD - 253)) | (1L << (DATE_CEIL - 253)) | (1L << (DATE_DIFF - 253)) | (1L << (DATE_FLOOR - 253)) | (1L << (DATE_SUB - 253)) | (1L << (DATEADD - 253)) | (1L << (DATEDIFF - 253)) | (1L << (DATETIME - 253)) | (1L << (DATETIMEV2 - 253)) | (1L << (DATEV2 - 253)) | (1L << (DATETIMEV1 - 253)) | (1L << (DATEV1 - 253)) | (1L << (DAY - 253)) | (1L << (DAYS_ADD - 253)) | (1L << (DAYS_SUB - 253)) | (1L << (DECIMAL - 253)) | (1L << (DECIMALV2 - 253)) | (1L << (DECIMALV3 - 253)) | (1L << (DEFERRED - 253)) | (1L << (DEMAND - 253)) | (1L << (DIAGNOSE - 253)) | (1L << (DISTINCTPC - 253)) | (1L << (DISTINCTPCSA - 253)))) != 0) || ((((_la - 319)) & ~0x3f) == 0 && ((1L << (_la - 319)) & ((1L << (DO - 319)) | (1L << (DORIS_INTERNAL_TABLE_ID - 319)) | (1L << (DUAL - 319)) | (1L << (DYNAMIC - 319)) | (1L << (ENABLE - 319)) | (1L << (ENCRYPTKEY - 319)) | (1L << (ENCRYPTKEYS - 319)) | (1L << (END - 319)) | (1L << (ENDS - 319)) | (1L << (ENGINE - 319)) | (1L << (ENGINES - 319)) | (1L << (ERRORS - 319)) | (1L << (EVENTS - 319)) | (1L << (EVERY - 319)) | (1L << (EXCLUDE - 319)) | (1L << (EXPIRED - 319)) | (1L << (EXTERNAL - 319)) | (1L << (FAILED_LOGIN_ATTEMPTS - 319)) | (1L << (FAST - 319)) | (1L << (FEATURE - 319)) | (1L << (FIELDS - 319)) | (1L << (FILE - 319)) | (1L << (FILTER - 319)) | (1L << (FIRST - 319)) | (1L << (FORMAT - 319)) | (1L << (FREE - 319)) | (1L << (FRONTENDS - 319)) | (1L << (FUNCTION - 319)) | (1L << (GENERIC - 319)) | (1L << (GLOBAL - 319)) | (1L << (GRAPH - 319)) | (1L << (GROUPING - 319)) | (1L << (GROUPS - 319)) | (1L << (HASH - 319)) | (1L << (HDFS - 319)) | (1L << (HELP - 319)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (HISTOGRAM - 383)) | (1L << (HLL_UNION - 383)) | (1L << (HOSTNAME - 383)) | (1L << (HOUR - 383)) | (1L << (HUB - 383)) | (1L << (IDENTIFIED - 383)) | (1L << (IGNORE - 383)) | (1L << (IMMEDIATE - 383)) | (1L << (INCREMENTAL - 383)) | (1L << (INDEXES - 383)) | (1L << (INVERTED - 383)) | (1L << (IPV4 - 383)) | (1L << (IPV6 - 383)) | (1L << (IS_NOT_NULL_PRED - 383)) | (1L << (IS_NULL_PRED - 383)) | (1L << (ISNULL - 383)) | (1L << (ISOLATION - 383)) | (1L << (JOB - 383)) | (1L << (JOBS - 383)) | (1L << (JSON - 383)) | (1L << (JSONB - 383)) | (1L << (LABEL - 383)) | (1L << (LAST - 383)) | (1L << (LDAP - 383)) | (1L << (LDAP_ADMIN_PASSWORD - 383)) | (1L << (LESS - 383)) | (1L << (LEVEL - 383)) | (1L << (LINES - 383)) | (1L << (LINK - 383)) | (1L << (LOCAL - 383)) | (1L << (LOCALTIME - 383)) | (1L << (LOCALTIMESTAMP - 383)) | (1L << (LOCATION - 383)) | (1L << (LOCK - 383)) | (1L << (LOGICAL - 383)) | (1L << (MANUAL - 383)) | (1L << (MAP - 383)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (MATCH_ALL - 448)) | (1L << (MATCH_ANY - 448)) | (1L << (MATCH_ELEMENT_EQ - 448)) | (1L << (MATCH_ELEMENT_GE - 448)) | (1L << (MATCH_ELEMENT_GT - 448)) | (1L << (MATCH_ELEMENT_LE - 448)) | (1L << (MATCH_ELEMENT_LT - 448)) | (1L << (MATCH_PHRASE - 448)) | (1L << (MATCH_PHRASE_EDGE - 448)) | (1L << (MATCH_PHRASE_PREFIX - 448)) | (1L << (MATCH_REGEXP - 448)) | (1L << (MATERIALIZED - 448)) | (1L << (MAX - 448)) | (1L << (MEMO - 448)) | (1L << (MERGE - 448)) | (1L << (MIGRATE - 448)) | (1L << (MIGRATIONS - 448)) | (1L << (MIN - 448)) | (1L << (MINUTE - 448)) | (1L << (MODIFY - 448)) | (1L << (MONTH - 448)) | (1L << (MTMV - 448)) | (1L << (NAME - 448)) | (1L << (NAMES - 448)) | (1L << (NEGATIVE - 448)) | (1L << (NEVER - 448)) | (1L << (NEXT - 448)) | (1L << (NGRAM_BF - 448)) | (1L << (NO - 448)) | (1L << (NON_NULLABLE - 448)) | (1L << (NULLS - 448)) | (1L << (OF - 448)) | (1L << (OFFSET - 448)) | (1L << (ONLY - 448)) | (1L << (OPEN - 448)) | (1L << (OPTIMIZED - 448)) | (1L << (PARAMETER - 448)) | (1L << (PARSED - 448)) | (1L << (PARTITIONS - 448)) | (1L << (PASSWORD - 448)) | (1L << (PASSWORD_EXPIRE - 448)) | (1L << (PASSWORD_HISTORY - 448)) | (1L << (PASSWORD_LOCK_TIME - 448)) | (1L << (PASSWORD_REUSE - 448)) | (1L << (PATH - 448)) | (1L << (PAUSE - 448)) | (1L << (PERCENT - 448)) | (1L << (PERIOD - 448)) | (1L << (PERMISSIVE - 448)) | (1L << (PHYSICAL - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PLAN - 512)) | (1L << (PROCESS - 512)) | (1L << (PLUGIN - 512)) | (1L << (PLUGINS - 512)) | (1L << (POLICY - 512)) | (1L << (PROC - 512)) | (1L << (PROCESSLIST - 512)) | (1L << (PROFILE - 512)) | (1L << (PROPERTIES - 512)) | (1L << (PROPERTY - 512)) | (1L << (QUANTILE_STATE - 512)) | (1L << (QUANTILE_UNION - 512)) | (1L << (QUERY - 512)) | (1L << (QUOTA - 512)) | (1L << (RANDOM - 512)) | (1L << (RECOVER - 512)) | (1L << (RECYCLE - 512)) | (1L << (REFRESH - 512)) | (1L << (REPEATABLE - 512)) | (1L << (REPLACE - 512)) | (1L << (REPLACE_IF_NOT_NULL - 512)) | (1L << (REPOSITORIES - 512)) | (1L << (REPOSITORY - 512)) | (1L << (RESOURCE - 512)) | (1L << (RESOURCES - 512)) | (1L << (RESTORE - 512)) | (1L << (RESTRICTIVE - 512)) | (1L << (RESUME - 512)) | (1L << (RETURNS - 512)) | (1L << (REWRITTEN - 512)) | (1L << (RLIKE - 512)) | (1L << (ROLLBACK - 512)) | (1L << (ROLLUP - 512)) | (1L << (ROUTINE - 512)) | (1L << (S3 - 512)) | (1L << (SAMPLE - 512)) | (1L << (SCHEDULE - 512)) | (1L << (SCHEDULER - 512)) | (1L << (SCHEMA - 512)) | (1L << (SECOND - 512)) | (1L << (SEQUENCE - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (SERIALIZABLE - 576)) | (1L << (SESSION - 576)) | (1L << (SHAPE - 576)) | (1L << (SKEW - 576)) | (1L << (SNAPSHOT - 576)) | (1L << (SONAME - 576)) | (1L << (SPLIT - 576)) | (1L << (START - 576)) | (1L << (STARTS - 576)) | (1L << (STATS - 576)) | (1L << (STATUS - 576)) | (1L << (STOP - 576)) | (1L << (STORAGE - 576)) | (1L << (STREAM - 576)) | (1L << (STREAMING - 576)) | (1L << (STRING - 576)) | (1L << (STRUCT - 576)) | (1L << (SUBDATE - 576)) | (1L << (SUM - 576)) | (1L << (TABLES - 576)) | (1L << (TASK - 576)) | (1L << (TASKS - 576)) | (1L << (TEMPORARY - 576)) | (1L << (TEXT - 576)) | (1L << (THAN - 576)) | (1L << (TIME - 576)) | (1L << (TIMESTAMP - 576)) | (1L << (TIMESTAMPADD - 576)) | (1L << (TIMESTAMPDIFF - 576)) | (1L << (TRANSACTION - 576)) | (1L << (TREE - 576)) | (1L << (TRIGGERS - 576)) | (1L << (TRUNCATE - 576)) | (1L << (TYPE - 576)) | (1L << (TYPES - 576)) | (1L << (UNCOMMITTED - 576)) | (1L << (UNLOCK - 576)))) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & ((1L << (USER - 642)) | (1L << (VALUE - 642)) | (1L << (VARCHAR - 642)) | (1L << (VARIABLES - 642)) | (1L << (VARIANT - 642)) | (1L << (VERBOSE - 642)) | (1L << (VERSION - 642)) | (1L << (VIEW - 642)) | (1L << (WARNINGS - 642)) | (1L << (WEEK - 642)) | (1L << (WORK - 642)) | (1L << (YEAR - 642)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 4:
			return block_end_sempred((Block_endContext)_localctx, predIndex);
		case 12:
			return expr_stmt_sempred((Expr_stmtContext)_localctx, predIndex);
		case 49:
			return create_routine_params_sempred((Create_routine_paramsContext)_localctx, predIndex);
		case 90:
			return bool_expr_sempred((Bool_exprContext)_localctx, predIndex);
		case 96:
			return expr_sempred((ExprContext)_localctx, predIndex);
		case 117:
			return func_param_sempred((Func_paramContext)_localctx, predIndex);
		case 168:
			return queryTerm_sempred((QueryTermContext)_localctx, predIndex);
		case 171:
			return querySpecification_sempred((QuerySpecificationContext)_localctx, predIndex);
		case 239:
			return booleanExpression_sempred((BooleanExpressionContext)_localctx, predIndex);
		case 243:
			return valueExpression_sempred((ValueExpressionContext)_localctx, predIndex);
		case 245:
			return primaryExpression_sempred((PrimaryExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean block_end_sempred(Block_endContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return !_input.LT(2).getText().equalsIgnoreCase("TRANSACTION");
		}
		return true;
	}
	private boolean expr_stmt_sempred(Expr_stmtContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1:
			return !_input.LT(1).getText().equalsIgnoreCase("GO");
		}
		return true;
	}
	private boolean create_routine_params_sempred(Create_routine_paramsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2:
			return !_input.LT(1).getText().equalsIgnoreCase("IS") &&
		        !_input.LT(1).getText().equalsIgnoreCase("AS") &&
		        !(_input.LT(1).getText().equalsIgnoreCase("DYNAMIC") && _input.LT(2).getText().equalsIgnoreCase("RESULT"))
		        ;
		}
		return true;
	}
	private boolean bool_expr_sempred(Bool_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4:
			return precpred(_ctx, 13);
		case 5:
			return precpred(_ctx, 12);
		case 6:
			return precpred(_ctx, 14);
		}
		return true;
	}
	private boolean func_param_sempred(Func_paramContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7:
			return !_input.LT(1).getText().equalsIgnoreCase("INTO");
		}
		return true;
	}
	private boolean queryTerm_sempred(QueryTermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean querySpecification_sempred(QuerySpecificationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9:
			return doris_legacy_SQL_syntax;
		}
		return true;
	}
	private boolean booleanExpression_sempred(BooleanExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10:
			return precpred(_ctx, 3);
		case 11:
			return precpred(_ctx, 2);
		case 12:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean valueExpression_sempred(ValueExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 13:
			return precpred(_ctx, 4);
		case 14:
			return precpred(_ctx, 3);
		case 15:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean primaryExpression_sempred(PrimaryExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 16:
			return precpred(_ctx, 11);
		case 17:
			return precpred(_ctx, 10);
		case 18:
			return precpred(_ctx, 5);
		case 19:
			return precpred(_ctx, 1);
		}
		return true;
	}

	private static final int _serializedATNSegments = 3;
	private static final String _serializedATNSegment0 =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u02c1\u1296\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\3\2\3\2\3\2\3\3\3\3\5\3\u0230\n\3\3\3\5\3\u0233\n\3\6\3\u0235"+
		"\n\3\r\3\16\3\u0236\3\4\5\4\u023a\n\4\3\4\3\4\3\4\5\4\u023f\n\4\3\4\3"+
		"\4\3\5\3\5\3\5\5\5\u0246\n\5\3\5\3\5\3\5\3\5\5\5\u024c\n\5\5\5\u024e\n"+
		"\5\3\6\3\6\3\6\3\7\3\7\6\7\u0255\n\7\r\7\16\7\u0256\3\7\5\7\u025a\n\7"+
		"\5\7\u025c\n\7\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t"+
		"\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3"+
		"\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\5\t\u0288\n\t\3\n\3\n\3\13"+
		"\3\13\6\13\u028e\n\13\r\13\16\13\u028f\3\f\3\f\3\f\3\f\3\f\3\f\3\r\3\r"+
		"\3\16\3\16\3\16\3\17\3\17\3\17\5\17\u02a0\n\17\3\17\3\17\3\17\7\17\u02a5"+
		"\n\17\f\17\16\17\u02a8\13\17\5\17\u02aa\n\17\3\20\3\20\3\20\3\20\5\20"+
		"\u02b0\n\20\3\21\3\21\5\21\u02b4\n\21\3\21\3\21\3\21\3\21\3\21\3\21\3"+
		"\21\5\21\u02bd\n\21\3\21\3\21\3\21\5\21\u02c2\n\21\3\22\3\22\3\22\3\22"+
		"\3\22\3\23\3\23\3\23\3\23\7\23\u02cd\n\23\f\23\16\23\u02d0\13\23\3\23"+
		"\3\23\5\23\u02d4\n\23\3\23\3\23\3\23\3\23\3\23\7\23\u02db\n\23\f\23\16"+
		"\23\u02de\13\23\3\23\3\23\3\24\3\24\3\24\3\24\3\24\7\24\u02e7\n\24\f\24"+
		"\16\24\u02ea\13\24\3\24\3\24\5\24\u02ee\n\24\3\24\5\24\u02f1\n\24\3\24"+
		"\3\24\3\24\3\24\3\24\3\25\3\25\3\25\3\25\3\25\3\25\3\25\5\25\u02ff\n\25"+
		"\3\25\3\25\3\26\3\26\3\26\5\26\u0306\n\26\3\26\3\26\3\26\3\26\3\26\7\26"+
		"\u030d\n\26\f\26\16\26\u0310\13\26\3\26\3\26\3\26\3\26\3\26\3\27\3\27"+
		"\3\30\3\30\3\30\3\30\5\30\u031d\n\30\3\31\3\31\3\31\3\31\7\31\u0323\n"+
		"\31\f\31\16\31\u0326\13\31\3\32\3\32\3\32\3\32\3\32\3\32\7\32\u032e\n"+
		"\32\f\32\16\32\u0331\13\32\3\33\3\33\3\33\3\33\3\33\7\33\u0338\n\33\f"+
		"\33\16\33\u033b\13\33\3\34\3\34\3\34\3\34\5\34\u0341\n\34\3\35\3\35\3"+
		"\35\7\35\u0346\n\35\f\35\16\35\u0349\13\35\3\35\5\35\u034c\n\35\3\35\3"+
		"\35\5\35\u0350\n\35\3\35\7\35\u0353\n\35\f\35\16\35\u0356\13\35\3\35\5"+
		"\35\u0359\n\35\3\35\3\35\3\35\5\35\u035e\n\35\3\35\3\35\5\35\u0362\n\35"+
		"\3\35\3\35\5\35\u0366\n\35\3\36\3\36\3\36\3\37\3\37\3\37\3\37\3\37\5\37"+
		"\u0370\n\37\3\37\3\37\5\37\u0374\n\37\3\37\3\37\3\37\5\37\u0379\n\37\3"+
		" \3 \3 \5 \u037e\n \3 \3 \5 \u0382\n \3!\3!\3!\3\"\3\"\3\"\3\"\3\"\3\""+
		"\3\"\3\"\5\"\u038f\n\"\3\"\3\"\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\5#"+
		"\u039f\n#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#"+
		"\3#\3#\3#\3#\3#\3#\3#\3#\3#\5#\u03be\n#\5#\u03c0\n#\3$\3$\3$\5$\u03c5"+
		"\n$\3$\3$\5$\u03c9\n$\3$\3$\3%\5%\u03ce\n%\3%\3%\3%\3%\3%\5%\u03d5\n%"+
		"\3%\5%\u03d8\n%\3&\5&\u03db\n&\3&\3&\3&\5&\u03e0\n&\3&\3&\5&\u03e4\n&"+
		"\5&\u03e6\n&\3\'\3\'\3\'\3\'\5\'\u03ec\n\'\3\'\5\'\u03ef\n\'\3\'\3\'\3"+
		"\'\5\'\u03f4\n\'\3\'\3\'\5\'\u03f8\n\'\3\'\5\'\u03fb\n\'\3\'\3\'\3(\3"+
		"(\3(\5(\u0402\n(\3)\3)\3)\3)\5)\u0408\n)\3)\5)\u040b\n)\3)\3)\3)\3)\3"+
		")\3)\3)\3)\5)\u0415\n)\3*\3*\3*\3*\3*\7*\u041c\n*\f*\16*\u041f\13*\3+"+
		"\3+\3+\3+\5+\u0425\n+\3+\3+\3+\3+\3+\5+\u042c\n+\5+\u042e\n+\3,\3,\3,"+
		"\3,\5,\u0434\n,\3,\5,\u0437\n,\3,\3,\3,\3,\3,\3,\3,\3,\3,\5,\u0442\n,"+
		"\3-\3-\3-\3-\3-\7-\u0449\n-\f-\16-\u044c\13-\3.\3.\3.\5.\u0451\n.\3/\3"+
		"/\3/\3/\5/\u0457\n/\3/\5/\u045a\n/\3/\3/\3/\5/\u045f\n/\3/\5/\u0462\n"+
		"/\3/\5/\u0465\n/\3/\5/\u0468\n/\3/\5/\u046b\n/\3/\3/\3/\3/\5/\u0471\n"+
		"/\3\60\3\60\3\60\3\60\5\60\u0477\n\60\3\60\3\60\3\61\3\61\3\61\3\61\3"+
		"\61\3\61\5\61\u0481\n\61\3\62\3\62\3\62\3\62\3\62\3\63\3\63\3\63\3\63"+
		"\3\63\3\63\7\63\u048e\n\63\f\63\16\63\u0491\13\63\3\63\3\63\3\63\3\63"+
		"\3\63\3\63\7\63\u0499\n\63\f\63\16\63\u049c\13\63\5\63\u049e\n\63\3\64"+
		"\3\64\3\64\3\64\3\64\5\64\u04a5\n\64\3\64\3\64\3\64\5\64\u04aa\n\64\3"+
		"\64\7\64\u04ad\n\64\f\64\16\64\u04b0\13\64\3\64\5\64\u04b3\n\64\3\64\3"+
		"\64\3\64\3\64\3\64\3\64\5\64\u04bb\n\64\3\64\3\64\5\64\u04bf\n\64\3\64"+
		"\7\64\u04c2\n\64\f\64\16\64\u04c5\13\64\3\64\5\64\u04c8\n\64\5\64\u04ca"+
		"\n\64\3\65\6\65\u04cd\n\65\r\65\16\65\u04ce\3\66\3\66\3\66\3\66\3\66\3"+
		"\66\5\66\u04d7\n\66\3\66\3\66\3\66\5\66\u04dc\n\66\3\67\3\67\5\67\u04e0"+
		"\n\67\3\67\3\67\3\67\3\67\3\67\3\67\5\67\u04e8\n\67\3\67\3\67\3\67\3\67"+
		"\7\67\u04ee\n\67\f\67\16\67\u04f1\13\67\5\67\u04f3\n\67\3\67\5\67\u04f6"+
		"\n\67\38\38\38\58\u04fb\n8\39\39\39\39\39\79\u0502\n9\f9\169\u0505\13"+
		"9\39\59\u0508\n9\39\39\39\3:\3:\3:\3:\3:\5:\u0512\n:\3;\3;\3;\3;\3;\3"+
		";\3<\3<\3<\3<\3<\3=\3=\3=\3>\3>\3>\5>\u0525\n>\3?\3?\5?\u0529\n?\3?\3"+
		"?\5?\u052d\n?\3@\3@\3@\3@\3A\3A\5A\u0535\nA\3B\3B\3B\3B\3B\3B\3C\3C\3"+
		"C\3C\3D\3D\5D\u0543\nD\3E\3E\3E\3E\3E\5E\u054a\nE\3E\3E\5E\u054e\nE\3"+
		"F\3F\3F\3F\3F\5F\u0555\nF\5F\u0557\nF\3G\3G\5G\u055b\nG\3G\3G\5G\u055f"+
		"\nG\3G\3G\3G\3G\7G\u0565\nG\fG\16G\u0568\13G\3G\5G\u056b\nG\3H\3H\3H\3"+
		"I\3I\3I\3J\3J\3J\3J\3J\3J\3J\5J\u057a\nJ\3K\5K\u057d\nK\3K\3K\5K\u0581"+
		"\nK\3L\3L\3M\3M\3M\5M\u0588\nM\3M\3M\3M\3M\3M\5M\u058f\nM\5M\u0591\nM"+
		"\3N\3N\5N\u0595\nN\3O\3O\3O\3O\5O\u059b\nO\3P\5P\u059e\nP\3P\3P\3P\3P"+
		"\3Q\5Q\u05a5\nQ\3Q\3Q\5Q\u05a9\nQ\3Q\5Q\u05ac\nQ\3Q\3Q\3R\3R\3R\3S\3S"+
		"\3S\3S\5S\u05b7\nS\3S\5S\u05ba\nS\3S\3S\3S\3T\3T\3T\3U\3U\5U\u05c4\nU"+
		"\3U\3U\3U\7U\u05c9\nU\fU\16U\u05cc\13U\3U\5U\u05cf\nU\3U\3U\5U\u05d3\n"+
		"U\3U\3U\3U\7U\u05d8\nU\fU\16U\u05db\13U\3U\5U\u05de\nU\3V\3V\3V\3V\3V"+
		"\3V\5V\u05e6\nV\3W\3W\3W\3W\3W\3X\3X\3X\3X\5X\u05f1\nX\3X\3X\5X\u05f5"+
		"\nX\3X\3X\3X\3X\3X\3Y\3Y\3Y\3Y\5Y\u0600\nY\3Y\3Y\3Y\3Y\3Y\5Y\u0607\nY"+
		"\3Y\3Y\3Y\3Y\3Y\3Z\3Z\3Z\3Z\3Z\3Z\3Z\5Z\u0615\nZ\3[\3[\3[\3[\7[\u061b"+
		"\n[\f[\16[\u061e\13[\3\\\3\\\5\\\u0622\n\\\3\\\3\\\3\\\3\\\3\\\5\\\u0629"+
		"\n\\\3\\\3\\\3\\\3\\\7\\\u062f\n\\\f\\\16\\\u0632\13\\\3]\3]\3]\5]\u0637"+
		"\n]\3^\3^\3^\5^\u063c\n^\3^\3^\3^\3^\3^\3^\3^\3^\5^\u0646\n^\3_\3_\3_"+
		"\3_\3`\3`\3a\3a\3a\3a\3a\3a\3a\5a\u0655\na\3a\5a\u0658\na\3b\3b\3b\3b"+
		"\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\5b\u066c\nb\3b\3b\3b\3b\3b"+
		"\3b\3b\3b\7b\u0676\nb\fb\16b\u0679\13b\3c\3c\3c\3c\3c\3c\3c\3c\5c\u0683"+
		"\nc\3d\3d\3d\3d\3e\3e\3f\3f\3f\3f\3f\7f\u0690\nf\ff\16f\u0693\13f\3g\3"+
		"g\3g\3g\3g\3g\3g\3g\3g\3g\5g\u069f\ng\3h\3h\5h\u06a3\nh\3i\3i\3i\3i\3"+
		"i\3i\3i\6i\u06ac\ni\ri\16i\u06ad\3i\3i\5i\u06b2\ni\3i\3i\3j\3j\3j\3j\3"+
		"j\3j\6j\u06bc\nj\rj\16j\u06bd\3j\3j\5j\u06c2\nj\3j\3j\3k\3k\3k\3k\3l\3"+
		"l\3l\5l\u06cd\nl\3l\3l\3l\5l\u06d2\nl\3l\3l\3l\5l\u06d7\nl\3l\3l\5l\u06db"+
		"\nl\3l\3l\5l\u06df\nl\3l\3l\3l\5l\u06e4\nl\3l\3l\5l\u06e8\nl\3l\3l\5l"+
		"\u06ec\nl\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l"+
		"\3l\5l\u0703\nl\5l\u0705\nl\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l"+
		"\3l\3l\5l\u0717\nl\5l\u0719\nl\3l\3l\3l\3l\3l\3l\5l\u0721\nl\3l\3l\3l"+
		"\5l\u0726\nl\3l\3l\3l\5l\u072b\nl\3l\3l\3l\5l\u0730\nl\3l\3l\3l\3l\3l"+
		"\3l\3l\3l\3l\3l\3l\5l\u073d\nl\3l\3l\3l\5l\u0742\nl\3l\3l\3l\5l\u0747"+
		"\nl\3l\3l\3l\5l\u074c\nl\3l\3l\3l\5l\u0751\nl\3l\3l\3l\5l\u0756\nl\3l"+
		"\3l\3l\5l\u075b\nl\3l\3l\3l\5l\u0760\nl\5l\u0762\nl\3m\3m\3n\3n\3n\3n"+
		"\5n\u076a\nn\3n\3n\3n\5n\u076f\nn\7n\u0771\nn\fn\16n\u0774\13n\3o\3o\3"+
		"o\5o\u0779\no\3o\5o\u077c\no\3o\3o\3p\3p\3p\3p\3p\7p\u0785\np\fp\16p\u0788"+
		"\13p\3q\3q\3q\3q\3q\3q\3q\5q\u0791\nq\3q\3q\3q\3q\3q\3q\5q\u0799\nq\3"+
		"q\3q\3q\3q\3q\3q\3q\5q\u07a2\nq\3q\3q\3q\3q\5q\u07a8\nq\3q\3q\3q\3q\3"+
		"q\3q\3q\3q\3q\3q\3q\3q\3q\7q\u07b7\nq\fq\16q\u07ba\13q\5q\u07bc\nq\3q"+
		"\3q\3q\3q\3q\3q\3q\3q\3q\3q\3q\3q\7q\u07ca\nq\fq\16q\u07cd\13q\5q\u07cf"+
		"\nq\3q\3q\3q\3q\3q\3q\3q\3q\3q\3q\3q\3q\7q\u07dd\nq\fq\16q\u07e0\13q\5"+
		"q\u07e2\nq\3q\3q\3q\3q\3q\3q\3q\3q\3q\3q\3q\3q\7q\u07f0\nq\fq\16q\u07f3"+
		"\13q\5q\u07f5\nq\3q\3q\3q\3q\3q\3q\3q\3q\3q\3q\3q\3q\7q\u0803\nq\fq\16"+
		"q\u0806\13q\5q\u0808\nq\3q\3q\3q\3q\3q\3q\3q\3q\3q\3q\3q\3q\7q\u0816\n"+
		"q\fq\16q\u0819\13q\5q\u081b\nq\3q\3q\3q\3q\3q\3q\3q\3q\3q\3q\7q\u0827"+
		"\nq\fq\16q\u082a\13q\3q\3q\3q\3q\3q\3q\3q\3q\3q\3q\6q\u0836\nq\rq\16q"+
		"\u0837\3q\3q\5q\u083c\nq\3q\3q\3q\3q\3q\3q\3q\3q\3q\3q\3q\3q\3q\3q\5q"+
		"\u084c\nq\3q\3q\3q\3q\5q\u0852\nq\3r\3r\3r\5r\u0857\nr\3r\3r\3s\3s\5s"+
		"\u085d\ns\3t\3t\5t\u0861\nt\3t\3t\3t\3u\3u\5u\u0868\nu\3u\3u\3u\3v\3v"+
		"\3v\7v\u0870\nv\fv\16v\u0873\13v\3w\3w\3w\3w\5w\u0879\nw\5w\u087b\nw\3"+
		"w\3w\3x\3x\3x\3x\3x\5x\u0884\nx\3y\7y\u0887\ny\fy\16y\u088a\13y\3z\3z"+
		"\3z\3{\3{\3{\3{\5{\u0893\n{\3{\3{\3{\7{\u0898\n{\f{\16{\u089b\13{\5{\u089d"+
		"\n{\3|\3|\3|\3}\3}\3}\3~\5~\u08a6\n~\3~\3~\3~\5~\u08ab\n~\3\177\3\177"+
		"\3\177\7\177\u08b0\n\177\f\177\16\177\u08b3\13\177\3\u0080\3\u0080\3\u0081"+
		"\5\u0081\u08b8\n\u0081\3\u0081\3\u0081\3\u0082\5\u0082\u08bd\n\u0082\3"+
		"\u0082\3\u0082\3\u0083\3\u0083\3\u0084\3\u0084\3\u0085\3\u0085\3\u0086"+
		"\3\u0086\7\u0086\u08c9\n\u0086\f\u0086\16\u0086\u08cc\13\u0086\6\u0086"+
		"\u08ce\n\u0086\r\u0086\16\u0086\u08cf\3\u0086\3\u0086\3\u0087\3\u0087"+
		"\7\u0087\u08d6\n\u0087\f\u0087\16\u0087\u08d9\13\u0087\3\u0087\3\u0087"+
		"\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\7\u0088\u08e4"+
		"\n\u0088\f\u0088\16\u0088\u08e7\13\u0088\5\u0088\u08e9\n\u0088\3\u0088"+
		"\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\5\u0088\u08f1\n\u0088\3\u0088"+
		"\5\u0088\u08f4\n\u0088\3\u0088\3\u0088\3\u0088\3\u0088\7\u0088\u08fa\n"+
		"\u0088\f\u0088\16\u0088\u08fd\13\u0088\3\u0088\3\u0088\7\u0088\u0901\n"+
		"\u0088\f\u0088\16\u0088\u0904\13\u0088\3\u0088\3\u0088\3\u0088\3\u0088"+
		"\5\u0088\u090a\n\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088"+
		"\3\u0088\5\u0088\u0913\n\u0088\3\u0088\3\u0088\3\u0088\3\u0088\5\u0088"+
		"\u0919\n\u0088\3\u0089\5\u0089\u091c\n\u0089\3\u0089\3\u0089\5\u0089\u0920"+
		"\n\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\5\u0089\u0928"+
		"\n\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089"+
		"\3\u0089\5\u0089\u0933\n\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089"+
		"\3\u0089\3\u0089\5\u0089\u093c\n\u0089\3\u0089\3\u0089\3\u0089\3\u0089"+
		"\5\u0089\u0942\n\u0089\3\u0089\3\u0089\5\u0089\u0946\n\u0089\3\u0089\3"+
		"\u0089\3\u0089\3\u0089\5\u0089\u094c\n\u0089\3\u0089\5\u0089\u094f\n\u0089"+
		"\3\u0089\3\u0089\5\u0089\u0953\n\u0089\3\u0089\3\u0089\3\u0089\5\u0089"+
		"\u0958\n\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\5\u0089"+
		"\u0960\n\u0089\5\u0089\u0962\n\u0089\3\u0089\3\u0089\5\u0089\u0966\n\u0089"+
		"\3\u0089\5\u0089\u0969\n\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089"+
		"\5\u0089\u0970\n\u0089\3\u0089\3\u0089\3\u0089\5\u0089\u0975\n\u0089\5"+
		"\u0089\u0977\n\u0089\5\u0089\u0979\n\u0089\3\u0089\3\u0089\3\u0089\3\u0089"+
		"\3\u0089\5\u0089\u0980\n\u0089\3\u0089\5\u0089\u0983\n\u0089\3\u0089\3"+
		"\u0089\5\u0089\u0987\n\u0089\3\u0089\3\u0089\5\u0089\u098b\n\u0089\3\u0089"+
		"\3\u0089\3\u0089\3\u0089\3\u0089\5\u0089\u0992\n\u0089\3\u0089\3\u0089"+
		"\3\u0089\3\u0089\3\u0089\5\u0089\u0999\n\u0089\3\u0089\3\u0089\5\u0089"+
		"\u099d\n\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089"+
		"\3\u0089\3\u0089\3\u0089\5\u0089\u09a9\n\u0089\3\u0089\3\u0089\3\u0089"+
		"\3\u0089\3\u0089\5\u0089\u09b0\n\u0089\3\u0089\3\u0089\3\u0089\3\u0089"+
		"\5\u0089\u09b6\n\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089"+
		"\5\u0089\u09be\n\u0089\5\u0089\u09c0\n\u0089\3\u0089\5\u0089\u09c3\n\u0089"+
		"\3\u0089\3\u0089\3\u0089\3\u0089\5\u0089\u09c9\n\u0089\3\u0089\3\u0089"+
		"\3\u0089\3\u0089\3\u0089\5\u0089\u09d0\n\u0089\3\u0089\5\u0089\u09d3\n"+
		"\u0089\3\u0089\3\u0089\3\u0089\5\u0089\u09d8\n\u0089\3\u0089\5\u0089\u09db"+
		"\n\u0089\3\u0089\3\u0089\3\u0089\3\u0089\5\u0089\u09e1\n\u0089\3\u0089"+
		"\3\u0089\5\u0089\u09e5\n\u0089\3\u0089\5\u0089\u09e8\n\u0089\3\u0089\3"+
		"\u0089\3\u0089\3\u0089\3\u0089\3\u0089\5\u0089\u09f0\n\u0089\3\u0089\5"+
		"\u0089\u09f3\n\u0089\3\u0089\5\u0089\u09f6\n\u0089\3\u0089\5\u0089\u09f9"+
		"\n\u0089\3\u0089\3\u0089\3\u0089\3\u0089\5\u0089\u09ff\n\u0089\3\u0089"+
		"\3\u0089\3\u0089\5\u0089\u0a04\n\u0089\3\u0089\5\u0089\u0a07\n\u0089\3"+
		"\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\7\u0089\u0a10\n"+
		"\u0089\f\u0089\16\u0089\u0a13\13\u0089\3\u0089\3\u0089\5\u0089\u0a17\n"+
		"\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\5\u0089\u0a1e\n\u0089\3"+
		"\u0089\5\u0089\u0a21\n\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3"+
		"\u0089\3\u0089\5\u0089\u0a2a\n\u0089\3\u0089\5\u0089\u0a2d\n\u0089\3\u0089"+
		"\3\u0089\3\u0089\3\u0089\3\u0089\5\u0089\u0a34\n\u0089\3\u0089\5\u0089"+
		"\u0a37\n\u0089\3\u0089\3\u0089\3\u0089\5\u0089\u0a3c\n\u0089\3\u0089\5"+
		"\u0089\u0a3f\n\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\5"+
		"\u0089\u0a47\n\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\5\u0089\u0a4e"+
		"\n\u0089\3\u0089\5\u0089\u0a51\n\u0089\3\u0089\3\u0089\5\u0089\u0a55\n"+
		"\u0089\3\u0089\5\u0089\u0a58\n\u0089\5\u0089\u0a5a\n\u0089\3\u0089\5\u0089"+
		"\u0a5d\n\u0089\3\u0089\3\u0089\5\u0089\u0a61\n\u0089\3\u0089\3\u0089\5"+
		"\u0089\u0a65\n\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\5"+
		"\u0089\u0a6d\n\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\5\u0089\u0a74"+
		"\n\u0089\3\u0089\3\u0089\5\u0089\u0a78\n\u0089\5\u0089\u0a7a\n\u0089\3"+
		"\u0089\5\u0089\u0a7d\n\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3"+
		"\u0089\3\u0089\3\u0089\3\u0089\3\u0089\5\u0089\u0a89\n\u0089\3\u0089\3"+
		"\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089"+
		"\3\u0089\3\u0089\5\u0089\u0a97\n\u0089\3\u0089\3\u0089\3\u0089\3\u0089"+
		"\3\u0089\5\u0089\u0a9e\n\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089"+
		"\5\u0089\u0aa5\n\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089"+
		"\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089"+
		"\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089"+
		"\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089"+
		"\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\5\u0089\u0acf"+
		"\n\u0089\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a"+
		"\3\u008a\3\u008a\3\u008a\5\u008a\u0adc\n\u008a\3\u008a\3\u008a\3\u008a"+
		"\5\u008a\u0ae1\n\u008a\3\u008a\3\u008a\3\u008a\3\u008a\5\u008a\u0ae7\n"+
		"\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\5\u008a\u0aef\n"+
		"\u008a\3\u008a\3\u008a\5\u008a\u0af3\n\u008a\3\u008a\3\u008a\3\u008a\3"+
		"\u008a\3\u008a\3\u008a\5\u008a\u0afb\n\u008a\3\u008a\3\u008a\3\u008a\3"+
		"\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\5\u008a"+
		"\u0b08\n\u008a\3\u008a\3\u008a\3\u008a\3\u008a\5\u008a\u0b0e\n\u008a\3"+
		"\u008a\3\u008a\3\u008a\5\u008a\u0b13\n\u008a\3\u008a\3\u008a\3\u008a\3"+
		"\u008a\5\u008a\u0b19\n\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3"+
		"\u008a\5\u008a\u0b21\n\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3"+
		"\u008a\3\u008a\3\u008a\5\u008a\u0b2b\n\u008a\3\u008a\3\u008a\3\u008a\3"+
		"\u008a\5\u008a\u0b31\n\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\5"+
		"\u008a\u0b38\n\u008a\3\u008a\5\u008a\u0b3b\n\u008a\3\u008a\3\u008a\5\u008a"+
		"\u0b3f\n\u008a\3\u008b\3\u008b\3\u008b\5\u008b\u0b44\n\u008b\5\u008b\u0b46"+
		"\n\u008b\3\u008b\3\u008b\3\u008b\3\u008b\5\u008b\u0b4c\n\u008b\3\u008b"+
		"\3\u008b\3\u008b\3\u008b\3\u008b\5\u008b\u0b53\n\u008b\3\u008c\3\u008c"+
		"\3\u008c\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d"+
		"\3\u008d\5\u008d\u0b61\n\u008d\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e"+
		"\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\5\u008e\u0b6f"+
		"\n\u008e\3\u008f\5\u008f\u0b72\n\u008f\3\u008f\3\u008f\3\u008f\5\u008f"+
		"\u0b77\n\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\5\u008f"+
		"\u0b7f\n\u008f\3\u0090\5\u0090\u0b82\n\u0090\3\u0090\3\u0090\3\u0090\5"+
		"\u0090\u0b87\n\u0090\3\u0090\3\u0090\3\u0090\5\u0090\u0b8c\n\u0090\3\u0090"+
		"\3\u0090\3\u0091\3\u0091\3\u0091\3\u0091\7\u0091\u0b94\n\u0091\f\u0091"+
		"\16\u0091\u0b97\13\u0091\3\u0091\3\u0091\3\u0092\3\u0092\5\u0092\u0b9d"+
		"\n\u0092\3\u0093\5\u0093\u0ba0\n\u0093\3\u0093\5\u0093\u0ba3\n\u0093\3"+
		"\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\7\u0093\u0bab\n\u0093\f"+
		"\u0093\16\u0093\u0bae\13\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093"+
		"\3\u0093\5\u0093\u0bb6\n\u0093\3\u0093\3\u0093\3\u0093\3\u0093\5\u0093"+
		"\u0bbc\n\u0093\3\u0093\3\u0093\3\u0093\3\u0093\5\u0093\u0bc2\n\u0093\3"+
		"\u0093\3\u0093\3\u0093\5\u0093\u0bc7\n\u0093\3\u0093\5\u0093\u0bca\n\u0093"+
		"\3\u0093\5\u0093\u0bcd\n\u0093\3\u0093\5\u0093\u0bd0\n\u0093\3\u0093\5"+
		"\u0093\u0bd3\n\u0093\3\u0093\5\u0093\u0bd6\n\u0093\3\u0093\5\u0093\u0bd9"+
		"\n\u0093\3\u0093\5\u0093\u0bdc\n\u0093\3\u0093\5\u0093\u0bdf\n\u0093\3"+
		"\u0093\5\u0093\u0be2\n\u0093\3\u0093\5\u0093\u0be5\n\u0093\3\u0093\3\u0093"+
		"\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\5\u0093\u0bf0"+
		"\n\u0093\3\u0093\5\u0093\u0bf3\n\u0093\3\u0093\5\u0093\u0bf6\n\u0093\3"+
		"\u0093\5\u0093\u0bf9\n\u0093\3\u0093\5\u0093\u0bfc\n\u0093\5\u0093\u0bfe"+
		"\n\u0093\3\u0094\3\u0094\3\u0094\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095"+
		"\5\u0095\u0c08\n\u0095\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\5\u0096"+
		"\u0c0f\n\u0096\3\u0097\3\u0097\3\u0098\3\u0098\5\u0098\u0c15\n\u0098\3"+
		"\u0099\3\u0099\3\u0099\5\u0099\u0c1a\n\u0099\3\u009a\3\u009a\3\u009a\3"+
		"\u009a\3\u009a\3\u009a\3\u009a\5\u009a\u0c23\n\u009a\5\u009a\u0c25\n\u009a"+
		"\3\u009b\3\u009b\5\u009b\u0c29\n\u009b\3\u009b\3\u009b\5\u009b\u0c2d\n"+
		"\u009b\3\u009b\5\u009b\u0c30\n\u009b\3\u009b\5\u009b\u0c33\n\u009b\3\u009c"+
		"\3\u009c\3\u009d\3\u009d\3\u009e\3\u009e\3\u009e\3\u009e\3\u009f\3\u009f"+
		"\3\u009f\3\u009f\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a1\3\u00a1\3\u00a1"+
		"\3\u00a1\3\u00a1\3\u00a1\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\7\u00a2"+
		"\u0c50\n\u00a2\f\u00a2\16\u00a2\u0c53\13\u00a2\3\u00a2\3\u00a2\3\u00a3"+
		"\3\u00a3\3\u00a3\3\u00a3\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4"+
		"\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4"+
		"\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4"+
		"\3\u00a4\3\u00a4\5\u00a4\u0c75\n\u00a4\5\u00a4\u0c77\n\u00a4\3\u00a5\3"+
		"\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\5\u00a5\u0c80\n\u00a5\3"+
		"\u00a6\3\u00a6\3\u00a6\5\u00a6\u0c85\n\u00a6\3\u00a6\3\u00a6\3\u00a6\3"+
		"\u00a6\3\u00a6\3\u00a6\3\u00a6\5\u00a6\u0c8e\n\u00a6\3\u00a6\3\u00a6\3"+
		"\u00a6\3\u00a6\5\u00a6\u0c94\n\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\5"+
		"\u00a6\u0c9a\n\u00a6\3\u00a6\5\u00a6\u0c9d\n\u00a6\3\u00a6\5\u00a6\u0ca0"+
		"\n\u00a6\3\u00a6\5\u00a6\u0ca3\n\u00a6\3\u00a6\5\u00a6\u0ca6\n\u00a6\3"+
		"\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\5\u00a7\u0cae\n\u00a7\3"+
		"\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\5\u00a8\u0cb6\n\u00a8\3"+
		"\u00a8\5\u00a8\u0cb9\n\u00a8\3\u00a9\5\u00a9\u0cbc\n\u00a9\3\u00a9\3\u00a9"+
		"\3\u00a9\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\5\u00aa\u0cc7"+
		"\n\u00aa\3\u00aa\7\u00aa\u0cca\n\u00aa\f\u00aa\16\u00aa\u0ccd\13\u00aa"+
		"\3\u00ab\3\u00ab\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\5\u00ac"+
		"\u0cd7\n\u00ac\3\u00ad\3\u00ad\5\u00ad\u0cdb\n\u00ad\3\u00ad\5\u00ad\u0cde"+
		"\n\u00ad\3\u00ad\5\u00ad\u0ce1\n\u00ad\3\u00ad\5\u00ad\u0ce4\n\u00ad\3"+
		"\u00ad\5\u00ad\u0ce7\n\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ae\3\u00ae\3"+
		"\u00ae\3\u00ae\7\u00ae\u0cf0\n\u00ae\f\u00ae\16\u00ae\u0cf3\13\u00ae\3"+
		"\u00af\3\u00af\5\u00af\u0cf7\n\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3"+
		"\u00af\3\u00b0\3\u00b0\3\u00b0\3\u00b0\7\u00b0\u0d02\n\u00b0\f\u00b0\16"+
		"\u00b0\u0d05\13\u00b0\3\u00b0\3\u00b0\3\u00b1\3\u00b1\5\u00b1\u0d0b\n"+
		"\u00b1\3\u00b1\5\u00b1\u0d0e\n\u00b1\3\u00b1\3\u00b1\3\u00b2\3\u00b2\3"+
		"\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\5\u00b2\u0d19\n\u00b2\3\u00b3\3"+
		"\u00b3\3\u00b3\3\u00b4\3\u00b4\3\u00b4\3\u00b5\5\u00b5\u0d22\n\u00b5\3"+
		"\u00b5\3\u00b5\3\u00b5\5\u00b5\u0d27\n\u00b5\3\u00b5\3\u00b5\3\u00b5\5"+
		"\u00b5\u0d2c\n\u00b5\7\u00b5\u0d2e\n\u00b5\f\u00b5\16\u00b5\u0d31\13\u00b5"+
		"\3\u00b6\3\u00b6\3\u00b6\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b8"+
		"\3\u00b8\3\u00b8\7\u00b8\u0d3e\n\u00b8\f\u00b8\16\u00b8\u0d41\13\u00b8"+
		"\3\u00b9\3\u00b9\7\u00b9\u0d45\n\u00b9\f\u00b9\16\u00b9\u0d48\13\u00b9"+
		"\3\u00ba\3\u00ba\3\u00ba\5\u00ba\u0d4d\n\u00ba\3\u00ba\3\u00ba\5\u00ba"+
		"\u0d51\n\u00ba\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb"+
		"\3\u00bb\5\u00bb\u0d5b\n\u00bb\3\u00bc\3\u00bc\3\u00bc\3\u00bc\7\u00bc"+
		"\u0d61\n\u00bc\f\u00bc\16\u00bc\u0d64\13\u00bc\3\u00bc\3\u00bc\3\u00bc"+
		"\3\u00bc\3\u00bc\3\u00bc\7\u00bc\u0d6c\n\u00bc\f\u00bc\16\u00bc\u0d6f"+
		"\13\u00bc\3\u00bc\3\u00bc\5\u00bc\u0d73\n\u00bc\3\u00bd\3\u00bd\3\u00bd"+
		"\3\u00bd\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\7\u00be\u0d7e\n\u00be"+
		"\f\u00be\16\u00be\u0d81\13\u00be\5\u00be\u0d83\n\u00be\3\u00be\3\u00be"+
		"\3\u00be\3\u00be\3\u00be\3\u00be\7\u00be\u0d8b\n\u00be\f\u00be\16\u00be"+
		"\u0d8e\13\u00be\5\u00be\u0d90\n\u00be\3\u00be\3\u00be\3\u00be\3\u00be"+
		"\3\u00be\3\u00be\3\u00be\7\u00be\u0d99\n\u00be\f\u00be\16\u00be\u0d9c"+
		"\13\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\7\u00be\u0da3\n\u00be"+
		"\f\u00be\16\u00be\u0da6\13\u00be\5\u00be\u0da8\n\u00be\3\u00bf\3\u00bf"+
		"\3\u00bf\3\u00bf\7\u00bf\u0dae\n\u00bf\f\u00bf\16\u00bf\u0db1\13\u00bf"+
		"\5\u00bf\u0db3\n\u00bf\3\u00bf\3\u00bf\3\u00c0\3\u00c0\3\u00c0\3\u00c1"+
		"\3\u00c1\3\u00c1\5\u00c1\u0dbd\n\u00c1\3\u00c1\7\u00c1\u0dc0\n\u00c1\f"+
		"\u00c1\16\u00c1\u0dc3\13\u00c1\3\u00c1\3\u00c1\3\u00c2\3\u00c2\3\u00c2"+
		"\3\u00c2\5\u00c2\u0dcb\n\u00c2\3\u00c2\7\u00c2\u0dce\n\u00c2\f\u00c2\16"+
		"\u00c2\u0dd1\13\u00c2\3\u00c2\3\u00c2\5\u00c2\u0dd5\n\u00c2\3\u00c3\3"+
		"\u00c3\3\u00c3\3\u00c3\5\u00c3\u0ddb\n\u00c3\5\u00c3\u0ddd\n\u00c3\3\u00c4"+
		"\3\u00c4\3\u00c4\3\u00c4\5\u00c4\u0de3\n\u00c4\3\u00c5\3\u00c5\3\u00c5"+
		"\7\u00c5\u0de8\n\u00c5\f\u00c5\16\u00c5\u0deb\13\u00c5\3\u00c6\3\u00c6"+
		"\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\7\u00c6\u0df4\n\u00c6\f\u00c6"+
		"\16\u00c6\u0df7\13\u00c6\5\u00c6\u0df9\n\u00c6\3\u00c6\3\u00c6\3\u00c6"+
		"\3\u00c6\3\u00c6\3\u00c6\7\u00c6\u0e01\n\u00c6\f\u00c6\16\u00c6\u0e04"+
		"\13\u00c6\3\u00c7\5\u00c7\u0e07\n\u00c7\3\u00c7\5\u00c7\u0e0a\n\u00c7"+
		"\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\7\u00c8\u0e11\n\u00c8\f\u00c8"+
		"\16\u00c8\u0e14\13\u00c8\3\u00c9\3\u00c9\5\u00c9\u0e18\n\u00c9\3\u00c9"+
		"\3\u00c9\5\u00c9\u0e1c\n\u00c9\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca"+
		"\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u0e28\n\u00ca\3\u00cb"+
		"\3\u00cb\3\u00cb\3\u00cb\3\u00cb\7\u00cb\u0e2f\n\u00cb\f\u00cb\16\u00cb"+
		"\u0e32\13\u00cb\3\u00cc\5\u00cc\u0e35\n\u00cc\3\u00cc\3\u00cc\3\u00cc"+
		"\5\u00cc\u0e3a\n\u00cc\3\u00cc\3\u00cc\5\u00cc\u0e3e\n\u00cc\3\u00cc\3"+
		"\u00cc\5\u00cc\u0e42\n\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3"+
		"\u00cc\3\u00cc\3\u00cc\5\u00cc\u0e4c\n\u00cc\3\u00cd\3\u00cd\3\u00cd\3"+
		"\u00cd\5\u00cd\u0e52\n\u00cd\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00cf\3"+
		"\u00cf\3\u00cf\7\u00cf\u0e5b\n\u00cf\f\u00cf\16\u00cf\u0e5e\13\u00cf\3"+
		"\u00d0\3\u00d0\3\u00d0\3\u00d0\5\u00d0\u0e64\n\u00d0\3\u00d0\3\u00d0\3"+
		"\u00d1\3\u00d1\5\u00d1\u0e6a\n\u00d1\3\u00d1\5\u00d1\u0e6d\n\u00d1\3\u00d1"+
		"\5\u00d1\u0e70\n\u00d1\3\u00d1\5\u00d1\u0e73\n\u00d1\3\u00d1\3\u00d1\5"+
		"\u00d1\u0e77\n\u00d1\3\u00d1\5\u00d1\u0e7a\n\u00d1\3\u00d1\7\u00d1\u0e7d"+
		"\n\u00d1\f\u00d1\16\u00d1\u0e80\13\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1"+
		"\3\u00d1\7\u00d1\u0e87\n\u00d1\f\u00d1\16\u00d1\u0e8a\13\u00d1\3\u00d1"+
		"\3\u00d1\3\u00d1\5\u00d1\u0e8f\n\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1"+
		"\3\u00d1\3\u00d1\3\u00d1\5\u00d1\u0e98\n\u00d1\3\u00d2\3\u00d2\3\u00d2"+
		"\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d4\3\u00d4\3\u00d4\7\u00d4"+
		"\u0ea5\n\u00d4\f\u00d4\16\u00d4\u0ea8\13\u00d4\3\u00d5\3\u00d5\3\u00d5"+
		"\3\u00d5\3\u00d6\3\u00d6\5\u00d6\u0eb0\n\u00d6\3\u00d7\3\u00d7\5\u00d7"+
		"\u0eb4\n\u00d7\3\u00d8\5\u00d8\u0eb7\n\u00d8\3\u00d8\3\u00d8\5\u00d8\u0ebb"+
		"\n\u00d8\5\u00d8\u0ebd\n\u00d8\3\u00d9\3\u00d9\3\u00d9\7\u00d9\u0ec2\n"+
		"\u00d9\f\u00d9\16\u00d9\u0ec5\13\u00d9\3\u00da\3\u00da\3\u00da\7\u00da"+
		"\u0eca\n\u00da\f\u00da\16\u00da\u0ecd\13\u00da\3\u00db\3\u00db\3\u00db"+
		"\5\u00db\u0ed2\n\u00db\3\u00dc\3\u00dc\3\u00dc\7\u00dc\u0ed7\n\u00dc\f"+
		"\u00dc\16\u00dc\u0eda\13\u00dc\3\u00dd\3\u00dd\3\u00dd\5\u00dd\u0edf\n"+
		"\u00dd\3\u00dd\5\u00dd\u0ee2\n\u00dd\3\u00dd\5\u00dd\u0ee5\n\u00dd\3\u00dd"+
		"\5\u00dd\u0ee8\n\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\5\u00dd"+
		"\u0eef\n\u00dd\5\u00dd\u0ef1\n\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3"+
		"\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\5\u00dd\u0efd\n\u00dd\5"+
		"\u00dd\u0eff\n\u00dd\5\u00dd\u0f01\n\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\3\u00dd\5\u00dd\u0f0a\n\u00dd\5\u00dd\u0f0c\n\u00dd\3"+
		"\u00dd\3\u00dd\5\u00dd\u0f10\n\u00dd\3\u00de\3\u00de\3\u00de\7\u00de\u0f15"+
		"\n\u00de\f\u00de\16\u00de\u0f18\13\u00de\3\u00df\3\u00df\3\u00df\3\u00df"+
		"\3\u00df\5\u00df\u0f1f\n\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df"+
		"\5\u00df\u0f26\n\u00df\3\u00df\3\u00df\5\u00df\u0f2a\n\u00df\3\u00e0\3"+
		"\u00e0\3\u00e0\7\u00e0\u0f2f\n\u00e0\f\u00e0\16\u00e0\u0f32\13\u00e0\3"+
		"\u00e1\3\u00e1\3\u00e1\3\u00e1\5\u00e1\u0f38\n\u00e1\3\u00e1\3\u00e1\3"+
		"\u00e1\3\u00e1\5\u00e1\u0f3e\n\u00e1\3\u00e2\3\u00e2\3\u00e2\3\u00e2\5"+
		"\u00e2\u0f44\n\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\5"+
		"\u00e2\u0f4c\n\u00e2\3\u00e3\3\u00e3\3\u00e3\3\u00e3\5\u00e3\u0f52\n\u00e3"+
		"\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e4"+
		"\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\5\u00e4\u0f63\n\u00e4"+
		"\3\u00e5\3\u00e5\3\u00e5\3\u00e5\5\u00e5\u0f69\n\u00e5\3\u00e5\3\u00e5"+
		"\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\7\u00e5\u0f72\n\u00e5\f\u00e5"+
		"\16\u00e5\u0f75\13\u00e5\3\u00e5\3\u00e5\3\u00e5\5\u00e5\u0f7a\n\u00e5"+
		"\5\u00e5\u0f7c\n\u00e5\3\u00e6\3\u00e6\3\u00e6\3\u00e6\7\u00e6\u0f82\n"+
		"\u00e6\f\u00e6\16\u00e6\u0f85\13\u00e6\3\u00e6\3\u00e6\3\u00e7\3\u00e7"+
		"\3\u00e8\3\u00e8\3\u00e8\7\u00e8\u0f8e\n\u00e8\f\u00e8\16\u00e8\u0f91"+
		"\13\u00e8\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\5\u00e9\u0f98\n\u00e9"+
		"\3\u00e9\5\u00e9\u0f9b\n\u00e9\3\u00ea\3\u00ea\3\u00eb\3\u00eb\3\u00eb"+
		"\3\u00eb\3\u00eb\7\u00eb\u0fa4\n\u00eb\f\u00eb\16\u00eb\u0fa7\13\u00eb"+
		"\3\u00eb\3\u00eb\3\u00ec\3\u00ec\3\u00ec\3\u00ec\7\u00ec\u0faf\n\u00ec"+
		"\f\u00ec\16\u00ec\u0fb2\13\u00ec\3\u00ed\3\u00ed\5\u00ed\u0fb6\n\u00ed"+
		"\3\u00ed\5\u00ed\u0fb9\n\u00ed\3\u00ee\3\u00ee\3\u00ee\7\u00ee\u0fbe\n"+
		"\u00ee\f\u00ee\16\u00ee\u0fc1\13\u00ee\3\u00ef\3\u00ef\5\u00ef\u0fc5\n"+
		"\u00ef\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0"+
		"\6\u00f0\u0fcf\n\u00f0\r\u00f0\16\u00f0\u0fd0\3\u00f0\3\u00f0\3\u00f0"+
		"\3\u00f0\5\u00f0\u0fd7\n\u00f0\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1"+
		"\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1"+
		"\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\5\u00f1\u0fed\n\u00f1"+
		"\5\u00f1\u0fef\n\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1"+
		"\3\u00f1\3\u00f1\3\u00f1\7\u00f1\u0ffa\n\u00f1\f\u00f1\16\u00f1\u0ffd"+
		"\13\u00f1\3\u00f2\3\u00f2\3\u00f2\3\u00f2\7\u00f2\u1003\n\u00f2\f\u00f2"+
		"\16\u00f2\u1006\13\u00f2\5\u00f2\u1008\n\u00f2\3\u00f2\3\u00f2\3\u00f3"+
		"\3\u00f3\5\u00f3\u100e\n\u00f3\3\u00f4\5\u00f4\u1011\n\u00f4\3\u00f4\3"+
		"\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\5\u00f4\u1019\n\u00f4\3\u00f4\3"+
		"\u00f4\3\u00f4\5\u00f4\u101e\n\u00f4\3\u00f4\3\u00f4\3\u00f4\5\u00f4\u1023"+
		"\n\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\5\u00f4\u102b"+
		"\n\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\7\u00f4\u1032\n\u00f4"+
		"\f\u00f4\16\u00f4\u1035\13\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\5\u00f4"+
		"\u103b\n\u00f4\3\u00f4\5\u00f4\u103e\n\u00f4\3\u00f5\3\u00f5\3\u00f5\3"+
		"\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\5\u00f5"+
		"\u104b\n\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5"+
		"\3\u00f5\3\u00f5\3\u00f5\7\u00f5\u1057\n\u00f5\f\u00f5\16\u00f5\u105a"+
		"\13\u00f5\3\u00f6\3\u00f6\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7"+
		"\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7"+
		"\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7"+
		"\3\u00f7\3\u00f7\3\u00f7\3\u00f7\5\u00f7\u107a\n\u00f7\3\u00f7\3\u00f7"+
		"\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7"+
		"\5\u00f7\u1087\n\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7"+
		"\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\5\u00f7\u1094\n\u00f7\3\u00f7"+
		"\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7"+
		"\3\u00f7\5\u00f7\u10a1\n\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7"+
		"\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\5\u00f7"+
		"\u10b0\n\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7"+
		"\3\u00f7\3\u00f7\3\u00f7\6\u00f7\u10bc\n\u00f7\r\u00f7\16\u00f7\u10bd"+
		"\3\u00f7\3\u00f7\5\u00f7\u10c2\n\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7"+
		"\3\u00f7\6\u00f7\u10c9\n\u00f7\r\u00f7\16\u00f7\u10ca\3\u00f7\3\u00f7"+
		"\5\u00f7\u10cf\n\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7"+
		"\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7"+
		"\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\7\u00f7\u10e6\n\u00f7"+
		"\f\u00f7\16\u00f7\u10e9\13\u00f7\3\u00f7\3\u00f7\5\u00f7\u10ed\n\u00f7"+
		"\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7"+
		"\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7"+
		"\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\5\u00f7"+
		"\u1109\n\u00f7\3\u00f7\3\u00f7\5\u00f7\u110d\n\u00f7\3\u00f7\3\u00f7\3"+
		"\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\5\u00f7\u1118\n"+
		"\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\5\u00f7\u1120\n"+
		"\u00f7\3\u00f7\3\u00f7\3\u00f7\5\u00f7\u1125\n\u00f7\3\u00f7\3\u00f7\3"+
		"\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\5\u00f7"+
		"\u1131\n\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7"+
		"\3\u00f7\3\u00f7\3\u00f7\5\u00f7\u113d\n\u00f7\7\u00f7\u113f\n\u00f7\f"+
		"\u00f7\16\u00f7\u1142\13\u00f7\3\u00f8\3\u00f8\3\u00f8\5\u00f8\u1147\n"+
		"\u00f8\3\u00f8\3\u00f8\3\u00f8\7\u00f8\u114c\n\u00f8\f\u00f8\16\u00f8"+
		"\u114f\13\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\7\u00f8\u1156"+
		"\n\u00f8\f\u00f8\16\u00f8\u1159\13\u00f8\5\u00f8\u115b\n\u00f8\5\u00f8"+
		"\u115d\n\u00f8\3\u00f8\3\u00f8\3\u00f8\5\u00f8\u1162\n\u00f8\3\u00f9\3"+
		"\u00f9\3\u00f9\5\u00f9\u1167\n\u00f9\3\u00f9\3\u00f9\3\u00fa\3\u00fa\3"+
		"\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa"+
		"\3\u00fa\3\u00fa\3\u00fa\3\u00fa\5\u00fa\u117a\n\u00fa\3\u00fb\3\u00fb"+
		"\5\u00fb\u117e\n\u00fb\3\u00fb\5\u00fb\u1181\n\u00fb\3\u00fb\5\u00fb\u1184"+
		"\n\u00fb\3\u00fb\3\u00fb\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc"+
		"\3\u00fc\3\u00fc\3\u00fc\5\u00fc\u1191\n\u00fc\3\u00fd\3\u00fd\3\u00fe"+
		"\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\5\u00fe\u119c\n\u00fe"+
		"\3\u00ff\3\u00ff\3\u00ff\7\u00ff\u11a1\n\u00ff\f\u00ff\16\u00ff\u11a4"+
		"\13\u00ff\3\u0100\5\u0100\u11a7\n\u0100\3\u0100\3\u0100\3\u0100\5\u0100"+
		"\u11ac\n\u0100\3\u0100\5\u0100\u11af\n\u0100\3\u0100\3\u0100\5\u0100\u11b3"+
		"\n\u0100\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101\5\u0101\u11bb"+
		"\n\u0101\3\u0101\3\u0101\3\u0101\5\u0101\u11c0\n\u0101\3\u0101\3\u0101"+
		"\7\u0101\u11c4\n\u0101\f\u0101\16\u0101\u11c7\13\u0101\3\u0101\3\u0101"+
		"\3\u0101\3\u0101\3\u0101\3\u0101\5\u0101\u11cf\n\u0101\3\u0101\3\u0101"+
		"\3\u0101\3\u0101\3\u0101\7\u0101\u11d6\n\u0101\f\u0101\16\u0101\u11d9"+
		"\13\u0101\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101\7\u0101\u11e0\n\u0101"+
		"\f\u0101\16\u0101\u11e3\13\u0101\3\u0101\3\u0101\5\u0101\u11e7\n\u0101"+
		"\3\u0102\3\u0102\3\u0103\3\u0103\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104"+
		"\3\u0105\3\u0105\3\u0105\3\u0105\3\u0106\3\u0106\3\u0107\3\u0107\5\u0107"+
		"\u11fa\n\u0107\3\u0107\5\u0107\u11fd\n\u0107\3\u0108\3\u0108\3\u0108\3"+
		"\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108"+
		"\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108"+
		"\3\u0108\3\u0108\3\u0108\7\u0108\u1217\n\u0108\f\u0108\16\u0108\u121a"+
		"\13\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108"+
		"\7\u0108\u1224\n\u0108\f\u0108\16\u0108\u1227\13\u0108\3\u0108\5\u0108"+
		"\u122a\n\u0108\5\u0108\u122c\n\u0108\3\u0109\3\u0109\3\u0109\3\u0109\5"+
		"\u0109\u1232\n\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3"+
		"\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109"+
		"\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109"+
		"\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\5\u0109\u1252\n\u0109"+
		"\3\u010a\3\u010a\3\u010a\7\u010a\u1257\n\u010a\f\u010a\16\u010a\u125a"+
		"\13\u010a\3\u010b\3\u010b\3\u010b\3\u010b\5\u010b\u1260\n\u010b\3\u010c"+
		"\3\u010c\3\u010c\3\u010d\3\u010d\3\u010d\5\u010d\u1268\n\u010d\3\u010d"+
		"\3\u010d\3\u010d\5\u010d\u126d\n\u010d\3\u010e\3\u010e\3\u010e\3\u010e"+
		"\5\u010e\u1273\n\u010e\3\u010f\3\u010f\3\u010f\3\u0110\3\u0110\6\u0110"+
		"\u127a\n\u0110\r\u0110\16\u0110\u127b\3\u0110\5\u0110\u127f\n\u0110\3"+
		"\u0111\3\u0111\3\u0112\3\u0112\3\u0112\5\u0112\u1286\n\u0112\3\u0113\3"+
		"\u0113\3\u0114\5\u0114\u128b\n\u0114\3\u0114\3\u0114\5\u0114\u128f\n\u0114"+
		"\3\u0114\5\u0114\u1292\n\u0114\3\u0115\3\u0115\3\u0115\5\u0888\u08fb\u0902"+
		"\b\u00b6\u00c2\u0152\u01e0\u01e8\u01ec\u0116\2\4\6\b\n\f\16\20\22\24\26"+
		"\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|"+
		"~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096"+
		"\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae"+
		"\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6"+
		"\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de"+
		"\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6"+
		"\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e"+
		"\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126"+
		"\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e"+
		"\u0140\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156"+
		"\u0158\u015a\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e"+
		"\u0170\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186"+
		"\u0188\u018a\u018c\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c\u019e"+
		"\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6"+
		"\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce"+
		"\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6"+
		"\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe"+
		"\u0200\u0202\u0204\u0206\u0208\u020a\u020c\u020e\u0210\u0212\u0214\u0216"+
		"\u0218\u021a\u021c\u021e\u0220\u0222\u0224\u0226\u0228\2M\5\2\u00b7\u00b7"+
		"\u02a2\u02a2\u02af\u02af\4\2\u014d\u014d\u0290\u0290\3\2KL\5\2\u00d2\u00d2"+
		"\u016a\u016a\u019c\u019c\4\2\21\21\24\24\4\2\35\35\65\65\4\2xx\u0278\u0278"+
		"\4\2\u01ce\u01ce\u02b6\u02b6\4\2\20\20\u00f8\u00f8\4\2\23\23  \4\2\u00d2"+
		"\u00d2\u019c\u019c\4\2vv\u022c\u022c\3\2\u020a\u020b\6\2\37\37\'\'EEe"+
		"e\4\2\62\62\u0157\u0157\3\2/\60\5\2\u0176\u0176\u01b8\u01b8\u0243\u0243"+
		"\6\2\5\6[[pp\u009f\u009f\4\2cc\u01e9\u01e9\4\2\u0243\u0243\u0271\u0271"+
		"\6\2QQ\u00db\u00db\u0141\u0141\u026a\u026a\4\2QQ\u009d\u009d\4\2\u008e"+
		"\u008e\u00ef\u00ef\4\2\u00cd\u00cd\u01ed\u01ed\5\2\u01b2\u01b2\u021d\u021d"+
		"\u0230\u0230\3\2\u02a1\u02a2\3\2\u029f\u02a0\7\2##UV}}\u012c\u012c\u023e"+
		"\u023e\4\2\32\32\u02a9\u02a9\5\299FF__\4\2\u00c9\u00c9\u013b\u013b\4\2"+
		"\u00d3\u00d3\u0137\u0137\4\2\u0160\u0160\u0276\u0276\17\2\3\13\r\34\36"+
		" \".\61hjwy\u0085\u0087\u009e\u00a0\u00a8\u00af\u00b5\u0118\u0118\u011a"+
		"\u011b\u01a7\u01a7\4\2\u0200\u0200\u022a\u022a\5\2\u00c7\u00c7\u0147\u0147"+
		"\u027f\u027f\4\2\u00d6\u00d6\u02b6\u02b6\4\2\u01ea\u01ea\u0296\u0296\3"+
		"\2\u01f5\u01f6\4\2\u01b6\u01b6\u0215\u0215\4\2\u0134\u0134\u018a\u018a"+
		"\4\2\u00d6\u00d6\u0107\u0107\6\2\u0179\u0179\u0202\u0202\u0273\u0273\u028b"+
		"\u028b\13\2\u00c9\u00c9\u00cc\u00cc\u01bd\u01bd\u01d0\u01d0\u01ec\u01ec"+
		"\u01f4\u01f4\u0201\u0201\u022e\u022e\u0246\u0246\5\2\u00cf\u00cf\u0135"+
		"\u0135\u01d1\u01d1\6\2\u0155\u0155\u0196\u0196\u01d5\u01d5\u027e\u027e"+
		"\4\2\u0166\u0166\u01ab\u01ab\5\2\u00e3\u00e3\u0199\u0199\u01e0\u01e0\6"+
		"\2\u01cf\u01cf\u01e4\u01e4\u02b1\u02b1\u02b6\u02b6\n\2\u00e4\u00e4\u0175"+
		"\u0175\u0183\u0183\u01ce\u01ce\u01d4\u01d4\u0211\u0211\u0222\u0223\u025a"+
		"\u025a\4\2\u01e3\u01e3\u02a7\u02a7\3\2\u019e\u019f\4\2\u00cd\u00cd\u02a6"+
		"\u02a6\4\2\u01c1\u01c3\u01c9\u01cc\4\2\u029f\u02a0\u02a4\u02a4\4\2\u00e2"+
		"\u00e2\u00e5\u00e6\4\2\u0140\u0140\u02a1\u02a3\6\2\u029f\u02a0\u02a5\u02a5"+
		"\u02a8\u02a8\u02aa\u02aa\t\2\u012c\u012c\u0185\u0185\u01d6\u01d6\u01d8"+
		"\u01d8\u023e\u023e\u028f\u028f\u0297\u0297\4\2\u0126\u0126\u026e\u026e"+
		"\4\2\u0125\u0125\u026d\u026d\5\2\u00c3\u00c3\u0120\u0120\u012d\u012d\5"+
		"\2\u0124\u0124\u012e\u012e\u0259\u0259\4\2\u00d1\u00d1\u0241\u0241\4\2"+
		"\u0176\u0176\u0243\u0243\4\2\u011f\u011f\u026c\u026c\4\2\u0215\u0215\u0237"+
		"\u0237\4\2\u0169\u0169\u0207\u0207\6\2\u011f\u011f\u0129\u0129\u012b\u012b"+
		"\u026c\u026c\3\2\u0298\u029e\4\2\u02a1\u02a1\u02b6\u02b6\4\2\u0248\u0248"+
		"\u0281\u0281\3\2\u0193\u0194\3\2\u02b7\u02b8_\2\u00be\u00bf\u00c3\u00c3"+
		"\u00c5\u00c8\u00cc\u00cc\u00d0\u00d1\u00d4\u00d5\u00d7\u00d7\u00d9\u00dc"+
		"\u00df\u00df\u00e2\u00ee\u00f0\u00f1\u00f5\u00fa\u00fc\u00fd\u00ff\u0100"+
		"\u0102\u010b\u010d\u0110\u0112\u0113\u0117\u011c\u011f\u0131\u0134\u0134"+
		"\u0136\u0136\u0139\u0139\u013c\u013d\u0141\u0142\u0146\u0146\u0148\u0148"+
		"\u014a\u0150\u0152\u0154\u0156\u0156\u0159\u0159\u015d\u015d\u015f\u015f"+
		"\u0161\u0166\u016d\u016e\u0171\u0171\u0173\u0173\u0175\u0176\u0179\u0179"+
		"\u017b\u017d\u017f\u0181\u0183\u0187\u0189\u018a\u018c\u018c\u018e\u018e"+
		"\u0199\u019b\u019d\u01a2\u01a4\u01a5\u01a9\u01a9\u01ab\u01ab\u01ad\u01ae"+
		"\u01b0\u01b1\u01b4\u01b5\u01b8\u01bd\u01bf\u01c0\u01c2\u01ce\u01d0\u01d4"+
		"\u01d6\u01db\u01dd\u01e2\u01e5\u01e5\u01e7\u01e8\u01ea\u01ec\u01f3\u01f4"+
		"\u01f6\u0206\u020a\u020a\u020c\u0214\u0219\u021b\u0221\u0223\u0225\u022c"+
		"\u022e\u022e\u0230\u0230\u0233\u0235\u0238\u023c\u023e\u023e\u0241\u0243"+
		"\u0246\u0246\u0249\u0249\u024b\u024d\u024f\u025a\u0260\u0260\u0264\u0266"+
		"\u0268\u0269\u026b\u026e\u0271\u0271\u0273\u0274\u0277\u0278\u027a\u027a"+
		"\u027c\u027c\u0280\u0280\u0284\u0284\u0286\u0286\u0288\u028f\u0294\u0294"+
		"\u0297\u0297\2\u152d\2\u022a\3\2\2\2\4\u0234\3\2\2\2\6\u0239\3\2\2\2\b"+
		"\u024d\3\2\2\2\n\u024f\3\2\2\2\f\u025b\3\2\2\2\16\u025d\3\2\2\2\20\u0287"+
		"\3\2\2\2\22\u0289\3\2\2\2\24\u028b\3\2\2\2\26\u0291\3\2\2\2\30\u0297\3"+
		"\2\2\2\32\u0299\3\2\2\2\34\u02a9\3\2\2\2\36\u02af\3\2\2\2 \u02c1\3\2\2"+
		"\2\"\u02c3\3\2\2\2$\u02c8\3\2\2\2&\u02ed\3\2\2\2(\u02f7\3\2\2\2*\u0302"+
		"\3\2\2\2,\u0316\3\2\2\2.\u0318\3\2\2\2\60\u031e\3\2\2\2\62\u0327\3\2\2"+
		"\2\64\u0332\3\2\2\2\66\u0340\3\2\2\28\u0365\3\2\2\2:\u0367\3\2\2\2<\u036f"+
		"\3\2\2\2>\u037a\3\2\2\2@\u0383\3\2\2\2B\u0386\3\2\2\2D\u03bf\3\2\2\2F"+
		"\u03c1\3\2\2\2H\u03d7\3\2\2\2J\u03e5\3\2\2\2L\u03ee\3\2\2\2N\u03fe\3\2"+
		"\2\2P\u040a\3\2\2\2R\u0416\3\2\2\2T\u042d\3\2\2\2V\u0436\3\2\2\2X\u0443"+
		"\3\2\2\2Z\u0450\3\2\2\2\\\u0459\3\2\2\2^\u0472\3\2\2\2`\u047a\3\2\2\2"+
		"b\u0482\3\2\2\2d\u049d\3\2\2\2f\u04c9\3\2\2\2h\u04cc\3\2\2\2j\u04db\3"+
		"\2\2\2l\u04dd\3\2\2\2n\u04fa\3\2\2\2p\u04fc\3\2\2\2r\u050c\3\2\2\2t\u0513"+
		"\3\2\2\2v\u0519\3\2\2\2x\u051e\3\2\2\2z\u0521\3\2\2\2|\u0526\3\2\2\2~"+
		"\u052e\3\2\2\2\u0080\u0534\3\2\2\2\u0082\u0536\3\2\2\2\u0084\u053c\3\2"+
		"\2\2\u0086\u0540\3\2\2\2\u0088\u0544\3\2\2\2\u008a\u054f\3\2\2\2\u008c"+
		"\u0558\3\2\2\2\u008e\u056c\3\2\2\2\u0090\u056f\3\2\2\2\u0092\u0579\3\2"+
		"\2\2\u0094\u057c\3\2\2\2\u0096\u0582\3\2\2\2\u0098\u0584\3\2\2\2\u009a"+
		"\u0592\3\2\2\2\u009c\u059a\3\2\2\2\u009e\u059d\3\2\2\2\u00a0\u05a8\3\2"+
		"\2\2\u00a2\u05af\3\2\2\2\u00a4\u05b2\3\2\2\2\u00a6\u05be\3\2\2\2\u00a8"+
		"\u05c1\3\2\2\2\u00aa\u05df\3\2\2\2\u00ac\u05e7\3\2\2\2\u00ae\u05ec\3\2"+
		"\2\2\u00b0\u05fb\3\2\2\2\u00b2\u0614\3\2\2\2\u00b4\u0616\3\2\2\2\u00b6"+
		"\u0628\3\2\2\2\u00b8\u0636\3\2\2\2\u00ba\u0645\3\2\2\2\u00bc\u0647\3\2"+
		"\2\2\u00be\u064b\3\2\2\2\u00c0\u0657\3\2\2\2\u00c2\u066b\3\2\2\2\u00c4"+
		"\u0682\3\2\2\2\u00c6\u0684\3\2\2\2\u00c8\u0688\3\2\2\2\u00ca\u068a\3\2"+
		"\2\2\u00cc\u069e\3\2\2\2\u00ce\u06a2\3\2\2\2\u00d0\u06a4\3\2\2\2\u00d2"+
		"\u06b5\3\2\2\2\u00d4\u06c5\3\2\2\2\u00d6\u0761\3\2\2\2\u00d8\u0763\3\2"+
		"\2\2\u00da\u0765\3\2\2\2\u00dc\u0775\3\2\2\2\u00de\u077f\3\2\2\2\u00e0"+
		"\u0851\3\2\2\2\u00e2\u0853\3\2\2\2\u00e4\u085c\3\2\2\2\u00e6\u0860\3\2"+
		"\2\2\u00e8\u0867\3\2\2\2\u00ea\u086c\3\2\2\2\u00ec\u0874\3\2\2\2\u00ee"+
		"\u0883\3\2\2\2\u00f0\u0888\3\2\2\2\u00f2\u088b\3\2\2\2\u00f4\u089c\3\2"+
		"\2\2\u00f6\u089e\3\2\2\2\u00f8\u08a1\3\2\2\2\u00fa\u08a5\3\2\2\2\u00fc"+
		"\u08ac\3\2\2\2\u00fe\u08b4\3\2\2\2\u0100\u08b7\3\2\2\2\u0102\u08bc\3\2"+
		"\2\2\u0104\u08c0\3\2\2\2\u0106\u08c2\3\2\2\2\u0108\u08c4\3\2\2\2\u010a"+
		"\u08cd\3\2\2\2\u010c\u08d3\3\2\2\2\u010e\u0918\3\2\2\2\u0110\u0ace\3\2"+
		"\2\2\u0112\u0b3e\3\2\2\2\u0114\u0b52\3\2\2\2\u0116\u0b54\3\2\2\2\u0118"+
		"\u0b57\3\2\2\2\u011a\u0b6e\3\2\2\2\u011c\u0b7e\3\2\2\2\u011e\u0b81\3\2"+
		"\2\2\u0120\u0b8f\3\2\2\2\u0122\u0b9c\3\2\2\2\u0124\u0bfd\3\2\2\2\u0126"+
		"\u0bff\3\2\2\2\u0128\u0c07\3\2\2\2\u012a\u0c09\3\2\2\2\u012c\u0c10\3\2"+
		"\2\2\u012e\u0c14\3\2\2\2\u0130\u0c19\3\2\2\2\u0132\u0c1b\3\2\2\2\u0134"+
		"\u0c2c\3\2\2\2\u0136\u0c34\3\2\2\2\u0138\u0c36\3\2\2\2\u013a\u0c38\3\2"+
		"\2\2\u013c\u0c3c\3\2\2\2\u013e\u0c40\3\2\2\2\u0140\u0c44\3\2\2\2\u0142"+
		"\u0c4a\3\2\2\2\u0144\u0c56\3\2\2\2\u0146\u0c76\3\2\2\2\u0148\u0c78\3\2"+
		"\2\2\u014a\u0c81\3\2\2\2\u014c\u0cad\3\2\2\2\u014e\u0caf\3\2\2\2\u0150"+
		"\u0cbb\3\2\2\2\u0152\u0cc0\3\2\2\2\u0154\u0cce\3\2\2\2\u0156\u0cd6\3\2"+
		"\2\2\u0158\u0cd8\3\2\2\2\u015a\u0ceb\3\2\2\2\u015c\u0cf4\3\2\2\2\u015e"+
		"\u0cfd\3\2\2\2\u0160\u0d08\3\2\2\2\u0162\u0d18\3\2\2\2\u0164\u0d1a\3\2"+
		"\2\2\u0166\u0d1d\3\2\2\2\u0168\u0d21\3\2\2\2\u016a\u0d32\3\2\2\2\u016c"+
		"\u0d35\3\2\2\2\u016e\u0d3a\3\2\2\2\u0170\u0d42\3\2\2\2\u0172\u0d49\3\2"+
		"\2\2\u0174\u0d5a\3\2\2\2\u0176\u0d72\3\2\2\2\u0178\u0d74\3\2\2\2\u017a"+
		"\u0da7\3\2\2\2\u017c\u0da9\3\2\2\2\u017e\u0db6\3\2\2\2\u0180\u0db9\3\2"+
		"\2\2\u0182\u0dc6\3\2\2\2\u0184\u0dd6\3\2\2\2\u0186\u0dde\3\2\2\2\u0188"+
		"\u0de4\3\2\2\2\u018a\u0dec\3\2\2\2\u018c\u0e06\3\2\2\2\u018e\u0e0b\3\2"+
		"\2\2\u0190\u0e15\3\2\2\2\u0192\u0e27\3\2\2\2\u0194\u0e29\3\2\2\2\u0196"+
		"\u0e4b\3\2\2\2\u0198\u0e51\3\2\2\2\u019a\u0e53\3\2\2\2\u019c\u0e57\3\2"+
		"\2\2\u019e\u0e5f\3\2\2\2\u01a0\u0e97\3\2\2\2\u01a2\u0e99\3\2\2\2\u01a4"+
		"\u0e9c\3\2\2\2\u01a6\u0ea1\3\2\2\2\u01a8\u0ea9\3\2\2\2\u01aa\u0eaf\3\2"+
		"\2\2\u01ac\u0eb3\3\2\2\2\u01ae\u0ebc\3\2\2\2\u01b0\u0ebe\3\2\2\2\u01b2"+
		"\u0ec6\3\2\2\2\u01b4\u0ece\3\2\2\2\u01b6\u0ed3\3\2\2\2\u01b8\u0edb\3\2"+
		"\2\2\u01ba\u0f11\3\2\2\2\u01bc\u0f19\3\2\2\2\u01be\u0f2b\3\2\2\2\u01c0"+
		"\u0f37\3\2\2\2\u01c2\u0f3f\3\2\2\2\u01c4\u0f4d\3\2\2\2\u01c6\u0f5b\3\2"+
		"\2\2\u01c8\u0f64\3\2\2\2\u01ca\u0f7d\3\2\2\2\u01cc\u0f88\3\2\2\2\u01ce"+
		"\u0f8a\3\2\2\2\u01d0\u0f92\3\2\2\2\u01d2\u0f9c\3\2\2\2\u01d4\u0f9e\3\2"+
		"\2\2\u01d6\u0faa\3\2\2\2\u01d8\u0fb3\3\2\2\2\u01da\u0fba\3\2\2\2\u01dc"+
		"\u0fc4\3\2\2\2\u01de\u0fd6\3\2\2\2\u01e0\u0fee\3\2\2\2\u01e2\u0ffe\3\2"+
		"\2\2\u01e4\u100d\3\2\2\2\u01e6\u103d\3\2\2\2\u01e8\u104a\3\2\2\2\u01ea"+
		"\u105b\3\2\2\2\u01ec\u1124\3\2\2\2\u01ee\u1143\3\2\2\2\u01f0\u1166\3\2"+
		"\2\2\u01f2\u1179\3\2\2\2\u01f4\u117b\3\2\2\2\u01f6\u1190\3\2\2\2\u01f8"+
		"\u1192\3\2\2\2\u01fa\u119b\3\2\2\2\u01fc\u119d\3\2\2\2\u01fe\u11b2\3\2"+
		"\2\2\u0200\u11e6\3\2\2\2\u0202\u11e8\3\2\2\2\u0204\u11ea\3\2\2\2\u0206"+
		"\u11ec\3\2\2\2\u0208\u11f1\3\2\2\2\u020a\u11f5\3\2\2\2\u020c\u11f7\3\2"+
		"\2\2\u020e\u122b\3\2\2\2\u0210\u1251\3\2\2\2\u0212\u1253\3\2\2\2\u0214"+
		"\u125b\3\2\2\2\u0216\u1261\3\2\2\2\u0218\u1264\3\2\2\2\u021a\u1272\3\2"+
		"\2\2\u021c\u1274\3\2\2\2\u021e\u127e\3\2\2\2\u0220\u1280\3\2\2\2\u0222"+
		"\u1285\3\2\2\2\u0224\u1287\3\2\2\2\u0226\u1291\3\2\2\2\u0228\u1293\3\2"+
		"\2\2\u022a\u022b\5\4\3\2\u022b\u022c\7\2\2\3\u022c\3\3\2\2\2\u022d\u0230"+
		"\5\6\4\2\u022e\u0230\5\20\t\2\u022f\u022d\3\2\2\2\u022f\u022e\3\2\2\2"+
		"\u0230\u0232\3\2\2\2\u0231\u0233\7;\2\2\u0232\u0231\3\2\2\2\u0232\u0233"+
		"\3\2\2\2\u0233\u0235\3\2\2\2\u0234\u022f\3\2\2\2\u0235\u0236\3\2\2\2\u0236"+
		"\u0234\3\2\2\2\u0236\u0237\3\2\2\2\u0237\5\3\2\2\2\u0238\u023a\5\62\32"+
		"\2\u0239\u0238\3\2\2\2\u0239\u023a\3\2\2\2\u023a\u023b\3\2\2\2\u023b\u023c"+
		"\7\u00db\2\2\u023c\u023e\5\4\3\2\u023d\u023f\5\24\13\2\u023e\u023d\3\2"+
		"\2\2\u023e\u023f\3\2\2\2\u023f\u0240\3\2\2\2\u0240\u0241\5\n\6\2\u0241"+
		"\7\3\2\2\2\u0242\u0243\7\u00db\2\2\u0243\u0245\5\4\3\2\u0244\u0246\5\24"+
		"\13\2\u0245\u0244\3\2\2\2\u0245\u0246\3\2\2\2\u0246\u0247\3\2\2\2\u0247"+
		"\u0248\5\n\6\2\u0248\u024e\3\2\2\2\u0249\u024b\5\20\t\2\u024a\u024c\7"+
		"\u00b7\2\2\u024b\u024a\3\2\2\2\u024b\u024c\3\2\2\2\u024c\u024e\3\2\2\2"+
		"\u024d\u0242\3\2\2\2\u024d\u0249\3\2\2\2\u024e\t\3\2\2\2\u024f\u0250\6"+
		"\6\2\2\u0250\u0251\7\u014d\2\2\u0251\13\3\2\2\2\u0252\u025c\5\6\4\2\u0253"+
		"\u0255\5\20\t\2\u0254\u0253\3\2\2\2\u0255\u0256\3\2\2\2\u0256\u0254\3"+
		"\2\2\2\u0256\u0257\3\2\2\2\u0257\u0259\3\2\2\2\u0258\u025a\7;\2\2\u0259"+
		"\u0258\3\2\2\2\u0259\u025a\3\2\2\2\u025a\u025c\3\2\2\2\u025b\u0252\3\2"+
		"\2\2\u025b\u0254\3\2\2\2\u025c\r\3\2\2\2\u025d\u025e\5\u0110\u0089\2\u025e"+
		"\17\3\2\2\2\u025f\u0288\5\16\b\2\u0260\u0288\5\34\17\2\u0261\u0288\5("+
		"\25\2\u0262\u0288\5*\26\2\u0263\u0288\5,\27\2\u0264\u0288\5.\30\2\u0265"+
		"\u0288\5\u0090I\2\u0266\u0288\5L\'\2\u0267\u0288\5P)\2\u0268\u0288\5V"+
		",\2\u0269\u0288\5\\/\2\u026a\u0288\5\60\31\2\u026b\u0288\5^\60\2\u026c"+
		"\u0288\5`\61\2\u026d\u0288\5b\62\2\u026e\u0288\5l\67\2\u026f\u0288\5|"+
		"?\2\u0270\u0288\5\u008cG\2\u0271\u0288\5\u00aeX\2\u0272\u0288\5\u00b0"+
		"Y\2\u0273\u0288\5n8\2\u0274\u0288\5z>\2\u0275\u0288\5~@\2\u0276\u0288"+
		"\5\u0086D\2\u0277\u0288\5\u0088E\2\u0278\u0288\5\u008aF\2\u0279\u0288"+
		"\5\u0092J\2\u027a\u0288\5\u0094K\2\u027b\u0288\5\u0096L\2\u027c\u0288"+
		"\5\u0098M\2\u027d\u0288\5\u009aN\2\u027e\u0288\5\u00a6T\2\u027f\u0288"+
		"\5\u00a8U\2\u0280\u0288\5\u00aaV\2\u0281\u0288\5\u00acW\2\u0282\u0288"+
		"\5\u00b2Z\2\u0283\u0288\5\u00eex\2\u0284\u0288\5\30\r\2\u0285\u0288\5"+
		"\32\16\2\u0286\u0288\5\22\n\2\u0287\u025f\3\2\2\2\u0287\u0260\3\2\2\2"+
		"\u0287\u0261\3\2\2\2\u0287\u0262\3\2\2\2\u0287\u0263\3\2\2\2\u0287\u0264"+
		"\3\2\2\2\u0287\u0265\3\2\2\2\u0287\u0266\3\2\2\2\u0287\u0267\3\2\2\2\u0287"+
		"\u0268\3\2\2\2\u0287\u0269\3\2\2\2\u0287\u026a\3\2\2\2\u0287\u026b\3\2"+
		"\2\2\u0287\u026c\3\2\2\2\u0287\u026d\3\2\2\2\u0287\u026e\3\2\2\2\u0287"+
		"\u026f\3\2\2\2\u0287\u0270\3\2\2\2\u0287\u0271\3\2\2\2\u0287\u0272\3\2"+
		"\2\2\u0287\u0273\3\2\2\2\u0287\u0274\3\2\2\2\u0287\u0275\3\2\2\2\u0287"+
		"\u0276\3\2\2\2\u0287\u0277\3\2\2\2\u0287\u0278\3\2\2\2\u0287\u0279\3\2"+
		"\2\2\u0287\u027a\3\2\2\2\u0287\u027b\3\2\2\2\u0287\u027c\3\2\2\2\u0287"+
		"\u027d\3\2\2\2\u0287\u027e\3\2\2\2\u0287\u027f\3\2\2\2\u0287\u0280\3\2"+
		"\2\2\u0287\u0281\3\2\2\2\u0287\u0282\3\2\2\2\u0287\u0283\3\2\2\2\u0287"+
		"\u0284\3\2\2\2\u0287\u0285\3\2\2\2\u0287\u0286\3\2\2\2\u0288\21\3\2\2"+
		"\2\u0289\u028a\t\2\2\2\u028a\23\3\2\2\2\u028b\u028d\7\63\2\2\u028c\u028e"+
		"\5\26\f\2\u028d\u028c\3\2\2\2\u028e\u028f\3\2\2\2\u028f\u028d\3\2\2\2"+
		"\u028f\u0290\3\2\2\2\u0290\25\3\2\2\2\u0291\u0292\7\u0290\2\2\u0292\u0293"+
		"\7\u02ba\2\2\u0293\u0294\7\u026a\2\2\u0294\u0295\5\4\3\2\u0295\u0296\n"+
		"\3\2\2\u0296\27\3\2\2\2\u0297\u0298\7\u01e4\2\2\u0298\31\3\2\2\2\u0299"+
		"\u029a\6\16\3\2\u029a\u029b\5\u00c2b\2\u029b\33\3\2\2\2\u029c\u029d\7"+
		"\u0244\2\2\u029d\u02aa\5\u009cO\2\u029e\u02a0\7\u0244\2\2\u029f\u029e"+
		"\3\2\2\2\u029f\u02a0\3\2\2\2\u02a0\u02a1\3\2\2\2\u02a1\u02a6\5\36\20\2"+
		"\u02a2\u02a3\7\u00ba\2\2\u02a3\u02a5\5\36\20\2\u02a4\u02a2\3\2\2\2\u02a5"+
		"\u02a8\3\2\2\2\u02a6\u02a4\3\2\2\2\u02a6\u02a7\3\2\2\2\u02a7\u02aa\3\2"+
		"\2\2\u02a8\u02a6\3\2\2\2\u02a9\u029c\3\2\2\2\u02a9\u029f\3\2\2\2\u02aa"+
		"\35\3\2\2\2\u02ab\u02b0\5 \21\2\u02ac\u02b0\5$\23\2\u02ad\u02b0\5&\24"+
		"\2\u02ae\u02b0\5\"\22\2\u02af\u02ab\3\2\2\2\u02af\u02ac\3\2\2\2\u02af"+
		"\u02ad\3\2\2\2\u02af\u02ae\3\2\2\2\u02b0\37\3\2\2\2\u02b1\u02b3\5\u00fa"+
		"~\2\u02b2\u02b4\7\u02ab\2\2\u02b3\u02b2\3\2\2\2\u02b3\u02b4\3\2\2\2\u02b4"+
		"\u02b5\3\2\2\2\u02b5\u02b6\7\u0298\2\2\u02b6\u02b7\5\u00c2b\2\u02b7\u02c2"+
		"\3\2\2\2\u02b8\u02b9\7\u00b8\2\2\u02b9\u02ba\5\u00fa~\2\u02ba\u02bc\7"+
		"\u00b9\2\2\u02bb\u02bd\7\u02ab\2\2\u02bc\u02bb\3\2\2\2\u02bc\u02bd\3\2"+
		"\2\2\u02bd\u02be\3\2\2\2\u02be\u02bf\7\u0298\2\2\u02bf\u02c0\5\u00c2b"+
		"\2\u02c0\u02c2\3\2\2\2\u02c1\u02b1\3\2\2\2\u02c1\u02b8\3\2\2\2\u02c2!"+
		"\3\2\2\2\u02c3\u02c4\5\u00e2r\2\u02c4\u02c5\7\u02ab\2\2\u02c5\u02c6\7"+
		"\u0298\2\2\u02c6\u02c7\5\u00c2b\2\u02c7#\3\2\2\2\u02c8\u02c9\7\u00b8\2"+
		"\2\u02c9\u02ce\5\u00fa~\2\u02ca\u02cb\7\u00ba\2\2\u02cb\u02cd\5\u00fa"+
		"~\2\u02cc\u02ca\3\2\2\2\u02cd\u02d0\3\2\2\2\u02ce\u02cc\3\2\2\2\u02ce"+
		"\u02cf\3\2\2\2\u02cf\u02d1\3\2\2\2\u02d0\u02ce\3\2\2\2\u02d1\u02d3\7\u00b9"+
		"\2\2\u02d2\u02d4\7\u02ab\2\2\u02d3\u02d2\3\2\2\2\u02d3\u02d4\3\2\2\2\u02d4"+
		"\u02d5\3\2\2\2\u02d5\u02d6\7\u0298\2\2\u02d6\u02d7\7\u00b8\2\2\u02d7\u02dc"+
		"\5\u00c2b\2\u02d8\u02d9\7\u00ba\2\2\u02d9\u02db\5\u00c2b\2\u02da\u02d8"+
		"\3\2\2\2\u02db\u02de\3\2\2\2\u02dc\u02da\3\2\2\2\u02dc\u02dd\3\2\2\2\u02dd"+
		"\u02df\3\2\2\2\u02de\u02dc\3\2\2\2\u02df\u02e0\7\u00b9\2\2\u02e0%\3\2"+
		"\2\2\u02e1\u02ee\5\u00fa~\2\u02e2\u02e3\7\u00b8\2\2\u02e3\u02e8\5\u00fa"+
		"~\2\u02e4\u02e5\7\u00ba\2\2\u02e5\u02e7\5\u00fa~\2\u02e6\u02e4\3\2\2\2"+
		"\u02e7\u02ea\3\2\2\2\u02e8\u02e6\3\2\2\2\u02e8\u02e9\3\2\2\2\u02e9\u02eb"+
		"\3\2\2\2\u02ea\u02e8\3\2\2\2\u02eb\u02ec\7\u00b9\2\2\u02ec\u02ee\3\2\2"+
		"\2\u02ed\u02e1\3\2\2\2\u02ed\u02e2\3\2\2\2\u02ee\u02f0\3\2\2\2\u02ef\u02f1"+
		"\7\u02ab\2\2\u02f0\u02ef\3\2\2\2\u02f0\u02f1\3\2\2\2\u02f1\u02f2\3\2\2"+
		"\2\u02f2\u02f3\7\u0298\2\2\u02f3\u02f4\7\u00b8\2\2\u02f4\u02f5\5\u0150"+
		"\u00a9\2\u02f5\u02f6\7\u00b9\2\2\u02f6\'\3\2\2\2\u02f7\u02f8\7\4\2\2\u02f8"+
		"\u02f9\5\u00fa~\2\u02f9\u02fa\7\"\2\2\u02fa\u02fe\7\u016a\2\2\u02fb\u02fc"+
		"\7t\2\2\u02fc\u02ff\7\u0244\2\2\u02fd\u02ff\7\u020b\2\2\u02fe\u02fb\3"+
		"\2\2\2\u02fe\u02fd\3\2\2\2\u02ff\u0300\3\2\2\2\u0300\u0301\5\u00fa~\2"+
		"\u0301)\3\2\2\2\u0302\u0305\7\7\2\2\u0303\u0304\7t\2\2\u0304\u0306\7\u0244"+
		"\2\2\u0305\u0303\3\2\2\2\u0305\u0306\3\2\2\2\u0306\u0307\3\2\2\2\u0307"+
		"\u0308\t\4\2\2\u0308\u0309\7\u00b8\2\2\u0309\u030e\5\u00fa~\2\u030a\u030b"+
		"\7\u00ba\2\2\u030b\u030d\5\u00fa~\2\u030c\u030a\3\2\2\2\u030d\u0310\3"+
		"\2\2\2\u030e\u030c\3\2\2\2\u030e\u030f\3\2\2\2\u030f\u0311\3\2\2\2\u0310"+
		"\u030e\3\2\2\2\u0311\u0312\7\u00b9\2\2\u0312\u0313\7\u0293\2\2\u0313\u0314"+
		"\7\u020b\2\2\u0314\u0315\5\u00fa~\2\u0315+\3\2\2\2\u0316\u0317\7\17\2"+
		"\2\u0317-\3\2\2\2\u0318\u031c\7\u00f1\2\2\u0319\u031d\5\u00e4s\2\u031a"+
		"\u031d\5\u00e2r\2\u031b\u031d\5\u01b0\u00d9\2\u031c\u0319\3\2\2\2\u031c"+
		"\u031a\3\2\2\2\u031c\u031b\3\2\2\2\u031d/\3\2\2\2\u031e\u031f\7%\2\2\u031f"+
		"\u0324\5\66\34\2\u0320\u0321\7\u00ba\2\2\u0321\u0323\5\66\34\2\u0322\u0320"+
		"\3\2\2\2\u0323\u0326\3\2\2\2\u0324\u0322\3\2\2\2\u0324\u0325\3\2\2\2\u0325"+
		"\61\3\2\2\2\u0326\u0324\3\2\2\2\u0327\u0328\7%\2\2\u0328\u0329\5\66\34"+
		"\2\u0329\u032f\7\u00b7\2\2\u032a\u032b\5\66\34\2\u032b\u032c\7\u00b7\2"+
		"\2\u032c\u032e\3\2\2\2\u032d\u032a\3\2\2\2\u032e\u0331\3\2\2\2\u032f\u032d"+
		"\3\2\2\2\u032f\u0330\3\2\2\2\u0330\63\3\2\2\2\u0331\u032f\3\2\2\2\u0332"+
		"\u0333\5\66\34\2\u0333\u0339\7\u00b7\2\2\u0334\u0335\5\66\34\2\u0335\u0336"+
		"\7\u00b7\2\2\u0336\u0338\3\2\2\2\u0337\u0334\3\2\2\2\u0338\u033b\3\2\2"+
		"\2\u0339\u0337\3\2\2\2\u0339\u033a\3\2\2\2\u033a\65\3\2\2\2\u033b\u0339"+
		"\3\2\2\2\u033c\u0341\5<\37\2\u033d\u0341\5:\36\2\u033e\u0341\5B\"\2\u033f"+
		"\u0341\58\35\2\u0340\u033c\3\2\2\2\u0340\u033d\3\2\2\2\u0340\u033e\3\2"+
		"\2\2\u0340\u033f\3\2\2\2\u0341\67\3\2\2\2\u0342\u0347\5\u00fa~\2\u0343"+
		"\u0344\7\u00ba\2\2\u0344\u0346\5\u00fa~\2\u0345\u0343\3\2\2\2\u0346\u0349"+
		"\3\2\2\2\u0347\u0345\3\2\2\2\u0347\u0348\3\2\2\2\u0348\u034b\3\2\2\2\u0349"+
		"\u0347\3\2\2\2\u034a\u034c\7\u00d2\2\2\u034b\u034a\3\2\2\2\u034b\u034c"+
		"\3\2\2\2\u034c\u034d\3\2\2\2\u034d\u034f\5D#\2\u034e\u0350\5F$\2\u034f"+
		"\u034e\3\2\2\2\u034f\u0350\3\2\2\2\u0350\u0354\3\2\2\2\u0351\u0353\5H"+
		"%\2\u0352\u0351\3\2\2\2\u0353\u0356\3\2\2\2\u0354\u0352\3\2\2\2\u0354"+
		"\u0355\3\2\2\2\u0355\u0358\3\2\2\2\u0356\u0354\3\2\2\2\u0357\u0359\5J"+
		"&\2\u0358\u0357\3\2\2\2\u0358\u0359\3\2\2\2\u0359\u0366\3\2\2\2\u035a"+
		"\u035b\5\u00fa~\2\u035b\u035d\7\34\2\2\u035c\u035e\7\u00d2\2\2\u035d\u035c"+
		"\3\2\2\2\u035d\u035e\3\2\2\2\u035e\u035f\3\2\2\2\u035f\u0361\5D#\2\u0360"+
		"\u0362\5F$\2\u0361\u0360\3\2\2\2\u0361\u0362\3\2\2\2\u0362\u0363\3\2\2"+
		"\2\u0363\u0364\5J&\2\u0364\u0366\3\2\2\2\u0365\u0342\3\2\2\2\u0365\u035a"+
		"\3\2\2\2\u03669\3\2\2\2\u0367\u0368\5\u00fa~\2\u0368\u0369\7\33\2\2\u0369"+
		";\3\2\2\2\u036a\u036b\7\"\2\2\u036b\u0370\5\u00fa~\2\u036c\u036d\5\u00fa"+
		"~\2\u036d\u036e\7\"\2\2\u036e\u0370\3\2\2\2\u036f\u036a\3\2\2\2\u036f"+
		"\u036c\3\2\2\2\u0370\u0373\3\2\2\2\u0371\u0374\5> \2\u0372\u0374\5@!\2"+
		"\u0373\u0371\3\2\2\2\u0373\u0372\3\2\2\2\u0373\u0374\3\2\2\2\u0374\u0375"+
		"\3\2\2\2\u0375\u0378\t\5\2\2\u0376\u0379\5\u0150\u00a9\2\u0377\u0379\5"+
		"\u00c2b\2\u0378\u0376\3\2\2\2\u0378\u0377\3\2\2\2\u0379=\3\2\2\2\u037a"+
		"\u037b\7\u0293\2\2\u037b\u037d\7v\2\2\u037c\u037e\7\u01ea\2\2\u037d\u037c"+
		"\3\2\2\2\u037d\u037e\3\2\2\2\u037e\u0381\3\2\2\2\u037f\u0380\7\u0270\2"+
		"\2\u0380\u0382\t\6\2\2\u0381\u037f\3\2\2\2\u0381\u0382\3\2\2\2\u0382?"+
		"\3\2\2\2\u0383\u0384\7\u009e\2\2\u0384\u0385\7v\2\2\u0385A\3\2\2\2\u0386"+
		"\u0387\t\7\2\2\u0387\u0388\7<\2\2\u0388\u038e\7\u016a\2\2\u0389\u038f"+
		"\7\u0089\2\2\u038a\u038f\7\u008c\2\2\u038b\u038c\7\u01e3\2\2\u038c\u038f"+
		"\79\2\2\u038d\u038f\5\u00fa~\2\u038e\u0389\3\2\2\2\u038e\u038a\3\2\2\2"+
		"\u038e\u038b\3\2\2\2\u038e\u038d\3\2\2\2\u038f\u0390\3\2\2\2\u0390\u0391"+
		"\5\b\5\2\u0391C\3\2\2\2\u0392\u03c0\7\u00f8\2\2\u0393\u03c0\7\u00de\2"+
		"\2\u0394\u03c0\7\n\2\2\u0395\u03c0\7\13\2\2\u0396\u03c0\7\f\2\2\u0397"+
		"\u03c0\7\r\2\2\u0398\u03c0\7\u011f\2\2\u0399\u03c0\7\u0127\2\2\u039a\u03c0"+
		"\7$\2\2\u039b\u03c0\7\u012f\2\2\u039c\u039e\7\u0143\2\2\u039d\u039f\7"+
		"j\2\2\u039e\u039d\3\2\2\2\u039e\u039f\3\2\2\2\u039f\u03c0\3\2\2\2\u03a0"+
		"\u03c0\7\u0167\2\2\u03a1\u03c0\7\u0193\2\2\u03a2\u03c0\7B\2\2\u03a3\u03c0"+
		"\7C\2\2\u03a4\u03c0\7D\2\2\u03a5\u03c0\7\u0194\2\2\u03a6\u03c0\7X\2\2"+
		"\u03a7\u03c0\7Z\2\2\u03a8\u03c0\7a\2\2\u03a9\u03c0\7`\2\2\u03aa\u03c0"+
		"\7i\2\2\u03ab\u03c0\7\u0217\2\2\u03ac\u03ad\7u\2\2\u03ad\u03c0\7\u009b"+
		"\2\2\u03ae\u03c0\7\u0085\2\2\u03af\u03c0\7\u0084\2\2\u03b0\u03c0\7\u0086"+
		"\2\2\u03b1\u03c0\7\u024a\2\2\u03b2\u03c0\7\u0087\2\2\u03b3\u03c0\7\u0257"+
		"\2\2\u03b4\u03c0\7\u0093\2\2\u03b5\u03c0\7\u026c\2\2\u03b6\u03c0\7\u026f"+
		"\2\2\u03b7\u03c0\7\u0288\2\2\u03b8\u03c0\7\u009a\2\2\u03b9\u03c0\7\u00a0"+
		"\2\2\u03ba\u03bd\5\u00fc\177\2\u03bb\u03bc\7\u02a3\2\2\u03bc\u03be\t\b"+
		"\2\2\u03bd\u03bb\3\2\2\2\u03bd\u03be\3\2\2\2\u03be\u03c0\3\2\2\2\u03bf"+
		"\u0392\3\2\2\2\u03bf\u0393\3\2\2\2\u03bf\u0394\3\2\2\2\u03bf\u0395\3\2"+
		"\2\2\u03bf\u0396\3\2\2\2\u03bf\u0397\3\2\2\2\u03bf\u0398\3\2\2\2\u03bf"+
		"\u0399\3\2\2\2\u03bf\u039a\3\2\2\2\u03bf\u039b\3\2\2\2\u03bf\u039c\3\2"+
		"\2\2\u03bf\u03a0\3\2\2\2\u03bf\u03a1\3\2\2\2\u03bf\u03a2\3\2\2\2\u03bf"+
		"\u03a3\3\2\2\2\u03bf\u03a4\3\2\2\2\u03bf\u03a5\3\2\2\2\u03bf\u03a6\3\2"+
		"\2\2\u03bf\u03a7\3\2\2\2\u03bf\u03a8\3\2\2\2\u03bf\u03a9\3\2\2\2\u03bf"+
		"\u03aa\3\2\2\2\u03bf\u03ab\3\2\2\2\u03bf\u03ac\3\2\2\2\u03bf\u03ae\3\2"+
		"\2\2\u03bf\u03af\3\2\2\2\u03bf\u03b0\3\2\2\2\u03bf\u03b1\3\2\2\2\u03bf"+
		"\u03b2\3\2\2\2\u03bf\u03b3\3\2\2\2\u03bf\u03b4\3\2\2\2\u03bf\u03b5\3\2"+
		"\2\2\u03bf\u03b6\3\2\2\2\u03bf\u03b7\3\2\2\2\u03bf\u03b8\3\2\2\2\u03bf"+
		"\u03b9\3\2\2\2\u03bf\u03ba\3\2\2\2\u03c0E\3\2\2\2\u03c1\u03c2\7\u00b8"+
		"\2\2\u03c2\u03c4\t\t\2\2\u03c3\u03c5\t\n\2\2\u03c4\u03c3\3\2\2\2\u03c4"+
		"\u03c5\3\2\2\2\u03c5\u03c8\3\2\2\2\u03c6\u03c7\7\u00ba\2\2\u03c7\u03c9"+
		"\7\u02b6\2\2\u03c8\u03c6\3\2\2\2\u03c8\u03c9\3\2\2\2\u03c9\u03ca\3\2\2"+
		"\2\u03ca\u03cb\7\u00b9\2\2\u03cbG\3\2\2\2\u03cc\u03ce\7\u01e3\2\2\u03cd"+
		"\u03cc\3\2\2\2\u03cd\u03ce\3\2\2\2\u03ce\u03cf\3\2\2\2\u03cf\u03d8\7\u01e4"+
		"\2\2\u03d0\u03d1\7\u00f8\2\2\u03d1\u03d2\7\u0244\2\2\u03d2\u03d8\5\u00fa"+
		"~\2\u03d3\u03d5\7\u01e3\2\2\u03d4\u03d3\3\2\2\2\u03d4\u03d5\3\2\2\2\u03d5"+
		"\u03d6\3\2\2\2\u03d6\u03d8\t\13\2\2\u03d7\u03cd\3\2\2\2\u03d7\u03d0\3"+
		"\2\2\2\u03d7\u03d4\3\2\2\2\u03d8I\3\2\2\2\u03d9\u03db\7\u02ab\2\2\u03da"+
		"\u03d9\3\2\2\2\u03da\u03db\3\2\2\2\u03db\u03dc\3\2\2\2\u03dc\u03dd\7\u0298"+
		"\2\2\u03dd\u03e6\5\u00c2b\2\u03de\u03e0\7\u0293\2\2\u03df\u03de\3\2\2"+
		"\2\u03df\u03e0\3\2\2\2\u03e0\u03e1\3\2\2\2\u03e1\u03e3\7\u0133\2\2\u03e2"+
		"\u03e4\5\u00c2b\2\u03e3\u03e2\3\2\2\2\u03e3\u03e4\3\2\2\2\u03e4\u03e6"+
		"\3\2\2\2\u03e5\u03da\3\2\2\2\u03e5\u03df\3\2\2\2\u03e6K\3\2\2\2\u03e7"+
		"\u03ef\7\u00ca\2\2\u03e8\u03eb\7\u0111\2\2\u03e9\u03ea\7\u01ed\2\2\u03ea"+
		"\u03ec\7\u0222\2\2\u03eb\u03e9\3\2\2\2\u03eb\u03ec\3\2\2\2\u03ec\u03ef"+
		"\3\2\2\2\u03ed\u03ef\7\u0222\2\2\u03ee\u03e7\3\2\2\2\u03ee\u03e8\3\2\2"+
		"\2\u03ee\u03ed\3\2\2\2\u03ef\u03f0\3\2\2\2\u03f0\u03f1\7\u0173\2\2\u03f1"+
		"\u03f3\5\u01b0\u00d9\2\u03f2\u03f4\5d\63\2\u03f3\u03f2\3\2\2\2\u03f3\u03f4"+
		"\3\2\2\2\u03f4\u03f5\3\2\2\2\u03f5\u03f7\5N(\2\u03f6\u03f8\t\f\2\2\u03f7"+
		"\u03f6\3\2\2\2\u03f7\u03f8\3\2\2\2\u03f8\u03fa\3\2\2\2\u03f9\u03fb\5\64"+
		"\33\2\u03fa\u03f9\3\2\2\2\u03fa\u03fb\3\2\2\2\u03fb\u03fc\3\2\2\2\u03fc"+
		"\u03fd\5\b\5\2\u03fdM\3\2\2\2\u03fe\u03ff\t\r\2\2\u03ff\u0401\5D#\2\u0400"+
		"\u0402\5F$\2\u0401\u0400\3\2\2\2\u0401\u0402\3\2\2\2\u0402O\3\2\2\2\u0403"+
		"\u040b\7\u00ca\2\2\u0404\u0407\7\u0111\2\2\u0405\u0406\7\u01ed\2\2\u0406"+
		"\u0408\7\u0222\2\2\u0407\u0405\3\2\2\2\u0407\u0408\3\2\2\2\u0408\u040b"+
		"\3\2\2\2\u0409\u040b\7\u0222\2\2\u040a\u0403\3\2\2\2\u040a\u0404\3\2\2"+
		"\2\u040a\u0409\3\2\2\2\u040b\u040c\3\2\2\2\u040c\u040d\7f\2\2\u040d\u040e"+
		"\5\u01b0\u00d9\2\u040e\u040f\t\f\2\2\u040f\u0410\5R*\2\u0410\u0414\7\u014d"+
		"\2\2\u0411\u0412\5\u00fa~\2\u0412\u0413\7\u00b7\2\2\u0413\u0415\3\2\2"+
		"\2\u0414\u0411\3\2\2\2\u0414\u0415\3\2\2\2\u0415Q\3\2\2\2\u0416\u0417"+
		"\5T+\2\u0417\u041d\7\u00b7\2\2\u0418\u0419\5T+\2\u0419\u041a\7\u00b7\2"+
		"\2\u041a\u041c\3\2\2\2\u041b\u0418\3\2\2\2\u041c\u041f\3\2\2\2\u041d\u041b"+
		"\3\2\2\2\u041d\u041e\3\2\2\2\u041eS\3\2\2\2\u041f\u041d\3\2\2\2\u0420"+
		"\u042e\5\66\34\2\u0421\u0422\7\u0173\2\2\u0422\u0424\5\u00fa~\2\u0423"+
		"\u0425\5d\63\2\u0424\u0423\3\2\2\2\u0424\u0425\3\2\2\2\u0425\u0426\3\2"+
		"\2\2\u0426\u0427\5N(\2\u0427\u042e\3\2\2\2\u0428\u0429\t\16\2\2\u0429"+
		"\u042b\5\u00fa~\2\u042a\u042c\5d\63\2\u042b\u042a\3\2\2\2\u042b\u042c"+
		"\3\2\2\2\u042c\u042e\3\2\2\2\u042d\u0420\3\2\2\2\u042d\u0421\3\2\2\2\u042d"+
		"\u0428\3\2\2\2\u042eU\3\2\2\2\u042f\u0437\7\u00ca\2\2\u0430\u0433\7\u0111"+
		"\2\2\u0431\u0432\7\u01ed\2\2\u0432\u0434\7\u0222\2\2\u0433\u0431\3\2\2"+
		"\2\u0433\u0434\3\2\2\2\u0434\u0437\3\2\2\2\u0435\u0437\7\u0222\2\2\u0436"+
		"\u042f\3\2\2\2\u0436\u0430\3\2\2\2\u0436\u0435\3\2\2\2\u0437\u0438\3\2"+
		"\2\2\u0438\u0439\7f\2\2\u0439\u043a\7\16\2\2\u043a\u043b\5\u01b0\u00d9"+
		"\2\u043b\u043c\t\f\2\2\u043c\u043d\5X-\2\u043d\u0441\7\u014d\2\2\u043e"+
		"\u043f\5\u00fa~\2\u043f\u0440\7\u00b7\2\2\u0440\u0442\3\2\2\2\u0441\u043e"+
		"\3\2\2\2\u0441\u0442\3\2\2\2\u0442W\3\2\2\2\u0443\u0444\5Z.\2\u0444\u044a"+
		"\7\u00b7\2\2\u0445\u0446\5Z.\2\u0446\u0447\7\u00b7\2\2\u0447\u0449\3\2"+
		"\2\2\u0448\u0445\3\2\2\2\u0449\u044c\3\2\2\2\u044a\u0448\3\2\2\2\u044a"+
		"\u044b\3\2\2\2\u044bY\3\2\2\2\u044c\u044a\3\2\2\2\u044d\u0451\5\66\34"+
		"\2\u044e\u0451\5L\'\2\u044f\u0451\5\\/\2\u0450\u044d\3\2\2\2\u0450\u044e"+
		"\3\2\2\2\u0450\u044f\3\2\2\2\u0451[\3\2\2\2\u0452\u045a\7\u00ca\2\2\u0453"+
		"\u0456\7\u0111\2\2\u0454\u0455\7\u01ed\2\2\u0455\u0457\7\u0222\2\2\u0456"+
		"\u0454\3\2\2\2\u0456\u0457\3\2\2\2\u0457\u045a\3\2\2\2\u0458\u045a\7\u0222"+
		"\2\2\u0459\u0452\3\2\2\2\u0459\u0453\3\2\2\2\u0459\u0458\3\2\2\2\u045a"+
		"\u045b\3\2\2\2\u045b\u045c\t\16\2\2\u045c\u045e\5\u01b0\u00d9\2\u045d"+
		"\u045f\5d\63\2\u045e\u045d\3\2\2\2\u045e\u045f\3\2\2\2\u045f\u0461\3\2"+
		"\2\2\u0460\u0462\5h\65\2\u0461\u0460\3\2\2\2\u0461\u0462\3\2\2\2\u0462"+
		"\u0464\3\2\2\2\u0463\u0465\t\f\2\2\u0464\u0463\3\2\2\2\u0464\u0465\3\2"+
		"\2\2\u0465\u0467\3\2\2\2\u0466\u0468\5\64\33\2\u0467\u0466\3\2\2\2\u0467"+
		"\u0468\3\2\2\2\u0468\u046a\3\2\2\2\u0469\u046b\5\u00b2Z\2\u046a\u0469"+
		"\3\2\2\2\u046a\u046b\3\2\2\2\u046b\u046c\3\2\2\2\u046c\u0470\5\f\7\2\u046d"+
		"\u046e\5\u00fa~\2\u046e\u046f\7\u00b7\2\2\u046f\u0471\3\2\2\2\u0470\u046d"+
		"\3\2\2\2\u0470\u0471\3\2\2\2\u0471]\3\2\2\2\u0472\u0473\7\u0144\2\2\u0473"+
		"\u0476\t\16\2\2\u0474\u0475\7\u0188\2\2\u0475\u0477\7\u0158\2\2\u0476"+
		"\u0474\3\2\2\2\u0476\u0477\3\2\2\2\u0477\u0478\3\2\2\2\u0478\u0479\5\u01b0"+
		"\u00d9\2\u0479_\3\2\2\2\u047a\u047b\7\u0247\2\2\u047b\u047c\7\u020b\2"+
		"\2\u047c\u0480\7\u0252\2\2\u047d\u047e\7\u01b2\2\2\u047e\u0481\5\u01e8"+
		"\u00f5\2\u047f\u0481\5\u0164\u00b3\2\u0480\u047d\3\2\2\2\u0480\u047f\3"+
		"\2\2\2\u0480\u0481\3\2\2\2\u0481a\3\2\2\2\u0482\u0483\7\u0247\2\2\u0483"+
		"\u0484\7\u0111\2\2\u0484\u0485\7\u020b\2\2\u0485\u0486\5\u01b0\u00d9\2"+
		"\u0486c\3\2\2\2\u0487\u0488\7\u00b8\2\2\u0488\u049e\7\u00b9\2\2\u0489"+
		"\u048a\7\u00b8\2\2\u048a\u048f\5f\64\2\u048b\u048c\7\u00ba\2\2\u048c\u048e"+
		"\5f\64\2\u048d\u048b\3\2\2\2\u048e\u0491\3\2\2\2\u048f\u048d\3\2\2\2\u048f"+
		"\u0490\3\2\2\2\u0490\u0492\3\2\2\2\u0491\u048f\3\2\2\2\u0492\u0493\7\u00b9"+
		"\2\2\u0493\u049e\3\2\2\2\u0494\u0495\6\63\4\2\u0495\u049a\5f\64\2\u0496"+
		"\u0497\7\u00ba\2\2\u0497\u0499\5f\64\2\u0498\u0496\3\2\2\2\u0499\u049c"+
		"\3\2\2\2\u049a\u0498\3\2\2\2\u049a\u049b\3\2\2\2\u049b\u049e\3\2\2\2\u049c"+
		"\u049a\3\2\2\2\u049d\u0487\3\2\2\2\u049d\u0489\3\2\2\2\u049d\u0494\3\2"+
		"\2\2\u049ee\3\2\2\2\u049f\u04a5\7\u018b\2\2\u04a0\u04a5\7d\2\2\u04a1\u04a5"+
		"\7A\2\2\u04a2\u04a3\7\u018b\2\2\u04a3\u04a5\7d\2\2\u04a4\u049f\3\2\2\2"+
		"\u04a4\u04a0\3\2\2\2\u04a4\u04a1\3\2\2\2\u04a4\u04a2\3\2\2\2\u04a4\u04a5"+
		"\3\2\2\2\u04a5\u04a6\3\2\2\2\u04a6\u04a7\5\u00fa~\2\u04a7\u04a9\5D#\2"+
		"\u04a8\u04aa\5F$\2\u04a9\u04a8\3\2\2\2\u04a9\u04aa\3\2\2\2\u04aa\u04ae"+
		"\3\2\2\2\u04ab\u04ad\5H%\2\u04ac\u04ab\3\2\2\2\u04ad\u04b0\3\2\2\2\u04ae"+
		"\u04ac\3\2\2\2\u04ae\u04af\3\2\2\2\u04af\u04b2\3\2\2\2\u04b0\u04ae\3\2"+
		"\2\2\u04b1\u04b3\5J&\2\u04b2\u04b1\3\2\2\2\u04b2\u04b3\3\2\2\2\u04b3\u04ca"+
		"\3\2\2\2\u04b4\u04ba\5\u00fa~\2\u04b5\u04bb\7\u018b\2\2\u04b6\u04bb\7"+
		"d\2\2\u04b7\u04bb\7A\2\2\u04b8\u04b9\7\u018b\2\2\u04b9\u04bb\7d\2\2\u04ba"+
		"\u04b5\3\2\2\2\u04ba\u04b6\3\2\2\2\u04ba\u04b7\3\2\2\2\u04ba\u04b8\3\2"+
		"\2\2\u04ba\u04bb\3\2\2\2\u04bb\u04bc\3\2\2\2\u04bc\u04be\5D#\2\u04bd\u04bf"+
		"\5F$\2\u04be\u04bd\3\2\2\2\u04be\u04bf\3\2\2\2\u04bf\u04c3\3\2\2\2\u04c0"+
		"\u04c2\5H%\2\u04c1\u04c0\3\2\2\2\u04c2\u04c5\3\2\2\2\u04c3\u04c1\3\2\2"+
		"\2\u04c3\u04c4\3\2\2\2\u04c4\u04c7\3\2\2\2\u04c5\u04c3\3\2\2\2\u04c6\u04c8"+
		"\5J&\2\u04c7\u04c6\3\2\2\2\u04c7\u04c8\3\2\2\2\u04c8\u04ca\3\2\2\2\u04c9"+
		"\u04a4\3\2\2\2\u04c9\u04b4\3\2\2\2\u04cag\3\2\2\2\u04cb\u04cd\5j\66\2"+
		"\u04cc\u04cb\3\2\2\2\u04cd\u04ce\3\2\2\2\u04ce\u04cc\3\2\2\2\u04ce\u04cf"+
		"\3\2\2\2\u04cfi\3\2\2\2\u04d0\u04d1\7I\2\2\u04d1\u04dc\7\u0088\2\2\u04d2"+
		"\u04d3\7\u0088\2\2\u04d3\u04d4\7~\2\2\u04d4\u04dc\t\17\2\2\u04d5\u04d7"+
		"\7\u0148\2\2\u04d6\u04d5\3\2\2\2\u04d6\u04d7\3\2\2\2\u04d7\u04d8\3\2\2"+
		"\2\u04d8\u04d9\7t\2\2\u04d9\u04da\7\u0245\2\2\u04da\u04dc\7\u02b6\2\2"+
		"\u04db\u04d0\3\2\2\2\u04db\u04d2\3\2\2\2\u04db\u04d6\3\2\2\2\u04dck\3"+
		"\2\2\2\u04dd\u04df\t\20\2\2\u04de\u04e0\7\u018a\2\2\u04df\u04de\3\2\2"+
		"\2\u04df\u04e0\3\2\2\2\u04e0\u04e1\3\2\2\2\u04e1\u04e7\5\u00c2b\2\u04e2"+
		"\u04e3\7\u00b8\2\2\u04e3\u04e4\5\u00eav\2\u04e4\u04e5\7\u00b9\2\2\u04e5"+
		"\u04e8\3\2\2\2\u04e6\u04e8\5\u00eav\2\u04e7\u04e2\3\2\2\2\u04e7\u04e6"+
		"\3\2\2\2\u04e7\u04e8\3\2\2\2\u04e8\u04f2\3\2\2\2\u04e9\u04ea\7\u0198\2"+
		"\2\u04ea\u04ef\7\u02ba\2\2\u04eb\u04ec\7\u00ba\2\2\u04ec\u04ee\7\u02ba"+
		"\2\2\u04ed\u04eb\3\2\2\2\u04ee\u04f1\3\2\2\2\u04ef\u04ed\3\2\2\2\u04ef"+
		"\u04f0\3\2\2\2\u04f0\u04f3\3\2\2\2\u04f1\u04ef\3\2\2\2\u04f2\u04e9\3\2"+
		"\2\2\u04f2\u04f3\3\2\2\2\u04f3\u04f5\3\2\2\2\u04f4\u04f6\5\u00b4[\2\u04f5"+
		"\u04f4\3\2\2\2\u04f5\u04f6\3\2\2\2\u04f6m\3\2\2\2\u04f7\u04fb\5p9\2\u04f8"+
		"\u04fb\5r:\2\u04f9\u04fb\5t;\2\u04fa\u04f7\3\2\2\2\u04fa\u04f8\3\2\2\2"+
		"\u04fa\u04f9\3\2\2\2\u04fbo\3\2\2\2\u04fc\u04fd\7\u0188\2\2\u04fd\u04fe"+
		"\5\u00b6\\\2\u04fe\u04ff\7\u026a\2\2\u04ff\u0503\5\4\3\2\u0500\u0502\5"+
		"v<\2\u0501\u0500\3\2\2\2\u0502\u0505\3\2\2\2\u0503\u0501\3\2\2\2\u0503"+
		"\u0504\3\2\2\2\u0504\u0507\3\2\2\2\u0505\u0503\3\2\2\2\u0506\u0508\5x"+
		"=\2\u0507\u0506\3\2\2\2\u0507\u0508\3\2\2\2\u0508\u0509\3\2\2\2\u0509"+
		"\u050a\7\u014d\2\2\u050a\u050b\7\u0188\2\2\u050bq\3\2\2\2\u050c\u050d"+
		"\7\u0188\2\2\u050d\u050e\5\u00b6\\\2\u050e\u0511\5\b\5\2\u050f\u0510\7"+
		"\u0149\2\2\u0510\u0512\5\b\5\2\u0511\u050f\3\2\2\2\u0511\u0512\3\2\2\2"+
		"\u0512s\3\2\2\2\u0513\u0514\7\u00bb\2\2\u0514\u0515\7\u0188\2\2\u0515"+
		"\u0516\5\u00b6\\\2\u0516\u0517\7\u026a\2\2\u0517\u0518\5\b\5\2\u0518u"+
		"\3\2\2\2\u0519\u051a\t\21\2\2\u051a\u051b\5\u00b6\\\2\u051b\u051c\7\u026a"+
		"\2\2\u051c\u051d\5\4\3\2\u051dw\3\2\2\2\u051e\u051f\7\u0149\2\2\u051f"+
		"\u0520\5\4\3\2\u0520y\3\2\2\2\u0521\u0524\7?\2\2\u0522\u0525\5\u00f4{"+
		"\2\u0523\u0525\5\u00c2b\2\u0524\u0522\3\2\2\2\u0524\u0523\3\2\2\2\u0525"+
		"{\3\2\2\2\u0526\u0528\7\65\2\2\u0527\u0529\7\u02ba\2\2\u0528\u0527\3\2"+
		"\2\2\u0528\u0529\3\2\2\2\u0529\u052c\3\2\2\2\u052a\u052b\7\u0290\2\2\u052b"+
		"\u052d\5\u00b6\\\2\u052c\u052a\3\2\2\2\u052c\u052d\3\2\2\2\u052d}\3\2"+
		"\2\2\u052e\u052f\7:\2\2\u052f\u0530\7+\2\2\u0530\u0531\5\u0080A\2\u0531"+
		"\177\3\2\2\2\u0532\u0535\5\u0082B\2\u0533\u0535\5\u0084C\2\u0534\u0532"+
		"\3\2\2\2\u0534\u0533\3\2\2\2\u0535\u0081\3\2\2\2\u0536\u0537\7\63\2\2"+
		"\u0537\u0538\7\u02b6\2\2\u0538\u0539\5\u00fc\177\2\u0539\u053a\7\u0298"+
		"\2\2\u053a\u053b\7T\2\2\u053b\u0083\3\2\2\2\u053c\u053d\5\u00fc\177\2"+
		"\u053d\u053e\7\u0298\2\2\u053e\u053f\7y\2\2\u053f\u0085\3\2\2\2\u0540"+
		"\u0542\7J\2\2\u0541\u0543\7\u02ba\2\2\u0542\u0541\3\2\2\2\u0542\u0543"+
		"\3\2\2\2\u0543\u0087\3\2\2\2\u0544\u0545\7\u01c0\2\2\u0545\u0546\7b\2"+
		"\2\u0546\u0549\5\u00fa~\2\u0547\u0548\7\u0270\2\2\u0548\u054a\5\u00fa"+
		"~\2\u0549\u0547\3\2\2\2\u0549\u054a\3\2\2\2\u054a\u054d\3\2\2\2\u054b"+
		"\u054c\7\u00d4\2\2\u054c\u054e\5\u00fa~\2\u054d\u054b\3\2\2\2\u054d\u054e"+
		"\3\2\2\2\u054e\u0089\3\2\2\2\u054f\u0550\7\u01eb\2\2\u0550\u0556\5\u00fa"+
		"~\2\u0551\u0554\7\u016a\2\2\u0552\u0555\5\u0150\u00a9\2\u0553\u0555\5"+
		"\u00c2b\2\u0554\u0552\3\2\2\2\u0554\u0553\3\2\2\2\u0555\u0557\3\2\2\2"+
		"\u0556\u0551\3\2\2\2\u0556\u0557\3\2\2\2\u0557\u008b\3\2\2\2\u0558\u055a"+
		"\7\67\2\2\u0559\u055b\7\u016f\2\2\u055a\u0559\3\2\2\2\u055a\u055b\3\2"+
		"\2\2\u055b\u055c\3\2\2\2\u055c\u055e\5\u00fa~\2\u055d\u055f\5\u016a\u00b6"+
		"\2\u055e\u055d\3\2\2\2\u055e\u055f\3\2\2\2\u055f\u0560\3\2\2\2\u0560\u0561"+
		"\7\u0198\2\2\u0561\u0566\5\u00fa~\2\u0562\u0563\7\u00ba\2\2\u0563\u0565"+
		"\5\u00fa~\2\u0564\u0562\3\2\2\2\u0565\u0568\3\2\2\2\u0566\u0564\3\2\2"+
		"\2\u0566\u0567\3\2\2\2\u0567\u056a\3\2\2\2\u0568\u0566\3\2\2\2\u0569\u056b"+
		"\5\u008eH\2\u056a\u0569\3\2\2\2\u056a\u056b\3\2\2\2\u056b\u008d\3\2\2"+
		"\2\u056c\u056d\7\u01b3\2\2\u056d\u056e\5\u00c2b\2\u056e\u008f\3\2\2\2"+
		"\u056f\u0570\7\25\2\2\u0570\u0571\7\u02ba\2\2\u0571\u0091\3\2\2\2\u0572"+
		"\u0573\7l\2\2\u0573\u057a\5\u00c2b\2\u0574\u0575\7l\2\2\u0575\u0576\7"+
		"\u00b8\2\2\u0576\u0577\5\u00c2b\2\u0577\u0578\7\u00b9\2\2\u0578\u057a"+
		"\3\2\2\2\u0579\u0572\3\2\2\2\u0579\u0574\3\2\2\2\u057a\u0093\3\2\2\2\u057b"+
		"\u057d\7\u00bb\2\2\u057c\u057b\3\2\2\2\u057c\u057d\3\2\2\2\u057d\u057e"+
		"\3\2\2\2\u057e\u0580\7o\2\2\u057f\u0581\5\u00c2b\2\u0580\u057f\3\2\2\2"+
		"\u0580\u0581\3\2\2\2\u0581\u0095\3\2\2\2\u0582\u0583\7q\2\2\u0583\u0097"+
		"\3\2\2\2\u0584\u0590\7r\2\2\u0585\u0587\7\u008b\2\2\u0586\u0588\7\u0286"+
		"\2\2\u0587\u0586\3\2\2\2\u0587\u0588\3\2\2\2\u0588\u0589\3\2\2\2\u0589"+
		"\u058e\5\u00c2b\2\u058a\u058b\7\u0244\2\2\u058b\u058c\7T\2\2\u058c\u058d"+
		"\7\u0298\2\2\u058d\u058f\5\u00c2b\2\u058e\u058a\3\2\2\2\u058e\u058f\3"+
		"\2\2\2\u058f\u0591\3\2\2\2\u0590\u0585\3\2\2\2\u0590\u0591\3\2\2\2\u0591"+
		"\u0099\3\2\2\2\u0592\u0594\7v\2\2\u0593\u0595\5\u00c2b\2\u0594\u0593\3"+
		"\2\2\2\u0594\u0595\3\2\2\2\u0595\u009b\3\2\2\2\u0596\u059b\5\u009eP\2"+
		"\u0597\u059b\5\u00a0Q\2\u0598\u059b\5\u00a2R\2\u0599\u059b\5\u00a4S\2"+
		"\u059a\u0596\3\2\2\2\u059a\u0597\3\2\2\2\u059a\u0598\3\2\2\2\u059a\u0599"+
		"\3\2\2\2\u059b\u009d\3\2\2\2\u059c\u059e\t\22\2\2\u059d\u059c\3\2\2\2"+
		"\u059d\u059e\3\2\2\2\u059e\u059f\3\2\2\2\u059f\u05a0\5\u00fa~\2\u05a0"+
		"\u05a1\7\u0298\2\2\u05a1\u05a2\5\u00fa~\2\u05a2\u009f\3\2\2\2\u05a3\u05a5"+
		"\7\u0116\2\2\u05a4\u05a3\3\2\2\2\u05a4\u05a5\3\2\2\2\u05a5\u05a6\3\2\2"+
		"\2\u05a6\u05a9\7\u023c\2\2\u05a7\u05a9\7!\2\2\u05a8\u05a4\3\2\2\2\u05a8"+
		"\u05a7\3\2\2\2\u05a9\u05ab\3\2\2\2\u05aa\u05ac\7\u0298\2\2\u05ab\u05aa"+
		"\3\2\2\2\u05ab\u05ac\3\2\2\2\u05ac\u05ad\3\2\2\2\u05ad\u05ae\5\u00c2b"+
		"\2\u05ae\u00a1\3\2\2\2\u05af\u05b0\t\23\2\2\u05b0\u05b1\t\24\2\2\u05b1"+
		"\u00a3\3\2\2\2\u05b2\u05b3\7n\2\2\u05b3\u05b6\7\u0298\2\2\u05b4\u05b7"+
		"\5\u00c2b\2\u05b5\u05b7\7^\2\2\u05b6\u05b4\3\2\2\2\u05b6\u05b5\3\2\2\2"+
		"\u05b7\u05b9\3\2\2\2\u05b8\u05ba\7\u0282\2\2\u05b9\u05b8\3\2\2\2\u05b9"+
		"\u05ba\3\2\2\2\u05ba\u05bb\3\2\2\2\u05bb\u05bc\7\u016a\2\2\u05bc\u05bd"+
		"\t\25\2\2\u05bd\u00a5\3\2\2\2\u05be\u05bf\7\u0083\2\2\u05bf\u05c0\5\u00fa"+
		"~\2\u05c0\u00a7\3\2\2\2\u05c1\u05c3\7\u0287\2\2\u05c2\u05c4\7\u00b8\2"+
		"\2\u05c3\u05c2\3\2\2\2\u05c3\u05c4\3\2\2\2\u05c4\u05c5\3\2\2\2\u05c5\u05ca"+
		"\5\u00c2b\2\u05c6\u05c7\7\u00ba\2\2\u05c7\u05c9\5\u00c2b\2\u05c8\u05c6"+
		"\3\2\2\2\u05c9\u05cc\3\2\2\2\u05ca\u05c8\3\2\2\2\u05ca\u05cb\3\2\2\2\u05cb"+
		"\u05ce\3\2\2\2\u05cc\u05ca\3\2\2\2\u05cd\u05cf\7\u00b9\2\2\u05ce\u05cd"+
		"\3\2\2\2\u05ce\u05cf\3\2\2\2\u05cf\u05d0\3\2\2\2\u05d0\u05d2\7\u0198\2"+
		"\2\u05d1\u05d3\7\u00b8\2\2\u05d2\u05d1\3\2\2\2\u05d2\u05d3\3\2\2\2\u05d3"+
		"\u05d4\3\2\2\2\u05d4\u05d9\5\u00fa~\2\u05d5\u05d6\7\u00ba\2\2\u05d6\u05d8"+
		"\5\u00fa~\2\u05d7\u05d5\3\2\2\2\u05d8\u05db\3\2\2\2\u05d9\u05d7\3\2\2"+
		"\2\u05d9\u05da\3\2\2\2\u05da\u05dd\3\2\2\2\u05db\u05d9\3\2\2\2\u05dc\u05de"+
		"\7\u00b9\2\2\u05dd\u05dc\3\2\2\2\u05dd\u05de\3\2\2\2\u05de\u00a9\3\2\2"+
		"\2\u05df\u05e0\7\u009d\2\2\u05e0\u05e1\5\u00b6\\\2\u05e1\u05e2\t\26\2"+
		"\2\u05e2\u05e3\5\4\3\2\u05e3\u05e5\7\u014d\2\2\u05e4\u05e6\t\27\2\2\u05e5"+
		"\u05e4\3\2\2\2\u05e5\u05e6\3\2\2\2\u05e6\u00ab\3\2\2\2\u05e7\u05e8\7Q"+
		"\2\2\u05e8\u05e9\5\4\3\2\u05e9\u05ea\7\u014d\2\2\u05ea\u05eb\7Q\2\2\u05eb"+
		"\u00ad\3\2\2\2\u05ec\u05ed\7\u016a\2\2\u05ed\u05ee\7\u02ba\2\2\u05ee\u05f0"+
		"\7\u018b\2\2\u05ef\u05f1\7\u00b8\2\2\u05f0\u05ef\3\2\2\2\u05f0\u05f1\3"+
		"\2\2\2\u05f1\u05f2\3\2\2\2\u05f2\u05f4\5\u0150\u00a9\2\u05f3\u05f5\7\u00b9"+
		"\2\2\u05f4\u05f3\3\2\2\2\u05f4\u05f5\3\2\2\2\u05f5\u05f6\3\2\2\2\u05f6"+
		"\u05f7\7Q\2\2\u05f7\u05f8\5\4\3\2\u05f8\u05f9\7\u014d\2\2\u05f9\u05fa"+
		"\7Q\2\2\u05fa\u00af\3\2\2\2\u05fb\u05fc\7\u016a\2\2\u05fc\u05fd\7\u02ba"+
		"\2\2\u05fd\u05ff\7\u018b\2\2\u05fe\u0600\7w\2\2\u05ff\u05fe\3\2\2\2\u05ff"+
		"\u0600\3\2\2\2\u0600\u0601\3\2\2\2\u0601\u0602\5\u00c2b\2\u0602\u0603"+
		"\7\u00b6\2\2\u0603\u0606\5\u00c2b\2\u0604\u0605\t\30\2\2\u0605\u0607\5"+
		"\u00c2b\2\u0606\u0604\3\2\2\2\u0606\u0607\3\2\2\2\u0607\u0608\3\2\2\2"+
		"\u0608\u0609\7Q\2\2\u0609\u060a\5\4\3\2\u060a\u060b\7\u014d\2\2\u060b"+
		"\u060c\7Q\2\2\u060c\u00b1\3\2\2\2\u060d\u060e\7\u02ba\2\2\u060e\u0615"+
		"\7\u02ab\2\2\u060f\u0610\7\u029b\2\2\u0610\u0611\7\u029b\2\2\u0611\u0612"+
		"\7\u02ba\2\2\u0612\u0613\7\u029d\2\2\u0613\u0615\7\u029d\2\2\u0614\u060d"+
		"\3\2\2\2\u0614\u060f\3\2\2\2\u0615\u00b3\3\2\2\2\u0616\u0617\7\u0285\2"+
		"\2\u0617\u061c\5\u00c2b\2\u0618\u0619\7\u00ba\2\2\u0619\u061b\5\u00c2"+
		"b\2\u061a\u0618\3\2\2\2\u061b\u061e\3\2\2\2\u061c\u061a\3\2\2\2\u061c"+
		"\u061d\3\2\2\2\u061d\u00b5\3\2\2\2\u061e\u061c\3\2\2\2\u061f\u0621\b\\"+
		"\1\2\u0620\u0622\7\u01e3\2\2\u0621\u0620\3\2\2\2\u0621\u0622\3\2\2\2\u0622"+
		"\u0623\3\2\2\2\u0623\u0624\7\u00b8\2\2\u0624\u0625\5\u00b6\\\2\u0625\u0626"+
		"\7\u00b9\2\2\u0626\u0629\3\2\2\2\u0627\u0629\5\u00b8]\2\u0628\u061f\3"+
		"\2\2\2\u0628\u0627\3\2\2\2\u0629\u0630\3\2\2\2\u062a\u062b\f\4\2\2\u062b"+
		"\u062c\5\u00be`\2\u062c\u062d\5\u00b6\\\5\u062d\u062f\3\2\2\2\u062e\u062a"+
		"\3\2\2\2\u062f\u0632\3\2\2\2\u0630\u062e\3\2\2\2\u0630\u0631\3\2\2\2\u0631"+
		"\u00b7\3\2\2\2\u0632\u0630\3\2\2\2\u0633\u0637\5\u00ba^\2\u0634\u0637"+
		"\5\u00bc_\2\u0635\u0637\5\u00c2b\2\u0636\u0633\3\2\2\2\u0636\u0634\3\2"+
		"\2\2\u0636\u0635\3\2\2\2\u0637\u00b9\3\2\2\2\u0638\u0639\5\u00c2b\2\u0639"+
		"\u063b\7\u019c\2\2\u063a\u063c\7\u01e3\2\2\u063b\u063a\3\2\2\2\u063b\u063c"+
		"\3\2\2\2\u063c\u063d\3\2\2\2\u063d\u063e\7\u01e4\2\2\u063e\u0646\3\2\2"+
		"\2\u063f\u0640\5\u00c2b\2\u0640\u0641\7\u00dd\2\2\u0641\u0642\5\u00c2"+
		"b\2\u0642\u0643\7\u00cd\2\2\u0643\u0644\5\u00c2b\2\u0644\u0646\3\2\2\2"+
		"\u0645\u0638\3\2\2\2\u0645\u063f\3\2\2\2\u0646\u00bb\3\2\2\2\u0647\u0648"+
		"\5\u00c2b\2\u0648\u0649\5\u00c0a\2\u0649\u064a\5\u00c2b\2\u064a\u00bd"+
		"\3\2\2\2\u064b\u064c\t\31\2\2\u064c\u00bf\3\2\2\2\u064d\u0658\7\u0298"+
		"\2\2\u064e\u0658\7\u029a\2\2\u064f\u0658\7\u029b\2\2\u0650\u0658\7\u029c"+
		"\2\2\u0651\u0658\7\u029d\2\2\u0652\u0658\7\u029e\2\2\u0653\u0655\7\u01e3"+
		"\2\2\u0654\u0653\3\2\2\2\u0654\u0655\3\2\2\2\u0655\u0656\3\2\2\2\u0656"+
		"\u0658\t\32\2\2\u0657\u064d\3\2\2\2\u0657\u064e\3\2\2\2\u0657\u064f\3"+
		"\2\2\2\u0657\u0650\3\2\2\2\u0657\u0651\3\2\2\2\u0657\u0652\3\2\2\2\u0657"+
		"\u0654\3\2\2\2\u0658\u00c1\3\2\2\2\u0659\u065a\bb\1\2\u065a\u065b\7\u00b8"+
		"\2\2\u065b\u065c\5\u0150\u00a9\2\u065c\u065d\7\u00b9\2\2\u065d\u066c\3"+
		"\2\2\2\u065e\u065f\7\u00b8\2\2\u065f\u0660\5\u00c2b\2\u0660\u0661\7\u00b9"+
		"\2\2\u0661\u066c\3\2\2\2\u0662\u066c\5\u00c6d\2\u0663\u066c\5\u00caf\2"+
		"\u0664\u066c\5\u00e4s\2\u0665\u066c\5\u00ceh\2\u0666\u066c\5\u00d4k\2"+
		"\u0667\u066c\5\u00d6l\2\u0668\u066c\5\u00e0q\2\u0669\u066c\5\u00e2r\2"+
		"\u066a\u066c\5\u00c4c\2\u066b\u0659\3\2\2\2\u066b\u065e\3\2\2\2\u066b"+
		"\u0662\3\2\2\2\u066b\u0663\3\2\2\2\u066b\u0664\3\2\2\2\u066b\u0665\3\2"+
		"\2\2\u066b\u0666\3\2\2\2\u066b\u0667\3\2\2\2\u066b\u0668\3\2\2\2\u066b"+
		"\u0669\3\2\2\2\u066b\u066a\3\2\2\2\u066c\u0677\3\2\2\2\u066d\u066e\f\17"+
		"\2\2\u066e\u066f\t\33\2\2\u066f\u0676\5\u00c2b\20\u0670\u0671\f\16\2\2"+
		"\u0671\u0672\t\34\2\2\u0672\u0676\5\u00c2b\17\u0673\u0674\f\20\2\2\u0674"+
		"\u0676\5\u00c8e\2\u0675\u066d\3\2\2\2\u0675\u0670\3\2\2\2\u0675\u0673"+
		"\3\2\2\2\u0676\u0679\3\2\2\2\u0677\u0675\3\2\2\2\u0677\u0678\3\2\2\2\u0678"+
		"\u00c3\3\2\2\2\u0679\u0677\3\2\2\2\u067a\u0683\5\u00f6|\2\u067b\u0683"+
		"\5\u00f8}\2\u067c\u0683\5\u0104\u0083\2\u067d\u0683\5\u00fc\177\2\u067e"+
		"\u0683\5\u00fe\u0080\2\u067f\u0683\5\u0102\u0082\2\u0680\u0683\5\u0100"+
		"\u0081\2\u0681\u0683\5\u0106\u0084\2\u0682\u067a\3\2\2\2\u0682\u067b\3"+
		"\2\2\2\u0682\u067c\3\2\2\2\u0682\u067d\3\2\2\2\u0682\u067e\3\2\2\2\u0682"+
		"\u067f\3\2\2\2\u0682\u0680\3\2\2\2\u0682\u0681\3\2\2\2\u0683\u00c5\3\2"+
		"\2\2\u0684\u0685\7\u0197\2\2\u0685\u0686\5\u00c2b\2\u0686\u0687\5\u00c8"+
		"e\2\u0687\u00c7\3\2\2\2\u0688\u0689\t\35\2\2\u0689\u00c9\3\2\2\2\u068a"+
		"\u068b\5\u00ccg\2\u068b\u068c\t\36\2\2\u068c\u0691\5\u00ccg\2\u068d\u068e"+
		"\t\36\2\2\u068e\u0690\5\u00ccg\2\u068f\u068d\3\2\2\2\u0690\u0693\3\2\2"+
		"\2\u0691\u068f\3\2\2\2\u0691\u0692\3\2\2\2\u0692\u00cb\3\2\2\2\u0693\u0691"+
		"\3\2\2\2\u0694\u0695\7\u00b8\2\2\u0695\u0696\5\u00c2b\2\u0696\u0697\7"+
		"\u00b9\2\2\u0697\u069f\3\2\2\2\u0698\u069f\5\u00ceh\2\u0699\u069f\5\u00d6"+
		"l\2\u069a\u069f\5\u00e0q\2\u069b\u069f\5\u00e4s\2\u069c\u069f\5\u00e2"+
		"r\2\u069d\u069f\5\u00c4c\2\u069e\u0694\3\2\2\2\u069e\u0698\3\2\2\2\u069e"+
		"\u0699\3\2\2\2\u069e\u069a\3\2\2\2\u069e\u069b\3\2\2\2\u069e\u069c\3\2"+
		"\2\2\u069e\u069d\3\2\2\2\u069f\u00cd\3\2\2\2\u06a0\u06a3\5\u00d0i\2\u06a1"+
		"\u06a3\5\u00d2j\2\u06a2\u06a0\3\2\2\2\u06a2\u06a1\3\2\2\2\u06a3\u00cf"+
		"\3\2\2\2\u06a4\u06a5\7\u00f3\2\2\u06a5\u06ab\5\u00c2b\2\u06a6\u06a7\7"+
		"\u0290\2\2\u06a7\u06a8\5\u00c2b\2\u06a8\u06a9\7\u026a\2\2\u06a9\u06aa"+
		"\5\u00c2b\2\u06aa\u06ac\3\2\2\2\u06ab\u06a6\3\2\2\2\u06ac\u06ad\3\2\2"+
		"\2\u06ad\u06ab\3\2\2\2\u06ad\u06ae\3\2\2\2\u06ae\u06b1\3\2\2\2\u06af\u06b0"+
		"\7\u0149\2\2\u06b0\u06b2\5\u00c2b\2\u06b1\u06af\3\2\2\2\u06b1\u06b2\3"+
		"\2\2\2\u06b2\u06b3\3\2\2\2\u06b3\u06b4\7\u014d\2\2\u06b4\u00d1\3\2\2\2"+
		"\u06b5\u06bb\7\u00f3\2\2\u06b6\u06b7\7\u0290\2\2\u06b7\u06b8\5\u00b6\\"+
		"\2\u06b8\u06b9\7\u026a\2\2\u06b9\u06ba\5\u00c2b\2\u06ba\u06bc\3\2\2\2"+
		"\u06bb\u06b6\3\2\2\2\u06bc\u06bd\3\2\2\2\u06bd\u06bb\3\2\2\2\u06bd\u06be"+
		"\3\2\2\2\u06be\u06c1\3\2\2\2\u06bf\u06c0\7\u0149\2\2\u06c0\u06c2\5\u00c2"+
		"b\2\u06c1\u06bf\3\2\2\2\u06c1\u06c2\3\2\2\2\u06c2\u06c3\3\2\2\2\u06c3"+
		"\u06c4\7\u014d\2\2\u06c4\u00d3\3\2\2\2\u06c5\u06c6\5\u00fa~\2\u06c6\u06c7"+
		"\7\u02a3\2\2\u06c7\u06c8\t\37\2\2\u06c8\u00d5\3\2\2\2\u06c9\u06ca\7\b"+
		"\2\2\u06ca\u06cc\7\u00b8\2\2\u06cb\u06cd\5\u00d8m\2\u06cc\u06cb\3\2\2"+
		"\2\u06cc\u06cd\3\2\2\2\u06cd\u06ce\3\2\2\2\u06ce\u06cf";
	private static final String _serializedATNSegment1 =
		"\5\u00c2b\2\u06cf\u06d1\7\u00b9\2\2\u06d0\u06d2\5\u00dco\2\u06d1\u06d0"+
		"\3\2\2\2\u06d1\u06d2\3\2\2\2\u06d2\u0762\3\2\2\2\u06d3\u06d4\7\u0110\2"+
		"\2\u06d4\u06da\7\u00b8\2\2\u06d5\u06d7\5\u00d8m\2\u06d6\u06d5\3\2\2\2"+
		"\u06d6\u06d7\3\2\2\2\u06d7\u06d8\3\2\2\2\u06d8\u06db\5\u00c2b\2\u06d9"+
		"\u06db\7\u02a1\2\2\u06da\u06d6\3\2\2\2\u06da\u06d9\3\2\2\2\u06db\u06dc"+
		"\3\2\2\2\u06dc\u06de\7\u00b9\2\2\u06dd\u06df\5\u00dco\2\u06de\u06dd\3"+
		"\2\2\2\u06de\u06df\3\2\2\2\u06df\u0762\3\2\2\2\u06e0\u06e1\7\36\2\2\u06e1"+
		"\u06e7\7\u00b8\2\2\u06e2\u06e4\5\u00d8m\2\u06e3\u06e2\3\2\2\2\u06e3\u06e4"+
		"\3\2\2\2\u06e4\u06e5\3\2\2\2\u06e5\u06e8\5\u00c2b\2\u06e6\u06e8\7\u02a1"+
		"\2\2\u06e7\u06e3\3\2\2\2\u06e7\u06e6\3\2\2\2\u06e8\u06e9\3\2\2\2\u06e9"+
		"\u06eb\7\u00b9\2\2\u06ea\u06ec\5\u00dco\2\u06eb\u06ea\3\2\2\2\u06eb\u06ec"+
		"\3\2\2\2\u06ec\u0762\3\2\2\2\u06ed\u06ee\7\u00a3\2\2\u06ee\u06ef\7\u00b8"+
		"\2\2\u06ef\u06f0\7\u00b9\2\2\u06f0\u0762\5\u00dco\2\u06f1\u06f2\7\u00a4"+
		"\2\2\u06f2\u06f3\7\u00b8\2\2\u06f3\u06f4\7\u00b9\2\2\u06f4\u0762\5\u00dc"+
		"o\2\u06f5\u06f6\7\u00a5\2\2\u06f6\u06f7\7\u00b8\2\2\u06f7\u06f8\5\u00c2"+
		"b\2\u06f8\u06f9\7\u00b9\2\2\u06f9\u06fa\5\u00dco\2\u06fa\u0762\3\2\2\2"+
		"\u06fb\u06fc\7\u00a6\2\2\u06fc\u06fd\7\u00b8\2\2\u06fd\u0704\5\u00c2b"+
		"\2\u06fe\u06ff\7\u00ba\2\2\u06ff\u0702\5\u00c2b\2\u0700\u0701\7\u00ba"+
		"\2\2\u0701\u0703\5\u00c2b\2\u0702\u0700\3\2\2\2\u0702\u0703\3\2\2\2\u0703"+
		"\u0705\3\2\2\2\u0704\u06fe\3\2\2\2\u0704\u0705\3\2\2\2\u0705\u0706\3\2"+
		"\2\2\u0706\u0707\7\u00b9\2\2\u0707\u0708\5\u00dco\2\u0708\u0762\3\2\2"+
		"\2\u0709\u070a\7\u00a7\2\2\u070a\u070b\7\u00b8\2\2\u070b\u070c\5\u00c2"+
		"b\2\u070c\u070d\7\u00b9\2\2\u070d\u070e\5\u00dco\2\u070e\u0762\3\2\2\2"+
		"\u070f\u0710\7\u00a8\2\2\u0710\u0711\7\u00b8\2\2\u0711\u0718\5\u00c2b"+
		"\2\u0712\u0713\7\u00ba\2\2\u0713\u0716\5\u00c2b\2\u0714\u0715\7\u00ba"+
		"\2\2\u0715\u0717\5\u00c2b\2\u0716\u0714\3\2\2\2\u0716\u0717\3\2\2\2\u0717"+
		"\u0719\3\2\2\2\u0718\u0712\3\2\2\2\u0718\u0719\3\2\2\2\u0719\u071a\3\2"+
		"\2\2\u071a\u071b\7\u00b9\2\2\u071b\u071c\5\u00dco\2\u071c\u0762\3\2\2"+
		"\2\u071d\u071e\7\u01ce\2\2\u071e\u0720\7\u00b8\2\2\u071f\u0721\5\u00d8"+
		"m\2\u0720\u071f\3\2\2\2\u0720\u0721\3\2\2\2\u0721\u0722\3\2\2\2\u0722"+
		"\u0723\5\u00c2b\2\u0723\u0725\7\u00b9\2\2\u0724\u0726\5\u00dco\2\u0725"+
		"\u0724\3\2\2\2\u0725\u0726\3\2\2\2\u0726\u0762\3\2\2\2\u0727\u0728\7\u01d4"+
		"\2\2\u0728\u072a\7\u00b8\2\2\u0729\u072b\5\u00d8m\2\u072a\u0729\3\2\2"+
		"\2\u072a\u072b\3\2\2\2\u072b\u072c\3\2\2\2\u072c\u072d\5\u00c2b\2\u072d"+
		"\u072f\7\u00b9\2\2\u072e\u0730\5\u00dco\2\u072f\u072e\3\2\2\2\u072f\u0730"+
		"\3\2\2\2\u0730\u0762\3\2\2\2\u0731\u0732\7\u00b1\2\2\u0732\u0733\7\u00b8"+
		"\2\2\u0733\u0734\7\u00b9\2\2\u0734\u0762\5\u00dco\2\u0735\u0736\7\u00b2"+
		"\2\2\u0736\u0737\7\u00b8\2\2\u0737\u0738\7\u00b9\2\2\u0738\u0762\5\u00dc"+
		"o\2\u0739\u073a\7\u00b3\2\2\u073a\u073c\7\u00b8\2\2\u073b\u073d\5\u00d8"+
		"m\2\u073c\u073b\3\2\2\2\u073c\u073d\3\2\2\2\u073d\u073e\3\2\2\2\u073e"+
		"\u073f\5\u00c2b\2\u073f\u0741\7\u00b9\2\2\u0740\u0742\5\u00dco\2\u0741"+
		"\u0740\3\2\2\2\u0741\u0742\3\2\2\2\u0742\u0762\3\2\2\2\u0743\u0744\7\u025a"+
		"\2\2\u0744\u0746\7\u00b8\2\2\u0745\u0747\5\u00d8m\2\u0746\u0745\3\2\2"+
		"\2\u0746\u0747\3\2\2\2\u0747\u0748\3\2\2\2\u0748\u0749\5\u00c2b\2\u0749"+
		"\u074b\7\u00b9\2\2\u074a\u074c\5\u00dco\2\u074b\u074a\3\2\2\2\u074b\u074c"+
		"\3\2\2\2\u074c\u0762\3\2\2\2\u074d\u074e\7\u0099\2\2\u074e\u0750\7\u00b8"+
		"\2\2\u074f\u0751\5\u00d8m\2\u0750\u074f\3\2\2\2\u0750\u0751\3\2\2\2\u0751"+
		"\u0752\3\2\2\2\u0752\u0753\5\u00c2b\2\u0753\u0755\7\u00b9\2\2\u0754\u0756"+
		"\5\u00dco\2\u0755\u0754\3\2\2\2\u0755\u0756\3\2\2\2\u0756\u0762\3\2\2"+
		"\2\u0757\u0758\7\u00b5\2\2\u0758\u075a\7\u00b8\2\2\u0759\u075b\5\u00d8"+
		"m\2\u075a\u0759\3\2\2\2\u075a\u075b\3\2\2\2\u075b\u075c\3\2\2\2\u075c"+
		"\u075d\5\u00c2b\2\u075d\u075f\7\u00b9\2\2\u075e\u0760\5\u00dco\2\u075f"+
		"\u075e\3\2\2\2\u075f\u0760\3\2\2\2\u0760\u0762\3\2\2\2\u0761\u06c9\3\2"+
		"\2\2\u0761\u06d3\3\2\2\2\u0761\u06e0\3\2\2\2\u0761\u06ed\3\2\2\2\u0761"+
		"\u06f1\3\2\2\2\u0761\u06f5\3\2\2\2\u0761\u06fb\3\2\2\2\u0761\u0709\3\2"+
		"\2\2\u0761\u070f\3\2\2\2\u0761\u071d\3\2\2\2\u0761\u0727\3\2\2\2\u0761"+
		"\u0731\3\2\2\2\u0761\u0735\3\2\2\2\u0761\u0739\3\2\2\2\u0761\u0743\3\2"+
		"\2\2\u0761\u074d\3\2\2\2\u0761\u0757\3\2\2\2\u0762\u00d7\3\2\2\2\u0763"+
		"\u0764\t \2\2\u0764\u00d9\3\2\2\2\u0765\u0766\7\u01ee\2\2\u0766\u0767"+
		"\7\u00ef\2\2\u0767\u0769\5\u00c2b\2\u0768\u076a\t!\2\2\u0769\u0768\3\2"+
		"\2\2\u0769\u076a\3\2\2\2\u076a\u0772\3\2\2\2\u076b\u076c\7\u00ba\2\2\u076c"+
		"\u076e\5\u00c2b\2\u076d\u076f\t!\2\2\u076e\u076d\3\2\2\2\u076e\u076f\3"+
		"\2\2\2\u076f\u0771\3\2\2\2\u0770\u076b\3\2\2\2\u0771\u0774\3\2\2\2\u0772"+
		"\u0770\3\2\2\2\u0772\u0773\3\2\2\2\u0773\u00db\3\2\2\2\u0774\u0772\3\2"+
		"\2\2\u0775\u0776\7\u01f1\2\2\u0776\u0778\7\u00b8\2\2\u0777\u0779\5\u00de"+
		"p\2\u0778\u0777\3\2\2\2\u0778\u0779\3\2\2\2\u0779\u077b\3\2\2\2\u077a"+
		"\u077c\5\u00dan\2\u077b\u077a\3\2\2\2\u077b\u077c\3\2\2\2\u077c\u077d"+
		"\3\2\2\2\u077d\u077e\7\u00b9\2\2\u077e\u00dd\3\2\2\2\u077f\u0780\7\u01f5"+
		"\2\2\u0780\u0781\7\u00ef\2\2\u0781\u0786\5\u00c2b\2\u0782\u0783\7\u00ba"+
		"\2\2\u0783\u0785\5\u00c2b\2\u0784\u0782\3\2\2\2\u0785\u0788\3\2\2\2\u0786"+
		"\u0784\3\2\2\2\u0786\u0787\3\2\2\2\u0787\u00df\3\2\2\2\u0788\u0786\3\2"+
		"\2\2\u0789\u0852\7\u00a2\2\2\u078a\u078b\7\u00f4\2\2\u078b\u078c\7\u00b8"+
		"\2\2\u078c\u078d\5\u00c2b\2\u078d\u078e\7\u00d2\2\2\u078e\u0790\5D#\2"+
		"\u078f\u0791\5F$\2\u0790\u078f\3\2\2\2\u0790\u0791\3\2\2\2\u0791\u0792"+
		"\3\2\2\2\u0792\u0793\7\u00b9\2\2\u0793\u0852\3\2\2\2\u0794\u0795\7\u0110"+
		"\2\2\u0795\u0798\7\u00b8\2\2\u0796\u0799\5\u00c2b\2\u0797\u0799\7\u02a1"+
		"\2\2\u0798\u0796\3\2\2\2\u0798\u0797\3\2\2\2\u0799\u079a\3\2\2\2\u079a"+
		"\u0852\7\u00b9\2\2\u079b\u0852\7\u0118\2\2\u079c\u079d\7\u0116\2\2\u079d"+
		"\u0852\7\u011f\2\2\u079e\u07a2\7\u011a\2\2\u079f\u07a0\7\u0116\2\2\u07a0"+
		"\u07a2\7\u026c\2\2\u07a1\u079e\3\2\2\2\u07a1\u079f\3\2\2\2\u07a2\u07a7"+
		"\3\2\2\2\u07a3\u07a4\7\u00b8\2\2\u07a4\u07a5\5\u00c2b\2\u07a5\u07a6\7"+
		"\u00b9\2\2\u07a6\u07a8\3\2\2\2\u07a7\u07a3\3\2\2\2\u07a7\u07a8\3\2\2\2"+
		"\u07a8\u0852\3\2\2\2\u07a9\u0852\7\u011b\2\2\u07aa\u07ab\7\u0116\2\2\u07ab"+
		"\u0852\7\u0284\2\2\u07ac\u07ad\7\u00a9\2\2\u07ad\u07ae\7\u00b8\2\2\u07ae"+
		"\u07bb\5\u00c2b\2\u07af\u07b0\7\u00ba\2\2\u07b0\u07b8\5\u00c2b\2\u07b1"+
		"\u07b2\7\u00ba\2\2\u07b2\u07b3\5\u00c2b\2\u07b3\u07b4\7\u0298\2\2\u07b4"+
		"\u07b5\5\u00c2b\2\u07b5\u07b7\3\2\2\2\u07b6\u07b1\3\2\2\2\u07b7\u07ba"+
		"\3\2\2\2\u07b8\u07b6\3\2\2\2\u07b8\u07b9\3\2\2\2\u07b9\u07bc\3\2\2\2\u07ba"+
		"\u07b8\3\2\2\2\u07bb\u07af\3\2\2\2\u07bb\u07bc\3\2\2\2\u07bc\u07bd\3\2"+
		"\2\2\u07bd\u07be\7\u00b9\2\2\u07be\u0852\3\2\2\2\u07bf\u07c0\7\u00aa\2"+
		"\2\u07c0\u07c1\7\u00b8\2\2\u07c1\u07ce\5\u00c2b\2\u07c2\u07c3\7\u00ba"+
		"\2\2\u07c3\u07cb\5\u00c2b\2\u07c4\u07c5\7\u00ba\2\2\u07c5\u07c6\5\u00c2"+
		"b\2\u07c6\u07c7\7\u0298\2\2\u07c7\u07c8\5\u00c2b\2\u07c8\u07ca\3\2\2\2"+
		"\u07c9\u07c4\3\2\2\2\u07ca\u07cd\3\2\2\2\u07cb\u07c9\3\2\2\2\u07cb\u07cc"+
		"\3\2\2\2\u07cc\u07cf\3\2\2\2\u07cd\u07cb\3\2\2\2\u07ce\u07c2\3\2\2\2\u07ce"+
		"\u07cf\3\2\2\2\u07cf\u07d0\3\2\2\2\u07d0\u07d1\7\u00b9\2\2\u07d1\u0852"+
		"\3\2\2\2\u07d2\u07d3\7\u00ab\2\2\u07d3\u07d4\7\u00b8\2\2\u07d4\u07e1\5"+
		"\u00c2b\2\u07d5\u07d6\7\u00ba\2\2\u07d6\u07de\5\u00c2b\2\u07d7\u07d8\7"+
		"\u00ba\2\2\u07d8\u07d9\5\u00c2b\2\u07d9\u07da\7\u0298\2\2\u07da\u07db"+
		"\5\u00c2b\2\u07db\u07dd\3\2\2\2\u07dc\u07d7\3\2\2\2\u07dd\u07e0\3\2\2"+
		"\2\u07de\u07dc\3\2\2\2\u07de\u07df\3\2\2\2\u07df\u07e2\3\2\2\2\u07e0\u07de"+
		"\3\2\2\2\u07e1\u07d5\3\2\2\2\u07e1\u07e2\3\2\2\2\u07e2\u07e3\3\2\2\2\u07e3"+
		"\u07e4\7\u00b9\2\2\u07e4\u0852\3\2\2\2\u07e5\u07e6\7\u00ac\2\2\u07e6\u07e7"+
		"\7\u00b8\2\2\u07e7\u07f4\5\u00c2b\2\u07e8\u07e9\7\u00ba\2\2\u07e9\u07f1"+
		"\5\u00c2b\2\u07ea\u07eb\7\u00ba\2\2\u07eb\u07ec\5\u00c2b\2\u07ec\u07ed"+
		"\7\u0298\2\2\u07ed\u07ee\5\u00c2b\2\u07ee\u07f0\3\2\2\2\u07ef\u07ea\3"+
		"\2\2\2\u07f0\u07f3\3\2\2\2\u07f1\u07ef\3\2\2\2\u07f1\u07f2\3\2\2\2\u07f2"+
		"\u07f5\3\2\2\2\u07f3\u07f1\3\2\2\2\u07f4\u07e8\3\2\2\2\u07f4\u07f5\3\2"+
		"\2\2\u07f5\u07f6\3\2\2\2\u07f6\u07f7\7\u00b9\2\2\u07f7\u0852\3\2\2\2\u07f8"+
		"\u07f9\7\u00ad\2\2\u07f9\u07fa\7\u00b8\2\2\u07fa\u0807\5\u00c2b\2\u07fb"+
		"\u07fc\7\u00ba\2\2\u07fc\u0804\5\u00c2b\2\u07fd\u07fe\7\u00ba\2\2\u07fe"+
		"\u07ff\5\u00c2b\2\u07ff\u0800\7\u0298\2\2\u0800\u0801\5\u00c2b\2\u0801"+
		"\u0803\3\2\2\2\u0802\u07fd\3\2\2\2\u0803\u0806\3\2\2\2\u0804\u0802\3\2"+
		"\2\2\u0804\u0805\3\2\2\2\u0805\u0808\3\2\2\2\u0806\u0804\3\2\2\2\u0807"+
		"\u07fb\3\2\2\2\u0807\u0808\3\2\2\2\u0808\u0809\3\2\2\2\u0809\u080a\7\u00b9"+
		"\2\2\u080a\u0852\3\2\2\2\u080b\u080c\7\u00ae\2\2\u080c\u080d\7\u00b8\2"+
		"\2\u080d\u081a\5\u00c2b\2\u080e\u080f\7\u00ba\2\2\u080f\u0817\5\u00c2"+
		"b\2\u0810\u0811\7\u00ba\2\2\u0811\u0812\5\u00c2b\2\u0812\u0813\7\u0298"+
		"\2\2\u0813\u0814\5\u00c2b\2\u0814\u0816\3\2\2\2\u0815\u0810\3\2\2\2\u0816"+
		"\u0819\3\2\2\2\u0817\u0815\3\2\2\2\u0817\u0818\3\2\2\2\u0818\u081b\3\2"+
		"\2\2\u0819\u0817\3\2\2\2\u081a\u080e\3\2\2\2\u081a\u081b\3\2\2\2\u081b"+
		"\u081c\3\2\2\2\u081c\u081d\7\u00b9\2\2\u081d\u0852\3\2\2\2\u081e\u081f"+
		"\7\u00af\2\2\u081f\u0820\7\u00b8\2\2\u0820\u0828\5\u00c2b\2\u0821\u0822"+
		"\7\u00ba\2\2\u0822\u0823\5\u00c2b\2\u0823\u0824\7\u0298\2\2\u0824\u0825"+
		"\5\u00c2b\2\u0825\u0827\3\2\2\2\u0826\u0821\3\2\2\2\u0827\u082a\3\2\2"+
		"\2\u0828\u0826\3\2\2\2\u0828\u0829\3\2\2\2\u0829\u082b\3\2\2\2\u082a\u0828"+
		"\3\2\2\2\u082b\u082c\7\u00b9\2\2\u082c\u0852\3\2\2\2\u082d\u082e\7\u00b0"+
		"\2\2\u082e\u082f\7\u00b8\2\2\u082f\u0835\5\u00c2b\2\u0830\u0831\7\u00ba"+
		"\2\2\u0831\u0832\5\u00c2b\2\u0832\u0833\7\u0298\2\2\u0833\u0834\5\u00c2"+
		"b\2\u0834\u0836\3\2\2\2\u0835\u0830\3\2\2\2\u0836\u0837\3\2\2\2\u0837"+
		"\u0835\3\2\2\2\u0837\u0838\3\2\2\2\u0838\u083b\3\2\2\2\u0839\u083a\7\u00ba"+
		"\2\2\u083a\u083c\5\u00c2b\2\u083b\u0839\3\2\2\2\u083b\u083c\3\2\2\2\u083c"+
		"\u083d\3\2\2\2\u083d\u083e\7\u00b9\2\2\u083e\u0852\3\2\2\2\u083f\u0840"+
		"\7\u0275\2\2\u0840\u0841\7\u00b8\2\2\u0841\u0842\5\u00c2b\2\u0842\u0843"+
		"\7\u00b9\2\2\u0843\u0852\3\2\2\2\u0844\u0845\7\u0091\2\2\u0845\u0846\7"+
		"\u00b8\2\2\u0846\u0847\5\u00c2b\2\u0847\u0848\7\u016f\2\2\u0848\u084b"+
		"\5\u00c2b\2\u0849\u084a\7\u016a\2\2\u084a\u084c\5\u00c2b\2\u084b\u0849"+
		"\3\2\2\2\u084b\u084c\3\2\2\2\u084c\u084d\3\2\2\2\u084d\u084e\7\u00b9\2"+
		"\2\u084e\u0852\3\2\2\2\u084f\u0852\7\u00b4\2\2\u0850\u0852\7\u0284\2\2"+
		"\u0851\u0789\3\2\2\2\u0851\u078a\3\2\2\2\u0851\u0794\3\2\2\2\u0851\u079b"+
		"\3\2\2\2\u0851\u079c\3\2\2\2\u0851\u07a1\3\2\2\2\u0851\u07a9\3\2\2\2\u0851"+
		"\u07aa\3\2\2\2\u0851\u07ac\3\2\2\2\u0851\u07bf\3\2\2\2\u0851\u07d2\3\2"+
		"\2\2\u0851\u07e5\3\2\2\2\u0851\u07f8\3\2\2\2\u0851\u080b\3\2\2\2\u0851"+
		"\u081e\3\2\2\2\u0851\u082d\3\2\2\2\u0851\u083f\3\2\2\2\u0851\u0844\3\2"+
		"\2\2\u0851\u084f\3\2\2\2\u0851\u0850\3\2\2\2\u0852\u00e1\3\2\2\2\u0853"+
		"\u0854\5\u01b0\u00d9\2\u0854\u0856\7\u00b8\2\2\u0855\u0857\5\u00eav\2"+
		"\u0856\u0855\3\2\2\2\u0856\u0857\3\2\2\2\u0857\u0858\3\2\2\2\u0858\u0859"+
		"\7\u00b9\2\2\u0859\u00e3\3\2\2\2\u085a\u085d\5\u00e6t\2\u085b\u085d\5"+
		"\u00e8u\2\u085c\u085a\3\2\2\2\u085c\u085b\3\2\2\2\u085d\u00e5\3\2\2\2"+
		"\u085e\u0861\5\u00fa~\2\u085f\u0861\5\u00e2r\2\u0860\u085e\3\2\2\2\u0860"+
		"\u085f\3\2\2\2\u0861\u0862\3\2\2\2\u0862\u0863\7\u00bb\2\2\u0863\u0864"+
		"\5\u00e2r\2\u0864\u00e7\3\2\2\2\u0865\u0868\5\u00fa~\2\u0866\u0868\5\u00e2"+
		"r\2\u0867\u0865\3\2\2\2\u0867\u0866\3\2\2\2\u0868\u0869\3\2\2\2\u0869"+
		"\u086a\7\u00bb\2\2\u086a\u086b\5\u00fa~\2\u086b\u00e9\3\2\2\2\u086c\u0871"+
		"\5\u00ecw\2\u086d\u086e\7\u00ba\2\2\u086e\u0870\5\u00ecw\2\u086f\u086d"+
		"\3\2\2\2\u0870\u0873\3\2\2\2\u0871\u086f\3\2\2\2\u0871\u0872\3\2\2\2\u0872"+
		"\u00eb\3\2\2\2\u0873\u0871\3\2\2\2\u0874\u087a\6w\t\2\u0875\u0876\5\u00fa"+
		"~\2\u0876\u0878\7\u0298\2\2\u0877\u0879\7\u029d\2\2\u0878\u0877\3\2\2"+
		"\2\u0878\u0879\3\2\2\2\u0879\u087b\3\2\2\2\u087a\u0875\3\2\2\2\u087a\u087b"+
		"\3\2\2\2\u087b\u087c\3\2\2\2\u087c\u087d\5\u00c2b\2\u087d\u00ed\3\2\2"+
		"\2\u087e\u087f\7\u02a7\2\2\u087f\u0880\5\u00f0y\2\u0880\u0881\7\u00b7"+
		"\2\2\u0881\u0884\3\2\2\2\u0882\u0884\5\u00f2z\2\u0883\u087e\3\2\2\2\u0883"+
		"\u0882\3\2\2\2\u0884\u00ef\3\2\2\2\u0885\u0887\13\2\2\2\u0886\u0885\3"+
		"\2\2\2\u0887\u088a\3\2\2\2\u0888\u0889\3\2\2\2\u0888\u0886\3\2\2\2\u0889"+
		"\u00f1\3\2\2\2\u088a\u0888\3\2\2\2\u088b\u088c\7=\2\2\u088c\u088d\5\u00c2"+
		"b\2\u088d\u00f3\3\2\2\2\u088e\u089d\7\u02b1\2\2\u088f\u0893\7\u02a2\2"+
		"\2\u0890\u0891\7\u00bb\2\2\u0891\u0893\7\u02a2\2\2\u0892\u088f\3\2\2\2"+
		"\u0892\u0890\3\2\2\2\u0892\u0893\3\2\2\2\u0893\u0894\3\2\2\2\u0894\u0899"+
		"\5\u00fc\177\2\u0895\u0896\7\u02a2\2\2\u0896\u0898\5\u00fc\177\2\u0897"+
		"\u0895\3\2\2\2\u0898\u089b\3\2\2\2\u0899\u0897\3\2\2\2\u0899\u089a\3\2"+
		"\2\2\u089a\u089d\3\2\2\2\u089b\u0899\3\2\2\2\u089c\u088e\3\2\2\2\u089c"+
		"\u0892\3\2\2\2\u089d\u00f5\3\2\2\2\u089e\u089f\7\u011f\2\2\u089f\u08a0"+
		"\5\u00fe\u0080\2\u08a0\u00f7\3\2\2\2\u08a1\u08a2\7\u026c\2\2\u08a2\u08a3"+
		"\5\u00fe\u0080\2\u08a3\u00f9\3\2\2\2\u08a4\u08a6\7\u02a0\2\2\u08a5\u08a4"+
		"\3\2\2\2\u08a5\u08a6\3\2\2\2\u08a6\u08aa\3\2\2\2\u08a7\u08ab\7\u02ba\2"+
		"\2\u08a8\u08ab\5\u0108\u0085\2\u08a9\u08ab\5\u0228\u0115\2\u08aa\u08a7"+
		"\3\2\2\2\u08aa\u08a8\3\2\2\2\u08aa\u08a9\3\2\2\2\u08ab\u00fb\3\2\2\2\u08ac"+
		"\u08b1\5\u00fa~\2\u08ad\u08ae\7\u00bb\2\2\u08ae\u08b0\5\u00fa~\2\u08af"+
		"\u08ad\3\2\2\2\u08b0\u08b3\3\2\2\2\u08b1\u08af\3\2\2\2\u08b1\u08b2\3\2"+
		"\2\2\u08b2\u00fd\3\2\2\2\u08b3\u08b1\3\2\2\2\u08b4\u08b5\7\u02b1\2\2\u08b5"+
		"\u00ff\3\2\2\2\u08b6\u08b8\t\34\2\2\u08b7\u08b6\3\2\2\2\u08b7\u08b8\3"+
		"\2\2\2\u08b8\u08b9\3\2\2\2\u08b9\u08ba\7\u02b6\2\2\u08ba\u0101\3\2\2\2"+
		"\u08bb\u08bd\t\34\2\2\u08bc\u08bb\3\2\2\2\u08bc\u08bd\3\2\2\2\u08bd\u08be"+
		"\3\2\2\2\u08be\u08bf\7\u02b8\2\2\u08bf\u0103\3\2\2\2\u08c0\u08c1\t\"\2"+
		"\2\u08c1\u0105\3\2\2\2\u08c2\u08c3\7\u01e4\2\2\u08c3\u0107\3\2\2\2\u08c4"+
		"\u08c5\t#\2\2\u08c5\u0109\3\2\2\2\u08c6\u08ca\5\u010e\u0088\2\u08c7\u08c9"+
		"\7\u00b7\2\2\u08c8\u08c7\3\2\2\2\u08c9\u08cc\3\2\2\2\u08ca\u08c8\3\2\2"+
		"\2\u08ca\u08cb\3\2\2\2\u08cb\u08ce\3\2\2\2\u08cc\u08ca\3\2\2\2\u08cd\u08c6"+
		"\3\2\2\2\u08ce\u08cf\3\2\2\2\u08cf\u08cd\3\2\2\2\u08cf\u08d0\3\2\2\2\u08d0"+
		"\u08d1\3\2\2\2\u08d1\u08d2\7\2\2\3\u08d2\u010b\3\2\2\2\u08d3\u08d7\5\u010e"+
		"\u0088\2\u08d4\u08d6\7\u00b7\2\2\u08d5\u08d4\3\2\2\2\u08d6\u08d9\3\2\2"+
		"\2\u08d7\u08d5\3\2\2\2\u08d7\u08d8\3\2\2\2\u08d8\u08da\3\2\2\2\u08d9\u08d7"+
		"\3\2\2\2\u08da\u08db\7\2\2\3\u08db\u010d\3\2\2\2\u08dc\u0919\5\u0110\u0089"+
		"\2\u08dd\u08de\7\u00f1\2\2\u08de\u08df\5\u01b0\u00d9\2\u08df\u08e8\7\u00b8"+
		"\2\2\u08e0\u08e5\5\u01dc\u00ef\2\u08e1\u08e2\7\u00ba\2\2\u08e2\u08e4\5"+
		"\u01dc\u00ef\2\u08e3\u08e1\3\2\2\2\u08e4\u08e7\3\2\2\2\u08e5\u08e3\3\2"+
		"\2\2\u08e5\u08e6\3\2\2\2\u08e6\u08e9\3\2\2\2\u08e7\u08e5\3\2\2\2\u08e8"+
		"\u08e0\3\2\2\2\u08e8\u08e9\3\2\2\2\u08e9\u08ea\3\2\2\2\u08ea\u08eb\7\u00b9"+
		"\2\2\u08eb\u0919\3\2\2\2\u08ec\u08f4\7\u00ca\2\2\u08ed\u08f0\7\u0111\2"+
		"\2\u08ee\u08ef\7\u01ed\2\2\u08ef\u08f1\7\u0222\2\2\u08f0\u08ee\3\2\2\2"+
		"\u08f0\u08f1\3\2\2\2\u08f1\u08f4\3\2\2\2\u08f2\u08f4\7\u0222\2\2\u08f3"+
		"\u08ec\3\2\2\2\u08f3\u08ed\3\2\2\2\u08f3\u08f2\3\2\2\2\u08f4\u08f5\3\2"+
		"\2\2\u08f5\u08f6\t\16\2\2\u08f6\u08f7\5\u01b0\u00d9\2\u08f7\u08fb\7\u00b8"+
		"\2\2\u08f8\u08fa\13\2\2\2\u08f9\u08f8\3\2\2\2\u08fa\u08fd\3\2\2\2\u08fb"+
		"\u08fc\3\2\2\2\u08fb\u08f9\3\2\2\2\u08fc\u08fe\3\2\2\2\u08fd\u08fb\3\2"+
		"\2\2\u08fe\u0902\7\u00b9\2\2\u08ff\u0901\13\2\2\2\u0900\u08ff\3\2\2\2"+
		"\u0901\u0904\3\2\2\2\u0902\u0903\3\2\2\2\u0902\u0900\3\2\2\2\u0903\u0919"+
		"\3\2\2\2\u0904\u0902\3\2\2\2\u0905\u0906\7\u0144\2\2\u0906\u0909\t\16"+
		"\2\2\u0907\u0908\7\u0188\2\2\u0908\u090a\7\u0158\2\2\u0909\u0907\3\2\2"+
		"\2\u0909\u090a\3\2\2\2\u090a\u090b\3\2\2\2\u090b\u0919\5\u01b0\u00d9\2"+
		"\u090c\u090d\7\u0247\2\2\u090d\u090e\7\u020b\2\2\u090e\u0912\7\u0252\2"+
		"\2\u090f\u0910\7\u01b2\2\2\u0910\u0913\5\u01e8\u00f5\2\u0911\u0913\5\u0164"+
		"\u00b3\2\u0912\u090f\3\2\2\2\u0912\u0911\3\2\2\2\u0912\u0913\3\2\2\2\u0913"+
		"\u0919\3\2\2\2\u0914\u0915\7\u0247\2\2\u0915\u0916\7\u0111\2\2\u0916\u0917"+
		"\7\u020b\2\2\u0917\u0919\5\u01b0\u00d9\2\u0918\u08dc\3\2\2\2\u0918\u08dd"+
		"\3\2\2\2\u0918\u08f3\3\2\2\2\u0918\u0905\3\2\2\2\u0918\u090c\3\2\2\2\u0918"+
		"\u0914\3\2\2\2\u0919\u010f\3\2\2\2\u091a\u091c\5\u0134\u009b\2\u091b\u091a"+
		"\3\2\2\2\u091b\u091c\3\2\2\2\u091c\u091d\3\2\2\2\u091d\u091f\5\u0150\u00a9"+
		"\2\u091e\u0920\5\u014e\u00a8\2\u091f\u091e\3\2\2\2\u091f\u0920\3\2\2\2"+
		"\u0920\u0acf\3\2\2\2\u0921\u0922\7\u0111\2\2\u0922\u0923\7\u0236\2\2\u0923"+
		"\u0927\7\u0206\2\2\u0924\u0925\7\u0188\2\2\u0925\u0926\7\u01e3\2\2\u0926"+
		"\u0928\7\u0158\2\2\u0927\u0924\3\2\2\2\u0927\u0928\3\2\2\2\u0928\u0929"+
		"\3\2\2\2\u0929\u092a\5\u0220\u0111\2\u092a\u092b\7\u01e9\2\2\u092b\u092c"+
		"\5\u01b0\u00d9\2\u092c\u092d\7\u00d2\2\2\u092d\u092e\t$\2\2\u092e\u0932"+
		"\7\u0270\2\2\u092f\u0933\5\u0132\u009a\2\u0930\u0931\7\u0231\2\2\u0931"+
		"\u0933\5\u0220\u0111\2\u0932\u092f\3\2\2\2\u0932\u0930\3\2\2\2\u0933\u0934"+
		"\3\2\2\2\u0934\u0935\7\u0285\2\2\u0935\u0936\7\u00b8\2\2\u0936\u0937\5"+
		"\u01e0\u00f1\2\u0937\u0938\7\u00b9\2\2\u0938\u0acf\3\2\2\2\u0939\u093b"+
		"\7\u0111\2\2\u093a\u093c\7\u015d\2\2\u093b\u093a\3\2\2\2\u093b\u093c\3"+
		"\2\2\2\u093c\u093d\3\2\2\2\u093d\u0941\7\u025f\2\2\u093e\u093f\7\u0188"+
		"\2\2\u093f\u0940\7\u01e3\2\2\u0940\u0942\7\u0158\2\2\u0941\u093e\3\2\2"+
		"\2\u0941\u0942\3\2\2\2\u0942\u0943\3\2\2\2\u0943\u0952\5\u01b0\u00d9\2"+
		"\u0944\u0946\5\u019a\u00ce\2\u0945\u0944\3\2\2\2\u0945\u0946\3\2\2\2\u0946"+
		"\u0953\3\2\2\2\u0947\u0948\7\u00b8\2\2\u0948\u094b\5\u01b6\u00dc\2\u0949"+
		"\u094a\7\u00ba\2\2\u094a\u094c\5\u01ba\u00de\2\u094b\u0949\3\2\2\2\u094b"+
		"\u094c\3\2\2\2\u094c\u094e\3\2\2\2\u094d\u094f\7\u00ba\2\2\u094e\u094d"+
		"\3\2\2\2\u094e\u094f\3\2\2\2\u094f\u0950\3\2\2\2\u0950\u0951\7\u00b9\2"+
		"\2\u0951\u0953\3\2\2\2\u0952\u0945\3\2\2\2\u0952\u0947\3\2\2\2\u0953\u0957"+
		"\3\2\2\2\u0954\u0955\7\u014f\2\2\u0955\u0956\7\u0298\2\2\u0956\u0958\5"+
		"\u0220\u0111\2\u0957\u0954\3\2\2\2\u0957\u0958\3\2\2\2\u0958\u0961\3\2"+
		"\2\2\u0959\u095a\t%\2\2\u095a\u095b\7\u01a6\2\2\u095b\u095f\5\u019a\u00ce"+
		"\2\u095c\u095d\7\u00fc\2\2\u095d\u095e\7\u00ef\2\2\u095e\u0960\5\u019a"+
		"\u00ce\2\u095f\u095c\3\2\2\2\u095f\u0960\3\2\2\2\u0960\u0962\3\2\2\2\u0961"+
		"\u0959\3\2\2\2\u0961\u0962\3\2\2\2\u0962\u0965\3\2\2\2\u0963\u0964\7\u0103"+
		"\2\2\u0964\u0966\7\u02b1\2\2\u0965\u0963\3\2\2\2\u0965\u0966\3\2\2\2\u0966"+
		"\u0968\3\2\2\2\u0967\u0969\5\u011e\u0090\2\u0968\u0967\3\2\2\2\u0968\u0969"+
		"\3\2\2\2\u0969\u0978\3\2\2\2\u096a\u096b\7\u013e\2\2\u096b\u096f\7\u00ef"+
		"\2\2\u096c\u096d\7\u017d\2\2\u096d\u0970\5\u019a\u00ce\2\u096e\u0970\7"+
		"\u0214\2\2\u096f\u096c\3\2\2\2\u096f\u096e\3\2\2\2\u0970\u0976\3\2\2\2"+
		"\u0971\u0974\7\u00eb\2\2\u0972\u0975\7\u02b6\2\2\u0973\u0975\7\u00d6\2"+
		"\2\u0974\u0972\3\2\2\2\u0974\u0973\3\2\2\2\u0975\u0977\3\2\2\2\u0976\u0971"+
		"\3\2\2\2\u0976\u0977\3\2\2\2\u0977\u0979\3\2\2\2\u0978\u096a\3\2\2\2\u0978"+
		"\u0979\3\2\2\2\u0979\u097f\3\2\2\2\u097a\u097b\7\u0234\2\2\u097b\u097c"+
		"\7\u00b8\2\2\u097c\u097d\5\u01ce\u00e8\2\u097d\u097e\7\u00b9\2\2\u097e"+
		"\u0980\3\2\2\2\u097f\u097a\3\2\2\2\u097f\u0980\3\2\2\2\u0980\u0982\3\2"+
		"\2\2\u0981\u0983\5\u01a4\u00d3\2\u0982\u0981\3\2\2\2\u0982\u0983\3\2\2"+
		"\2\u0983\u0986\3\2\2\2\u0984\u0985\7\u00ea\2\2\u0985\u0987\5\u01a4\u00d3"+
		"\2\u0986\u0984\3\2\2\2\u0986\u0987\3\2\2\2\u0987\u098a\3\2\2\2\u0988\u0989"+
		"\7\u00d2\2\2\u0989\u098b\5\u0150\u00a9\2\u098a\u0988\3\2\2\2\u098a\u098b"+
		"\3\2\2\2\u098b\u0acf\3\2\2\2\u098c\u098d\7\u0111\2\2\u098d\u0991\7\u028d"+
		"\2\2\u098e\u098f\7\u0188\2\2\u098f\u0990\7\u01e3\2\2\u0990\u0992\7\u0158"+
		"\2\2\u0991\u098e\3\2\2\2\u0991\u0992\3\2\2\2\u0992\u0993\3\2\2\2\u0993"+
		"\u0998\5\u01b0\u00d9\2\u0994\u0995\7\u00b8\2\2\u0995\u0996\5\u01b2\u00da"+
		"\2\u0996\u0997\7\u00b9\2\2\u0997\u0999\3\2\2\2\u0998\u0994\3\2\2\2\u0998"+
		"\u0999\3\2\2\2\u0999\u099c\3\2\2\2\u099a\u099b\7\u0103\2\2\u099b\u099d"+
		"\7\u02b1\2\2\u099c\u099a\3\2\2\2\u099c\u099d\3\2\2\2\u099d\u099e\3\2\2"+
		"\2\u099e\u099f\7\u00d2\2\2\u099f\u09a0\5\u0150\u00a9\2\u09a0\u0acf\3\2"+
		"\2\2\u09a1\u09a2\7\u00ca\2\2\u09a2\u09a3\7\u028d\2\2\u09a3\u09a8\5\u01b0"+
		"\u00d9\2\u09a4\u09a5\7\u00b8\2\2\u09a5\u09a6\5\u01b2\u00da\2\u09a6\u09a7"+
		"\7\u00b9\2\2\u09a7\u09a9\3\2\2\2\u09a8\u09a4\3\2\2\2\u09a8\u09a9\3\2\2"+
		"\2\u09a9\u09aa\3\2\2\2\u09aa\u09ab\7\u00d2\2\2\u09ab\u09ac\5\u0150\u00a9"+
		"\2\u09ac\u0acf\3\2\2\2\u09ad\u09af\7\u0111\2\2\u09ae\u09b0\7\u015d\2\2"+
		"\u09af\u09ae\3\2\2\2\u09af\u09b0\3\2\2\2\u09b0\u09b1\3\2\2\2\u09b1\u09b5"+
		"\7\u025f\2\2\u09b2\u09b3\7\u0188\2\2\u09b3\u09b4\7\u01e3\2\2\u09b4\u09b6"+
		"\7\u0158\2\2\u09b5\u09b2\3\2\2\2\u09b5\u09b6\3\2\2\2\u09b6\u09b7\3\2\2"+
		"\2\u09b7\u09b8\5\u01b0\u00d9\2\u09b8\u09b9\7\u01b2\2\2\u09b9\u09bf\5\u01b0"+
		"\u00d9\2\u09ba\u09bb\7\u0293\2\2\u09bb\u09bd\7\u0234\2\2\u09bc\u09be\5"+
		"\u019a\u00ce\2\u09bd\u09bc\3\2\2\2\u09bd\u09be\3\2\2\2\u09be\u09c0\3\2"+
		"\2\2\u09bf\u09ba\3\2\2\2\u09bf\u09c0\3\2\2\2\u09c0\u0acf\3\2\2\2\u09c1"+
		"\u09c3\5\u0134\u009b\2\u09c2\u09c1\3\2\2\2\u09c2\u09c3\3\2\2\2\u09c3\u09c4"+
		"\3\2\2\2\u09c4\u09c8\7\u0191\2\2\u09c5\u09c9\7\u0198\2\2\u09c6\u09c7\7"+
		"\u01f2\2\2\u09c7\u09c9\7\u025f\2\2\u09c8\u09c5\3\2\2\2\u09c8\u09c6\3\2"+
		"\2\2\u09c9\u09cf\3\2\2\2\u09ca\u09d0\5\u01b0\u00d9\2\u09cb\u09cc\7\u0142"+
		"\2\2\u09cc\u09cd\7\u00b8\2\2\u09cd\u09ce\7\u02b6\2\2\u09ce\u09d0\7\u00b9"+
		"\2\2\u09cf\u09ca\3\2\2\2\u09cf\u09cb\3\2\2\2\u09d0\u09d2\3\2\2\2\u09d1"+
		"\u09d3\5\u011c\u008f\2\u09d2\u09d1\3\2\2\2\u09d2\u09d3\3\2\2\2\u09d3\u09d7"+
		"\3\2\2\2\u09d4\u09d5\7\u0293\2\2\u09d5\u09d6\7\u01a9\2\2\u09d6\u09d8\5"+
		"\u0220\u0111\2\u09d7\u09d4\3\2\2\2\u09d7\u09d8\3\2\2\2\u09d8\u09da\3\2"+
		"\2\2\u09d9\u09db\5\u019a\u00ce\2\u09da\u09d9\3\2\2\2\u09da\u09db\3\2\2"+
		"\2\u09db\u09e0\3\2\2\2\u09dc\u09dd\7\u00bc\2\2\u09dd\u09de\5\u019c\u00cf"+
		"\2\u09de\u09df\7\u00bd\2\2\u09df\u09e1\3\2\2\2\u09e0\u09dc\3\2\2\2\u09e0"+
		"\u09e1\3\2\2\2\u09e1\u09e2\3\2\2\2\u09e2\u0acf\5\u0150\u00a9\2\u09e3\u09e5"+
		"\5\u0134\u009b\2\u09e4\u09e3\3\2\2\2\u09e4\u09e5\3\2\2\2\u09e5\u09e7\3"+
		"\2\2\2\u09e6\u09e8\5\u015a\u00ae\2\u09e7\u09e6\3\2\2\2\u09e7\u09e8\3\2"+
		"\2\2\u09e8\u09e9\3\2\2\2\u09e9\u09ea\7\u0282\2\2\u09ea\u09eb\5\u01b0\u00d9"+
		"\2\u09eb\u09ec\5\u01ae\u00d8\2\u09ec\u09ed\7\u0244\2\2\u09ed\u09ef\5\u0188"+
		"\u00c5\2\u09ee\u09f0\5\u0166\u00b4\2\u09ef\u09ee\3\2\2\2\u09ef\u09f0\3"+
		"\2\2\2\u09f0\u09f2\3\2\2\2\u09f1\u09f3\5\u0164\u00b3\2\u09f2\u09f1\3\2"+
		"\2\2\u09f2\u09f3\3\2\2\2\u09f3\u0acf\3\2\2\2\u09f4\u09f6\5\u0134\u009b"+
		"\2\u09f5\u09f4\3\2\2\2\u09f5\u09f6\3\2\2\2\u09f6\u09f8\3\2\2\2\u09f7\u09f9"+
		"\5\u015a\u00ae\2\u09f8\u09f7\3\2\2\2\u09f8\u09f9\3\2\2\2\u09f9\u09fa\3"+
		"\2\2\2\u09fa\u09fb\7\u0135\2\2\u09fb\u09fc\7\u016f\2\2\u09fc\u09fe\5\u01b0"+
		"\u00d9\2\u09fd\u09ff\5\u011c\u008f\2\u09fe\u09fd\3\2\2\2\u09fe\u09ff\3"+
		"\2\2\2\u09ff\u0a00\3\2\2\2\u0a00\u0a03\5\u01ae\u00d8\2\u0a01\u0a02\7\u0285"+
		"\2\2\u0a02\u0a04\5\u016e\u00b8\2\u0a03\u0a01\3\2\2\2\u0a03\u0a04\3\2\2"+
		"\2\u0a04\u0a06\3\2\2\2\u0a05\u0a07\5\u0164\u00b3\2\u0a06\u0a05\3\2\2\2"+
		"\u0a06\u0a07\3\2\2\2\u0a07\u0acf\3\2\2\2\u0a08\u0a09\7\u01b7\2\2\u0a09"+
		"\u0a0a\7\u01a9\2\2\u0a0a\u0a0b\5\u0220\u0111\2\u0a0b\u0a0c\7\u00b8\2\2"+
		"\u0a0c\u0a11\5\u0124\u0093\2\u0a0d\u0a0e\7\u00ba\2\2\u0a0e\u0a10\5\u0124"+
		"\u0093\2\u0a0f\u0a0d\3\2\2\2\u0a10\u0a13\3\2\2\2\u0a11\u0a0f\3\2\2\2\u0a11"+
		"\u0a12\3\2\2\2\u0a12\u0a14\3\2\2\2\u0a13\u0a11\3\2\2\2\u0a14\u0a16\7\u00b9"+
		"\2\2\u0a15\u0a17\5\u0146\u00a4\2\u0a16\u0a15\3\2\2\2\u0a16\u0a17\3\2\2"+
		"\2\u0a17\u0a1d\3\2\2\2\u0a18\u0a19\7\u020e\2\2\u0a19\u0a1a\7\u00b8\2\2"+
		"\u0a1a\u0a1b\5\u01a6\u00d4\2\u0a1b\u0a1c\7\u00b9\2\2\u0a1c\u0a1e\3\2\2"+
		"\2\u0a1d\u0a18\3\2\2\2\u0a1d\u0a1e\3\2\2\2\u0a1e\u0a20\3\2\2\2\u0a1f\u0a21"+
		"\5\u0216\u010c\2\u0a20\u0a1f\3\2\2\2\u0a20\u0a21\3\2\2\2\u0a21\u0acf\3"+
		"\2\2\2\u0a22\u0a23\7\u01b7\2\2\u0a23\u0a29\5\u014a\u00a6\2\u0a24\u0a25"+
		"\7\u020e\2\2\u0a25\u0a26\7\u00b8\2\2\u0a26\u0a27\5\u01a6\u00d4\2\u0a27"+
		"\u0a28\7\u00b9\2\2\u0a28\u0a2a\3\2\2\2\u0a29\u0a24\3\2\2\2\u0a29\u0a2a"+
		"\3\2\2\2\u0a2a\u0a2c\3\2\2\2\u0a2b\u0a2d\5\u0216\u010c\2\u0a2c\u0a2b\3"+
		"\2\2\2\u0a2c\u0a2d\3\2\2\2\u0a2d\u0acf\3\2\2\2\u0a2e\u0a2f\7\u015b\2\2"+
		"\u0a2f\u0a30\7\u025f\2\2\u0a30\u0a33\5\u01b0\u00d9\2\u0a31\u0a32\7\u01f5"+
		"\2\2\u0a32\u0a34\5\u019a\u00ce\2\u0a33\u0a31\3\2\2\2\u0a33\u0a34\3\2\2"+
		"\2\u0a34\u0a36\3\2\2\2\u0a35\u0a37\5\u0164\u00b3\2\u0a36\u0a35\3\2\2\2"+
		"\u0a36\u0a37\3\2\2\2\u0a37\u0a38\3\2\2\2\u0a38\u0a39\7\u0270\2\2\u0a39"+
		"\u0a3b\7\u02b1\2\2\u0a3a\u0a3c\5\u01a4\u00d3\2\u0a3b\u0a3a\3\2\2\2\u0a3b"+
		"\u0a3c\3\2\2\2\u0a3c\u0a3e\3\2\2\2\u0a3d\u0a3f\5\u0146\u00a4\2\u0a3e\u0a3d"+
		"\3\2\2\2\u0a3e\u0a3f\3\2\2\2\u0a3f\u0acf\3\2\2\2\u0a40\u0a41\7\u0111\2"+
		"\2\u0a41\u0a42\7\u01cd\2\2\u0a42\u0a46\7\u028d\2\2\u0a43\u0a44\7\u0188"+
		"\2\2\u0a44\u0a45\7\u01e3\2\2\u0a45\u0a47\7\u0158\2\2\u0a46\u0a43\3\2\2"+
		"\2\u0a46\u0a47\3\2\2\2\u0a47\u0a48\3\2\2\2\u0a48\u0a4d\5\u01b0\u00d9\2"+
		"\u0a49\u0a4a\7\u00b8\2\2\u0a4a\u0a4b\5\u01b2\u00da\2\u0a4b\u0a4c\7\u00b9"+
		"\2\2\u0a4c\u0a4e\3\2\2\2\u0a4d\u0a49\3\2\2\2\u0a4d\u0a4e\3\2\2\2\u0a4e"+
		"\u0a50\3\2\2\2\u0a4f\u0a51\5\u0126\u0094\2\u0a50\u0a4f\3\2\2\2\u0a50\u0a51"+
		"\3\2\2\2\u0a51\u0a59\3\2\2\2\u0a52\u0a54\7\u021b\2\2\u0a53\u0a55\5\u012c"+
		"\u0097\2\u0a54\u0a53\3\2\2\2\u0a54\u0a55\3\2\2\2\u0a55\u0a57\3\2\2\2\u0a56"+
		"\u0a58\5\u0128\u0095\2\u0a57\u0a56\3\2\2\2\u0a57\u0a58\3\2\2\2\u0a58\u0a5a"+
		"\3\2\2\2\u0a59\u0a52\3\2\2\2\u0a59\u0a5a\3\2\2\2\u0a5a\u0a60\3\2\2\2\u0a5b"+
		"\u0a5d\7\u0147\2\2\u0a5c\u0a5b\3\2\2\2\u0a5c\u0a5d\3\2\2\2\u0a5d\u0a5e"+
		"\3\2\2\2\u0a5e\u0a5f\7\u01a6\2\2\u0a5f\u0a61\5\u019a\u00ce\2\u0a60\u0a5c"+
		"\3\2\2\2\u0a60\u0a61\3\2\2\2\u0a61\u0a64\3\2\2\2\u0a62\u0a63\7\u0103\2"+
		"\2\u0a63\u0a65\7\u02b1\2\2\u0a64\u0a62\3\2\2\2\u0a64\u0a65\3\2\2\2\u0a65"+
		"\u0a6c\3\2\2\2\u0a66\u0a67\7\u01f5\2\2\u0a67\u0a68\7\u00ef\2\2\u0a68\u0a69"+
		"\7\u00b8\2\2\u0a69\u0a6a\5\u0220\u0111\2\u0a6a\u0a6b\7\u00b9\2\2\u0a6b"+
		"\u0a6d\3\2\2\2\u0a6c\u0a66\3\2\2\2\u0a6c\u0a6d\3\2\2\2\u0a6d\u0a79\3\2"+
		"\2\2\u0a6e\u0a6f\7\u013e\2\2\u0a6f\u0a73\7\u00ef\2\2\u0a70\u0a71\7\u017d"+
		"\2\2\u0a71\u0a74\5\u019a\u00ce\2\u0a72\u0a74\7\u0214\2\2\u0a73\u0a70\3"+
		"\2\2\2\u0a73\u0a72\3\2\2\2\u0a74\u0a77\3\2\2\2\u0a75\u0a76\7\u00eb\2\2"+
		"\u0a76\u0a78\t&\2\2\u0a77\u0a75\3\2\2\2\u0a77\u0a78\3\2\2\2\u0a78\u0a7a"+
		"\3\2\2\2\u0a79\u0a6e\3\2\2\2\u0a79\u0a7a\3\2\2\2\u0a7a\u0a7c\3\2\2\2\u0a7b"+
		"\u0a7d\5\u01a4\u00d3\2\u0a7c\u0a7b\3\2\2\2\u0a7c\u0a7d\3\2\2\2\u0a7d\u0a7e"+
		"\3\2\2\2\u0a7e\u0a7f\7\u00d2\2\2\u0a7f\u0a80\5\u0150\u00a9\2\u0a80\u0acf"+
		"\3\2\2\2\u0a81\u0a82\7\u021b\2\2\u0a82\u0a83\7\u01cd\2\2\u0a83\u0a84\7"+
		"\u028d\2\2\u0a84\u0a88\5\u01b0\u00d9\2\u0a85\u0a89\5\u011c\u008f\2\u0a86"+
		"\u0a89\7\u0107\2\2\u0a87\u0a89\7\u00d6\2\2\u0a88\u0a85\3\2\2\2\u0a88\u0a86"+
		"\3\2\2\2\u0a88\u0a87\3\2\2\2\u0a89\u0acf\3\2\2\2\u0a8a\u0a8b\7\u00ca\2"+
		"\2\u0a8b\u0a8c\7\u01cd\2\2\u0a8c\u0a8d\7\u028d\2\2\u0a8d\u0a9d\5\u01b0"+
		"\u00d9\2\u0a8e\u0a8f\7\u021f\2\2\u0a8f\u0a9e\5\u0220\u0111\2\u0a90\u0a96"+
		"\7\u021b\2\2\u0a91\u0a97\5\u012c\u0097\2\u0a92\u0a97\5\u0128\u0095\2\u0a93"+
		"\u0a94\5\u012c\u0097\2\u0a94\u0a95\5\u0128\u0095\2\u0a95\u0a97\3\2\2\2"+
		"\u0a96\u0a91\3\2\2\2\u0a96\u0a92\3\2\2\2\u0a96\u0a93\3\2\2\2\u0a97\u0a9e"+
		"\3\2\2\2\u0a98\u0a99\7\u0244\2\2\u0a99\u0a9a\7\u00b8\2\2\u0a9a\u0a9b\5"+
		"\u01a6\u00d4\2\u0a9b\u0a9c\7\u00b9\2\2\u0a9c\u0a9e\3\2\2\2\u0a9d\u0a8e"+
		"\3\2\2\2\u0a9d\u0a90\3\2\2\2\u0a9d\u0a98\3\2\2\2\u0a9e\u0acf\3\2\2\2\u0a9f"+
		"\u0aa0\7\u0144\2\2\u0aa0\u0aa1\7\u01cd\2\2\u0aa1\u0aa4\7\u028d\2\2\u0aa2"+
		"\u0aa3\7\u0188\2\2\u0aa3\u0aa5\7\u0158\2\2\u0aa4\u0aa2\3\2\2\2\u0aa4\u0aa5"+
		"\3\2\2\2\u0aa5\u0aa6\3\2\2\2\u0aa6\u0acf\5\u01b0\u00d9\2\u0aa7\u0aa8\7"+
		"\u01fd\2\2\u0aa8\u0aa9\7\u01cd\2\2\u0aa9\u0aaa\7\u028d\2\2\u0aaa\u0aab"+
		"\7\u01a1\2\2\u0aab\u0aac\7\u01e9\2\2\u0aac\u0acf\5\u01b0\u00d9\2\u0aad"+
		"\u0aae\7\u022b\2\2\u0aae\u0aaf\7\u01cd\2\2\u0aaf\u0ab0\7\u028d\2\2\u0ab0"+
		"\u0ab1\7\u01a1\2\2\u0ab1\u0ab2\7\u01e9\2\2\u0ab2\u0acf\5\u01b0\u00d9\2"+
		"\u0ab3\u0ab4\7\u00f2\2\2\u0ab4\u0ab5\7\u01cd\2\2\u0ab5\u0ab6\7\u028d\2"+
		"\2\u0ab6\u0ab7\7\u0264\2\2\u0ab7\u0ab8\7\u02b6\2\2\u0ab8\u0ab9\7\u01e9"+
		"\2\2\u0ab9\u0acf\5\u01b0\u00d9\2\u0aba\u0abb\7\u00ca\2\2\u0abb\u0abc\7"+
		"\u025f\2\2\u0abc\u0abd\5\u01b0\u00d9\2\u0abd\u0abe\7\u00c2\2\2\u0abe\u0abf"+
		"\7\u010c\2\2\u0abf\u0ac0\5\u021c\u010f\2\u0ac0\u0ac1\5\u011a\u008e\2\u0ac1"+
		"\u0acf\3\2\2\2\u0ac2\u0ac3\7\u00ca\2\2\u0ac3\u0ac4\7\u025f\2\2\u0ac4\u0ac5"+
		"\5\u01b0\u00d9\2\u0ac5\u0ac6\7\u0144\2\2\u0ac6\u0ac7\7\u010c\2\2\u0ac7"+
		"\u0ac8\5\u021c\u010f\2\u0ac8\u0acf\3\2\2\2\u0ac9\u0aca\7\u0247\2\2\u0aca"+
		"\u0acb\7\u010d\2\2\u0acb\u0acc\7\u016f\2\2\u0acc\u0acf\5\u01b0\u00d9\2"+
		"\u0acd\u0acf\5\u0112\u008a\2\u0ace\u091b\3\2\2\2\u0ace\u0921\3\2\2\2\u0ace"+
		"\u0939\3\2\2\2\u0ace\u098c\3\2\2\2\u0ace\u09a1\3\2\2\2\u0ace\u09ad\3\2"+
		"\2\2\u0ace\u09c2\3\2\2\2\u0ace\u09e4\3\2\2\2\u0ace\u09f5\3\2\2\2\u0ace"+
		"\u0a08\3\2\2\2\u0ace\u0a22\3\2\2\2\u0ace\u0a2e\3\2\2\2\u0ace\u0a40\3\2"+
		"\2\2\u0ace\u0a81\3\2\2\2\u0ace\u0a8a\3\2\2\2\u0ace\u0a9f\3\2\2\2\u0ace"+
		"\u0aa7\3\2\2\2\u0ace\u0aad\3\2\2\2\u0ace\u0ab3\3\2\2\2\u0ace\u0aba\3\2"+
		"\2\2\u0ace\u0ac2\3\2\2\2\u0ace\u0ac9\3\2\2\2\u0ace\u0acd\3\2\2\2\u0acf"+
		"\u0111\3\2\2\2\u0ad0\u0ad1\7\u0244\2\2\u0ad1\u0ad2\5\u0220\u0111\2\u0ad2"+
		"\u0ad3\7\u00d2\2\2\u0ad3\u0ad4\7\u0133\2\2\u0ad4\u0ad5\7\u0254\2\2\u0ad5"+
		"\u0ad6\7\u02c1\2\2\u0ad6\u0b3f\3\2\2\2\u0ad7\u0ad8\7\u0244\2\2\u0ad8\u0adb"+
		"\7\u020f\2\2\u0ad9\u0ada\7\u016a\2\2\u0ada\u0adc\5\u0130\u0099\2\u0adb"+
		"\u0ad9\3\2\2\2\u0adb\u0adc\3\2\2\2\u0adc\u0add\3\2\2\2\u0add\u0b3f\5\u01a6"+
		"\u00d4\2\u0ade\u0ae0\7\u0244\2\2\u0adf\u0ae1\t\22\2\2\u0ae0\u0adf\3\2"+
		"\2\2\u0ae0\u0ae1\3\2\2\2\u0ae1\u0ae2\3\2\2\2\u0ae2\u0ae3\5\u0220\u0111"+
		"\2\u0ae3\u0ae6\7\u0298\2\2\u0ae4\u0ae7\5\u01dc\u00ef\2\u0ae5\u0ae7\7\u0133"+
		"\2\2\u0ae6\u0ae4\3\2\2\2\u0ae6\u0ae5\3\2\2\2\u0ae7\u0b3f\3\2\2\2\u0ae8"+
		"\u0ae9\7\u0244\2\2\u0ae9\u0b3f\5\u0114\u008b\2\u0aea\u0aee\7\u0244\2\2"+
		"\u0aeb\u0aec\7\u00f8\2\2\u0aec\u0aef\7\u0244\2\2\u0aed\u0aef\7\u00f9\2"+
		"\2\u0aee\u0aeb\3\2\2\2\u0aee\u0aed\3\2\2\2\u0aef\u0af2\3\2\2\2\u0af0\u0af3"+
		"\5\u0130\u0099\2\u0af1\u0af3\7\u0133\2\2\u0af2\u0af0\3\2\2\2\u0af2\u0af1"+
		"\3\2\2\2\u0af3\u0b3f\3\2\2\2\u0af4\u0af5\7\u0244\2\2\u0af5\u0af6\7\u01db"+
		"\2\2\u0af6\u0af7\7\u0298\2\2\u0af7\u0b3f\5\u01dc\u00ef\2\u0af8\u0afa\7"+
		"\u0244\2\2\u0af9\u0afb\t\22\2\2\u0afa\u0af9\3\2\2\2\u0afa\u0afb\3\2\2"+
		"\2\u0afb\u0afc\3\2\2\2\u0afc\u0b07\7\u0271\2\2\u0afd\u0b08\5\u0116\u008c"+
		"\2\u0afe\u0b08\5\u0118\u008d\2\u0aff\u0b00\5\u0116\u008c\2\u0b00\u0b01"+
		"\7\u00ba\2\2\u0b01\u0b02\5\u0118\u008d\2\u0b02\u0b08\3\2\2\2\u0b03\u0b04"+
		"\5\u0118\u008d\2\u0b04\u0b05\7\u00ba\2\2\u0b05\u0b06\5\u0116\u008c\2\u0b06"+
		"\u0b08\3\2\2\2\u0b07\u0afd\3\2\2\2\u0b07\u0afe\3\2\2\2\u0b07\u0aff\3\2"+
		"\2\2\u0b07\u0b03\3\2\2\2\u0b08\u0b3f\3\2\2\2\u0b09\u0b0a\7\u0244\2\2\u0b0a"+
		"\u0b0d\7\u01db\2\2\u0b0b\u0b0e\5\u0130\u0099\2\u0b0c\u0b0e\7\u0133\2\2"+
		"\u0b0d\u0b0b\3\2\2\2\u0b0d\u0b0c\3\2\2\2\u0b0e\u0b12\3\2\2\2\u0b0f\u0b10"+
		"\7\u00fe\2\2\u0b10\u0b13\5\u0130\u0099\2\u0b11\u0b13\7\u0133\2\2\u0b12"+
		"\u0b0f\3\2\2\2\u0b12\u0b11\3\2\2\2\u0b12\u0b13\3\2\2\2\u0b13\u0b3f\3\2"+
		"\2\2\u0b14\u0b15\7\u0244\2\2\u0b15\u0b18\7\u01f7\2\2\u0b16\u0b17\7\u016a"+
		"\2\2\u0b17\u0b19\5\u0132\u009a\2\u0b18\u0b16\3\2\2\2\u0b18\u0b19\3\2\2"+
		"\2\u0b19\u0b1a\3\2\2\2\u0b1a\u0b20\7\u0298\2\2\u0b1b\u0b21\7\u02b1\2\2"+
		"\u0b1c\u0b1d\7\u01f7\2\2\u0b1d\u0b1e\7\u00b8\2\2\u0b1e\u0b1f\7\u02b1\2"+
		"\2\u0b1f\u0b21\7\u00b9\2\2\u0b20\u0b1b\3\2\2\2\u0b20\u0b1c\3\2\2\2\u0b21"+
		"\u0b3f\3\2\2\2\u0b22\u0b23\7\u0244\2\2\u0b23\u0b24\7\u01ae\2\2\u0b24\u0b2a"+
		"\7\u0298\2\2\u0b25\u0b2b\7\u02b1\2\2\u0b26\u0b27\7\u01f7\2\2\u0b27\u0b28"+
		"\7\u00b8\2\2\u0b28\u0b29\7\u02b1\2\2\u0b29\u0b2b\7\u00b9\2\2\u0b2a\u0b25"+
		"\3\2\2\2\u0b2a\u0b26\3\2\2\2\u0b2b\u0b3f\3\2\2\2\u0b2c\u0b30\7\u0283\2"+
		"\2\u0b2d\u0b2e\5\u0220\u0111\2\u0b2e\u0b2f\7\u00bb\2\2\u0b2f\u0b31\3\2"+
		"\2\2\u0b30\u0b2d\3\2\2\2\u0b30\u0b31\3\2\2\2\u0b31\u0b32\3\2\2\2\u0b32"+
		"\u0b3f\5\u0220\u0111\2\u0b33\u0b3a\7\u0283\2\2\u0b34\u0b35\5\u0220\u0111"+
		"\2\u0b35\u0b36\7\u00bb\2\2\u0b36\u0b38\3\2\2\2\u0b37\u0b34\3\2\2\2\u0b37"+
		"\u0b38\3\2\2\2\u0b38\u0b39\3\2\2\2\u0b39\u0b3b\5\u0220\u0111\2\u0b3a\u0b37"+
		"\3\2\2\2\u0b3a\u0b3b\3\2\2\2\u0b3b\u0b3c\3\2\2\2\u0b3c\u0b3d\7\u02af\2"+
		"\2\u0b3d\u0b3f\5\u0220\u0111\2\u0b3e\u0ad0\3\2\2\2\u0b3e\u0ad7\3\2\2\2"+
		"\u0b3e\u0ade\3\2\2\2\u0b3e\u0ae8\3\2\2\2\u0b3e\u0aea\3\2\2\2\u0b3e\u0af4"+
		"\3\2\2\2\u0b3e\u0af8\3\2\2\2\u0b3e\u0b09\3\2\2\2\u0b3e\u0b14\3\2\2\2\u0b3e"+
		"\u0b22\3\2\2\2\u0b3e\u0b2c\3\2\2\2\u0b3e\u0b33\3\2\2\2\u0b3f\u0113\3\2"+
		"\2\2\u0b40\u0b41\7\u02af\2\2\u0b41\u0b43\7\u02af\2\2\u0b42\u0b44\t\22"+
		"\2\2\u0b43\u0b42\3\2\2\2\u0b43\u0b44\3\2\2\2\u0b44\u0b46\3\2\2\2\u0b45"+
		"\u0b40\3\2\2\2\u0b45\u0b46\3\2\2\2\u0b46\u0b47\3\2\2\2\u0b47\u0b48\5\u0220"+
		"\u0111\2\u0b48\u0b4b\7\u0298\2\2\u0b49\u0b4c\5\u01dc\u00ef\2\u0b4a\u0b4c"+
		"\7\u0133\2\2\u0b4b\u0b49\3\2\2\2\u0b4b\u0b4a\3\2\2\2\u0b4c\u0b53\3\2\2"+
		"\2\u0b4d\u0b4e\7\u02af\2\2\u0b4e\u0b4f\5\u0220\u0111\2\u0b4f\u0b50\7\u0298"+
		"\2\2\u0b50\u0b51\5\u01dc\u00ef\2\u0b51\u0b53\3\2\2\2\u0b52\u0b45\3\2\2"+
		"\2\u0b52\u0b4d\3\2\2\2\u0b53\u0115\3\2\2\2\u0b54\u0b55\7\u0216\2\2\u0b55"+
		"\u0b56\t\'\2\2\u0b56\u0117\3\2\2\2\u0b57\u0b58\7\u01a0\2\2\u0b58\u0b60"+
		"\7\u01b1\2\2\u0b59\u0b5a\7\u0216\2\2\u0b5a\u0b61\7\u027c\2\2\u0b5b\u0b5c"+
		"\7\u0216\2\2\u0b5c\u0b61\7\u0105\2\2\u0b5d\u0b5e\7\u0221\2\2\u0b5e\u0b61"+
		"\7\u0216\2\2\u0b5f\u0b61\7\u0242\2\2\u0b60\u0b59\3\2\2\2\u0b60\u0b5b\3"+
		"\2\2\2\u0b60\u0b5d\3\2\2\2\u0b60\u0b5f\3\2\2\2\u0b61\u0119\3\2\2\2\u0b62"+
		"\u0b63\7\u0209\2\2\u0b63\u0b64\7\u01a6\2\2\u0b64\u0b6f\5\u019a\u00ce\2"+
		"\u0b65\u0b66\7\u027f\2\2\u0b66\u0b6f\5\u019a\u00ce\2\u0b67\u0b68\7\u016b"+
		"\2\2\u0b68\u0b69\7\u01a6\2\2\u0b69\u0b6a\5\u019a\u00ce\2\u0b6a\u0b6b\7"+
		"\u021c\2\2\u0b6b\u0b6c\5\u01b0\u00d9\2\u0b6c\u0b6d\5\u019a\u00ce\2\u0b6d"+
		"\u0b6f\3\2\2\2\u0b6e\u0b62\3\2\2\2\u0b6e\u0b65\3\2\2\2\u0b6e\u0b67\3\2"+
		"\2\2\u0b6f\u011b\3\2\2\2\u0b70\u0b72\7\u0266\2\2\u0b71\u0b70\3\2\2\2\u0b71"+
		"\u0b72\3\2\2\2\u0b72\u0b73\3\2\2\2\u0b73\u0b74\t(\2\2\u0b74\u0b7f\5\u019a"+
		"\u00ce\2\u0b75\u0b77\7\u0266\2\2\u0b76\u0b75\3\2\2\2\u0b76\u0b77\3\2\2"+
		"\2\u0b77\u0b78\3\2\2\2\u0b78\u0b79\7\u01f5\2\2\u0b79\u0b7f\5\u021c\u010f"+
		"\2\u0b7a\u0b7b\t(\2\2\u0b7b\u0b7c\7\u00b8\2\2\u0b7c\u0b7d\7\u02a1\2\2"+
		"\u0b7d\u0b7f\7\u00b9\2\2\u0b7e\u0b71\3\2\2\2\u0b7e\u0b76\3\2\2\2\u0b7e"+
		"\u0b7a\3\2\2\2\u0b7f\u011d\3\2\2\2\u0b80\u0b82\7\u00d6\2\2\u0b81\u0b80"+
		"\3\2\2\2\u0b81\u0b82\3\2\2\2\u0b82\u0b83\3\2\2\2\u0b83\u0b84\7\u01f5\2"+
		"\2\u0b84\u0b86\7\u00ef\2\2\u0b85\u0b87\t)\2\2\u0b86\u0b85\3\2\2\2\u0b86"+
		"\u0b87\3\2\2\2\u0b87\u0b88\3\2\2\2\u0b88\u0b89\5\u0120\u0091\2\u0b89\u0b8b"+
		"\7\u00b8\2\2\u0b8a\u0b8c\5\u01be\u00e0\2\u0b8b\u0b8a\3\2\2\2\u0b8b\u0b8c"+
		"\3\2\2\2\u0b8c\u0b8d\3\2\2\2\u0b8d\u0b8e\7\u00b9\2\2\u0b8e\u011f\3\2\2"+
		"\2\u0b8f\u0b90\7\u00b8\2\2\u0b90\u0b95\5\u0122\u0092\2\u0b91\u0b92\7\u00ba"+
		"\2\2\u0b92\u0b94\5\u0122\u0092\2\u0b93\u0b91\3\2\2\2\u0b94\u0b97\3\2\2"+
		"\2\u0b95\u0b93\3\2\2\2\u0b95\u0b96\3\2\2\2\u0b96\u0b98\3\2\2\2\u0b97\u0b95"+
		"\3\2\2\2\u0b98\u0b99\7\u00b9\2\2\u0b99\u0121\3\2\2\2\u0b9a\u0b9d\5\u0220"+
		"\u0111\2\u0b9b\u0b9d\5\u01ee\u00f8\2\u0b9c\u0b9a\3\2\2\2\u0b9c\u0b9b\3"+
		"\2\2\2\u0b9d\u0123\3\2\2\2\u0b9e\u0ba0\7\u0293\2\2\u0b9f\u0b9e\3\2\2\2"+
		"\u0b9f\u0ba0\3\2\2\2\u0ba0\u0ba1\3\2\2\2\u0ba1\u0ba3\5\u0138\u009d\2\u0ba2"+
		"\u0b9f\3\2\2\2\u0ba2\u0ba3\3\2\2\2\u0ba3\u0ba4\3\2\2\2\u0ba4\u0ba5\7\u011c"+
		"\2\2\u0ba5\u0ba6\7\u018f\2\2\u0ba6\u0ba7\7\u00b8\2\2\u0ba7\u0bac\7\u02b1"+
		"\2\2\u0ba8\u0ba9\7\u00ba\2\2\u0ba9\u0bab\7\u02b1\2\2\u0baa\u0ba8\3\2\2"+
		"\2\u0bab\u0bae\3\2\2\2\u0bac\u0baa\3\2\2\2\u0bac\u0bad\3\2\2\2\u0bad\u0baf"+
		"\3\2\2\2\u0bae\u0bac\3\2\2\2\u0baf\u0bb0\7\u00b9\2\2\u0bb0\u0bb1\7\u0198"+
		"\2\2\u0bb1\u0bb2\7\u025f\2\2\u0bb2\u0bb5\5\u01b0\u00d9\2\u0bb3\u0bb4\7"+
		"\u01f5\2\2\u0bb4\u0bb6\5\u019a\u00ce\2\u0bb5\u0bb3\3\2\2\2\u0bb5\u0bb6"+
		"\3\2\2\2\u0bb6\u0bbb\3\2\2\2\u0bb7\u0bb8\7\u0102\2\2\u0bb8\u0bb9\7\u0267"+
		"\2\2\u0bb9\u0bba\7\u00ef\2\2\u0bba\u0bbc\7\u02b1\2\2\u0bbb\u0bb7\3\2\2"+
		"\2\u0bbb\u0bbc\3\2\2\2\u0bbc\u0bc1\3\2\2\2\u0bbd\u0bbe\7\u01b4\2\2\u0bbe"+
		"\u0bbf\7\u0267\2\2\u0bbf\u0bc0\7\u00ef\2\2\u0bc0\u0bc2\7\u02b1\2\2\u0bc1"+
		"\u0bbd\3\2\2\2\u0bc1\u0bc2\3\2\2\2\u0bc2\u0bc6\3\2\2\2\u0bc3\u0bc4\7\u016d"+
		"\2\2\u0bc4\u0bc5\7\u00d2\2\2\u0bc5\u0bc7\5\u012e\u0098\2\u0bc6\u0bc3\3"+
		"\2\2\2\u0bc6\u0bc7\3\2\2\2\u0bc7\u0bc9\3\2\2\2\u0bc8\u0bca\5\u019a\u00ce"+
		"\2\u0bc9\u0bc8\3\2\2\2\u0bc9\u0bca\3\2\2\2\u0bca\u0bcc\3\2\2\2\u0bcb\u0bcd"+
		"\5\u0140\u00a1\2\u0bcc\u0bcb\3\2\2\2\u0bcc\u0bcd\3\2\2\2\u0bcd\u0bcf\3"+
		"\2\2\2\u0bce\u0bd0\5\u0142\u00a2\2\u0bcf\u0bce\3\2\2\2\u0bcf\u0bd0\3\2"+
		"\2\2\u0bd0\u0bd2\3\2\2\2\u0bd1\u0bd3\5\u013a\u009e\2\u0bd2\u0bd1\3\2\2"+
		"\2\u0bd2\u0bd3\3\2\2\2\u0bd3\u0bd5\3\2\2\2\u0bd4\u0bd6\5\u0164\u00b3\2"+
		"\u0bd5\u0bd4\3\2\2\2\u0bd5\u0bd6\3\2\2\2\u0bd6\u0bd8\3\2\2\2\u0bd7\u0bd9"+
		"\5\u013c\u009f\2\u0bd8\u0bd7\3\2\2\2\u0bd8\u0bd9\3\2\2\2\u0bd9\u0bdb\3"+
		"\2\2\2\u0bda\u0bdc\5\u013e\u00a0\2\u0bdb\u0bda\3\2\2\2\u0bdb\u0bdc\3\2"+
		"\2\2\u0bdc\u0bde\3\2\2\2\u0bdd\u0bdf\5\u01a4\u00d3\2\u0bde\u0bdd\3\2\2"+
		"\2\u0bde\u0bdf\3\2\2\2\u0bdf\u0bfe\3\2\2\2\u0be0\u0be2\7\u0293\2\2\u0be1"+
		"\u0be0\3\2\2\2\u0be1\u0be2\3\2\2\2\u0be2\u0be3\3\2\2\2\u0be3\u0be5\5\u0138"+
		"\u009d\2\u0be4\u0be1\3\2\2\2\u0be4\u0be5\3\2\2\2\u0be5\u0be6\3\2\2\2\u0be6"+
		"\u0be7\7\u011c\2\2\u0be7\u0be8\7\u016f\2\2\u0be8\u0be9\7\u025f\2\2\u0be9"+
		"\u0bea\5\u01b0\u00d9\2\u0bea\u0beb\7\u0198\2\2\u0beb\u0bec\7\u025f\2\2"+
		"\u0bec\u0bef\5\u01b0\u00d9\2\u0bed\u0bee\7\u01f5\2\2\u0bee\u0bf0\5\u019a"+
		"\u00ce\2\u0bef\u0bed\3\2\2\2\u0bef\u0bf0\3\2\2\2\u0bf0\u0bf2\3\2\2\2\u0bf1"+
		"\u0bf3\5\u0142\u00a2\2\u0bf2\u0bf1\3\2\2\2\u0bf2\u0bf3\3\2\2\2\u0bf3\u0bf5"+
		"\3\2\2\2\u0bf4\u0bf6\5\u0164\u00b3\2\u0bf5\u0bf4\3\2\2\2\u0bf5\u0bf6\3"+
		"\2\2\2\u0bf6\u0bf8\3\2\2\2\u0bf7\u0bf9\5\u013c\u009f\2\u0bf8\u0bf7\3\2"+
		"\2\2\u0bf8\u0bf9\3\2\2\2\u0bf9\u0bfb\3\2\2\2\u0bfa\u0bfc\5\u01a4\u00d3"+
		"\2\u0bfb\u0bfa\3\2\2\2\u0bfb\u0bfc\3\2\2\2\u0bfc\u0bfe\3\2\2\2\u0bfd\u0ba2"+
		"\3\2\2\2\u0bfd\u0be4\3\2\2\2\u0bfe\u0125\3\2\2\2\u0bff\u0c00\7\u00ec\2"+
		"\2\u0c00\u0c01\t*\2\2\u0c01\u0127\3\2\2\2\u0c02\u0c03\7\u01e9\2\2\u0c03"+
		"\u0c08\7\u01bf\2\2\u0c04\u0c05\7\u01e9\2\2\u0c05\u0c06\7\u023a\2\2\u0c06"+
		"\u0c08\5\u012a\u0096\2\u0c07\u0c02\3\2\2\2\u0c07\u0c04\3\2\2\2\u0c08\u0129"+
		"\3\2\2\2\u0c09\u0c0a\7\u0154\2\2\u0c0a\u0c0b\7\u02b6\2\2\u0c0b\u0c0e\5"+
		"\u0220\u0111\2\u0c0c\u0c0d\7\u0250\2\2\u0c0d\u0c0f\7\u02b1\2\2\u0c0e\u0c0c"+
		"\3\2\2\2\u0c0e\u0c0f\3\2\2\2\u0c0f\u012b\3\2\2\2\u0c10\u0c11\t+\2\2\u0c11"+
		"\u012d\3\2\2\2\u0c12\u0c15\5\u0220\u0111\2\u0c13\u0c15\7\u02b1\2\2\u0c14"+
		"\u0c12\3\2\2\2\u0c14\u0c13\3\2\2\2\u0c15\u012f\3\2\2\2\u0c16\u0c1a\5\u021c"+
		"\u010f\2\u0c17\u0c1a\7\u02b1\2\2\u0c18\u0c1a\7\u02b2\2\2\u0c19\u0c16\3"+
		"\2\2\2\u0c19\u0c17\3\2\2\2\u0c19\u0c18\3\2\2\2\u0c1a\u0131\3\2\2\2\u0c1b"+
		"\u0c24\5\u0130\u0099\2\u0c1c\u0c22\7\u02af\2\2\u0c1d\u0c23\5\u0130\u0099"+
		"\2\u0c1e\u0c1f\7\u00b8\2\2\u0c1f\u0c20\5\u0130\u0099\2\u0c20\u0c21\7\u00b9"+
		"\2\2\u0c21\u0c23\3\2\2\2\u0c22\u0c1d\3\2\2\2\u0c22\u0c1e\3\2\2\2\u0c23"+
		"\u0c25\3\2\2\2\u0c24\u0c1c\3\2\2\2\u0c24\u0c25\3\2\2\2\u0c25\u0133\3\2"+
		"\2\2\u0c26\u0c28\7\u015a\2\2\u0c27\u0c29\5\u0136\u009c\2\u0c28\u0c27\3"+
		"\2\2\2\u0c28\u0c29\3\2\2\2\u0c29\u0c2d\3\2\2\2\u0c2a\u0c2d\7\u0137\2\2"+
		"\u0c2b\u0c2d\7\u0138\2\2\u0c2c\u0c26\3\2\2\2\u0c2c\u0c2a\3\2\2\2\u0c2c"+
		"\u0c2b\3\2\2\2\u0c2d\u0c2f\3\2\2\2\u0c2e\u0c30\t,\2\2\u0c2f\u0c2e\3\2"+
		"\2\2\u0c2f\u0c30\3\2\2\2\u0c30\u0c32\3\2\2\2\u0c31\u0c33\7\u0203\2\2\u0c32"+
		"\u0c31\3\2\2\2\u0c32\u0c33\3\2\2\2\u0c33\u0135\3\2\2\2\u0c34\u0c35\t-"+
		"\2\2\u0c35\u0137\3\2\2\2\u0c36\u0c37\t.\2\2\u0c37\u0139\3\2\2\2\u0c38"+
		"\u0c39\7\u0207\2\2\u0c39\u0c3a\7\u0165\2\2\u0c3a\u0c3b\5\u01dc\u00ef\2"+
		"\u0c3b\u013b\3\2\2\2\u0c3c\u0c3d\7\u0135\2\2\u0c3d\u0c3e\7\u01e9\2\2\u0c3e"+
		"\u0c3f\5\u01dc\u00ef\2\u0c3f\u013d\3\2\2\2\u0c40\u0c41\7\u01ee\2\2\u0c41"+
		"\u0c42\7\u00ef\2\2\u0c42\u0c43\5\u0220\u0111\2\u0c43\u013f\3\2\2\2\u0c44"+
		"\u0c45\7\u0102\2\2\u0c45\u0c46\7\u016f\2\2\u0c46\u0c47\7\u01fc\2\2\u0c47"+
		"\u0c48\7\u00d2\2\2\u0c48\u0c49\5\u019a\u00ce\2\u0c49\u0141\3\2\2\2\u0c4a"+
		"\u0c4b\7\u0244\2\2\u0c4b\u0c4c\7\u00b8\2\2\u0c4c\u0c51\5\u0144\u00a3\2"+
		"\u0c4d\u0c4e\7\u00ba\2\2\u0c4e\u0c50\5\u0144\u00a3\2\u0c4f\u0c4d\3\2\2"+
		"\2\u0c50\u0c53\3\2\2\2\u0c51\u0c4f\3\2\2\2\u0c51\u0c52\3\2\2\2\u0c52\u0c54"+
		"\3\2\2\2\u0c53\u0c51\3\2\2\2\u0c54\u0c55\7\u00b9\2\2\u0c55\u0143\3\2\2"+
		"\2\u0c56\u0c57\5\u0220\u0111\2\u0c57\u0c58\7\u0298\2\2\u0c58\u0c59\5\u01dc"+
		"\u00ef\2\u0c59\u0145\3\2\2\2\u0c5a\u0c77\5\u0148\u00a5\2\u0c5b\u0c5c\7"+
		"\u0293\2\2\u0c5c\u0c5d\7\u0238\2\2\u0c5d\u0c5e\7\u00b8\2\2\u0c5e\u0c5f"+
		"\5\u01a6\u00d4\2\u0c5f\u0c60\7\u00b9\2\2\u0c60\u0c77\3\2\2\2\u0c61\u0c62"+
		"\7\u0293\2\2\u0c62\u0c63\7\u017f\2\2\u0c63\u0c64\7\u00b8\2\2\u0c64\u0c65"+
		"\5\u01a6\u00d4\2\u0c65\u0c66\7\u00b9\2\2\u0c66\u0c77\3\2\2\2\u0c67\u0c68"+
		"\7\u0293\2\2\u0c68\u0c69\7\u01b8\2\2\u0c69\u0c6a\7\u00b8\2\2\u0c6a\u0c6b"+
		"\5\u01a6\u00d4\2\u0c6b\u0c6c\7\u00b9\2\2\u0c6c\u0c77\3\2\2\2\u0c6d\u0c6e"+
		"\7\u0293\2\2\u0c6e\u0c6f\7\u00ea\2\2\u0c6f\u0c74\5\u0130\u0099\2\u0c70"+
		"\u0c71\7\u00b8\2\2\u0c71\u0c72\5\u01a6\u00d4\2\u0c72\u0c73\7\u00b9\2\2"+
		"\u0c73\u0c75\3\2\2\2\u0c74\u0c70\3\2\2\2\u0c74\u0c75\3\2\2\2\u0c75\u0c77"+
		"\3\2\2\2\u0c76\u0c5a\3\2\2\2\u0c76\u0c5b\3\2\2\2\u0c76\u0c61\3\2\2\2\u0c76"+
		"\u0c67\3\2\2\2\u0c76\u0c6d\3\2\2\2\u0c77\u0147\3\2\2\2\u0c78\u0c79\7\u0293"+
		"\2\2\u0c79\u0c7a\7\u0227\2\2\u0c7a\u0c7f\5\u0130\u0099\2\u0c7b\u0c7c\7"+
		"\u00b8\2\2\u0c7c\u0c7d\5\u01a6\u00d4\2\u0c7d\u0c7e\7\u00b9\2\2\u0c7e\u0c80"+
		"\3\2\2\2\u0c7f\u0c7b\3\2\2\2\u0c7f\u0c80\3\2\2\2\u0c80\u0149\3\2\2\2\u0c81"+
		"\u0c84\7\u011c\2\2\u0c82\u0c83\7\u01b8\2\2\u0c83\u0c85\5\u0204\u0103\2"+
		"\u0c84\u0c82\3\2\2\2\u0c84\u0c85\3\2\2\2\u0c85\u0c86\3\2\2\2\u0c86\u0c87"+
		"\7\u018f\2\2\u0c87\u0c88\7\u02b1\2\2\u0c88\u0c89\7\u0198\2\2\u0c89\u0c8a"+
		"\7\u025f\2\2\u0c8a\u0c8d\5\u01b0\u00d9\2\u0c8b\u0c8c\7\u01f5\2\2\u0c8c"+
		"\u0c8e\5\u019a\u00ce\2\u0c8d\u0c8b\3\2\2\2\u0c8d\u0c8e\3\2\2\2\u0c8e\u0c93"+
		"\3\2\2\2\u0c8f\u0c90\7\u0102\2\2\u0c90\u0c91\7\u0267\2\2\u0c91\u0c92\7"+
		"\u00ef\2\2\u0c92\u0c94\7\u02b1\2\2\u0c93\u0c8f\3\2\2\2\u0c93\u0c94\3\2"+
		"\2\2\u0c94\u0c99\3\2\2\2\u0c95\u0c96\7\u01b4\2\2\u0c96\u0c97\7\u0267\2"+
		"\2\u0c97\u0c98\7\u00ef\2\2\u0c98\u0c9a\7\u02b1\2\2\u0c99\u0c95\3\2\2\2"+
		"\u0c99\u0c9a\3\2\2\2\u0c9a\u0c9c\3\2\2\2\u0c9b\u0c9d\5\u014c\u00a7\2\u0c9c"+
		"\u0c9b\3\2\2\2\u0c9c\u0c9d\3\2\2\2\u0c9d\u0c9f\3\2\2\2\u0c9e\u0ca0\5\u019a"+
		"\u00ce\2\u0c9f\u0c9e\3\2\2\2\u0c9f\u0ca0\3\2\2\2\u0ca0\u0ca2\3\2\2\2\u0ca1"+
		"\u0ca3\5\u0142\u00a2\2\u0ca2\u0ca1\3\2\2\2\u0ca2\u0ca3\3\2\2\2\u0ca3\u0ca5"+
		"\3\2\2\2\u0ca4\u0ca6\5\u01a4\u00d3\2\u0ca5\u0ca4\3\2\2\2\u0ca5\u0ca6\3"+
		"\2\2\2\u0ca6\u014b\3\2\2\2\u0ca7\u0ca8\7\u0189\2\2\u0ca8\u0ca9\7\u02b6"+
		"\2\2\u0ca9\u0cae\7\u01b4\2\2\u0caa\u0cab\7\u0189\2\2\u0cab\u0cac\7\u02b6"+
		"\2\2\u0cac\u0cae\7\u0237\2\2\u0cad\u0ca7\3\2\2\2\u0cad\u0caa\3\2\2\2\u0cae"+
		"\u014d\3\2\2\2\u0caf\u0cb0\7\u0198\2\2\u0cb0\u0cb1\7\u01f0\2\2\u0cb1\u0cb5"+
		"\5\u0200\u0101\2\u0cb2\u0cb3\7\u016d\2\2\u0cb3\u0cb4\7\u00d2\2\2\u0cb4"+
		"\u0cb6\5\u0220\u0111\2\u0cb5\u0cb2\3\2\2\2\u0cb5\u0cb6\3\2\2\2\u0cb6\u0cb8"+
		"\3\2\2\2\u0cb7\u0cb9\5\u01a4\u00d3\2\u0cb8\u0cb7\3\2\2\2\u0cb8\u0cb9\3"+
		"\2\2\2\u0cb9\u014f\3\2\2\2\u0cba\u0cbc\5\u015a\u00ae\2\u0cbb\u0cba\3\2"+
		"\2\2\u0cbb\u0cbc\3\2\2\2\u0cbc\u0cbd\3\2\2\2\u0cbd\u0cbe\5\u0152\u00aa"+
		"\2\u0cbe\u0cbf\5\u018c\u00c7\2\u0cbf\u0151\3\2\2\2\u0cc0\u0cc1\b\u00aa"+
		"\1\2\u0cc1\u0cc2\5\u0156\u00ac\2\u0cc2\u0ccb\3\2\2\2\u0cc3\u0cc4\f\3\2"+
		"\2\u0cc4\u0cc6\t/\2\2\u0cc5\u0cc7\5\u0154\u00ab\2\u0cc6\u0cc5\3\2\2\2"+
		"\u0cc6\u0cc7\3\2\2\2\u0cc7\u0cc8\3\2\2\2\u0cc8\u0cca\5\u0152\u00aa\4\u0cc9"+
		"\u0cc3\3\2\2\2\u0cca\u0ccd\3\2\2\2\u0ccb\u0cc9\3\2\2\2\u0ccb\u0ccc\3\2"+
		"\2\2\u0ccc\u0153\3\2\2\2\u0ccd\u0ccb\3\2\2\2\u0cce\u0ccf\t \2\2\u0ccf"+
		"\u0155\3\2\2\2\u0cd0\u0cd7\5\u0158\u00ad\2\u0cd1\u0cd2\7\u00b8\2\2\u0cd2"+
		"\u0cd3\5\u0150\u00a9\2\u0cd3\u0cd4\7\u00b9\2\2\u0cd4\u0cd7\3\2\2\2\u0cd5"+
		"\u0cd7\5\u01d6\u00ec\2\u0cd6\u0cd0\3\2\2\2\u0cd6\u0cd1\3\2\2\2\u0cd6\u0cd5"+
		"\3\2\2\2\u0cd7\u0157\3\2\2\2\u0cd8\u0cda\5\u0160\u00b1\2\u0cd9\u0cdb\5"+
		"\u0168\u00b5\2\u0cda\u0cd9\3\2\2\2\u0cda\u0cdb\3\2\2\2\u0cdb\u0cdd\3\2"+
		"\2\2\u0cdc\u0cde\5\u0166\u00b4\2\u0cdd\u0cdc\3\2\2\2\u0cdd\u0cde\3\2\2"+
		"\2\u0cde\u0ce0\3\2\2\2\u0cdf\u0ce1\5\u0164\u00b3\2\u0ce0\u0cdf\3\2\2\2"+
		"\u0ce0\u0ce1\3\2\2\2\u0ce1\u0ce3\3\2\2\2\u0ce2\u0ce4\5\u0178\u00bd\2\u0ce3"+
		"\u0ce2\3\2\2\2\u0ce3\u0ce4\3\2\2\2\u0ce4\u0ce6\3\2\2\2\u0ce5\u0ce7\5\u017e"+
		"\u00c0\2\u0ce6\u0ce5\3\2\2\2\u0ce6\u0ce7\3\2\2\2\u0ce7\u0ce8\3\2\2\2\u0ce8"+
		"\u0ce9\6\u00ad\13\2\u0ce9\u0cea\5\u018c\u00c7\2\u0cea\u0159\3\2\2\2\u0ceb"+
		"\u0cec\7\u0293\2\2\u0cec\u0cf1\5\u015c\u00af\2\u0ced\u0cee\7\u00ba\2\2"+
		"\u0cee\u0cf0\5\u015c\u00af\2\u0cef\u0ced\3\2\2\2\u0cf0\u0cf3\3\2\2\2\u0cf1"+
		"\u0cef\3\2\2\2\u0cf1\u0cf2\3\2\2\2\u0cf2\u015b\3\2\2\2\u0cf3\u0cf1\3\2"+
		"\2\2\u0cf4\u0cf6\5\u0220\u0111\2\u0cf5\u0cf7\5\u015e\u00b0\2\u0cf6\u0cf5"+
		"\3\2\2\2\u0cf6\u0cf7\3\2\2\2\u0cf7\u0cf8\3\2\2\2\u0cf8\u0cf9\7\u00d2\2"+
		"\2\u0cf9\u0cfa\7\u00b8\2\2\u0cfa\u0cfb\5\u0150\u00a9\2\u0cfb\u0cfc\7\u00b9"+
		"\2\2\u0cfc\u015d\3\2\2\2\u0cfd\u0cfe\7\u00b8\2\2\u0cfe\u0d03\5\u0220\u0111"+
		"\2\u0cff\u0d00\7\u00ba\2\2\u0d00\u0d02\5\u0220\u0111\2\u0d01\u0cff\3\2"+
		"\2\2\u0d02\u0d05\3\2\2\2\u0d03\u0d01\3\2\2\2\u0d03\u0d04\3\2\2\2\u0d04"+
		"\u0d06\3\2\2\2\u0d05\u0d03\3\2\2\2\u0d06\u0d07\7\u00b9\2\2\u0d07\u015f"+
		"\3\2\2\2\u0d08\u0d0a\7\u023f\2\2\u0d09\u0d0b\5\u0180\u00c1\2\u0d0a\u0d09"+
		"\3\2\2\2\u0d0a\u0d0b\3\2\2\2\u0d0b\u0d0d\3\2\2\2\u0d0c\u0d0e\7\u013b\2"+
		"\2\u0d0d\u0d0c\3\2\2\2\u0d0d\u0d0e\3\2\2\2\u0d0e\u0d0f\3\2\2\2\u0d0f\u0d10"+
		"\5\u0162\u00b2\2\u0d10\u0161\3\2\2\2\u0d11\u0d19\5\u01da\u00ee\2\u0d12"+
		"\u0d13\7\u02a1\2\2\u0d13\u0d14\7\u0155\2\2\u0d14\u0d15\7\u00b8\2\2\u0d15"+
		"\u0d16\5\u01da\u00ee\2\u0d16\u0d17\7\u00b9\2\2\u0d17\u0d19\3\2\2\2\u0d18"+
		"\u0d11\3\2\2\2\u0d18\u0d12\3\2\2\2\u0d19\u0163\3\2\2\2\u0d1a\u0d1b\7\u0291"+
		"\2\2\u0d1b\u0d1c\5\u01e0\u00f1\2\u0d1c\u0165\3\2\2\2\u0d1d\u0d1e\7\u016f"+
		"\2\2\u0d1e\u0d1f\5\u016e\u00b8\2\u0d1f\u0167\3\2\2\2\u0d20\u0d22\5\u016a"+
		"\u00b6\2\u0d21\u0d20\3\2\2\2\u0d21\u0d22\3\2\2\2\u0d22\u0d23\3\2\2\2\u0d23"+
		"\u0d26\7\u0198\2\2\u0d24\u0d27\5\u016c\u00b7\2\u0d25\u0d27\5\u0220\u0111"+
		"\2\u0d26\u0d24\3\2\2\2\u0d26\u0d25\3\2\2\2\u0d27\u0d2f\3\2\2\2\u0d28\u0d2b"+
		"\7\u00ba\2\2\u0d29\u0d2c\5\u016c\u00b7\2\u0d2a\u0d2c\5\u0220\u0111\2\u0d2b"+
		"\u0d29\3\2\2\2\u0d2b\u0d2a\3\2\2\2\u0d2c\u0d2e\3\2\2\2\u0d2d\u0d28\3\2"+
		"\2\2\u0d2e\u0d31\3\2\2\2\u0d2f\u0d2d\3\2\2\2\u0d2f\u0d30\3\2\2\2\u0d30"+
		"\u0169\3\2\2\2\u0d31\u0d2f\3\2\2\2\u0d32\u0d33\7\u00ee\2\2\u0d33\u0d34"+
		"\7\u0100\2\2\u0d34\u016b\3\2\2\2\u0d35\u0d36\5\u0220\u0111\2\u0d36\u0d37"+
		"\7\u00b8\2\2\u0d37\u0d38\7\u02b6\2\2\u0d38\u0d39\7\u00b9\2\2\u0d39\u016d"+
		"\3\2\2\2\u0d3a\u0d3f\5\u0170\u00b9\2\u0d3b\u0d3c\7\u00ba\2\2\u0d3c\u0d3e"+
		"\5\u0170\u00b9\2\u0d3d\u0d3b\3\2\2\2\u0d3e\u0d41\3\2\2\2\u0d3f\u0d3d\3"+
		"\2\2\2\u0d3f\u0d40\3\2\2\2\u0d40\u016f\3\2\2\2\u0d41\u0d3f\3\2\2\2\u0d42"+
		"\u0d46\5\u01a0\u00d1\2\u0d43\u0d45\5\u0172\u00ba\2\u0d44\u0d43\3\2\2\2"+
		"\u0d45\u0d48\3\2\2\2\u0d46\u0d44\3\2\2\2\u0d46\u0d47\3\2\2\2\u0d47\u0171"+
		"\3\2\2\2\u0d48\u0d46\3\2\2\2\u0d49\u0d4a\5\u0196\u00cc\2\u0d4a\u0d4c\7"+
		"\u01a3\2\2\u0d4b\u0d4d\5\u0174\u00bb\2\u0d4c\u0d4b\3\2\2\2\u0d4c\u0d4d"+
		"\3\2\2\2\u0d4d\u0d4e\3\2\2\2\u0d4e\u0d50\5\u01a0\u00d1\2\u0d4f\u0d51\5"+
		"\u0198\u00cd\2\u0d50\u0d4f\3\2\2\2\u0d50\u0d51\3\2\2\2\u0d51\u0173\3\2"+
		"\2\2\u0d52\u0d53\7\u00bc\2\2\u0d53\u0d54\5\u0220\u0111\2\u0d54\u0d55\7"+
		"\u00bd\2\2\u0d55\u0d5b\3\2\2\2\u0d56\u0d57\7\u02ad\2\2\u0d57\u0d58\5\u0220"+
		"\u0111\2\u0d58\u0d59\7\u02ae\2\2\u0d59\u0d5b\3\2\2\2\u0d5a\u0d52\3\2\2"+
		"\2\u0d5a\u0d56\3\2\2\2\u0d5b\u0175\3\2\2\2\u0d5c\u0d5d\7\u00bc\2\2\u0d5d"+
		"\u0d62\5\u0220\u0111\2\u0d5e\u0d5f\7\u00ba\2\2\u0d5f\u0d61\5\u0220\u0111"+
		"\2\u0d60\u0d5e\3\2\2\2\u0d61\u0d64\3\2\2\2\u0d62\u0d60\3\2\2\2\u0d62\u0d63"+
		"\3\2\2\2\u0d63\u0d65\3\2\2\2\u0d64\u0d62\3\2\2\2\u0d65\u0d66\7\u00bd\2"+
		"\2\u0d66\u0d73\3\2\2\2\u0d67\u0d68\7\u02ad\2\2\u0d68\u0d6d\5\u0220\u0111"+
		"\2\u0d69\u0d6a\7\u00ba\2\2\u0d6a\u0d6c\5\u0220\u0111\2\u0d6b\u0d69\3\2"+
		"\2\2\u0d6c\u0d6f\3\2\2\2\u0d6d\u0d6b\3\2\2\2\u0d6d\u0d6e\3\2\2\2\u0d6e"+
		"\u0d70\3\2\2\2\u0d6f\u0d6d\3\2\2\2\u0d70\u0d71\7\u02ae\2\2\u0d71\u0d73"+
		"\3\2\2\2\u0d72\u0d5c\3\2\2\2\u0d72\u0d67\3\2\2\2\u0d73\u0177\3\2\2\2\u0d74"+
		"\u0d75\7\u017a\2\2\u0d75\u0d76\7\u00ef\2\2\u0d76\u0d77\5\u017a\u00be\2"+
		"\u0d77\u0179\3\2\2\2\u0d78\u0d79\7\u0234\2\2\u0d79\u0d82\7\u00b8\2\2\u0d7a"+
		"\u0d7f\5\u01dc\u00ef\2\u0d7b\u0d7c\7\u00ba\2\2\u0d7c\u0d7e\5\u01dc\u00ef"+
		"\2\u0d7d\u0d7b\3\2\2\2\u0d7e\u0d81\3\2\2\2\u0d7f\u0d7d\3\2\2\2\u0d7f\u0d80"+
		"\3\2\2\2\u0d80\u0d83\3\2\2\2\u0d81\u0d7f\3\2\2\2\u0d82\u0d7a\3\2\2\2\u0d82"+
		"\u0d83\3\2\2\2\u0d83\u0d84\3\2\2\2\u0d84\u0da8\7\u00b9\2\2\u0d85\u0d86"+
		"\7\u0115\2\2\u0d86\u0d8f\7\u00b8\2\2\u0d87\u0d8c\5\u01dc\u00ef\2\u0d88"+
		"\u0d89\7\u00ba\2\2\u0d89\u0d8b\5\u01dc\u00ef\2\u0d8a\u0d88\3\2\2\2\u0d8b"+
		"\u0d8e\3\2\2\2\u0d8c\u0d8a\3\2\2\2\u0d8c\u0d8d\3\2\2\2\u0d8d\u0d90\3\2"+
		"\2\2\u0d8e\u0d8c\3\2\2\2\u0d8f\u0d87\3\2\2\2\u0d8f\u0d90\3\2\2\2\u0d90"+
		"\u0d91\3\2\2\2\u0d91\u0da8\7\u00b9\2\2\u0d92\u0d93\7\u017b\2\2\u0d93\u0d94"+
		"\7\u0245\2\2\u0d94\u0d95\7\u00b8\2\2\u0d95\u0d9a\5\u017c\u00bf\2\u0d96"+
		"\u0d97\7\u00ba\2\2\u0d97\u0d99\5\u017c\u00bf\2\u0d98\u0d96\3\2\2\2\u0d99"+
		"\u0d9c\3\2\2\2\u0d9a\u0d98\3\2\2\2\u0d9a\u0d9b\3\2\2\2\u0d9b\u0d9d\3\2"+
		"\2\2\u0d9c\u0d9a\3\2\2\2\u0d9d\u0d9e\7\u00b9\2\2\u0d9e\u0da8\3\2\2\2\u0d9f"+
		"\u0da4\5\u01dc\u00ef\2\u0da0\u0da1\7\u00ba\2\2\u0da1\u0da3\5\u01dc\u00ef"+
		"\2\u0da2\u0da0\3\2\2\2\u0da3\u0da6\3\2\2\2\u0da4\u0da2\3\2\2\2\u0da4\u0da5"+
		"\3\2\2\2\u0da5\u0da8\3\2\2\2\u0da6\u0da4\3\2\2\2\u0da7\u0d78\3\2\2\2\u0da7"+
		"\u0d85\3\2\2\2\u0da7\u0d92\3\2\2\2\u0da7\u0d9f\3\2\2\2\u0da8\u017b\3\2"+
		"\2\2\u0da9\u0db2\7\u00b8\2\2\u0daa\u0daf\5\u01dc\u00ef\2\u0dab\u0dac\7"+
		"\u00ba\2\2\u0dac\u0dae\5\u01dc\u00ef\2\u0dad\u0dab\3\2\2\2\u0dae\u0db1"+
		"\3\2\2\2\u0daf\u0dad\3\2\2\2\u0daf\u0db0\3\2\2\2\u0db0\u0db3\3\2\2\2\u0db1"+
		"\u0daf\3\2\2\2\u0db2\u0daa\3\2\2\2\u0db2\u0db3\3\2\2\2\u0db3\u0db4\3\2"+
		"\2\2\u0db4\u0db5\7\u00b9\2\2\u0db5\u017d\3\2\2\2\u0db6\u0db7\7\u017e\2"+
		"\2\u0db7\u0db8\5\u01e0\u00f1\2\u0db8\u017f\3\2\2\2\u0db9\u0dba\7\u02ad"+
		"\2\2\u0dba\u0dc1\5\u0182\u00c2\2\u0dbb\u0dbd\7\u00ba\2\2\u0dbc\u0dbb\3"+
		"\2\2\2\u0dbc\u0dbd\3\2\2\2\u0dbd\u0dbe\3\2\2\2\u0dbe\u0dc0\5\u0182\u00c2"+
		"\2\u0dbf\u0dbc\3\2\2\2\u0dc0\u0dc3\3\2\2\2\u0dc1\u0dbf\3\2\2\2\u0dc1\u0dc2"+
		"\3\2\2\2\u0dc2\u0dc4\3\2\2\2\u0dc3\u0dc1\3\2\2\2\u0dc4\u0dc5\7\u02ae\2"+
		"\2\u0dc5\u0181\3\2\2\2\u0dc6\u0dd4\5\u0220\u0111\2\u0dc7\u0dc8\7\u00b8"+
		"\2\2\u0dc8\u0dcf\5\u0184\u00c3\2\u0dc9\u0dcb\7\u00ba\2\2\u0dca\u0dc9\3"+
		"\2\2\2\u0dca\u0dcb\3\2\2\2\u0dcb\u0dcc\3\2\2\2\u0dcc\u0dce\5\u0184\u00c3"+
		"\2\u0dcd\u0dca\3\2\2\2\u0dce\u0dd1\3\2\2\2\u0dcf\u0dcd\3\2\2\2\u0dcf\u0dd0"+
		"\3\2\2\2\u0dd0\u0dd2\3\2\2\2\u0dd1\u0dcf\3\2\2\2\u0dd2\u0dd3\7\u00b9\2"+
		"\2\u0dd3\u0dd5\3\2\2\2\u0dd4\u0dc7\3\2\2\2\u0dd4\u0dd5\3\2\2\2\u0dd5\u0183"+
		"\3\2\2\2\u0dd6\u0ddc\5\u0130\u0099\2\u0dd7\u0dda\7\u0298\2\2\u0dd8\u0ddb"+
		"\5\u0200\u0101\2\u0dd9\u0ddb\5\u0220\u0111\2\u0dda\u0dd8\3\2\2\2\u0dda"+
		"\u0dd9\3\2\2\2\u0ddb\u0ddd\3\2\2\2\u0ddc\u0dd7\3\2\2\2\u0ddc\u0ddd\3\2"+
		"\2\2\u0ddd\u0185\3\2\2\2\u0dde\u0ddf\5\u01b0\u00d9\2\u0ddf\u0de2\7\u0298"+
		"\2\2\u0de0\u0de3\5\u01dc\u00ef\2\u0de1\u0de3\7\u0133\2\2\u0de2\u0de0\3"+
		"\2\2\2\u0de2\u0de1\3\2\2\2\u0de3\u0187\3\2\2\2\u0de4\u0de9\5\u0186\u00c4"+
		"\2\u0de5\u0de6\7\u00ba\2\2\u0de6\u0de8\5\u0186\u00c4\2\u0de7\u0de5\3\2"+
		"\2\2\u0de8\u0deb\3\2\2\2\u0de9\u0de7\3\2\2\2\u0de9\u0dea\3\2\2\2\u0dea"+
		"\u0189\3\2\2\2\u0deb\u0de9\3\2\2\2\u0dec\u0ded\7\u01ac\2\2\u0ded\u0dee"+
		"\7\u028d\2\2\u0dee\u0def\5\u0220\u0111\2\u0def\u0df8\7\u00b8\2\2\u0df0"+
		"\u0df5\5\u01dc\u00ef\2\u0df1\u0df2\7\u00ba\2\2\u0df2\u0df4\5\u01dc\u00ef"+
		"\2\u0df3\u0df1\3\2\2\2\u0df4\u0df7\3\2\2\2\u0df5\u0df3\3\2\2\2\u0df5\u0df6"+
		"\3\2\2\2\u0df6\u0df9\3\2\2\2\u0df7\u0df5\3\2\2\2\u0df8\u0df0\3\2\2\2\u0df8"+
		"\u0df9\3\2\2\2\u0df9\u0dfa\3\2\2\2\u0dfa\u0dfb\7\u00b9\2\2\u0dfb\u0dfc"+
		"\5\u0220\u0111\2\u0dfc\u0dfd\7\u00d2\2\2\u0dfd\u0e02\5\u0220\u0111\2\u0dfe"+
		"\u0dff\7\u00ba\2\2\u0dff\u0e01\5\u0220\u0111\2\u0e00\u0dfe\3\2\2\2\u0e01"+
		"\u0e04\3\2\2\2\u0e02\u0e00\3\2\2\2\u0e02\u0e03\3\2\2\2\u0e03\u018b\3\2"+
		"\2\2\u0e04\u0e02\3\2\2\2\u0e05\u0e07\5\u018e\u00c8\2\u0e06\u0e05\3\2\2"+
		"\2\u0e06\u0e07\3\2\2\2\u0e07\u0e09\3\2\2\2\u0e08\u0e0a\5\u0192\u00ca\2"+
		"\u0e09\u0e08\3\2\2\2\u0e09\u0e0a\3\2\2\2\u0e0a\u018d\3\2\2\2\u0e0b\u0e0c"+
		"\7\u01ee\2\2\u0e0c\u0e0d\7\u00ef\2\2\u0e0d\u0e12\5\u0190\u00c9\2\u0e0e"+
		"\u0e0f\7\u00ba\2\2\u0e0f\u0e11\5\u0190\u00c9\2\u0e10\u0e0e\3\2\2\2\u0e11"+
		"\u0e14\3\2\2\2\u0e12\u0e10\3\2\2\2\u0e12\u0e13\3\2\2\2\u0e13\u018f\3\2"+
		"\2\2\u0e14\u0e12\3\2\2\2\u0e15\u0e17\5\u01dc\u00ef\2\u0e16\u0e18\t!\2"+
		"\2\u0e17\u0e16\3\2\2\2\u0e17\u0e18\3\2\2\2\u0e18\u0e1b\3\2\2\2\u0e19\u0e1a"+
		"\7\u01e5\2\2\u0e1a\u0e1c\t\60\2\2\u0e1b\u0e19\3\2\2\2\u0e1b\u0e1c\3\2"+
		"\2\2\u0e1c\u0191\3\2\2\2\u0e1d\u0e1e\7\u01b3\2\2\u0e1e\u0e28\7\u02b6\2"+
		"\2\u0e1f\u0e20\7\u01b3\2\2\u0e20\u0e21\7\u02b6\2\2\u0e21\u0e22\7\u01e8"+
		"\2\2\u0e22\u0e28\7\u02b6\2\2\u0e23\u0e24\7\u01b3\2\2\u0e24\u0e25\7\u02b6"+
		"\2\2\u0e25\u0e26\7\u00ba\2\2\u0e26\u0e28\7\u02b6\2\2\u0e27\u0e1d\3\2\2"+
		"\2\u0e27\u0e1f\3\2\2\2\u0e27\u0e23\3\2\2\2\u0e28\u0193\3\2\2\2\u0e29\u0e2a"+
		"\7\u01f5\2\2\u0e2a\u0e2b\7\u00ef\2\2\u0e2b\u0e30\5\u01dc\u00ef\2\u0e2c"+
		"\u0e2d\7\u00ba\2\2\u0e2d\u0e2f\5\u01dc\u00ef\2\u0e2e\u0e2c\3\2\2\2\u0e2f"+
		"\u0e32\3\2\2\2\u0e30\u0e2e\3\2\2\2\u0e30\u0e31\3\2\2\2\u0e31\u0195\3\2"+
		"\2\2\u0e32\u0e30\3\2\2\2\u0e33\u0e35\7\u0190\2\2\u0e34\u0e33\3\2\2\2\u0e34"+
		"\u0e35\3\2\2\2\u0e35\u0e4c\3\2\2\2\u0e36\u0e4c\7\u0114\2\2\u0e37\u0e39"+
		"\7\u01af\2\2\u0e38\u0e3a\7\u01ef\2\2\u0e39\u0e38\3\2\2\2\u0e39\u0e3a\3"+
		"\2\2\2\u0e3a\u0e4c\3\2\2\2\u0e3b\u0e3d\7\u022f\2\2\u0e3c\u0e3e\7\u01ef"+
		"\2\2\u0e3d\u0e3c\3\2\2\2\u0e3d\u0e3e\3\2\2\2\u0e3e\u0e4c\3\2\2\2\u0e3f"+
		"\u0e41\7\u0172\2\2\u0e40\u0e42\7\u01ef\2\2\u0e41\u0e40\3\2\2\2\u0e41\u0e42"+
		"\3\2\2\2\u0e42\u0e4c\3\2\2\2\u0e43\u0e44\7\u01af\2\2\u0e44\u0e4c\7\u0240"+
		"\2\2\u0e45\u0e46\7\u022f\2\2\u0e46\u0e4c\7\u0240\2\2\u0e47\u0e48\7\u01af"+
		"\2\2\u0e48\u0e4c\7\u00ce\2\2\u0e49\u0e4a\7\u022f\2\2\u0e4a\u0e4c\7\u00ce"+
		"\2\2\u0e4b\u0e34\3\2\2\2\u0e4b\u0e36\3\2\2\2\u0e4b\u0e37\3\2\2\2\u0e4b"+
		"\u0e3b\3\2\2\2\u0e4b\u0e3f\3\2\2\2\u0e4b\u0e43\3\2\2\2\u0e4b\u0e45\3\2"+
		"\2\2\u0e4b\u0e47\3\2\2\2\u0e4b\u0e49\3\2\2\2\u0e4c\u0197\3\2\2\2\u0e4d"+
		"\u0e4e\7\u01e9\2\2\u0e4e\u0e52\5\u01e0\u00f1\2\u0e4f\u0e50\7\u0285\2\2"+
		"\u0e50\u0e52\5\u019a\u00ce\2\u0e51\u0e4d\3\2\2\2\u0e51\u0e4f\3\2\2\2\u0e52"+
		"\u0199\3\2\2\2\u0e53\u0e54\7\u00b8\2\2\u0e54\u0e55\5\u019c\u00cf\2\u0e55"+
		"\u0e56\7\u00b9\2\2\u0e56\u019b\3\2\2\2\u0e57\u0e5c\5\u021c\u010f\2\u0e58"+
		"\u0e59\7\u00ba\2\2\u0e59\u0e5b\5\u021c\u010f\2\u0e5a\u0e58\3\2\2\2\u0e5b"+
		"\u0e5e\3\2\2\2\u0e5c\u0e5a\3\2\2\2\u0e5c\u0e5d\3\2\2\2\u0e5d\u019d\3\2"+
		"\2\2\u0e5e\u0e5c\3\2\2\2\u0e5f\u0e60\7\u02af\2\2\u0e60\u0e61\5\u0220\u0111"+
		"\2\u0e61\u0e63\7\u00b8\2\2\u0e62\u0e64\5\u01a6\u00d4\2\u0e63\u0e62\3\2"+
		"\2\2\u0e63\u0e64\3\2\2\2\u0e64\u0e65\3\2\2\2\u0e65\u0e66\7\u00b9\2\2\u0e66"+
		"\u019f\3\2\2\2\u0e67\u0e69\5\u01b0\u00d9\2\u0e68\u0e6a\5\u019e\u00d0\2"+
		"\u0e69\u0e68\3\2\2\2\u0e69\u0e6a\3\2\2\2\u0e6a\u0e6c\3\2\2\2\u0e6b\u0e6d"+
		"\5\u01a2\u00d2\2\u0e6c\u0e6b\3\2\2\2\u0e6c\u0e6d\3\2\2\2\u0e6d\u0e6f\3"+
		"\2\2\2\u0e6e\u0e70\5\u01fe\u0100\2\u0e6f\u0e6e\3\2\2\2\u0e6f\u0e70\3\2"+
		"\2\2\u0e70\u0e72\3\2\2\2\u0e71\u0e73\5\u01d4\u00eb\2\u0e72\u0e71\3\2\2"+
		"\2\u0e72\u0e73\3\2\2\2\u0e73\u0e74\3\2\2\2\u0e74\u0e76\5\u01ae\u00d8\2"+
		"\u0e75\u0e77\5\u0218\u010d\2\u0e76\u0e75\3\2\2\2\u0e76\u0e77\3\2\2\2\u0e77"+
		"\u0e79\3\2\2\2\u0e78\u0e7a\5\u0176\u00bc\2\u0e79\u0e78\3\2\2\2\u0e79\u0e7a"+
		"\3\2\2\2\u0e7a\u0e7e\3\2\2\2\u0e7b\u0e7d\5\u018a\u00c6\2\u0e7c\u0e7b\3"+
		"\2\2\2\u0e7d\u0e80\3\2\2\2\u0e7e\u0e7c\3\2\2\2\u0e7e\u0e7f\3\2\2\2\u0e7f"+
		"\u0e98\3\2\2\2\u0e80\u0e7e\3\2\2\2\u0e81\u0e82\7\u00b8\2\2\u0e82\u0e83"+
		"\5\u0150\u00a9\2\u0e83\u0e84\7\u00b9\2\2\u0e84\u0e88\5\u01ae\u00d8\2\u0e85"+
		"\u0e87\5\u018a\u00c6\2\u0e86\u0e85\3\2\2\2\u0e87\u0e8a\3\2\2\2\u0e88\u0e86"+
		"\3\2\2\2\u0e88\u0e89\3\2\2\2\u0e89\u0e98\3\2\2\2\u0e8a\u0e88\3\2\2\2\u0e8b"+
		"\u0e8c\5\u0220\u0111\2\u0e8c\u0e8e\7\u00b8\2\2\u0e8d\u0e8f\5\u01a6\u00d4"+
		"\2\u0e8e\u0e8d\3\2\2\2\u0e8e\u0e8f\3\2\2\2\u0e8f\u0e90\3\2\2\2\u0e90\u0e91"+
		"\7\u00b9\2\2\u0e91\u0e92\5\u01ae\u00d8\2\u0e92\u0e98\3\2\2\2\u0e93\u0e94"+
		"\7\u00b8\2\2\u0e94\u0e95\5\u016e\u00b8\2\u0e95\u0e96\7\u00b9\2\2\u0e96"+
		"\u0e98\3\2\2\2\u0e97\u0e67\3\2\2\2\u0e97\u0e81\3\2\2\2\u0e97\u0e8b\3\2"+
		"\2\2\u0e97\u0e93\3\2\2\2\u0e98\u01a1\3\2\2\2\u0e99\u0e9a\7\u018d\2\2\u0e9a"+
		"\u0e9b\5\u0220\u0111\2\u0e9b\u01a3\3\2\2\2\u0e9c\u0e9d\7\u020e\2\2\u0e9d"+
		"\u0e9e\7\u00b8\2\2\u0e9e\u0e9f\5\u01a6\u00d4\2\u0e9f\u0ea0\7\u00b9\2\2"+
		"\u0ea0\u01a5\3\2\2\2\u0ea1\u0ea6\5\u01a8\u00d5\2\u0ea2\u0ea3\7\u00ba\2"+
		"\2\u0ea3\u0ea5\5\u01a8\u00d5\2\u0ea4\u0ea2\3\2\2\2\u0ea5\u0ea8\3\2\2\2"+
		"\u0ea6\u0ea4\3\2\2\2\u0ea6\u0ea7\3\2\2\2\u0ea7\u01a7\3\2\2\2\u0ea8\u0ea6"+
		"\3\2\2\2\u0ea9\u0eaa\5\u01aa\u00d6\2\u0eaa\u0eab\7\u0298\2\2\u0eab\u0eac"+
		"\5\u01ac\u00d7\2\u0eac\u01a9\3\2\2\2\u0ead\u0eb0\5\u0220\u0111\2\u0eae"+
		"\u0eb0\5\u0200\u0101\2\u0eaf\u0ead\3\2\2\2\u0eaf\u0eae\3\2\2\2\u0eb0\u01ab"+
		"\3\2\2\2\u0eb1\u0eb4\5\u0220\u0111\2\u0eb2\u0eb4\5\u0200\u0101\2\u0eb3"+
		"\u0eb1\3\2\2\2\u0eb3\u0eb2\3\2\2\2\u0eb4\u01ad\3\2\2\2\u0eb5\u0eb7\7\u00d2"+
		"\2\2\u0eb6\u0eb5\3\2\2\2\u0eb6\u0eb7\3\2\2\2\u0eb7\u0eb8\3\2\2\2\u0eb8"+
		"\u0eba\5\u0222\u0112\2\u0eb9\u0ebb\5\u019a\u00ce\2\u0eba\u0eb9\3\2\2\2"+
		"\u0eba\u0ebb\3\2\2\2\u0ebb\u0ebd\3\2\2\2\u0ebc\u0eb6\3\2\2\2\u0ebc\u0ebd"+
		"\3\2\2\2\u0ebd\u01af\3\2\2\2\u0ebe\u0ec3\5\u021c\u010f\2\u0ebf\u0ec0\7"+
		"\u00bb\2\2\u0ec0\u0ec2\5\u021c\u010f\2\u0ec1\u0ebf\3\2\2\2\u0ec2\u0ec5"+
		"\3\2\2\2\u0ec3\u0ec1\3\2\2\2\u0ec3\u0ec4\3\2\2\2\u0ec4\u01b1\3\2\2\2\u0ec5"+
		"\u0ec3\3\2\2\2\u0ec6\u0ecb\5\u01b4\u00db\2\u0ec7\u0ec8\7\u00ba\2\2\u0ec8"+
		"\u0eca\5\u01b4\u00db\2\u0ec9\u0ec7\3\2\2\2\u0eca\u0ecd\3\2\2\2\u0ecb\u0ec9"+
		"\3\2\2\2\u0ecb\u0ecc\3\2\2\2\u0ecc\u01b3\3\2\2\2\u0ecd\u0ecb\3\2\2\2\u0ece"+
		"\u0ed1\5\u0220\u0111\2\u0ecf\u0ed0\7\u0103\2\2\u0ed0\u0ed2\7\u02b1\2\2"+
		"\u0ed1\u0ecf\3\2\2\2\u0ed1\u0ed2\3\2\2\2\u0ed2\u01b5\3\2\2\2\u0ed3\u0ed8"+
		"\5\u01b8\u00dd\2\u0ed4\u0ed5\7\u00ba\2\2\u0ed5\u0ed7\5\u01b8\u00dd\2\u0ed6"+
		"\u0ed4\3\2\2\2\u0ed7\u0eda\3\2\2\2\u0ed8\u0ed6\3\2\2\2\u0ed8\u0ed9\3\2"+
		"\2\2\u0ed9\u01b7\3\2\2\2\u0eda\u0ed8\3\2\2\2\u0edb\u0edc\5\u0220\u0111"+
		"\2\u0edc\u0ede\5\u020e\u0108\2\u0edd\u0edf\7\u01a6\2\2\u0ede\u0edd\3\2"+
		"\2\2\u0ede\u0edf\3\2\2\2\u0edf\u0ee1\3\2\2\2\u0ee0\u0ee2\5\u01d2\u00ea"+
		"\2\u0ee1\u0ee0\3\2\2\2\u0ee1\u0ee2\3\2\2\2\u0ee2\u0ee7\3\2\2\2\u0ee3\u0ee5"+
		"\7\u01e3\2\2\u0ee4\u0ee3\3\2\2\2\u0ee4\u0ee5\3\2\2\2\u0ee5\u0ee6\3\2\2"+
		"\2\u0ee6\u0ee8\7\u01e4\2\2\u0ee7\u0ee4\3\2\2\2\u0ee7\u0ee8\3\2\2\2\u0ee8"+
		"\u0ef0\3\2\2\2\u0ee9\u0eee\7\u00d7\2\2\u0eea\u0eeb\7\u00b8\2\2\u0eeb\u0eec"+
		"\5\u0226\u0114\2\u0eec\u0eed\7\u00b9\2\2\u0eed\u0eef\3\2\2\2\u0eee\u0eea"+
		"\3\2\2\2\u0eee\u0eef\3\2\2\2\u0eef\u0ef1\3\2\2\2\u0ef0\u0ee9\3\2\2\2\u0ef0"+
		"\u0ef1\3\2\2\2\u0ef1\u0f00\3\2\2\2\u0ef2\u0efe\7\u0133\2\2\u0ef3\u0eff"+
		"\7\u01e4\2\2\u0ef4\u0eff\7\u02b6\2\2\u0ef5\u0eff\7\u02b1\2\2\u0ef6\u0eff"+
		"\7\u0118\2\2\u0ef7\u0efc\7\u011a\2\2\u0ef8\u0ef9\7\u00b8\2\2\u0ef9\u0efa"+
		"\5\u0226\u0114\2\u0efa\u0efb\7\u00b9\2\2\u0efb\u0efd\3\2\2\2\u0efc\u0ef8"+
		"\3\2\2\2\u0efc\u0efd\3\2\2\2\u0efd\u0eff\3\2\2\2\u0efe\u0ef3\3\2\2\2\u0efe"+
		"\u0ef4\3\2\2\2\u0efe\u0ef5\3\2\2\2\u0efe\u0ef6\3\2\2\2\u0efe\u0ef7\3\2"+
		"\2\2\u0eff\u0f01\3\2\2\2\u0f00\u0ef2\3\2\2\2\u0f00\u0f01\3\2\2\2\u0f01"+
		"\u0f0b\3\2\2\2\u0f02\u0f03\7\u01e9\2\2\u0f03\u0f04\7\u0282\2\2\u0f04\u0f09"+
		"\7\u011a\2\2\u0f05\u0f06\7\u00b8\2\2\u0f06\u0f07\5\u0226\u0114\2\u0f07"+
		"\u0f08\7\u00b9\2\2\u0f08\u0f0a\3\2\2\2\u0f09\u0f05\3\2\2\2\u0f09\u0f0a"+
		"\3\2\2\2\u0f0a\u0f0c\3\2\2\2\u0f0b\u0f02\3\2\2\2\u0f0b\u0f0c\3\2\2\2\u0f0c"+
		"\u0f0f\3\2\2\2\u0f0d\u0f0e\7\u0103\2\2\u0f0e\u0f10\7\u02b1\2\2\u0f0f\u0f0d"+
		"\3\2\2\2\u0f0f\u0f10\3\2\2\2\u0f10\u01b9\3\2\2\2\u0f11\u0f16\5\u01bc\u00df"+
		"\2\u0f12\u0f13\7\u00ba\2\2\u0f13\u0f15\5\u01bc\u00df\2\u0f14\u0f12\3\2"+
		"\2\2\u0f15\u0f18\3\2\2\2\u0f16\u0f14\3\2\2\2\u0f16\u0f17\3\2\2\2\u0f17"+
		"\u01bb\3\2\2\2\u0f18\u0f16\3\2\2\2\u0f19\u0f1a\7\u018d\2\2\u0f1a\u0f1b"+
		"\5\u0220\u0111\2\u0f1b\u0f1e\5\u019a\u00ce\2\u0f1c\u0f1d\7\u0285\2\2\u0f1d"+
		"\u0f1f\t\61\2\2\u0f1e\u0f1c\3\2\2\2\u0f1e\u0f1f\3\2\2\2\u0f1f\u0f25\3"+
		"\2\2\2\u0f20\u0f21\7\u020e\2\2\u0f21\u0f22\7\u00b8\2\2\u0f22\u0f23\5\u01a6"+
		"\u00d4\2\u0f23\u0f24\7\u00b9\2\2\u0f24\u0f26\3\2\2\2\u0f25\u0f20\3\2\2"+
		"\2\u0f25\u0f26\3\2\2\2\u0f26\u0f29\3\2\2\2\u0f27\u0f28\7\u0103\2\2\u0f28"+
		"\u0f2a\7\u02b1\2\2\u0f29\u0f27\3\2\2\2\u0f29\u0f2a\3\2\2\2\u0f2a\u01bd"+
		"\3\2\2\2\u0f2b\u0f30\5\u01c0\u00e1\2\u0f2c\u0f2d\7\u00ba\2\2\u0f2d\u0f2f"+
		"\5\u01c0\u00e1\2\u0f2e\u0f2c\3\2\2\2\u0f2f\u0f32\3\2\2\2\u0f30\u0f2e\3"+
		"\2\2\2\u0f30\u0f31\3\2\2\2\u0f31\u01bf\3\2\2\2\u0f32\u0f30\3\2\2\2\u0f33"+
		"\u0f38\5\u01c2\u00e2\2\u0f34\u0f38\5\u01c4\u00e3\2\u0f35\u0f38\5\u01c6"+
		"\u00e4\2\u0f36\u0f38\5\u01c8\u00e5\2\u0f37\u0f33\3\2\2\2\u0f37\u0f34\3"+
		"\2\2\2\u0f37\u0f35\3\2\2\2\u0f37\u0f36\3\2\2\2\u0f38\u0f3d\3\2\2\2\u0f39"+
		"\u0f3a\7\u00b8\2\2\u0f3a\u0f3b\5\u01a6\u00d4\2\u0f3b\u0f3c\7\u00b9\2\2"+
		"\u0f3c\u0f3e\3\2\2\2\u0f3d\u0f39\3\2\2\2\u0f3d\u0f3e\3\2\2\2\u0f3e\u01c1"+
		"\3\2\2\2\u0f3f\u0f43\7\u01f5\2\2\u0f40\u0f41\7\u0188\2\2\u0f41\u0f42\7"+
		"\u01e3\2\2\u0f42\u0f44\7\u0158\2\2\u0f43\u0f40\3\2\2\2\u0f43\u0f44\3\2"+
		"\2\2\u0f44\u0f45\3\2\2\2\u0f45\u0f46\5\u0220\u0111\2\u0f46\u0f47\7\u0287"+
		"\2\2\u0f47\u0f48\7\u01b0\2\2\u0f48\u0f4b\7\u0269\2\2\u0f49\u0f4c\7\u01cf"+
		"\2\2\u0f4a\u0f4c\5\u01ca\u00e6\2\u0f4b\u0f49\3\2\2\2\u0f4b\u0f4a\3\2\2"+
		"\2\u0f4c\u01c3\3\2\2\2\u0f4d\u0f51\7\u01f5\2\2\u0f4e\u0f4f\7\u0188\2\2"+
		"\u0f4f\u0f50\7\u01e3\2\2\u0f50\u0f52\7\u0158\2\2\u0f51\u0f4e\3\2\2\2\u0f51"+
		"\u0f52\3\2\2\2\u0f52\u0f53\3\2\2\2\u0f53\u0f54\5\u0220\u0111\2\u0f54\u0f55"+
		"\7\u0287\2\2\u0f55\u0f56\7\u00bc\2\2\u0f56\u0f57\5\u01ca\u00e6\2\u0f57"+
		"\u0f58\7\u00ba\2\2\u0f58\u0f59\5\u01ca\u00e6\2\u0f59\u0f5a\7\u00b9\2\2"+
		"\u0f5a\u01c5\3\2\2\2\u0f5b\u0f5c\7\u016f\2\2\u0f5c\u0f5d\5\u01ca\u00e6"+
		"\2\u0f5d\u0f5e\7\u0270\2\2\u0f5e\u0f5f\5\u01ca\u00e6\2\u0f5f\u0f60\7\u0197"+
		"\2\2\u0f60\u0f62\7\u02b6\2\2\u0f61\u0f63\5\u01ea\u00f6\2\u0f62\u0f61\3"+
		"\2\2\2\u0f62\u0f63\3\2\2\2\u0f63\u01c7\3\2\2\2\u0f64\u0f68\7\u01f5\2\2"+
		"\u0f65\u0f66\7\u0188\2\2\u0f66\u0f67\7\u01e3\2\2\u0f67\u0f69\7\u0158\2"+
		"\2\u0f68\u0f65\3\2\2\2\u0f68\u0f69\3\2\2\2\u0f69\u0f6a\3\2\2\2\u0f6a\u0f7b"+
		"\5\u0220\u0111\2\u0f6b\u0f6c\7\u0287\2\2\u0f6c\u0f79\7\u018b\2\2\u0f6d"+
		"\u0f6e\7\u00b8\2\2\u0f6e\u0f73\5\u01ca\u00e6\2\u0f6f\u0f70\7\u00ba\2\2"+
		"\u0f70\u0f72\5\u01ca\u00e6\2\u0f71\u0f6f\3\2\2\2\u0f72\u0f75\3\2\2\2\u0f73"+
		"\u0f71\3\2\2\2\u0f73\u0f74\3\2\2\2\u0f74\u0f76\3\2\2\2\u0f75\u0f73\3\2"+
		"\2\2\u0f76\u0f77\7\u00b9\2\2\u0f77\u0f7a\3\2\2\2\u0f78\u0f7a\5\u01ca\u00e6"+
		"\2\u0f79\u0f6d\3\2\2\2\u0f79\u0f78\3\2\2\2\u0f7a\u0f7c\3\2\2\2\u0f7b\u0f6b"+
		"\3\2\2\2\u0f7b\u0f7c\3\2\2\2\u0f7c\u01c9\3\2\2\2\u0f7d\u0f7e\7\u00b8\2"+
		"\2\u0f7e\u0f83\5\u01cc\u00e7\2\u0f7f\u0f80\7\u00ba\2\2\u0f80\u0f82\5\u01cc"+
		"\u00e7\2\u0f81\u0f7f\3\2\2\2\u0f82\u0f85\3\2\2\2\u0f83\u0f81\3\2\2\2\u0f83"+
		"\u0f84\3\2\2\2\u0f84\u0f86\3\2\2\2\u0f85\u0f83\3\2\2\2\u0f86\u0f87\7\u00b9"+
		"\2\2\u0f87\u01cb\3\2\2\2\u0f88\u0f89\t\62\2\2\u0f89\u01cd\3\2\2\2\u0f8a"+
		"\u0f8f\5\u01d0\u00e9\2\u0f8b\u0f8c\7\u00ba\2\2\u0f8c\u0f8e\5\u01d0\u00e9"+
		"\2\u0f8d\u0f8b\3\2\2\2\u0f8e\u0f91\3\2\2\2\u0f8f\u0f8d\3\2\2\2\u0f8f\u0f90"+
		"\3\2\2\2\u0f90\u01cf\3\2\2\2\u0f91\u0f8f\3\2\2\2\u0f92\u0f93\5\u0220\u0111"+
		"\2\u0f93\u0f97\5\u019a\u00ce\2\u0f94\u0f95\7\u0147\2\2\u0f95\u0f96\7\u01a6"+
		"\2\2\u0f96\u0f98\5\u019a\u00ce\2\u0f97\u0f94\3\2\2\2\u0f97\u0f98\3\2\2"+
		"\2\u0f98\u0f9a\3\2\2\2\u0f99\u0f9b\5\u01a4\u00d3\2\u0f9a\u0f99\3\2\2\2"+
		"\u0f9a\u0f9b\3\2\2\2\u0f9b\u01d1\3\2\2\2\u0f9c\u0f9d\t\63\2\2\u0f9d\u01d3"+
		"\3\2\2\2\u0f9e\u0f9f\7\u0262\2\2\u0f9f\u0fa0\7\u00b8\2\2\u0fa0\u0fa5\7"+
		"\u02b6\2\2\u0fa1\u0fa2\7\u00ba\2\2\u0fa2\u0fa4\7\u02b6\2\2\u0fa3\u0fa1"+
		"\3\2\2\2\u0fa4\u0fa7\3\2\2\2\u0fa5\u0fa3\3\2\2\2\u0fa5\u0fa6\3\2\2\2\u0fa6"+
		"\u0fa8\3\2\2\2\u0fa7\u0fa5\3\2\2\2\u0fa8\u0fa9\7\u00b9\2\2\u0fa9\u01d5"+
		"\3\2\2\2\u0faa\u0fab\7\u0287\2\2\u0fab\u0fb0\5\u01e2\u00f2\2\u0fac\u0fad"+
		"\7\u00ba\2\2\u0fad\u0faf\5\u01e2\u00f2\2\u0fae\u0fac\3\2\2\2\u0faf\u0fb2"+
		"\3\2\2\2\u0fb0\u0fae\3\2\2\2\u0fb0\u0fb1\3\2\2\2\u0fb1\u01d7\3\2\2\2\u0fb2"+
		"\u0fb0\3\2\2\2\u0fb3\u0fb8\5\u01dc\u00ef\2\u0fb4\u0fb6\7\u00d2\2\2\u0fb5"+
		"\u0fb4\3\2\2\2\u0fb5\u0fb6\3\2\2\2\u0fb6\u0fb7\3\2\2\2\u0fb7\u0fb9\5\u0130"+
		"\u0099\2\u0fb8\u0fb5\3\2\2\2\u0fb8\u0fb9\3\2\2\2\u0fb9\u01d9\3\2\2\2\u0fba"+
		"\u0fbf\5\u01d8\u00ed\2\u0fbb\u0fbc\7\u00ba\2\2\u0fbc\u0fbe\5\u01d8\u00ed"+
		"\2\u0fbd\u0fbb\3\2\2\2\u0fbe\u0fc1\3\2\2\2\u0fbf\u0fbd\3\2\2\2\u0fbf\u0fc0"+
		"\3\2\2\2\u0fc0\u01db\3\2\2\2\u0fc1\u0fbf\3\2\2\2\u0fc2\u0fc5\5\u01e0\u00f1"+
		"\2\u0fc3\u0fc5\5\u01de\u00f0\2\u0fc4\u0fc2\3\2\2\2\u0fc4\u0fc3\3\2\2\2"+
		"\u0fc5\u01dd\3\2\2\2\u0fc6\u0fc7\5\u021c\u010f\2\u0fc7\u0fc8\7\u02ac\2"+
		"\2\u0fc8\u0fc9\5\u01e0\u00f1\2\u0fc9\u0fd7\3\2\2\2\u0fca\u0fcb\7\u00b8"+
		"\2\2\u0fcb\u0fce\5\u021c\u010f\2\u0fcc\u0fcd\7\u00ba\2\2\u0fcd\u0fcf\5"+
		"\u021c\u010f\2\u0fce\u0fcc\3\2\2\2\u0fcf\u0fd0\3\2\2\2\u0fd0\u0fce\3\2"+
		"\2\2\u0fd0\u0fd1\3\2\2\2\u0fd1\u0fd2\3\2\2\2\u0fd2\u0fd3\7\u00b9\2\2\u0fd3"+
		"\u0fd4\7\u02ac\2\2\u0fd4\u0fd5\5\u01e0\u00f1\2\u0fd5\u0fd7\3\2\2\2\u0fd6"+
		"\u0fc6\3\2\2\2\u0fd6\u0fca\3\2\2\2\u0fd7\u01df\3\2\2\2\u0fd8\u0fd9\b\u00f1"+
		"\1\2\u0fd9\u0fda\t\64\2\2\u0fda\u0fef\5\u01e0\u00f1\n\u0fdb\u0fdc\7\u0158"+
		"\2\2\u0fdc\u0fdd\7\u00b8\2\2\u0fdd\u0fde\5\u0150\u00a9\2\u0fde\u0fdf\7"+
		"\u00b9\2\2\u0fdf\u0fef\3\2\2\2\u0fe0\u0fe1\t\65\2\2\u0fe1\u0fe2\7\u00b8"+
		"\2\2\u0fe2\u0fe3\5\u01e8\u00f5\2\u0fe3\u0fe4\7\u00b9\2\2\u0fe4\u0fef\3"+
		"\2\2\2\u0fe5\u0fe6\7\u019d\2\2\u0fe6\u0fe7\7\u00b8\2\2\u0fe7\u0fe8\5\u01e8"+
		"\u00f5\2\u0fe8\u0fe9\7\u00b9\2\2\u0fe9\u0fef\3\2\2\2\u0fea\u0fec\5\u01e8"+
		"\u00f5\2\u0feb\u0fed\5\u01e6\u00f4\2\u0fec\u0feb\3\2\2\2\u0fec\u0fed\3"+
		"\2\2\2\u0fed\u0fef\3\2\2\2\u0fee\u0fd8\3\2\2\2\u0fee\u0fdb\3\2\2\2\u0fee"+
		"\u0fe0\3\2\2\2\u0fee\u0fe5\3\2\2\2\u0fee\u0fea\3\2\2\2\u0fef\u0ffb\3\2"+
		"\2\2\u0ff0\u0ff1\f\5\2\2\u0ff1\u0ff2\t\66\2\2\u0ff2\u0ffa\5\u01e0\u00f1"+
		"\6\u0ff3\u0ff4\f\4\2\2\u0ff4\u0ff5\7\u01ed\2\2\u0ff5\u0ffa\5\u01e0\u00f1"+
		"\5\u0ff6\u0ff7\f\3\2\2\u0ff7\u0ff8\7\u02a9\2\2\u0ff8\u0ffa\5\u01e0\u00f1"+
		"\4\u0ff9\u0ff0\3\2\2\2\u0ff9\u0ff3\3\2\2\2\u0ff9\u0ff6\3\2\2\2\u0ffa\u0ffd"+
		"\3\2\2\2\u0ffb\u0ff9\3\2\2\2\u0ffb\u0ffc\3\2\2\2\u0ffc\u01e1\3\2\2\2\u0ffd"+
		"\u0ffb\3\2\2\2\u0ffe\u1007\7\u00b8\2\2\u0fff\u1004\5\u01e4\u00f3\2\u1000"+
		"\u1001\7\u00ba\2\2\u1001\u1003\5\u01e4\u00f3\2\u1002\u1000\3\2\2\2\u1003"+
		"\u1006\3\2\2\2\u1004\u1002\3\2\2\2\u1004\u1005\3\2\2\2\u1005\u1008\3\2"+
		"\2\2\u1006\u1004\3\2\2\2\u1007\u0fff\3\2\2\2\u1007\u1008\3\2\2\2\u1008"+
		"\u1009\3\2\2\2\u1009\u100a\7\u00b9\2\2\u100a\u01e3\3\2\2\2\u100b\u100e"+
		"\5\u01d8\u00ed\2\u100c\u100e\7\u0133\2\2\u100d\u100b\3\2\2\2\u100d\u100c"+
		"\3\2\2\2\u100e\u01e5\3\2\2\2\u100f\u1011\7\u01e3\2\2\u1010\u100f\3\2\2"+
		"\2\u1010\u1011\3\2\2\2\u1011\u1012\3\2\2\2\u1012\u1013\7\u00dd\2\2\u1013"+
		"\u1014\5\u01e8\u00f5\2\u1014\u1015\7\u00cd\2\2\u1015\u1016\5\u01e8\u00f5"+
		"\2\u1016\u103e\3\2\2\2\u1017\u1019\7\u01e3\2\2\u1018\u1017\3\2\2\2\u1018"+
		"\u1019\3\2\2\2\u1019\u101a\3\2\2\2\u101a\u101b\t\32\2\2\u101b\u103e\5"+
		"\u01e8\u00f5\2\u101c\u101e\7\u01e3\2\2\u101d\u101c\3\2\2\2\u101d\u101e"+
		"\3\2\2\2\u101e\u101f\3\2\2\2\u101f\u1020\t\67\2\2\u1020\u103e\5\u01e8"+
		"\u00f5\2\u1021\u1023\7\u01e3\2\2\u1022\u1021\3\2\2\2\u1022\u1023\3\2\2"+
		"\2\u1023\u1024\3\2\2\2\u1024\u1025\7\u018b\2\2\u1025\u1026\7\u00b8\2\2"+
		"\u1026\u1027\5\u0150\u00a9\2\u1027\u1028\7\u00b9\2\2\u1028\u103e\3\2\2"+
		"\2\u1029\u102b\7\u01e3\2\2\u102a\u1029\3\2\2\2\u102a\u102b\3\2\2\2\u102b"+
		"\u102c\3\2\2\2\u102c\u102d\7\u018b\2\2\u102d\u102e\7\u00b8\2\2\u102e\u1033"+
		"\5\u01dc\u00ef\2\u102f\u1030\7\u00ba\2\2\u1030\u1032\5\u01dc\u00ef\2\u1031"+
		"\u102f\3\2\2\2\u1032\u1035\3\2\2\2\u1033\u1031\3\2\2\2\u1033\u1034\3\2"+
		"\2\2\u1034\u1036\3\2\2\2\u1035\u1033\3\2\2\2\u1036\u1037\7\u00b9\2\2\u1037"+
		"\u103e\3\2\2\2\u1038\u103a\7\u019c\2\2\u1039\u103b\7\u01e3\2\2\u103a\u1039"+
		"\3\2\2\2\u103a\u103b\3\2\2\2\u103b\u103c\3\2\2\2\u103c\u103e\7\u01e4\2"+
		"\2\u103d\u1010\3\2\2\2\u103d\u1018\3\2\2\2\u103d\u101d\3\2\2\2\u103d\u1022"+
		"\3\2\2\2\u103d\u102a\3\2\2\2\u103d\u1038\3\2\2\2\u103e\u01e7\3\2\2\2\u103f"+
		"\u1040\b\u00f5\1\2\u1040\u104b\5\u01ec\u00f7\2\u1041\u1042\t8\2\2\u1042"+
		"\u104b\5\u01e8\u00f5\7\u1043\u1044\t9\2\2\u1044\u1045\7\u00b8\2\2\u1045"+
		"\u1046\5\u01e8\u00f5\2\u1046\u1047\7\u00ba\2\2\u1047\u1048\5\u01e8\u00f5"+
		"\2\u1048\u1049\7\u00b9\2\2\u1049\u104b\3\2\2\2\u104a\u103f\3\2\2\2\u104a"+
		"\u1041\3\2\2\2\u104a\u1043\3\2\2\2\u104b\u1058\3\2\2\2\u104c\u104d\f\6"+
		"\2\2\u104d\u104e\t:\2\2\u104e\u1057\5\u01e8\u00f5\7\u104f\u1050\f\5\2"+
		"\2\u1050\u1051\t;\2\2\u1051\u1057\5\u01e8\u00f5\6\u1052\u1053\f\4\2\2"+
		"\u1053\u1054\5\u0202\u0102\2\u1054\u1055\5\u01e8\u00f5\5\u1055\u1057\3"+
		"\2\2\2\u1056\u104c\3\2\2\2\u1056\u104f\3\2\2\2\u1056\u1052\3\2\2\2\u1057"+
		"\u105a\3\2\2\2\u1058\u1056\3\2\2\2\u1058\u1059\3\2\2\2\u1059\u01e9\3\2"+
		"\2\2\u105a\u1058\3\2\2\2\u105b\u105c\t<\2\2\u105c\u01eb\3\2\2\2\u105d"+
		"\u105e\b\u00f7\1\2\u105e\u105f\t=\2\2\u105f\u1060\7\u00b8\2\2\u1060\u1061"+
		"\5\u01ea\u00f6\2\u1061\u1062\7\u00ba\2\2\u1062\u1063\5\u01e8\u00f5\2\u1063"+
		"\u1064\7\u00ba\2\2\u1064\u1065\5\u01e8\u00f5\2\u1065\u1066\7\u00b9\2\2"+
		"\u1066\u1125\3\2\2\2\u1067\u1068\t>\2\2\u1068\u1069\7\u00b8\2\2\u1069"+
		"\u106a\5\u01ea\u00f6\2\u106a\u106b\7\u00ba\2\2\u106b\u106c\5\u01e8\u00f5"+
		"\2\u106c\u106d\7\u00ba\2\2\u106d\u106e\5\u01e8\u00f5\2\u106e\u106f\7\u00b9"+
		"\2\2\u106f\u1125\3\2\2\2\u1070\u1071\t?\2\2\u1071\u1072\7\u00b8\2\2\u1072"+
		"\u1073\5\u01e8\u00f5\2\u1073\u1079\7\u00ba\2\2\u1074\u1075\7\u0197\2\2"+
		"\u1075\u1076\5\u01e8\u00f5\2\u1076\u1077\5\u01ea\u00f6\2\u1077\u107a\3"+
		"\2\2\2\u1078\u107a\5\u01e8\u00f5\2\u1079\u1074\3\2\2\2\u1079\u1078\3\2"+
		"\2\2\u107a\u107b\3\2\2\2\u107b\u107c\7\u00b9\2\2\u107c\u1125\3\2\2\2\u107d"+
		"\u107e\t@\2\2\u107e\u107f\7\u00b8\2\2\u107f\u1080\5\u01e8\u00f5\2\u1080"+
		"\u1086\7\u00ba\2\2\u1081\u1082\7\u0197\2\2\u1082\u1083\5\u01e8\u00f5\2"+
		"\u1083\u1084\5\u01ea\u00f6\2\u1084\u1087\3\2\2\2\u1085\u1087\5\u01e8\u00f5"+
		"\2\u1086\u1081\3\2\2\2\u1086\u1085\3\2\2\2\u1087\u1088\3\2\2\2\u1088\u1089"+
		"\7\u00b9\2\2\u1089\u1125\3\2\2\2\u108a\u108b\7\u0123\2\2\u108b\u108c\7"+
		"\u00b8\2\2\u108c\u108d\5\u01e8\u00f5\2\u108d\u1093\7\u00ba\2\2\u108e\u108f"+
		"\7\u0197\2\2\u108f\u1090\5\u01e8\u00f5\2\u1090\u1091\5\u01ea\u00f6\2\u1091"+
		"\u1094\3\2\2\2\u1092\u1094\5\u01e8\u00f5\2\u1093\u108e\3\2\2\2\u1093\u1092"+
		"\3\2\2\2\u1094\u1095\3\2\2\2\u1095\u1096\7\u00b9\2\2\u1096\u1125\3\2\2"+
		"\2\u1097\u1098\7\u0121\2\2\u1098\u1099\7\u00b8\2\2\u1099\u109a\5\u01e8"+
		"\u00f5\2\u109a\u10a0\7\u00ba\2\2\u109b\u109c\7\u0197\2\2\u109c\u109d\5"+
		"\u01e8\u00f5\2\u109d\u109e\5\u01ea\u00f6\2\u109e\u10a1\3\2\2\2\u109f\u10a1"+
		"\5\u01e8\u00f5\2\u10a0\u109b\3\2\2\2\u10a0\u109f\3\2\2\2\u10a1\u10a2\3"+
		"\2\2\2\u10a2\u10a3\7\u00b9\2\2\u10a3\u1125\3\2\2\2\u10a4\u10a5\tA\2\2"+
		"\u10a5\u10a6\7\u00b8\2\2\u10a6\u10a7\5\u01e8\u00f5\2\u10a7\u10a8\7\u00ba"+
		"\2\2\u10a8\u10a9\5\u01e8\u00f5\2\u10a9\u10af\7\u00ba\2\2\u10aa\u10ab\7"+
		"\u0197\2\2\u10ab\u10ac\5\u01e8\u00f5\2\u10ac\u10ad\5\u01ea\u00f6\2\u10ad"+
		"\u10b0\3\2\2\2\u10ae\u10b0\5\u01e8\u00f5\2\u10af\u10aa\3\2\2\2\u10af\u10ae"+
		"\3\2\2\2\u10b0\u10b1\3\2\2\2\u10b1\u10b2\7\u00b9\2\2\u10b2\u1125\3\2\2"+
		"\2\u10b3\u1125\7\u0118\2\2\u10b4\u1125\7\u0119\2\2\u10b5\u1125\7\u011a"+
		"\2\2\u10b6\u1125\7\u01b9\2\2\u10b7\u1125\7\u01ba\2\2\u10b8\u1125\7\u011b"+
		"\2\2\u10b9\u10bb\7\u00f3\2\2\u10ba\u10bc\5\u0206\u0104\2\u10bb\u10ba\3"+
		"\2\2\2\u10bc\u10bd\3\2\2\2\u10bd\u10bb\3\2\2\2\u10bd\u10be\3\2\2\2\u10be"+
		"\u10c1\3\2\2\2\u10bf\u10c0\7\u0149\2\2\u10c0\u10c2\5\u01dc\u00ef\2\u10c1"+
		"\u10bf\3\2\2\2\u10c1\u10c2\3\2\2\2\u10c2\u10c3\3\2\2\2\u10c3\u10c4\7\u014d"+
		"\2\2\u10c4\u1125\3\2\2\2\u10c5\u10c6\7\u00f3\2\2\u10c6\u10c8\5\u01dc\u00ef"+
		"\2\u10c7\u10c9\5\u0206\u0104\2\u10c8\u10c7\3\2\2\2\u10c9\u10ca\3\2\2\2"+
		"\u10ca\u10c8\3\2\2\2\u10ca\u10cb\3\2\2\2\u10cb\u10ce\3\2\2\2\u10cc\u10cd"+
		"\7\u0149\2\2\u10cd\u10cf\5\u01dc\u00ef\2\u10ce\u10cc\3\2\2\2\u10ce\u10cf"+
		"\3\2\2\2\u10cf\u10d0\3\2\2\2\u10d0\u10d1\7\u014d\2\2\u10d1\u1125\3\2\2"+
		"\2\u10d2\u10d3\7\u00f4\2\2\u10d3\u10d4\7\u00b8\2\2\u10d4\u10d5\5\u01dc"+
		"\u00ef\2\u10d5\u10d6\7\u00d2\2\2\u10d6\u10d7\5\u020e\u0108\2\u10d7\u10d8"+
		"\7\u00b9\2\2\u10d8\u1125\3\2\2\2\u10d9\u1125\5\u0200\u0101\2\u10da\u1125"+
		"\5\u0208\u0105\2\u10db\u1125\7\u02a1\2\2\u10dc\u10dd\5\u01fc\u00ff\2\u10dd"+
		"\u10de\7\u00bb\2\2\u10de\u10df\7\u02a1\2\2\u10df\u1125\3\2\2\2\u10e0\u10e1"+
		"\7\u00f8\2\2\u10e1\u10e2\7\u00b8\2\2\u10e2\u10e7\5\u01dc\u00ef\2\u10e3"+
		"\u10e4\7\u00ba\2\2\u10e4\u10e6\5\u01dc\u00ef\2\u10e5\u10e3\3\2\2\2\u10e6"+
		"\u10e9\3\2\2\2\u10e7\u10e5\3\2\2\2\u10e7\u10e8\3\2\2\2\u10e8\u10ec\3\2"+
		"\2\2\u10e9\u10e7\3\2\2\2\u10ea\u10eb\7\u0285\2\2\u10eb\u10ed\5\u0130\u0099"+
		"\2\u10ec\u10ea\3\2\2\2\u10ec\u10ed\3\2\2\2\u10ed\u10ee\3\2\2\2\u10ee\u10ef"+
		"\7\u00b9\2\2\u10ef\u1125\3\2\2\2\u10f0\u10f1\7\u010e\2\2\u10f1\u10f2\7"+
		"\u00b8\2\2\u10f2\u10f3\5\u01dc\u00ef\2\u10f3\u10f4\7\u0285\2\2\u10f4\u10f5"+
		"\5\u0130\u0099\2\u10f5\u10f6\7\u00b9\2\2\u10f6\u1125\3\2\2\2\u10f7\u10f8"+
		"\7\u010e\2\2\u10f8\u10f9\7\u00b8\2\2\u10f9\u10fa\5\u01dc\u00ef\2\u10fa"+
		"\u10fb\7\u00ba\2\2\u10fb\u10fc\5\u020e\u0108\2\u10fc\u10fd\7\u00b9\2\2"+
		"\u10fd\u1125\3\2\2\2\u10fe\u1125\5\u01ee\u00f8\2\u10ff\u1100\7\u00b8\2"+
		"\2\u1100\u1101\5\u0150\u00a9\2\u1101\u1102\7\u00b9\2\2\u1102\u1125\3\2"+
		"\2\2\u1103\u1104\7\u02af\2\2\u1104\u1125\5\u0130\u0099\2\u1105\u1108\7"+
		"\u02b0\2\2\u1106\u1107\tB\2\2\u1107\u1109\7\u00bb\2\2\u1108\u1106\3\2"+
		"\2\2\u1108\u1109\3\2\2\2\u1109\u110a\3\2\2\2\u110a\u1125\5\u0220\u0111"+
		"\2\u110b\u110d\7\u00e0\2\2\u110c\u110b\3\2\2\2\u110c\u110d\3\2\2\2\u110d"+
		"\u110e\3\2\2\2\u110e\u1125\5\u0220\u0111\2\u110f\u1110\7\u00b8\2\2\u1110"+
		"\u1111\5\u01dc\u00ef\2\u1111\u1112\7\u00b9\2\2\u1112\u1125\3\2\2\2\u1113"+
		"\u1117\7\u01a6\2\2\u1114\u1115\5\u0220\u0111\2\u1115\u1116\7\u00bb\2\2"+
		"\u1116\u1118\3\2\2\2\u1117\u1114\3\2\2\2\u1117\u1118\3\2\2\2\u1118\u1119"+
		"\3\2\2\2\u1119\u1125\5\u0220\u0111\2\u111a\u111b\7\u015e\2\2\u111b\u111c"+
		"\7\u00b8\2\2\u111c\u111d\5\u0220\u0111\2\u111d\u111f\7\u016f\2\2\u111e"+
		"\u1120\tC\2\2\u111f\u111e\3\2\2\2\u111f\u1120\3\2\2\2\u1120\u1121\3\2"+
		"\2\2\u1121\u1122\5\u01e8\u00f5\2\u1122\u1123\7\u00b9\2\2\u1123\u1125\3"+
		"\2\2\2\u1124\u105d\3\2\2\2\u1124\u1067\3\2\2\2\u1124\u1070\3\2\2\2\u1124"+
		"\u107d\3\2\2\2\u1124\u108a\3\2\2\2\u1124\u1097\3\2\2\2\u1124\u10a4\3\2"+
		"\2\2\u1124\u10b3\3\2\2\2\u1124\u10b4\3\2\2\2\u1124\u10b5\3\2\2\2\u1124"+
		"\u10b6\3\2\2\2\u1124\u10b7\3\2\2\2\u1124\u10b8\3\2\2\2\u1124\u10b9\3\2"+
		"\2\2\u1124\u10c5\3\2\2\2\u1124\u10d2\3\2\2\2\u1124\u10d9\3\2\2\2\u1124"+
		"\u10da\3\2\2\2\u1124\u10db\3\2\2\2\u1124\u10dc\3\2\2\2\u1124\u10e0\3\2"+
		"\2\2\u1124\u10f0\3\2\2\2\u1124\u10f7\3\2\2\2\u1124\u10fe\3\2\2\2\u1124"+
		"\u10ff\3\2\2\2\u1124\u1103\3\2\2\2\u1124\u1105\3\2\2\2\u1124\u110c\3\2"+
		"\2\2\u1124\u110f\3\2\2\2\u1124\u1113\3\2\2\2\u1124\u111a\3\2\2\2\u1125"+
		"\u1140\3\2\2\2\u1126\u1127\f\r\2\2\u1127\u1128\7\u00bc\2\2\u1128\u1129"+
		"\5\u01e8\u00f5\2\u1129\u112a\7\u00bd\2\2\u112a\u113f\3\2\2\2\u112b\u112c"+
		"\f\f\2\2\u112c\u112d\7\u00bc\2\2\u112d\u112e\5\u01e8\u00f5\2\u112e\u1130"+
		"\7\u02ab\2\2\u112f\u1131\5\u01e8\u00f5\2\u1130\u112f\3\2\2\2\u1130\u1131"+
		"\3\2\2\2\u1131\u1132\3\2\2\2\u1132\u1133\7\u00bd\2\2\u1133\u113f\3\2\2"+
		"\2\u1134\u1135\f\7\2\2\u1135\u1136\7\u00bb\2\2\u1136\u113f\5\u0220\u0111"+
		"\2\u1137\u1138\f\3\2\2\u1138\u113c\7\u00fe\2\2\u1139\u113d\5\u0220\u0111"+
		"\2\u113a\u113d\7\u02b1\2\2\u113b\u113d\7\u0133\2\2\u113c\u1139\3\2\2\2"+
		"\u113c\u113a\3\2\2\2\u113c\u113b\3\2\2\2\u113d\u113f\3\2\2\2\u113e\u1126"+
		"\3\2\2\2\u113e\u112b\3\2\2\2\u113e\u1134\3\2\2\2\u113e\u1137\3\2\2\2\u113f"+
		"\u1142\3\2\2\2\u1140\u113e\3\2\2\2\u1140\u1141\3\2\2\2\u1141\u01ed\3\2"+
		"\2\2\u1142\u1140\3\2\2\2\u1143\u1144\5\u01f0\u00f9\2\u1144\u115c\7\u00b8"+
		"\2\2\u1145\u1147\t \2\2\u1146\u1145\3\2\2\2\u1146\u1147\3\2\2\2\u1147"+
		"\u1148\3\2\2\2\u1148\u114d\5\u01dc\u00ef\2\u1149\u114a\7\u00ba\2\2\u114a"+
		"\u114c\5\u01dc\u00ef\2\u114b\u1149\3\2\2\2\u114c\u114f\3\2\2\2\u114d\u114b"+
		"\3\2\2\2\u114d\u114e\3\2\2\2\u114e\u115a\3\2\2\2\u114f\u114d\3\2\2\2\u1150"+
		"\u1151\7\u01ee\2\2\u1151\u1152\7\u00ef\2\2\u1152\u1157\5\u0190\u00c9\2"+
		"\u1153\u1154\7\u00ba\2\2\u1154\u1156\5\u0190\u00c9\2\u1155\u1153\3\2\2"+
		"\2\u1156\u1159\3\2\2\2\u1157\u1155\3\2\2\2\u1157\u1158\3\2\2\2\u1158\u115b"+
		"\3\2\2\2\u1159\u1157\3\2\2\2\u115a\u1150\3\2\2\2\u115a\u115b\3\2\2\2\u115b"+
		"\u115d\3\2\2\2\u115c\u1146\3\2\2\2\u115c\u115d\3\2\2\2\u115d\u115e\3\2"+
		"\2\2\u115e\u1161\7\u00b9\2\2\u115f\u1160\7\u01f1\2\2\u1160\u1162\5\u01f4"+
		"\u00fb\2\u1161\u115f\3\2\2\2\u1161\u1162\3\2\2\2\u1162\u01ef\3\2\2\2\u1163"+
		"\u1164\5\u0220\u0111\2\u1164\u1165\7\u00bb\2\2\u1165\u1167\3\2\2\2\u1166"+
		"\u1163\3\2\2\2\u1166\u1167\3\2\2\2\u1167\u1168\3\2\2\2\u1168\u1169\5\u01f2"+
		"\u00fa\2\u1169\u01f1\3\2\2\2\u116a\u117a\5\u0220\u0111\2\u116b\u117a\7"+
		"\u00c2\2\2\u116c\u117a\7\u010a\2\2\u116d\u117a\7\u0117\2\2\u116e\u117a"+
		"\7\u011b\2\2\u116f\u117a\7\u011d\2\2\u1170\u117a\7\u0188\2\2\u1171\u117a"+
		"\7\u01af\2\2\u1172\u117a\7\u01b2\2\2\u1173\u117a\7\u01f7\2\2\u1174\u117a"+
		"\7\u021d\2\2\u1175\u117a\7\u022f\2\2\u1176\u117a\7\u023c\2\2\u1177\u117a"+
		"\7\u0275\2\2\u1178\u117a\7\u0284\2\2\u1179\u116a\3\2\2\2\u1179\u116b\3"+
		"\2\2\2\u1179\u116c\3\2\2\2\u1179\u116d\3\2\2\2\u1179\u116e\3\2\2\2\u1179"+
		"\u116f\3\2\2\2\u1179\u1170\3\2\2\2\u1179\u1171\3\2\2\2\u1179\u1172\3\2"+
		"\2\2\u1179\u1173\3\2\2\2\u1179\u1174\3\2\2\2\u1179\u1175\3\2\2\2\u1179"+
		"\u1176\3\2\2\2\u1179\u1177\3\2\2\2\u1179\u1178\3\2\2\2\u117a\u01f3\3\2"+
		"\2\2\u117b\u117d\7\u00b8\2\2\u117c\u117e\5\u0194\u00cb\2\u117d\u117c\3"+
		"\2\2\2\u117d\u117e\3\2\2\2\u117e\u1180\3\2\2\2\u117f\u1181\5\u018e\u00c8"+
		"\2\u1180\u117f\3\2\2\2\u1180\u1181\3\2\2\2\u1181\u1183\3\2\2\2\u1182\u1184"+
		"\5\u01f6\u00fc\2\u1183\u1182\3\2\2\2\u1183\u1184\3\2\2\2\u1184\u1185\3"+
		"\2\2\2\u1185\u1186\7\u00b9\2\2\u1186\u01f5\3\2\2\2\u1187\u1188\5\u01f8"+
		"\u00fd\2\u1188\u1189\5\u01fa\u00fe\2\u1189\u1191\3\2\2\2\u118a\u118b\5"+
		"\u01f8\u00fd\2\u118b\u118c\7\u00dd\2\2\u118c\u118d\5\u01fa\u00fe\2\u118d"+
		"\u118e\7\u00cd\2\2\u118e\u118f\5\u01fa\u00fe\2\u118f\u1191\3\2\2\2\u1190"+
		"\u1187\3\2\2\2\u1190\u118a\3\2\2\2\u1191\u01f7\3\2\2\2\u1192\u1193\tD"+
		"\2\2\u1193\u01f9\3\2\2\2\u1194\u1195\7\u027b\2\2\u1195\u119c\tE\2\2\u1196"+
		"\u1197\7\u0116\2\2\u1197\u119c\7\u0236\2\2\u1198\u1199\5\u01dc\u00ef\2"+
		"\u1199\u119a\tE\2\2\u119a\u119c\3\2\2\2\u119b\u1194\3\2\2\2\u119b\u1196"+
		"\3\2\2\2\u119b\u1198\3\2\2\2\u119c\u01fb\3\2\2\2\u119d\u11a2\5\u0220\u0111"+
		"\2\u119e\u119f\7\u00bb\2\2\u119f\u11a1\5\u0220\u0111\2\u11a0\u119e\3\2"+
		"\2\2\u11a1\u11a4\3\2\2\2\u11a2\u11a0\3\2\2\2\u11a2\u11a3\3\2\2\2\u11a3"+
		"\u01fd\3\2\2\2\u11a4\u11a2\3\2\2\2\u11a5\u11a7\7\u0266\2\2\u11a6\u11a5"+
		"\3\2\2\2\u11a6\u11a7\3\2\2\2\u11a7\u11a8\3\2\2\2\u11a8\u11ab\7\u01f5\2"+
		"\2\u11a9\u11ac\5\u0220\u0111\2\u11aa\u11ac\5\u019a\u00ce\2\u11ab\u11a9"+
		"\3\2\2\2\u11ab\u11aa\3\2\2\2\u11ac\u11b3\3\2\2\2\u11ad\u11af\7\u0266\2"+
		"\2\u11ae\u11ad\3\2\2\2\u11ae\u11af\3\2\2\2\u11af\u11b0\3\2\2\2\u11b0\u11b1"+
		"\7\u01f6\2\2\u11b1\u11b3\5\u019a\u00ce\2\u11b2\u11a6\3\2\2\2\u11b2\u11ae"+
		"\3\2\2\2\u11b3\u01ff\3\2\2\2\u11b4\u11e7\7\u01e4\2\2\u11b5\u11b6\tF\2"+
		"\2\u11b6\u11e7\7\u02b1\2\2\u11b7\u11e7\5\u0226\u0114\2\u11b8\u11e7\5\u0204"+
		"\u0103\2\u11b9\u11bb\7\u00e0\2\2\u11ba\u11b9\3\2\2\2\u11ba\u11bb\3\2\2"+
		"\2\u11bb\u11bc\3\2\2\2\u11bc\u11e7\7\u02b1\2\2\u11bd\u11bf\7\u00bc\2\2"+
		"\u11be\u11c0\5\u0200\u0101\2\u11bf\u11be\3\2\2\2\u11bf\u11c0\3\2\2\2\u11c0"+
		"\u11c5\3\2\2\2\u11c1\u11c2\7\u00ba\2\2\u11c2\u11c4\5\u0200\u0101\2\u11c3"+
		"\u11c1\3\2\2\2\u11c4\u11c7\3\2\2\2\u11c5\u11c3\3\2\2\2\u11c5\u11c6\3\2"+
		"\2\2\u11c6\u11c8\3\2\2\2\u11c7\u11c5\3\2\2\2\u11c8\u11e7\7\u00bd\2\2\u11c9"+
		"\u11ce\7\u00be\2\2\u11ca\u11cb\5\u0200\u0101\2\u11cb\u11cc\7\u02ab\2\2"+
		"\u11cc\u11cd\5\u0200\u0101\2\u11cd\u11cf\3\2\2\2\u11ce\u11ca\3\2\2\2\u11ce"+
		"\u11cf\3\2\2\2\u11cf\u11d7\3\2\2\2\u11d0\u11d1\7\u00ba\2\2\u11d1\u11d2"+
		"\5\u0200\u0101\2\u11d2\u11d3\7\u02ab\2\2\u11d3\u11d4\5\u0200\u0101\2\u11d4"+
		"\u11d6\3\2\2\2\u11d5\u11d0\3\2\2\2\u11d6\u11d9\3\2\2\2\u11d7\u11d5\3\2"+
		"\2\2\u11d7\u11d8\3\2\2\2\u11d8\u11da\3\2\2\2\u11d9\u11d7\3\2\2\2\u11da"+
		"\u11e7\7\u00bf\2\2\u11db\u11dc\7\u00be\2\2\u11dc\u11e1\5\u0200\u0101\2"+
		"\u11dd\u11de\7\u00ba\2\2\u11de\u11e0\5\u0200\u0101\2\u11df\u11dd\3\2\2"+
		"\2\u11e0\u11e3\3\2\2\2\u11e1\u11df\3\2\2\2\u11e1\u11e2\3\2\2\2\u11e2\u11e4"+
		"\3\2\2\2\u11e3\u11e1\3\2\2\2\u11e4\u11e5\7\u00bf\2\2\u11e5\u11e7\3\2\2"+
		"\2\u11e6\u11b4\3\2\2\2\u11e6\u11b5\3\2\2\2\u11e6\u11b7\3\2\2\2\u11e6\u11b8"+
		"\3\2\2\2\u11e6\u11ba\3\2\2\2\u11e6\u11bd\3\2\2\2\u11e6\u11c9\3\2\2\2\u11e6"+
		"\u11db\3\2\2\2\u11e7\u0201\3\2\2\2\u11e8\u11e9\tG\2\2\u11e9\u0203\3\2"+
		"\2\2\u11ea\u11eb\t\"\2\2\u11eb\u0205\3\2\2\2\u11ec\u11ed\7\u0290\2\2\u11ed"+
		"\u11ee\5\u01dc\u00ef\2\u11ee\u11ef\7\u026a\2\2\u11ef\u11f0\5\u01dc\u00ef"+
		"\2\u11f0\u0207\3\2\2\2\u11f1\u11f2\7\u0197\2\2\u11f2\u11f3\5\u01dc\u00ef"+
		"\2\u11f3\u11f4\5\u020a\u0106\2\u11f4\u0209\3\2\2\2\u11f5\u11f6\t<\2\2"+
		"\u11f6\u020b\3\2\2\2\u11f7\u11fc\5\u020e\u0108\2\u11f8\u11fa\7\u01e3\2"+
		"\2\u11f9\u11f8\3\2\2\2\u11f9\u11fa\3\2\2\2\u11fa\u11fb\3\2\2\2\u11fb\u11fd"+
		"\7\u01e4\2\2\u11fc\u11f9\3\2\2\2\u11fc\u11fd\3\2\2\2\u11fd\u020d\3\2\2"+
		"\2\u11fe\u11ff\7\u00d0\2\2\u11ff\u1200\7\u029b\2\2\u1200\u1201\5\u020e"+
		"\u0108\2\u1201\u1202\7\u029d\2\2\u1202\u122c\3\2\2\2\u1203\u1204\7\u01c0"+
		"\2\2\u1204\u1205\7\u029b\2\2\u1205\u1206\5\u020e\u0108\2\u1206\u1207\7"+
		"\u00ba\2\2\u1207\u1208\5\u020e\u0108\2\u1208\u1209\7\u029d\2\2\u1209\u122c"+
		"\3\2\2\2\u120a\u120b\7\u0258\2\2\u120b\u120c\7\u029b\2\2\u120c\u120d\5"+
		"\u0212\u010a\2\u120d\u120e\7\u029d\2\2\u120e\u122c\3\2\2\2\u120f\u1210"+
		"\7\u00c6\2\2\u1210\u1211\7\u029b\2\2\u1211\u1212\5\u01f2\u00fa\2\u1212"+
		"\u1213\7\u00b8\2\2\u1213\u1218\5\u020c\u0107\2\u1214\u1215\7\u00ba\2\2"+
		"\u1215\u1217\5\u020c\u0107\2\u1216\u1214\3\2\2\2\u1217\u121a\3\2\2\2\u1218"+
		"\u1216\3\2\2\2\u1218\u1219\3\2\2\2\u1219\u121b\3\2\2\2\u121a\u1218\3\2"+
		"\2\2\u121b\u121c\7\u00b9\2\2\u121c\u121d\7\u029d\2\2\u121d\u122c\3\2\2"+
		"\2\u121e\u1229\5\u0210\u0109\2\u121f\u1220\7\u00b8\2\2\u1220\u1225\tH"+
		"\2\2\u1221\u1222\7\u00ba\2\2\u1222\u1224\7\u02b6\2\2\u1223\u1221\3\2\2"+
		"\2\u1224\u1227\3\2\2\2\u1225\u1223\3\2\2\2\u1225\u1226\3\2\2\2\u1226\u1228"+
		"\3\2\2\2\u1227\u1225\3\2\2\2\u1228\u122a\7\u00b9\2\2\u1229\u121f\3\2\2"+
		"\2\u1229\u122a\3\2\2\2\u122a\u122c\3\2\2\2\u122b\u11fe\3\2\2\2\u122b\u1203"+
		"\3\2\2\2\u122b\u120a\3\2\2\2\u122b\u120f\3\2\2\2\u122b\u121e\3\2\2\2\u122c"+
		"\u020f\3\2\2\2\u122d\u1252\3\2\2\2\u122e\u1252\7\u026f\2\2\u122f\u1252"+
		"\7\u024a\2\2\u1230\u1232\tI\2\2\u1231\u1230\3\2\2\2\u1231\u1232\3\2\2"+
		"\2\u1232\u1233\3\2\2\2\u1233\u1252\tJ\2\2\u1234\u1252\7\u00de\2\2\u1235"+
		"\u1252\7\u01aa\2\2\u1236\u1252\7\u00e8\2\2\u1237\u1252\7\u0167\2\2\u1238"+
		"\u1252\7\u0143\2\2\u1239\u1252\7\u011f\2\2\u123a\u1252\7\u0127\2\2\u123b"+
		"\u1252\7\u026b\2\2\u123c\u1252\7\u0129\2\2\u123d\u1252\7\u0128\2\2\u123e"+
		"\u1252\7\u012b\2\2\u123f\u1252\7\u012a\2\2\u1240\u1252\7\u00e3\2\2\u1241"+
		"\u1252\7\u0210\2\2\u1242\u1252\7\u0182\2\2\u1243\u1252\7\u00c6\2\2\u1244"+
		"\u1252\7\u0257\2\2\u1245\u1252\7\u01a4\2\2\u1246\u1252\7\u01a5\2\2\u1247"+
		"\u1252\7\u0268\2\2\u1248\u1252\7\u0288\2\2\u1249\u1252\7\u00f8\2\2\u124a"+
		"\u1252\7\u012f\2\2\u124b\u1252\7\u0130\2\2\u124c\u1252\7\u0131\2\2\u124d"+
		"\u1252\7\u019a\2\2\u124e\u1252\7\u019b\2\2\u124f\u1252\7\u028a\2\2\u1250"+
		"\u1252\7\u00c9\2\2\u1251\u122d\3\2\2\2\u1251\u122e\3\2\2\2\u1251\u122f"+
		"\3\2\2\2\u1251\u1231\3\2\2\2\u1251\u1234\3\2\2\2\u1251\u1235\3\2\2\2\u1251"+
		"\u1236\3\2\2\2\u1251\u1237\3\2\2\2\u1251\u1238\3\2\2\2\u1251\u1239\3\2"+
		"\2\2\u1251\u123a\3\2\2\2\u1251\u123b\3\2\2\2\u1251\u123c\3\2\2\2\u1251"+
		"\u123d\3\2\2\2\u1251\u123e\3\2\2\2\u1251\u123f\3\2\2\2\u1251\u1240\3\2"+
		"\2\2\u1251\u1241\3\2\2\2\u1251\u1242\3\2\2\2\u1251\u1243\3\2\2\2\u1251"+
		"\u1244\3\2\2\2\u1251\u1245\3\2\2\2\u1251\u1246\3\2\2\2\u1251\u1247\3\2"+
		"\2\2\u1251\u1248\3\2\2\2\u1251\u1249\3\2\2\2\u1251\u124a\3\2\2\2\u1251"+
		"\u124b\3\2\2\2\u1251\u124c\3\2\2\2\u1251\u124d\3\2\2\2\u1251\u124e\3\2"+
		"\2\2\u1251\u124f\3\2\2\2\u1251\u1250\3\2\2\2\u1252\u0211\3\2\2\2\u1253"+
		"\u1258\5\u0214\u010b\2\u1254\u1255\7\u00ba\2\2\u1255\u1257\5\u0214\u010b"+
		"\2\u1256\u1254\3\2\2\2\u1257\u125a\3\2\2\2\u1258\u1256\3\2\2\2\u1258\u1259"+
		"\3\2\2\2\u1259\u0213\3\2\2\2\u125a\u1258\3\2\2\2\u125b\u125c\5\u0220\u0111"+
		"\2\u125c\u125d\7\u02ab\2\2\u125d\u125f\5\u020e\u0108\2\u125e\u1260\5\u0216"+
		"\u010c\2\u125f\u125e\3\2\2\2\u125f\u1260\3\2\2\2\u1260\u0215\3\2\2\2\u1261"+
		"\u1262\7\u0103\2\2\u1262\u1263\7\u02b1\2\2\u1263\u0217\3\2\2\2\u1264\u1265"+
		"\7\u0261\2\2\u1265\u1267\7\u00b8\2\2\u1266\u1268\5\u021a\u010e\2\u1267"+
		"\u1266\3\2\2\2\u1267\u1268\3\2\2\2\u1268\u1269\3\2\2\2\u1269\u126c\7\u00b9"+
		"\2\2\u126a\u126b\7\u0221\2\2\u126b\u126d\7\u02b6\2\2\u126c\u126a\3\2\2"+
		"\2\u126c\u126d\3\2\2\2\u126d\u0219\3\2\2\2\u126e\u126f\7\u02b6\2\2\u126f"+
		"\u1273\7\u01fe\2\2\u1270\u1271\7\u02b6\2\2\u1271\u1273\7\u0237\2\2\u1272"+
		"\u126e\3\2\2\2\u1272\u1270\3\2\2\2\u1273\u021b\3\2\2\2\u1274\u1275\5\u0220"+
		"\u0111\2\u1275\u1276\5\u021e\u0110\2\u1276\u021d\3\2\2\2\u1277\u1278\7"+
		"\u02a0\2\2\u1278\u127a\5\u0220\u0111\2\u1279\u1277\3\2\2\2\u127a\u127b"+
		"\3\2\2\2\u127b\u1279\3\2\2\2\u127b\u127c\3\2\2\2\u127c\u127f\3\2\2\2\u127d"+
		"\u127f\3\2\2\2\u127e\u1279\3\2\2\2\u127e\u127d\3\2\2\2\u127f\u021f\3\2"+
		"\2\2\u1280\u1281\5\u0222\u0112\2\u1281\u0221\3\2\2\2\u1282\u1286\7\u02ba"+
		"\2\2\u1283\u1286\5\u0224\u0113\2\u1284\u1286\5\u0228\u0115\2\u1285\u1282"+
		"\3\2\2\2\u1285\u1283\3\2\2\2\u1285\u1284\3\2\2\2\u1286\u0223\3\2\2\2\u1287"+
		"\u1288\7\u02bb\2\2\u1288\u0225\3\2\2\2\u1289\u128b\7\u02a0\2\2\u128a";
	private static final String _serializedATNSegment2 =
		"\u1289\3\2\2\2\u128a\u128b\3\2\2\2\u128b\u128c\3\2\2\2\u128c\u1292\7\u02b6"+
		"\2\2\u128d\u128f\7\u02a0\2\2\u128e\u128d\3\2\2\2\u128e\u128f\3\2\2\2\u128f"+
		"\u1290\3\2\2\2\u1290\u1292\tK\2\2\u1291\u128a\3\2\2\2\u1291\u128e\3\2"+
		"\2\2\u1292\u0227\3\2\2\2\u1293\u1294\tL\2\2\u1294\u0229\3\2\2\2\u0264"+
		"\u022f\u0232\u0236\u0239\u023e\u0245\u024b\u024d\u0256\u0259\u025b\u0287"+
		"\u028f\u029f\u02a6\u02a9\u02af\u02b3\u02bc\u02c1\u02ce\u02d3\u02dc\u02e8"+
		"\u02ed\u02f0\u02fe\u0305\u030e\u031c\u0324\u032f\u0339\u0340\u0347\u034b"+
		"\u034f\u0354\u0358\u035d\u0361\u0365\u036f\u0373\u0378\u037d\u0381\u038e"+
		"\u039e\u03bd\u03bf\u03c4\u03c8\u03cd\u03d4\u03d7\u03da\u03df\u03e3\u03e5"+
		"\u03eb\u03ee\u03f3\u03f7\u03fa\u0401\u0407\u040a\u0414\u041d\u0424\u042b"+
		"\u042d\u0433\u0436\u0441\u044a\u0450\u0456\u0459\u045e\u0461\u0464\u0467"+
		"\u046a\u0470\u0476\u0480\u048f\u049a\u049d\u04a4\u04a9\u04ae\u04b2\u04ba"+
		"\u04be\u04c3\u04c7\u04c9\u04ce\u04d6\u04db\u04df\u04e7\u04ef\u04f2\u04f5"+
		"\u04fa\u0503\u0507\u0511\u0524\u0528\u052c\u0534\u0542\u0549\u054d\u0554"+
		"\u0556\u055a\u055e\u0566\u056a\u0579\u057c\u0580\u0587\u058e\u0590\u0594"+
		"\u059a\u059d\u05a4\u05a8\u05ab\u05b6\u05b9\u05c3\u05ca\u05ce\u05d2\u05d9"+
		"\u05dd\u05e5\u05f0\u05f4\u05ff\u0606\u0614\u061c\u0621\u0628\u0630\u0636"+
		"\u063b\u0645\u0654\u0657\u066b\u0675\u0677\u0682\u0691\u069e\u06a2\u06ad"+
		"\u06b1\u06bd\u06c1\u06cc\u06d1\u06d6\u06da\u06de\u06e3\u06e7\u06eb\u0702"+
		"\u0704\u0716\u0718\u0720\u0725\u072a\u072f\u073c\u0741\u0746\u074b\u0750"+
		"\u0755\u075a\u075f\u0761\u0769\u076e\u0772\u0778\u077b\u0786\u0790\u0798"+
		"\u07a1\u07a7\u07b8\u07bb\u07cb\u07ce\u07de\u07e1\u07f1\u07f4\u0804\u0807"+
		"\u0817\u081a\u0828\u0837\u083b\u084b\u0851\u0856\u085c\u0860\u0867\u0871"+
		"\u0878\u087a\u0883\u0888\u0892\u0899\u089c\u08a5\u08aa\u08b1\u08b7\u08bc"+
		"\u08ca\u08cf\u08d7\u08e5\u08e8\u08f0\u08f3\u08fb\u0902\u0909\u0912\u0918"+
		"\u091b\u091f\u0927\u0932\u093b\u0941\u0945\u094b\u094e\u0952\u0957\u095f"+
		"\u0961\u0965\u0968\u096f\u0974\u0976\u0978\u097f\u0982\u0986\u098a\u0991"+
		"\u0998\u099c\u09a8\u09af\u09b5\u09bd\u09bf\u09c2\u09c8\u09cf\u09d2\u09d7"+
		"\u09da\u09e0\u09e4\u09e7\u09ef\u09f2\u09f5\u09f8\u09fe\u0a03\u0a06\u0a11"+
		"\u0a16\u0a1d\u0a20\u0a29\u0a2c\u0a33\u0a36\u0a3b\u0a3e\u0a46\u0a4d\u0a50"+
		"\u0a54\u0a57\u0a59\u0a5c\u0a60\u0a64\u0a6c\u0a73\u0a77\u0a79\u0a7c\u0a88"+
		"\u0a96\u0a9d\u0aa4\u0ace\u0adb\u0ae0\u0ae6\u0aee\u0af2\u0afa\u0b07\u0b0d"+
		"\u0b12\u0b18\u0b20\u0b2a\u0b30\u0b37\u0b3a\u0b3e\u0b43\u0b45\u0b4b\u0b52"+
		"\u0b60\u0b6e\u0b71\u0b76\u0b7e\u0b81\u0b86\u0b8b\u0b95\u0b9c\u0b9f\u0ba2"+
		"\u0bac\u0bb5\u0bbb\u0bc1\u0bc6\u0bc9\u0bcc\u0bcf\u0bd2\u0bd5\u0bd8\u0bdb"+
		"\u0bde\u0be1\u0be4\u0bef\u0bf2\u0bf5\u0bf8\u0bfb\u0bfd\u0c07\u0c0e\u0c14"+
		"\u0c19\u0c22\u0c24\u0c28\u0c2c\u0c2f\u0c32\u0c51\u0c74\u0c76\u0c7f\u0c84"+
		"\u0c8d\u0c93\u0c99\u0c9c\u0c9f\u0ca2\u0ca5\u0cad\u0cb5\u0cb8\u0cbb\u0cc6"+
		"\u0ccb\u0cd6\u0cda\u0cdd\u0ce0\u0ce3\u0ce6\u0cf1\u0cf6\u0d03\u0d0a\u0d0d"+
		"\u0d18\u0d21\u0d26\u0d2b\u0d2f\u0d3f\u0d46\u0d4c\u0d50\u0d5a\u0d62\u0d6d"+
		"\u0d72\u0d7f\u0d82\u0d8c\u0d8f\u0d9a\u0da4\u0da7\u0daf\u0db2\u0dbc\u0dc1"+
		"\u0dca\u0dcf\u0dd4\u0dda\u0ddc\u0de2\u0de9\u0df5\u0df8\u0e02\u0e06\u0e09"+
		"\u0e12\u0e17\u0e1b\u0e27\u0e30\u0e34\u0e39\u0e3d\u0e41\u0e4b\u0e51\u0e5c"+
		"\u0e63\u0e69\u0e6c\u0e6f\u0e72\u0e76\u0e79\u0e7e\u0e88\u0e8e\u0e97\u0ea6"+
		"\u0eaf\u0eb3\u0eb6\u0eba\u0ebc\u0ec3\u0ecb\u0ed1\u0ed8\u0ede\u0ee1\u0ee4"+
		"\u0ee7\u0eee\u0ef0\u0efc\u0efe\u0f00\u0f09\u0f0b\u0f0f\u0f16\u0f1e\u0f25"+
		"\u0f29\u0f30\u0f37\u0f3d\u0f43\u0f4b\u0f51\u0f62\u0f68\u0f73\u0f79\u0f7b"+
		"\u0f83\u0f8f\u0f97\u0f9a\u0fa5\u0fb0\u0fb5\u0fb8\u0fbf\u0fc4\u0fd0\u0fd6"+
		"\u0fec\u0fee\u0ff9\u0ffb\u1004\u1007\u100d\u1010\u1018\u101d\u1022\u102a"+
		"\u1033\u103a\u103d\u104a\u1056\u1058\u1079\u1086\u1093\u10a0\u10af\u10bd"+
		"\u10c1\u10ca\u10ce\u10e7\u10ec\u1108\u110c\u1117\u111f\u1124\u1130\u113c"+
		"\u113e\u1140\u1146\u114d\u1157\u115a\u115c\u1161\u1166\u1179\u117d\u1180"+
		"\u1183\u1190\u119b\u11a2\u11a6\u11ab\u11ae\u11b2\u11ba\u11bf\u11c5\u11ce"+
		"\u11d7\u11e1\u11e6\u11f9\u11fc\u1218\u1225\u1229\u122b\u1231\u1251\u1258"+
		"\u125f\u1267\u126c\u1272\u127b\u127e\u1285\u128a\u128e\u1291";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}